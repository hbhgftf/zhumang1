var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
if (typeof Promise !== "undefined" && !Promise.prototype.finally) {
  Promise.prototype.finally = function(callback) {
    const promise = this.constructor;
    return this.then(
      (value) => promise.resolve(callback()).then(() => value),
      (reason) => promise.resolve(callback()).then(() => {
        throw reason;
      })
    );
  };
}
;
if (typeof uni !== "undefined" && uni && uni.requireGlobal) {
  const global2 = uni.requireGlobal();
  ArrayBuffer = global2.ArrayBuffer;
  Int8Array = global2.Int8Array;
  Uint8Array = global2.Uint8Array;
  Uint8ClampedArray = global2.Uint8ClampedArray;
  Int16Array = global2.Int16Array;
  Uint16Array = global2.Uint16Array;
  Int32Array = global2.Int32Array;
  Uint32Array = global2.Uint32Array;
  Float32Array = global2.Float32Array;
  Float64Array = global2.Float64Array;
  BigInt64Array = global2.BigInt64Array;
  BigUint64Array = global2.BigUint64Array;
}
;
if (uni.restoreGlobal) {
  uni.restoreGlobal(Vue, weex, plus, setTimeout, clearTimeout, setInterval, clearInterval);
}
(function(vue$1) {
  "use strict";
  var _a, _b, _c;
  function _interopNamespaceDefault(e2) {
    const n2 = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
    if (e2) {
      for (const k2 in e2) {
        if (k2 !== "default") {
          const d2 = Object.getOwnPropertyDescriptor(e2, k2);
          Object.defineProperty(n2, k2, d2.get ? d2 : {
            enumerable: true,
            get: () => e2[k2]
          });
        }
      }
    }
    n2.default = e2;
    return Object.freeze(n2);
  }
  function _mergeNamespaces(n2, m2) {
    for (var i2 = 0; i2 < m2.length; i2++) {
      const e2 = m2[i2];
      if (typeof e2 !== "string" && !Array.isArray(e2)) {
        for (const k2 in e2) {
          if (k2 !== "default" && !(k2 in n2)) {
            const d2 = Object.getOwnPropertyDescriptor(e2, k2);
            if (d2) {
              Object.defineProperty(n2, k2, d2.get ? d2 : {
                enumerable: true,
                get: () => e2[k2]
              });
            }
          }
        }
      }
    }
    return Object.freeze(Object.defineProperty(n2, Symbol.toStringTag, { value: "Module" }));
  }
  const vue__namespace = /* @__PURE__ */ _interopNamespaceDefault(vue$1);
  function requireNativePlugin(name) {
    return weex.requireModule(name);
  }
  function formatAppLog(type, filename, ...args) {
    if (uni.__log__) {
      uni.__log__(type, filename, ...args);
    } else {
      console[type].apply(console, [...args, filename]);
    }
  }
  const _imports_0$2 = "/static/play.png";
  const _imports_1$2 = "/static/repeat.png";
  const _imports_2 = "/static/phone.png";
  const _imports_3 = "/static/chat.png";
  const _export_sfc = (sfc, props) => {
    const target = sfc.__vccOpts || sfc;
    for (const [key, val] of props) {
      target[key] = val;
    }
    return target;
  };
  const _sfc_main$1n = {
    data() {
      return {
        faqs: [
          {
            question: "如何申请志愿者帮助？",
            answer: "在首页点击'视频协助'按钮，系统将自动匹配在线志愿者...",
            expanded: false
          },
          {
            question: "地铁预约需要提前多久？",
            answer: "建议至少提前2小时预约，紧急情况可致电客服...",
            expanded: false
          }
        ]
      };
    },
    methods: {
      toggleAnswer(index) {
        this.faqs[index].expanded = !this.faqs[index].expanded;
        uni.vibrateShort();
      },
      goToFaqList() {
        uni.navigateTo({
          url: "/pages/common/faq"
        });
      },
      playIntroduction() {
        const audio = uni.createInnerAudioContext();
        audio.src = "/static/1750342160925.mp3";
        audio.play();
        audio.onError((res) => {
          uni.showToast({ title: "音频播放失败", icon: "none" });
          formatAppLog("error", "at pages/index/index.vue:120", "音频播放错误:", res);
        });
      },
      repeatLastMessage() {
      },
      makeCall() {
        formatAppLog("log", "at pages/index/index.vue:127", "拨打求助热线按钮被点击");
        uni.makePhoneCall({ phoneNumber: "110" });
      },
      openChat() {
        uni.navigateTo({ url: "/pages-ai-desk/index/index" });
      }
    }
  };
  function _sfc_render$1m(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_class = vue$1.resolveComponent("class");
    return vue$1.openBlock(), vue$1.createBlock(_component_class, { class: "container" }, {
      default: vue$1.withCtx(() => [
        vue$1.createCommentVNode(" 语音控制条 "),
        vue$1.createElementVNode("view", { class: "voice-control" }, [
          vue$1.createElementVNode("text", {
            class: "section-title",
            onClick: _cache[0] || (_cache[0] = (...args) => $options.playIntroduction && $options.playIntroduction(...args)),
            "aria-label": "点击播放使用说明",
            tabindex: "0",
            role: "button"
          }, "语音说明"),
          vue$1.createElementVNode("view", { class: "voice-btns" }, [
            vue$1.createElementVNode("button", {
              class: "voice-btn",
              onClick: _cache[1] || (_cache[1] = (...args) => $options.playIntroduction && $options.playIntroduction(...args)),
              "aria-label": "播放使用说明",
              tabindex: "0",
              role: "button"
            }, [
              vue$1.createElementVNode("image", {
                src: _imports_0$2,
                class: "btn-icon",
                alt: "播放指南"
              }),
              vue$1.createTextVNode(" 播放指南 ")
            ]),
            vue$1.createElementVNode("button", {
              class: "voice-btn",
              onClick: _cache[2] || (_cache[2] = (...args) => $options.repeatLastMessage && $options.repeatLastMessage(...args)),
              "aria-label": "重复提示",
              tabindex: "0",
              role: "button"
            }, [
              vue$1.createElementVNode("image", {
                src: _imports_1$2,
                class: "btn-icon",
                alt: "重复提示"
              }),
              vue$1.createTextVNode(" 重复提示 ")
            ])
          ])
        ]),
        vue$1.createCommentVNode(" 常见问题 "),
        vue$1.createElementVNode("view", { class: "faq-section" }, [
          vue$1.createElementVNode("view", { style: { "display": "flex", "justify-content": "space-between", "align-items": "center" } }, [
            vue$1.createElementVNode("text", { class: "section-title" }, "常见问题"),
            vue$1.createElementVNode("text", {
              class: "more-btn",
              onClick: _cache[3] || (_cache[3] = (...args) => $options.goToFaqList && $options.goToFaqList(...args)),
              "aria-label": "查看更多常见问题",
              tabindex: "0",
              role: "button"
            }, "更多")
          ]),
          (vue$1.openBlock(true), vue$1.createElementBlock(
            vue$1.Fragment,
            null,
            vue$1.renderList($data.faqs.slice(0, 2), (item, index) => {
              return vue$1.openBlock(), vue$1.createElementBlock("view", {
                key: index,
                class: "faq-item",
                onClick: ($event) => $options.toggleAnswer(index),
                role: "button",
                "aria-label": item.question + (item.expanded ? "，已展开答案" : "，点击展开答案"),
                tabindex: "0"
              }, [
                vue$1.createCommentVNode(" 问题区块 "),
                vue$1.createElementVNode("view", {
                  class: "question-block",
                  "aria-label": "问题：{{item.question}}",
                  tabindex: "0"
                }, [
                  vue$1.createElementVNode(
                    "text",
                    { class: "question-text" },
                    vue$1.toDisplayString(item.question),
                    1
                    /* TEXT */
                  ),
                  vue$1.createElementVNode(
                    "view",
                    {
                      class: vue$1.normalizeClass(["arrow", { expanded: item.expanded }])
                    },
                    null,
                    2
                    /* CLASS */
                  )
                ]),
                vue$1.createCommentVNode(" 答案区块 "),
                item.expanded ? (vue$1.openBlock(), vue$1.createElementBlock(
                  "view",
                  {
                    key: 0,
                    class: "answer-block",
                    "aria-label": "答案：{{item.answer}}",
                    tabindex: "0"
                  },
                  vue$1.toDisplayString(item.answer),
                  1
                  /* TEXT */
                )) : vue$1.createCommentVNode("v-if", true)
              ], 8, ["onClick", "aria-label"]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ]),
        vue$1.createCommentVNode(" 联系客服 "),
        vue$1.createElementVNode("view", { class: "contact-section" }, [
          vue$1.createElementVNode("text", { class: "section-title" }, "需要人工帮助？"),
          vue$1.createElementVNode("button", {
            class: "contact-btn",
            onClick: _cache[4] || (_cache[4] = (...args) => $options.makeCall && $options.makeCall(...args)),
            "aria-label": "拨打求助热线",
            tabindex: "0",
            role: "button"
          }, [
            vue$1.createElementVNode("image", {
              src: _imports_2,
              class: "btn-icon",
              alt: "拨打求助热线"
            }),
            vue$1.createTextVNode(" 拨打求助热线 ")
          ]),
          vue$1.createElementVNode("button", {
            class: "contact-btn",
            onClick: _cache[5] || (_cache[5] = (...args) => $options.openChat && $options.openChat(...args)),
            "aria-label": "在线即时沟通",
            tabindex: "0",
            role: "button"
          }, [
            vue$1.createElementVNode("image", {
              src: _imports_3,
              class: "btn-icon",
              alt: "在线即时沟通"
            }),
            vue$1.createTextVNode(" 在线即时沟通 ")
          ])
        ])
      ]),
      _: 1
      /* STABLE */
    });
  }
  const PagesIndexIndex = /* @__PURE__ */ _export_sfc(_sfc_main$1n, [["render", _sfc_render$1m], ["__scopeId", "data-v-1cf27b2a"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages/index/index.vue"]]);
  const _imports_0$1 = "/static/logo.png";
  const _imports_1$1 = "/static/sos-icon.png";
  const _sfc_main$1m = {
    data() {
      return {
        voiceEnabled: true,
        features: [
          {
            title: "视频协助",
            desc: "志愿者实时视频帮助",
            icon: "/static/video-help.png",
            path: "/pages/video-call/caller",
            color: "#FFB74D"
          },
          {
            title: "出行预约",
            desc: "地铁/机场无障碍服务",
            icon: "/static/travel.png",
            path: "/pages/video-call/caller",
            color: "#81C784"
          },
          {
            title: "政策查询",
            desc: "最新补贴政策解读",
            icon: "/static/policy.png",
            path: "/pages/policy/policy",
            color: "#64B5F6"
          }
        ]
      };
    },
    computed: {
      voiceIcon() {
        return this.voiceEnabled ? "/static/voice-on.png" : "/static/voice-off.png";
      }
    },
    methods: {
      toggleVoiceGuide() {
        this.voiceEnabled = !this.voiceEnabled;
        uni.vibrateShort();
      },
      makeEmergencyCall() {
        formatAppLog("log", "at pages/common/core-functionality.vue:82", "紧急求助按钮被点击");
        uni.makePhoneCall({ phoneNumber: "110" });
      },
      handleEmergency() {
        formatAppLog("log", "at pages/common/core-functionality.vue:86", "紧急求助按钮被点击");
      },
      confirmEmergency() {
        formatAppLog("log", "at pages/common/core-functionality.vue:89", "紧急求助按钮被双击");
      },
      speak(text) {
        if (this.voiceEnabled) {
          const innerAudioContext = uni.createInnerAudioContext();
          innerAudioContext.src = `https://tts-api.example.com/speak?text=${encodeURIComponent(text)}`;
          innerAudioContext.play();
        }
      }
    }
  };
  function _sfc_render$1l(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("view", { class: "container" }, [
      vue$1.createCommentVNode(" 顶部导航栏 "),
      vue$1.createElementVNode("view", { class: "header" }, [
        vue$1.createElementVNode("image", {
          src: _imports_0$1,
          class: "logo"
        }),
        vue$1.createElementVNode("text", { class: "title" }, "助盲通"),
        vue$1.createElementVNode(
          "button",
          {
            class: "voice-btn",
            onClick: _cache[0] || (_cache[0] = (...args) => $options.toggleVoiceGuide && $options.toggleVoiceGuide(...args))
          },
          vue$1.toDisplayString($data.voiceEnabled ? "语音开启" : "语音关闭"),
          1
          /* TEXT */
        )
      ]),
      vue$1.createCommentVNode(" 核心功能入口 "),
      vue$1.createElementVNode("view", { class: "main-features" }, [
        (vue$1.openBlock(true), vue$1.createElementBlock(
          vue$1.Fragment,
          null,
          vue$1.renderList($data.features, (item, index) => {
            return vue$1.openBlock(), vue$1.createElementBlock("navigator", {
              key: index,
              url: item.path,
              class: "feature-card",
              style: vue$1.normalizeStyle({ backgroundColor: item.color }),
              "hover-class": "hover-effect"
            }, [
              vue$1.createElementVNode("image", {
                src: item.icon,
                class: "feature-icon"
              }, null, 8, ["src"]),
              vue$1.createElementVNode(
                "text",
                { class: "feature-title" },
                vue$1.toDisplayString(item.title),
                1
                /* TEXT */
              ),
              vue$1.createElementVNode(
                "text",
                { class: "feature-desc" },
                vue$1.toDisplayString(item.desc),
                1
                /* TEXT */
              )
            ], 12, ["url"]);
          }),
          128
          /* KEYED_FRAGMENT */
        ))
      ]),
      vue$1.createCommentVNode(" 紧急求助按钮 "),
      vue$1.createElementVNode("button", {
        class: "emergency-btn",
        onClick: _cache[1] || (_cache[1] = (...args) => $options.makeEmergencyCall && $options.makeEmergencyCall(...args)),
        "aria-label": "紧急求助"
      }, [
        vue$1.createElementVNode("image", {
          src: _imports_1$1,
          class: "sos-icon"
        }),
        vue$1.createElementVNode("text", { class: "btn-text" }, "紧急求助")
      ])
    ]);
  }
  const PagesCommonCoreFunctionality = /* @__PURE__ */ _export_sfc(_sfc_main$1m, [["render", _sfc_render$1l], ["__scopeId", "data-v-992dd029"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages/common/core-functionality.vue"]]);
  const config$2 = {
    // 开发环境
    development: {
      baseUrl: "http://192.168.162.173:8080"
    },
    // 生产环境
    production: {
      baseUrl: "http://192.168.162.173:8080"
    }
  };
  const config$3 = config$2["development"];
  class NotificationManager {
    constructor() {
      this.ws = null;
      this.isConnected = false;
      this.reconnectAttempts = 0;
      this.maxReconnectAttempts = 5;
      this.reconnectInterval = 3e3;
      this.heartbeatInterval = 3e4;
      this.heartbeatTimer = null;
      this.reconnectTimer = null;
      this.messageHandlers = /* @__PURE__ */ new Map();
      this.token = "";
      this.handleOpen = this.handleOpen.bind(this);
      this.handleMessage = this.handleMessage.bind(this);
      this.handleClose = this.handleClose.bind(this);
      this.handleError = this.handleError.bind(this);
    }
    // 初始化连接
    init() {
      this.token = uni.getStorageSync("token");
      if (!this.token) {
        formatAppLog("warn", "at utils/notification-manager.js:27", "[NotificationManager] 未找到token，无法建立WebSocket连接");
        return;
      }
      this.connect();
    }
    // 建立WebSocket连接
    connect() {
      if (this.ws && this.ws.readyState === WebSocket.OPEN) {
        formatAppLog("log", "at utils/notification-manager.js:37", "[NotificationManager] WebSocket已连接");
        return;
      }
      try {
        const wsUrl = `${config$3.baseUrl.replace("http", "ws")}/ws/notification?token=${this.token}`;
        formatAppLog("log", "at utils/notification-manager.js:43", "[NotificationManager] 正在连接WebSocket:", wsUrl);
        this.ws = uni.connectSocket({
          url: wsUrl,
          success: () => {
            formatAppLog("log", "at utils/notification-manager.js:48", "[NotificationManager] WebSocket连接请求已发送");
          },
          fail: (error) => {
            formatAppLog("error", "at utils/notification-manager.js:51", "[NotificationManager] WebSocket连接失败:", error);
            this.scheduleReconnect();
          }
        });
        this.ws.onOpen(this.handleOpen);
        this.ws.onMessage(this.handleMessage);
        this.ws.onClose(this.handleClose);
        this.ws.onError(this.handleError);
      } catch (error) {
        formatAppLog("error", "at utils/notification-manager.js:63", "[NotificationManager] 创建WebSocket连接异常:", error);
        this.scheduleReconnect();
      }
    }
    // 连接成功处理
    handleOpen() {
      formatAppLog("log", "at utils/notification-manager.js:70", "[NotificationManager] WebSocket连接已建立");
      this.isConnected = true;
      this.reconnectAttempts = 0;
      this.startHeartbeat();
      this.triggerEvent("connected");
    }
    // 接收消息处理
    handleMessage(event) {
      try {
        formatAppLog("log", "at utils/notification-manager.js:83", "[NotificationManager][WebSocket] 收到消息:", event.data);
        const message = JSON.parse(event.data);
        const realMsg = message.data && message.data.type ? message.data : message;
        formatAppLog("log", "at utils/notification-manager.js:87", "[NotificationManager][WebSocket] 解析后消息:", realMsg);
        if (realMsg.type === "PONG") {
          formatAppLog("log", "at utils/notification-manager.js:91", "[NotificationManager] 收到心跳响应");
          return;
        }
        this.dispatchMessage(realMsg);
        this.triggerEvent("message", realMsg);
      } catch (error) {
        formatAppLog("error", "at utils/notification-manager.js:102", "[NotificationManager] 解析消息失败:", error, event.data);
      }
    }
    // 连接关闭处理
    handleClose() {
      formatAppLog("log", "at utils/notification-manager.js:108", "[NotificationManager] WebSocket连接已关闭");
      this.isConnected = false;
      this.stopHeartbeat();
      this.triggerEvent("disconnected");
      this.scheduleReconnect();
    }
    // 连接错误处理
    handleError(error) {
      formatAppLog("error", "at utils/notification-manager.js:121", "[NotificationManager] WebSocket错误:", error);
      this.isConnected = false;
      this.stopHeartbeat();
      this.triggerEvent("error", error);
    }
    // 发送消息
    send(data) {
      if (!this.isConnected || !this.ws) {
        formatAppLog("warn", "at utils/notification-manager.js:132", "[NotificationManager] WebSocket未连接，无法发送消息");
        return false;
      }
      try {
        const message = typeof data === "string" ? data : JSON.stringify(data);
        this.ws.send({
          data: message,
          success: () => {
            formatAppLog("log", "at utils/notification-manager.js:141", "[NotificationManager] 消息发送成功:", data);
          },
          fail: (error) => {
            formatAppLog("error", "at utils/notification-manager.js:144", "[NotificationManager] 消息发送失败:", error);
          }
        });
        return true;
      } catch (error) {
        formatAppLog("error", "at utils/notification-manager.js:149", "[NotificationManager] 发送消息异常:", error);
        return false;
      }
    }
    // 发送心跳
    sendHeartbeat() {
      this.send({
        type: "PING",
        timestamp: Date.now()
      });
    }
    // 开始心跳
    startHeartbeat() {
      this.stopHeartbeat();
      this.heartbeatTimer = setInterval(() => {
        this.sendHeartbeat();
      }, this.heartbeatInterval);
    }
    // 停止心跳
    stopHeartbeat() {
      if (this.heartbeatTimer) {
        clearInterval(this.heartbeatTimer);
        this.heartbeatTimer = null;
      }
    }
    // 安排重连
    scheduleReconnect() {
      if (this.reconnectAttempts >= this.maxReconnectAttempts) {
        formatAppLog("warn", "at utils/notification-manager.js:181", "[NotificationManager] 达到最大重连次数，停止重连");
        return;
      }
      if (this.reconnectTimer) {
        clearTimeout(this.reconnectTimer);
      }
      this.reconnectAttempts++;
      const delay = this.reconnectInterval * this.reconnectAttempts;
      formatAppLog("log", "at utils/notification-manager.js:192", `[NotificationManager] ${delay}ms后尝试第${this.reconnectAttempts}次重连`);
      this.reconnectTimer = setTimeout(() => {
        formatAppLog("log", "at utils/notification-manager.js:195", "[NotificationManager] 开始重连...");
        this.connect();
      }, delay);
    }
    // 注册消息处理器
    registerHandler(messageType, handler) {
      this.messageHandlers.set(messageType, handler);
    }
    // 移除消息处理器
    unregisterHandler(messageType) {
      this.messageHandlers.delete(messageType);
    }
    // 分发消息
    dispatchMessage(message) {
      const handler = this.messageHandlers.get(message.type);
      if (handler) {
        try {
          handler(message);
        } catch (error) {
          formatAppLog("error", "at utils/notification-manager.js:217", `[NotificationManager] 处理${message.type}消息时出错:`, error);
        }
      } else {
        formatAppLog("warn", "at utils/notification-manager.js:220", `[NotificationManager] 未找到${message.type}消息的处理器`);
      }
    }
    // 事件系统
    triggerEvent(eventName, data) {
      formatAppLog("log", "at utils/notification-manager.js:227", `[NotificationManager] 触发事件: ${eventName}`, data);
    }
    // 断开连接
    disconnect() {
      formatAppLog("log", "at utils/notification-manager.js:232", "[NotificationManager] 主动断开WebSocket连接");
      this.stopHeartbeat();
      if (this.reconnectTimer) {
        clearTimeout(this.reconnectTimer);
        this.reconnectTimer = null;
      }
      if (this.ws) {
        this.ws.close();
        this.ws = null;
      }
      this.isConnected = false;
      this.reconnectAttempts = 0;
    }
    // 获取连接状态
    getConnectionStatus() {
      return {
        isConnected: this.isConnected,
        reconnectAttempts: this.reconnectAttempts,
        maxReconnectAttempts: this.maxReconnectAttempts
      };
    }
  }
  const notificationManager = new NotificationManager();
  class NotificationService {
    constructor() {
      this.unreadCount = 0;
      this.notifications = [];
      this.isInitialized = false;
      this.handleSystemNotification = this.handleSystemNotification.bind(this);
      this.handleCallNotification = this.handleCallNotification.bind(this);
      this.handleEmailNotification = this.handleEmailNotification.bind(this);
      this.handleUserNotification = this.handleUserNotification.bind(this);
      this.handlePolicyNotification = this.handlePolicyNotification.bind(this);
      this.handleFaqNotification = this.handleFaqNotification.bind(this);
      this.handleErrorNotification = this.handleErrorNotification.bind(this);
    }
    // 初始化通知服务
    init() {
      if (this.isInitialized) {
        formatAppLog("log", "at utils/notification-service.js:23", "[NotificationService] 服务已初始化");
        return;
      }
      formatAppLog("log", "at utils/notification-service.js:27", "[NotificationService] 初始化通知服务");
      notificationManager.registerHandler("SYSTEM", this.handleSystemNotification);
      notificationManager.registerHandler("CALL", this.handleCallNotification);
      notificationManager.registerHandler("EMAIL", this.handleEmailNotification);
      notificationManager.registerHandler("USER", this.handleUserNotification);
      notificationManager.registerHandler("POLICY", this.handlePolicyNotification);
      notificationManager.registerHandler("FAQ", this.handleFaqNotification);
      notificationManager.registerHandler("ERROR", this.handleErrorNotification);
      notificationManager.init();
      this.isInitialized = true;
    }
    // 处理系统通知
    handleSystemNotification(message) {
      formatAppLog("log", "at utils/notification-service.js:46", "[NotificationService] 处理系统通知:", message);
      this.addNotification(message);
      this.updateUnreadCount();
      switch (message.level) {
        case "URGENT":
          this.showUrgentNotification(message);
          break;
        case "HIGH":
          this.showHighPriorityNotification(message);
          break;
        case "NORMAL":
          this.showNormalNotification(message);
          break;
        case "LOW":
          this.showLowPriorityNotification(message);
          break;
        default:
          this.showNormalNotification(message);
      }
    }
    // 处理通话通知
    handleCallNotification(message) {
      formatAppLog("log", "at utils/notification-service.js:72", "[NotificationService] 处理通话通知:", message);
      this.addNotification(message);
      this.updateUnreadCount();
      this.playCallRingtone();
      this.showCallNotification(message);
    }
    // 处理邮件通知
    handleEmailNotification(message) {
      formatAppLog("log", "at utils/notification-service.js:86", "[NotificationService] 处理邮件通知:", message);
      this.addNotification(message);
      this.updateUnreadCount();
      this.showEmailNotification(message);
    }
    // 处理用户通知
    handleUserNotification(message) {
      formatAppLog("log", "at utils/notification-service.js:97", "[NotificationService] 处理用户通知:", message);
      this.addNotification(message);
      this.updateUnreadCount();
      this.showUserNotification(message);
    }
    // 处理政策通知
    handlePolicyNotification(message) {
      formatAppLog("log", "at utils/notification-service.js:108", "[NotificationService] 处理政策通知:", message);
      this.addNotification(message);
      this.updateUnreadCount();
      this.showPolicyNotification(message);
    }
    // 处理FAQ通知
    handleFaqNotification(message) {
      formatAppLog("log", "at utils/notification-service.js:119", "[NotificationService] 处理FAQ通知:", message);
      this.addNotification(message);
      this.updateUnreadCount();
      this.showFaqNotification(message);
    }
    // 处理错误通知
    handleErrorNotification(message) {
      formatAppLog("log", "at utils/notification-service.js:130", "[NotificationService] 处理错误通知:", message);
      this.addNotification({
        ...message,
        title: "系统错误",
        level: "HIGH",
        content: message.content || "发生错误"
      });
      this.updateUnreadCount();
      uni.showToast({
        title: message.content || "发生错误",
        icon: "none"
      });
    }
    // 添加通知到列表
    addNotification(message) {
      if (this.notifications.some((n2) => n2.messageId === message.messageId)) {
        return;
      }
      const notification = {
        ...message,
        id: message.messageId || Date.now().toString(),
        timestamp: Date.now(),
        isRead: false
      };
      this.notifications.unshift(notification);
      if (this.notifications.length > 100) {
        this.notifications = this.notifications.slice(0, 100);
      }
    }
    // 更新未读数量
    updateUnreadCount() {
      this.unreadCount = this.notifications.filter((n2) => !n2.isRead).length;
      this.triggerUnreadCountUpdate();
    }
    // 显示紧急通知
    showUrgentNotification(message) {
      uni.vibrateLong();
      this.playUrgentSound();
      uni.showModal({
        title: "⚠️ 紧急通知",
        content: message.content,
        showCancel: false,
        confirmText: "知道了",
        success: async () => {
          await this.markAsRead(message.messageId);
        }
      });
    }
    // 显示高优先级通知
    showHighPriorityNotification(message) {
      uni.vibrateShort();
      uni.showModal({
        title: "📢 重要通知",
        content: message.content,
        showCancel: false,
        confirmText: "知道了",
        success: async () => {
          await this.markAsRead(message.messageId);
        }
      });
    }
    // 显示普通通知
    showNormalNotification(message) {
      uni.showToast({
        title: message.title || message.content,
        icon: "none",
        duration: 3e3
      });
    }
    // 显示低优先级通知
    showLowPriorityNotification(message) {
      formatAppLog("log", "at utils/notification-service.js:220", "[NotificationService] 低优先级通知:", message.title);
    }
    // 显示通话通知
    showCallNotification(message) {
      let extraData = {};
      try {
        extraData = message.extraData ? JSON.parse(message.extraData) : {};
      } catch (e2) {
        extraData = {};
      }
      const callerName = extraData.callerName || "未知用户";
      const roomId = extraData.roomId || "";
      uni.showModal({
        title: "📞 新的通话请求",
        content: `来自: ${callerName}
房间号: ${roomId}
${message.content || ""}`,
        confirmText: "接听",
        cancelText: "拒绝",
        success: async (res) => {
          if (res.confirm) {
            uni.navigateTo({
              url: `/pages/video-call/caller?roomId=${roomId}`
            });
          }
          await this.markAsRead(message.messageId);
        }
      });
    }
    // 显示邮件通知
    showEmailNotification(message) {
      uni.showToast({
        title: `📧 ${message.title}`,
        icon: "none",
        duration: 3e3
      });
    }
    // 显示用户通知
    showUserNotification(message) {
      uni.showToast({
        title: `👤 ${message.title}`,
        icon: "none",
        duration: 3e3
      });
    }
    // 显示政策通知
    showPolicyNotification(message) {
      uni.showModal({
        title: "📋 政策更新",
        content: message.content,
        confirmText: "查看详情",
        cancelText: "稍后查看",
        success: async (res) => {
          if (res.confirm) {
            uni.navigateTo({
              url: `/pages/policy/detail?id=${message.messageId}`
            });
          }
          await this.markAsRead(message.messageId);
        }
      });
    }
    // 显示FAQ通知
    showFaqNotification(message) {
      uni.showToast({
        title: `❓ ${message.title}`,
        icon: "none",
        duration: 3e3
      });
    }
    // 播放来电铃声
    playCallRingtone() {
      try {
        const innerAudioContext = uni.createInnerAudioContext();
        innerAudioContext.src = "/static/call-ringtone.mp3";
        innerAudioContext.loop = true;
        innerAudioContext.play();
        setTimeout(() => {
          innerAudioContext.stop();
          innerAudioContext.destroy();
        }, 5e3);
      } catch (error) {
        formatAppLog("error", "at utils/notification-service.js:315", "[NotificationService] 播放来电铃声失败:", error);
      }
    }
    // 播放紧急提示音
    playUrgentSound() {
      try {
        const innerAudioContext = uni.createInnerAudioContext();
        innerAudioContext.src = "/static/urgent-notification.mp3";
        innerAudioContext.play();
      } catch (error) {
        formatAppLog("error", "at utils/notification-service.js:326", "[NotificationService] 播放紧急提示音失败:", error);
      }
    }
    // 处理接听通话
    handleCallAccept(message) {
      var _a2;
      formatAppLog("log", "at utils/notification-service.js:332", "[NotificationService] 接听通话:", message);
      uni.navigateTo({
        url: `/pages/video-call/caller?roomId=${(_a2 = message.extraData) == null ? void 0 : _a2.roomId}`
      });
    }
    // 处理拒绝通话
    handleCallReject(message) {
      formatAppLog("log", "at utils/notification-service.js:341", "[NotificationService] 拒绝通话:", message);
    }
    // 标记消息为已读
    async markAsRead(messageId) {
      try {
        const token = uni.getStorageSync("token");
        if (!token) {
          formatAppLog("warn", "at utils/notification-service.js:351", "[NotificationService] 未找到token，仅更新前端状态");
          this.markAsReadLocal(messageId);
          return;
        }
        const res = await uni.request({
          url: `${config$3.baseUrl}/api/notification/read/${messageId}`,
          method: "POST",
          header: {
            "Authorization": `Bearer ${token}`,
            "Content-Type": "application/json"
          }
        });
        formatAppLog("log", "at utils/notification-service.js:366", "[NotificationService] 标记已读API响应:", res.data);
        if (res.data.code === 200 || res.statusCode === 200) {
          this.markAsReadLocal(messageId);
          formatAppLog("log", "at utils/notification-service.js:371", "[NotificationService] 通知已标记为已读:", messageId);
        } else {
          formatAppLog("warn", "at utils/notification-service.js:374", "[NotificationService] API标记已读失败，仅更新前端状态:", res.data.message);
          this.markAsReadLocal(messageId);
        }
      } catch (error) {
        formatAppLog("error", "at utils/notification-service.js:378", "[NotificationService] 标记已读请求失败:", error);
        this.markAsReadLocal(messageId);
      }
    }
    // 本地标记为已读（不调用API）
    markAsReadLocal(messageId) {
      this.notifications.forEach((n2) => {
        if (n2.messageId === messageId)
          n2.isRead = true;
      });
      this.updateUnreadCount();
    }
    // 标记所有消息为已读
    async markAllAsRead() {
      try {
        const token = uni.getStorageSync("token");
        if (!token) {
          formatAppLog("warn", "at utils/notification-service.js:398", "[NotificationService] 未找到token，仅更新前端状态");
          this.markAllAsReadLocal();
          return;
        }
        const unreadIds = this.notifications.filter((n2) => !n2.isRead).map((n2) => n2.messageId).filter(Boolean);
        if (unreadIds.length === 0) {
          formatAppLog("log", "at utils/notification-service.js:410", "[NotificationService] 没有未读通知需要标记");
          return;
        }
        const promises = unreadIds.map(
          (messageId) => uni.request({
            url: `${config$3.baseUrl}/api/notification/read/${messageId}`,
            method: "POST",
            header: {
              "Authorization": `Bearer ${token}`,
              "Content-Type": "application/json"
            }
          })
        );
        const results = await Promise.allSettled(promises);
        const successCount = results.filter((r2) => r2.status === "fulfilled" && (r2.value.data.code === 200 || r2.value.statusCode === 200)).length;
        const failCount = results.length - successCount;
        formatAppLog("log", "at utils/notification-service.js:432", `[NotificationService] 批量标记已读完成: 成功${successCount}个，失败${failCount}个`);
        this.markAllAsReadLocal();
      } catch (error) {
        formatAppLog("error", "at utils/notification-service.js:438", "[NotificationService] 批量标记已读失败:", error);
        this.markAllAsReadLocal();
      }
    }
    // 本地标记所有为已读（不调用API）
    markAllAsReadLocal() {
      this.notifications.forEach((n2) => n2.isRead = true);
      this.updateUnreadCount();
    }
    // 获取未读数量
    getUnreadCount() {
      return this.unreadCount;
    }
    // 获取所有通知
    getNotifications() {
      return this.notifications;
    }
    // 获取指定类型的通知
    getNotificationsByType(type) {
      return this.notifications.filter((n2) => n2.type === type);
    }
    // 清除通知
    clearNotifications() {
      this.notifications = [];
      this.updateUnreadCount();
    }
    // 触发未读数量更新事件
    triggerUnreadCountUpdate() {
      formatAppLog("log", "at utils/notification-service.js:474", "[NotificationService] 未读数量更新:", this.unreadCount);
    }
    // 测试API连接
    async testApiConnection() {
      try {
        const token = uni.getStorageSync("token");
        if (!token) {
          formatAppLog("warn", "at utils/notification-service.js:482", "[NotificationService] 未找到token，无法测试API连接");
          return false;
        }
        const res = await uni.request({
          url: `${config$3.baseUrl}/api/notification/test`,
          method: "GET",
          header: {
            "Authorization": `Bearer ${token}`,
            "Content-Type": "application/json"
          }
        });
        formatAppLog("log", "at utils/notification-service.js:496", "[NotificationService] API连接测试响应:", res.data);
        return res.data.code === 200 || res.statusCode === 200;
      } catch (error) {
        formatAppLog("error", "at utils/notification-service.js:499", "[NotificationService] API连接测试失败:", error);
        return false;
      }
    }
    // 销毁服务
    destroy() {
      formatAppLog("log", "at utils/notification-service.js:506", "[NotificationService] 销毁通知服务");
      notificationManager.unregisterHandler("SYSTEM");
      notificationManager.unregisterHandler("CALL");
      notificationManager.unregisterHandler("EMAIL");
      notificationManager.unregisterHandler("USER");
      notificationManager.unregisterHandler("POLICY");
      notificationManager.unregisterHandler("FAQ");
      notificationManager.disconnect();
      this.isInitialized = false;
    }
  }
  const notificationService = new NotificationService();
  const _sfc_main$1l = {
    data() {
      return {
        isVolunteer: false,
        isOnline: false,
        wsConnection: null,
        showCallRequest: false,
        isInCall: false,
        callRequestInfo: {
          roomId: "",
          callerId: "",
          calleeId: ""
        },
        heartbeatTimer: null,
        wsReconnectTimer: null,
        isLogin: false,
        tuicallkitUserSig: "",
        tuicallkitSDKAppID: 1600094381,
        tuicallkitUserID: ""
      };
    },
    onLoad() {
      formatAppLog("log", "at pages/volunteer/index.vue:92", "[Volunteer] 页面加载开始");
      this.checkVolunteerStatus();
      this.loginToTUICallKit();
    },
    onShow() {
      formatAppLog("log", "at pages/volunteer/index.vue:98", "[Volunteer] 页面显示，重新检查状态");
      this.checkVolunteerStatus();
    },
    onUnload() {
      if (this.wsConnection) {
        try {
          this.wsConnection.close();
        } catch (e2) {
        }
        this.wsConnection = null;
      }
      if (this.heartbeatTimer) {
        clearInterval(this.heartbeatTimer);
        this.heartbeatTimer = null;
      }
      if (this.wsReconnectTimer) {
        clearTimeout(this.wsReconnectTimer);
        this.wsReconnectTimer = null;
      }
    },
    methods: {
      // 检查志愿者状态并获取在线状态
      async checkVolunteerStatus() {
        formatAppLog("log", "at pages/volunteer/index.vue:118", "[Volunteer] 开始检查志愿者状态");
        const userInfo = uni.getStorageSync("userInfo");
        if (!userInfo || typeof userInfo === "string") {
          formatAppLog("log", "at pages/volunteer/index.vue:123", "[Volunteer] 用户信息不存在或格式错误，设置为非志愿者");
          this.isVolunteer = false;
          this.isOnline = false;
          return;
        }
        formatAppLog("log", "at pages/volunteer/index.vue:129", "[Volunteer] 用户信息:", userInfo);
        formatAppLog("log", "at pages/volunteer/index.vue:130", "[Volunteer] 用户角色:", userInfo.role);
        if (userInfo.role === "志愿者") {
          formatAppLog("log", "at pages/volunteer/index.vue:134", "[Volunteer] 确认是志愿者，开始获取在线状态");
          this.isVolunteer = true;
          try {
            const res = await uni.request({
              url: `${config$3.baseUrl}/api/volunteer/status/${userInfo.id}`,
              method: "GET",
              header: { "Authorization": `Bearer ${userInfo.token}` }
            });
            formatAppLog("log", "at pages/volunteer/index.vue:144", "[Volunteer] 获取在线状态响应:", res);
            if (res.data.code === 200) {
              this.isOnline = res.data.data;
              formatAppLog("log", "at pages/volunteer/index.vue:148", "[Volunteer] 在线状态设置为:", this.isOnline);
            } else {
              formatAppLog("error", "at pages/volunteer/index.vue:150", "获取志愿者在线状态失败:", res.data.msg);
              this.isOnline = false;
              uni.showToast({
                title: res.data.msg || "获取状态失败",
                icon: "none"
              });
            }
          } catch (error) {
            formatAppLog("error", "at pages/volunteer/index.vue:159", "请求获取志愿者在线状态失败:", error);
            this.isOnline = false;
            uni.showToast({
              title: "请求获取状态失败",
              icon: "none"
            });
          }
          if (!this.wsConnection) {
            formatAppLog("log", "at pages/volunteer/index.vue:168", "[Volunteer] 开始初始化WebSocket连接");
            this.initWebSocket();
          } else {
            formatAppLog("log", "at pages/volunteer/index.vue:171", "[Volunteer] WebSocket连接已存在，跳过初始化");
          }
        } else {
          formatAppLog("log", "at pages/volunteer/index.vue:174", "[Volunteer] 用户不是志愿者角色");
          this.isVolunteer = false;
          this.isOnline = false;
        }
      },
      // 切换志愿者在线状态
      async toggleOnlineStatus(event) {
        const userInfo = uni.getStorageSync("userInfo");
        if (!userInfo || userInfo.role !== "志愿者") {
          uni.showToast({ title: "您不是志愿者", icon: "none" });
          this.$nextTick(() => {
            this.isOnline = !event.detail.value;
          });
          return;
        }
        const newStatus = event.detail.value;
        const userId = userInfo.id;
        uni.showLoading({ title: "更新状态中..." });
        const url2 = `${config$3.baseUrl}/api/volunteer/status?userId=${userId}&isOnline=${newStatus}`;
        formatAppLog("log", "at pages/volunteer/index.vue:198", "请求URL:", url2);
        formatAppLog("log", "at pages/volunteer/index.vue:199", "请求数据(作为URL参数):", { userId, isOnline: newStatus });
        try {
          const res = await uni.request({
            url: url2,
            method: "POST",
            // 保持POST方法，但数据通过URL参数发送
            // data: {}, // 无需发送请求体
            header: {
              "Authorization": `Bearer ${userInfo.token}`
              // 对于URL参数，Content-Type通常不是application/json
            }
          });
          if (res.data.code === 200) {
            this.isOnline = newStatus;
            uni.showToast({ title: "状态更新成功", icon: "success" });
            if (newStatus) {
              if (this.wsConnection) {
                try {
                  this.wsConnection.close();
                } catch (e2) {
                }
                this.wsConnection = null;
              }
              if (this.wsReconnectTimer) {
                clearTimeout(this.wsReconnectTimer);
                this.wsReconnectTimer = null;
              }
              this.initWebSocket();
              this.loginToTUICallKit();
            }
          } else {
            formatAppLog("error", "at pages/volunteer/index.vue:231", "更新志愿者在线状态失败:", res.data.msg);
            this.$nextTick(() => {
              this.isOnline = !newStatus;
            });
            uni.showToast({
              title: res.data.msg || "更新状态失败",
              icon: "none"
            });
          }
        } catch (error) {
          formatAppLog("error", "at pages/volunteer/index.vue:240", "请求更新志愿者在线状态失败:", error);
          this.$nextTick(() => {
            this.isOnline = !newStatus;
          });
          uni.showToast({
            title: "请求更新状态失败",
            icon: "none"
          });
        } finally {
          uni.hideLoading();
        }
      },
      goToRegister() {
        const userInfo = uni.getStorageSync("userInfo");
        if (!userInfo) {
          uni.showToast({
            title: "请先登录",
            icon: "none"
          });
          setTimeout(() => {
            uni.navigateTo({
              url: "/pages/user/profile"
            });
          }, 1500);
          return;
        }
        uni.navigateTo({
          url: "/pages/volunteer/register"
        });
      },
      // 跳转到视频协助页面
      goToVideoAssist() {
        uni.navigateTo({
          url: "/pages/video-call/caller"
        });
      },
      // 跳转到出行预约页面
      goToTravelAppointment() {
        uni.navigateTo({
          url: "/pages/travel/travel-appointment/travel-appointment"
        });
      },
      // 初始化WebSocket连接
      initWebSocket() {
        const userInfo = uni.getStorageSync("userInfo");
        if (!userInfo || !userInfo.token) {
          formatAppLog("error", "at pages/volunteer/index.vue:292", "[WebSocket] 用户信息或token缺失，无法建立连接");
          return;
        }
        if (this.wsConnection && this.wsConnection.readyState === 1) {
          formatAppLog("log", "at pages/volunteer/index.vue:298", "[WebSocket] 已有活跃连接，跳过新建");
          return;
        }
        if (this.wsConnection) {
          try {
            this.wsConnection.close();
          } catch (e2) {
          }
          this.wsConnection = null;
        }
        if (this.wsReconnectTimer) {
          clearTimeout(this.wsReconnectTimer);
          this.wsReconnectTimer = null;
        }
        const token = userInfo.token;
        formatAppLog("log", "at pages/volunteer/index.vue:314", "[WebSocket] 使用的token:", token);
        const wsUrl = `${config$3.baseUrl.replace("http", "ws")}/ws?token=${token}`;
        formatAppLog("log", "at pages/volunteer/index.vue:317", "[WebSocket] 尝试建立连接，URL:", wsUrl);
        this.wsConnection = uni.connectSocket({
          url: wsUrl,
          success: () => {
            formatAppLog("log", "at pages/volunteer/index.vue:322", "[WebSocket] connectSocket 调用成功");
          },
          fail: (err) => {
            formatAppLog("error", "at pages/volunteer/index.vue:325", "[WebSocket] connectSocket 调用失败:", err);
          }
        });
        this.wsConnection.onOpen(() => {
          formatAppLog("log", "at pages/volunteer/index.vue:331", "[WebSocket] 连接已打开，准备开始心跳");
          if (this.wsReconnectTimer) {
            clearTimeout(this.wsReconnectTimer);
            this.wsReconnectTimer = null;
          }
          this.startHeartbeat();
        });
        this.wsConnection.onMessage((res) => {
          formatAppLog("log", "at pages/volunteer/index.vue:342", "[WebSocket] 收到原始消息:", res.data);
          try {
            const data = JSON.parse(res.data);
            this.handleWebSocketMessage(data);
          } catch (error) {
            formatAppLog("error", "at pages/volunteer/index.vue:347", "[WebSocket] 消息解析失败:", error, "原始数据:", res.data);
          }
        });
        this.wsConnection.onClose(() => {
          formatAppLog("warn", "at pages/volunteer/index.vue:353", "[WebSocket] 连接已关闭");
          this.scheduleReconnect();
        });
        this.wsConnection.onError((err) => {
          formatAppLog("error", "at pages/volunteer/index.vue:360", "[WebSocket] 连接发生错误:", err);
          this.scheduleReconnect();
        });
      },
      // 自动重连机制
      scheduleReconnect() {
        if (this.wsReconnectTimer)
          return;
        formatAppLog("log", "at pages/volunteer/index.vue:369", "[WebSocket] 5秒后尝试重连...");
        this.wsReconnectTimer = setTimeout(() => {
          this.wsReconnectTimer = null;
          this.initWebSocket();
        }, 5e3);
      },
      // 启动心跳
      startHeartbeat() {
        if (this.heartbeatTimer)
          clearInterval(this.heartbeatTimer);
        this.heartbeatTimer = setInterval(() => {
          if (this.wsConnection && this.wsConnection.readyState === 1) {
            this.wsConnection.send({
              data: JSON.stringify({
                type: "HEARTBEAT"
              })
            });
            formatAppLog("log", "at pages/volunteer/index.vue:386", "[WebSocket] 发送心跳包");
          }
        }, 15e3);
      },
      // 处理WebSocket消息
      handleWebSocketMessage(message) {
        formatAppLog("log", "at pages/volunteer/index.vue:393", "[WebSocket] 收到消息类型:", message.type, "完整消息:", message);
        switch (message.type) {
          case "CALL_REQUEST":
            formatAppLog("log", "at pages/volunteer/index.vue:398", "[WebSocket] 收到通话请求，准备显示弹窗");
            formatAppLog("log", "at pages/volunteer/index.vue:399", "[WebSocket] 通话请求详情:", {
              roomId: message.roomId,
              callerId: message.callerId,
              calleeId: message.calleeId
            });
            this.showCallRequest = true;
            this.callRequestInfo = {
              roomId: message.roomId,
              callerId: message.callerId,
              calleeId: message.calleeId
            };
            this.playCallRingtone();
            formatAppLog("log", "at pages/volunteer/index.vue:412", "[WebSocket] 弹窗状态已设置为显示:", this.showCallRequest);
            break;
          case "CALL_END":
            this.handleCallEnded(message);
            break;
          case "CALL":
            notificationService.addNotification({
              ...message,
              title: message.title || "新的通话请求",
              level: message.level || "HIGH",
              content: message.content || ""
            });
            break;
          case "ERROR":
            uni.showToast({
              title: message.content || "发生错误",
              icon: "none"
            });
            break;
          default:
            formatAppLog("log", "at pages/volunteer/index.vue:434", "[WebSocket] 未处理的消息类型:", message.type);
        }
      },
      // 播放提示音
      playCallRingtone() {
        const innerAudioContext = uni.createInnerAudioContext();
        innerAudioContext.src = "/static/audio/call-ringtone.mp3";
        innerAudioContext.loop = true;
        innerAudioContext.play();
        this.ringtone = innerAudioContext;
      },
      // 停止提示音
      stopCallRingtone() {
        if (this.ringtone) {
          this.ringtone.stop();
          this.ringtone = null;
        }
      },
      // 处理接受通话
      async handleAcceptCall() {
        const userInfo = uni.getStorageSync("userInfo");
        if (!userInfo)
          return;
        this.stopCallRingtone();
        this.showCallRequest = false;
        const roomId = this.callRequestInfo.roomId;
        const callerId = this.callRequestInfo.callerId;
        this.callRequestInfo = {
          roomId: "",
          callerId: "",
          calleeId: ""
        };
        if (!roomId) {
          formatAppLog("error", "at pages/volunteer/index.vue:476", "[handleAcceptCall] roomId 为空，无法发起通话");
          uni.showToast({ title: "通话房间信息缺失", icon: "none" });
          return;
        }
        if (!callerId) {
          formatAppLog("error", "at pages/volunteer/index.vue:481", "[handleAcceptCall] callerId 为空，无法发起通话");
          uni.showToast({ title: "通话发起人信息缺失", icon: "none" });
          return;
        }
        try {
          const res = await uni.request({
            url: `${config$3.baseUrl}/api/call/accept`,
            method: "POST",
            header: {
              "Authorization": `Bearer ${userInfo.token}`
            },
            data: {
              roomId
            }
          });
          if (res.data.code === 200) {
            this.isInCall = true;
            formatAppLog("log", "at pages/volunteer/index.vue:500", "[handleAcceptCall] 接受通话成功，准备调用 TUICallKit.accept");
            this.acceptCallWithTUICallKit(roomId);
          } else {
            uni.showToast({
              title: res.data.message || "接受通话失败",
              icon: "none"
            });
          }
        } catch (error) {
          formatAppLog("error", "at pages/volunteer/index.vue:510", "接受通话请求失败:", error);
          uni.showToast({
            title: "接受通话失败",
            icon: "none"
          });
        }
      },
      // 使用TUICallKit的accept方法接听通话
      acceptCallWithTUICallKit(roomId) {
        if (!this.isLogin) {
          uni.showToast({ title: "视频通话系统未登录", icon: "none" });
          return;
        }
        if (!uni.$TUICallKit) {
          formatAppLog("error", "at pages/volunteer/index.vue:527", "[TUICallKit] TUICallKit未初始化");
          uni.showToast({ title: "视频通话系统未初始化", icon: "none" });
          return;
        }
        try {
          const availableMethods = Object.keys(uni.$TUICallKit);
          formatAppLog("log", "at pages/volunteer/index.vue:535", "[TUICallKit] 可用方法:", availableMethods);
          const answerParams = {
            callMediaType: 2,
            // 视频通话
            callParams: {
              strRoomID: String(roomId),
              timeout: 30
            }
          };
          formatAppLog("log", "at pages/volunteer/index.vue:546", "[acceptCallWithTUICallKit] 接听参数:", answerParams);
          if (typeof uni.$TUICallKit.answer === "function") {
            uni.$TUICallKit.answer(answerParams, (res) => {
              formatAppLog("log", "at pages/volunteer/index.vue:551", "[TUICallKit] answer 返回:", res);
              if (res.code !== 0) {
                formatAppLog("error", "at pages/volunteer/index.vue:553", "[TUICallKit] 接听通话失败，错误码:", res.code, "错误信息:", res.msg);
                uni.showToast({
                  title: "接听通话失败: " + (res.msg || res.code),
                  icon: "none"
                });
              } else {
                formatAppLog("log", "at pages/volunteer/index.vue:559", "[TUICallKit] 接听通话成功");
                this.isInCall = true;
              }
            });
          } else {
          }
        } catch (error) {
          formatAppLog("error", "at pages/volunteer/index.vue:567", "[TUICallKit] 接听通话错误:", error);
          uni.showToast({ title: "接听通话失败: " + error.message, icon: "none" });
        }
      },
      // 处理拒绝通话
      async handleRejectCall() {
        const userInfo = uni.getStorageSync("userInfo");
        if (!userInfo)
          return;
        this.stopCallRingtone();
        this.showCallRequest = false;
        const roomId = this.callRequestInfo.roomId;
        this.callRequestInfo = {
          roomId: "",
          callerId: "",
          calleeId: ""
        };
        try {
          const res = await uni.request({
            url: `${config$3.baseUrl}/api/call/reject`,
            method: "POST",
            header: {
              "Authorization": `Bearer ${userInfo.token}`
            },
            data: {
              roomId
            }
          });
          if (res.data.code === 200) {
            formatAppLog("log", "at pages/volunteer/index.vue:604", "已拒绝通话请求");
          } else {
            uni.showToast({
              title: res.data.message || "拒绝通话失败",
              icon: "none"
            });
          }
        } catch (error) {
          formatAppLog("error", "at pages/volunteer/index.vue:612", "拒绝通话请求失败:", error);
          uni.showToast({
            title: "拒绝通话失败",
            icon: "none"
          });
        }
      },
      // 处理通话结束
      async handleCallEnded(message) {
        this.isInCall = false;
        this.stopCallRingtone();
        this.showCallRequest = false;
        this.callRequestInfo = {
          roomId: "",
          callerId: "",
          calleeId: ""
        };
        if (uni.$TUICallKit && typeof uni.$TUICallKit.hangup === "function") {
          uni.$TUICallKit.hangup();
        }
        uni.showToast({
          title: "通话已结束",
          icon: "none"
        });
      },
      // 主动结束通话
      async handleEndCall() {
        const userInfo = uni.getStorageSync("userInfo");
        if (!userInfo)
          return;
        try {
          const res = await uni.request({
            url: `${config$3.baseUrl}/api/call/end`,
            method: "POST",
            header: {
              "Authorization": `Bearer ${userInfo.token}`
            },
            data: {
              roomId: this.callRequestInfo.roomId
            }
          });
          if (res.data.code === 200) {
            this.handleCallEnded();
          } else {
            uni.showToast({
              title: res.data.message || "结束通话失败",
              icon: "none"
            });
          }
        } catch (error) {
          formatAppLog("error", "at pages/volunteer/index.vue:670", "结束通话失败:", error);
          uni.showToast({
            title: "结束通话失败",
            icon: "none"
          });
        }
      },
      // 使用TUICallKit接听通话
      answerCall(roomId, callerId) {
        if (!this.isLogin) {
          uni.showToast({ title: "视频通话系统未登录", icon: "none" });
          return;
        }
        formatAppLog("log", "at pages/volunteer/index.vue:685", "[answerCall] 志愿者接听通话参数:");
        formatAppLog("log", "at pages/volunteer/index.vue:686", "  - roomId:", roomId);
        formatAppLog("log", "at pages/volunteer/index.vue:687", "  - callerId:", callerId);
        formatAppLog("log", "at pages/volunteer/index.vue:688", "  - 志愿者用户ID:", this.tuicallkitUserID);
        formatAppLog("log", "at pages/volunteer/index.vue:689", "  - 志愿者UserSig长度:", this.tuicallkitUserSig.length);
        if (!callerId) {
          formatAppLog("error", "at pages/volunteer/index.vue:692", "[TUICallKit] answerCall: callerId 为空，无法接听通话");
          uni.showToast({ title: "通话发起人信息缺失", icon: "none" });
          return;
        }
        if (!roomId) {
          formatAppLog("error", "at pages/volunteer/index.vue:697", "[TUICallKit] answerCall: roomId 为空，无法接听通话");
          uni.showToast({ title: "通话房间信息缺失", icon: "none" });
          return;
        }
        if (!uni.$TUICallKit) {
          formatAppLog("error", "at pages/volunteer/index.vue:704", "[TUICallKit] TUICallKit未初始化");
          uni.showToast({ title: "视频通话系统未初始化", icon: "none" });
          return;
        }
        try {
          const availableMethods = Object.keys(uni.$TUICallKit);
          formatAppLog("log", "at pages/volunteer/index.vue:712", "[TUICallKit] 可用方法:", availableMethods);
          const answerParams = {
            callMediaType: 2,
            // 视频通话
            callParams: {
              strRoomID: String(roomId),
              timeout: 30
            }
          };
          formatAppLog("log", "at pages/volunteer/index.vue:723", "[answerCall] 志愿者调用 TUICallKit.answer 参数:", answerParams);
          if (typeof uni.$TUICallKit.answer === "function") {
            uni.$TUICallKit.answer(answerParams, (res) => {
              formatAppLog("log", "at pages/volunteer/index.vue:728", "[TUICallKit] 志愿者接听通话返回:", JSON.stringify(res));
              if (res.code !== 0) {
                this.isInCall = false;
                formatAppLog("error", "at pages/volunteer/index.vue:731", "[TUICallKit] 志愿者接听通话失败，错误码:", res.code, "错误信息:", res.msg);
                uni.showToast({
                  title: "接听通话失败: " + (res.msg || res.code),
                  icon: "none"
                });
              } else {
                formatAppLog("log", "at pages/volunteer/index.vue:737", "[TUICallKit] 志愿者接听通话成功");
                this.isInCall = true;
              }
            });
          } else {
            formatAppLog("error", "at pages/volunteer/index.vue:742", "[TUICallKit] answer方法不存在，可用方法:", availableMethods);
            uni.showToast({ title: "视频通话系统方法不可用", icon: "none" });
          }
        } catch (error) {
          formatAppLog("error", "at pages/volunteer/index.vue:746", "[TUICallKit] 志愿者接听通话错误:", error);
          this.isInCall = false;
          uni.showToast({
            title: "接听通话失败: " + error.message,
            icon: "none"
          });
        }
      },
      async loginToTUICallKit() {
        const userInfo = uni.getStorageSync("userInfo");
        if (!userInfo || !userInfo.id) {
          uni.showToast({ title: "请先登录", icon: "none" });
          return;
        }
        const userID = userInfo.id.toString();
        this.tuicallkitUserID = userID;
        try {
          formatAppLog("log", "at pages/volunteer/index.vue:766", "[被叫方TUICallKit] 开始获取UserSig, userID:", userID);
          const res = await uni.request({
            url: `${config$3.baseUrl}/user/userSig`,
            method: "GET",
            header: {
              "Authorization": `Bearer ${userInfo.token}`
            },
            data: { userID }
          });
          formatAppLog("log", "at pages/volunteer/index.vue:777", "[被叫方TUICallKit] UserSig响应:", res);
          const data = res[1] ? res[1].data : res.data;
          if (res[1] && res[1].statusCode === 200 && data.code === 200 || res.statusCode === 200 && data.code === 200) {
            const userSig = data.data.userSig;
            const realUserID = data.data.userId;
            if (!userSig || !realUserID) {
              throw new Error("UserSig或userID为空");
            }
            this.tuicallkitUserSig = userSig;
            this.tuicallkitUserID = realUserID;
            const SDKAppID = this.tuicallkitSDKAppID;
            uni.$TUICallKit.login({
              SDKAppID,
              userID: realUserID,
              userSig
            }, (loginRes) => {
              if (loginRes.code === 0) {
                this.isLogin = true;
                formatAppLog("log", "at pages/volunteer/index.vue:802", "[被叫方TUICallKit] 登录成功");
                formatAppLog("log", "at pages/volunteer/index.vue:805", "[TUICallKit] 可用方法列表:", Object.keys(uni.$TUICallKit));
                this.setupTUICallKitListeners();
              } else {
                this.isLogin = false;
                formatAppLog("error", "at pages/volunteer/index.vue:810", "[被叫方TUICallKit] 登录失败:", loginRes.msg);
                uni.showToast({ title: "视频通话系统登录失败: " + loginRes.msg, icon: "none" });
              }
            });
          } else {
            this.isLogin = false;
            formatAppLog("error", "at pages/volunteer/index.vue:816", "[被叫方TUICallKit] 获取UserSig失败:", data.message);
            uni.showToast({ title: "获取UserSig失败: " + data.message, icon: "none" });
          }
        } catch (err) {
          this.isLogin = false;
          formatAppLog("error", "at pages/volunteer/index.vue:821", "[被叫方TUICallKit] 获取UserSig异常:", err);
          uni.showToast({ title: "获取UserSig失败", icon: "none" });
        }
      },
      // 设置TUICallKit事件监听
      setupTUICallKitListeners() {
        if (!uni.$TUICallKit) {
          formatAppLog("error", "at pages/volunteer/index.vue:829", "[TUICallKit] TUICallKit未初始化，无法设置事件监听");
          return;
        }
        uni.$TUICallKit.addEventListener("onCallReceived", (event) => {
          formatAppLog("log", "at pages/volunteer/index.vue:835", "[被叫方TUICallKit] 收到通话邀请:", event);
        });
        uni.$TUICallKit.addEventListener("onCallAccepted", (event) => {
          formatAppLog("log", "at pages/volunteer/index.vue:840", "[被叫方TUICallKit] 通话被接受:", event);
        });
        uni.$TUICallKit.addEventListener("onCallRejected", (event) => {
          formatAppLog("log", "at pages/volunteer/index.vue:845", "[被叫方TUICallKit] 通话被拒绝:", event);
          this.isInCall = false;
          this.showCallRequest = false;
          this.stopCallRingtone();
          uni.showToast({ title: "通话被拒绝", icon: "none" });
        });
        uni.$TUICallKit.addEventListener("onCallEnded", (event) => {
          formatAppLog("log", "at pages/volunteer/index.vue:854", "[被叫方TUICallKit] 通话结束:", event);
          this.isInCall = false;
          this.showCallRequest = false;
          this.stopCallRingtone();
          uni.showToast({ title: "通话已结束", icon: "none" });
        });
        uni.$TUICallKit.addEventListener("onCallTimeout", (event) => {
          formatAppLog("log", "at pages/volunteer/index.vue:863", "[被叫方TUICallKit] 通话超时:", event);
          this.isInCall = false;
          this.showCallRequest = false;
          this.stopCallRingtone();
          uni.showToast({ title: "通话请求超时", icon: "none" });
        });
        uni.$TUICallKit.addEventListener("onError", (event) => {
          formatAppLog("error", "at pages/volunteer/index.vue:872", "[被叫方TUICallKit] 发生错误:", event);
          this.isInCall = false;
          this.showCallRequest = false;
          this.stopCallRingtone();
          uni.showToast({ title: "通话系统错误: " + (event.code || event.message), icon: "none" });
        });
      }
    }
  };
  function _sfc_render$1k(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("view", { class: "volunteer-container" }, [
      vue$1.createCommentVNode(" 非志愿者显示注册按钮 "),
      !$data.isVolunteer ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
        key: 0,
        class: "register-section"
      }, [
        vue$1.createElementVNode("view", { class: "register-header" }, [
          vue$1.createElementVNode("text", { class: "register-title" }, "成为志愿者"),
          vue$1.createElementVNode("text", { class: "register-subtitle" }, "加入我们，一起帮助他人")
        ]),
        vue$1.createElementVNode("button", {
          class: "register-btn",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.goToRegister && $options.goToRegister(...args))
        }, "成为志愿者")
      ])) : (vue$1.openBlock(), vue$1.createElementBlock(
        vue$1.Fragment,
        { key: 1 },
        [
          vue$1.createCommentVNode(" 志愿者显示服务内容 "),
          vue$1.createCommentVNode(" 状态控制栏 "),
          vue$1.createElementVNode("view", { class: "status-bar" }, [
            vue$1.createElementVNode("text", { class: "status-title" }, "服务状态"),
            vue$1.createCommentVNode(" 真实的uni-switch 组件 "),
            vue$1.createElementVNode("switch", {
              checked: $data.isOnline,
              onChange: _cache[1] || (_cache[1] = (...args) => $options.toggleOnlineStatus && $options.toggleOnlineStatus(...args)),
              color: "#1AAD19",
              class: "status-switch"
            }, null, 40, ["checked"]),
            vue$1.createElementVNode(
              "text",
              { class: "status-text" },
              vue$1.toDisplayString($data.isOnline ? "在线" : "离线"),
              1
              /* TEXT */
            )
          ]),
          vue$1.createCommentVNode(" 服务范围选择 "),
          vue$1.createElementVNode("view", { class: "service-scope" }, [
            vue$1.createElementVNode("text", { class: "section-title" }, "您提供的帮助类型"),
            vue$1.createElementVNode("view", { class: "tag-container" }, [
              vue$1.createElementVNode("view", {
                class: "tag mock-tag active",
                onClick: _cache[2] || (_cache[2] = (...args) => $options.goToVideoAssist && $options.goToVideoAssist(...args)),
                role: "button",
                "aria-label": "视频协助，点击进入视频协助页面",
                tabindex: "0"
              }, "视频协助"),
              vue$1.createElementVNode("view", {
                class: "tag mock-tag active",
                onClick: _cache[3] || (_cache[3] = (...args) => $options.goToTravelAppointment && $options.goToTravelAppointment(...args)),
                role: "button",
                "aria-label": "出行预约，点击进入出行预约页面",
                tabindex: "0"
              }, "出行预约"),
              vue$1.createElementVNode("view", {
                class: "tag mock-tag active",
                role: "button",
                "aria-label": "政策咨询，点击进入政策咨询页面",
                tabindex: "0"
              }, "政策咨询")
            ])
          ]),
          vue$1.createCommentVNode(" 通话请求弹窗 "),
          $data.showCallRequest ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
            key: 0,
            class: "call-request-modal"
          }, [
            vue$1.createElementVNode("view", { class: "call-request-content" }, [
              vue$1.createElementVNode("view", { class: "call-request-header" }, [
                vue$1.createElementVNode("text", { class: "call-request-title" }, "收到通话请求"),
                vue$1.createElementVNode(
                  "text",
                  { class: "call-request-subtitle" },
                  "用户 " + vue$1.toDisplayString($data.callRequestInfo.callerId) + " 请求与您通话",
                  1
                  /* TEXT */
                )
              ]),
              vue$1.createElementVNode("view", { class: "call-request-buttons" }, [
                vue$1.createElementVNode("button", {
                  class: "call-btn reject",
                  onClick: _cache[4] || (_cache[4] = (...args) => $options.handleRejectCall && $options.handleRejectCall(...args)),
                  "aria-label": "拒绝通话",
                  tabindex: "0"
                }, "拒绝"),
                vue$1.createElementVNode("button", {
                  class: "call-btn accept",
                  onClick: _cache[5] || (_cache[5] = (...args) => $options.handleAcceptCall && $options.handleAcceptCall(...args)),
                  "aria-label": "接受通话",
                  tabindex: "0"
                }, "接受")
              ])
            ])
          ])) : vue$1.createCommentVNode("v-if", true),
          vue$1.createCommentVNode(" 任务列表 "),
          vue$1.createElementVNode("view", { class: "task-list" }, [
            vue$1.createElementVNode("text", { class: "section-title" }, "感谢您提供帮助，如有人需要您的帮助，我们会弹窗通知您 若您接到视频协助，请耐心回复， 若您接到出行预约，请您问清楚出行站点，出行时间，个人信息， 然后在地铁/机场官网联系工作人员预约")
          ])
        ],
        64
        /* STABLE_FRAGMENT */
      ))
    ]);
  }
  const PagesVolunteerIndex = /* @__PURE__ */ _export_sfc(_sfc_main$1l, [["render", _sfc_render$1k], ["__scopeId", "data-v-9ce4ecad"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages/volunteer/index.vue"]]);
  const _sfc_main$1k = {
    data() {
      return {
        formData: {
          name: "",
          phone: "",
          idCard: "",
          openid: ""
        }
      };
    },
    onLoad() {
      const userInfo = uni.getStorageSync("userInfo");
      if (userInfo) {
        this.formData.openid = userInfo.openid;
        formatAppLog("log", "at pages/volunteer/register.vue:51", this.formData.openid);
      } else {
        uni.showToast({
          title: "请先登录",
          icon: "none"
        });
        setTimeout(() => {
          uni.navigateTo({
            url: "/pages/mine/"
          });
        }, 1500);
      }
    },
    methods: {
      async submitForm() {
        if (!this.formData.name || !this.formData.phone || !this.formData.idCard) {
          uni.showToast({
            title: "请填写完整信息",
            icon: "none"
          });
          return;
        }
        formatAppLog("log", "at pages/volunteer/register.vue:76", "志愿者注册表单数据：", {
          姓名: this.formData.name,
          手机号码: this.formData.phone,
          身份证号: this.formData.idCard,
          openid: this.formData.openid
        });
        try {
          formatAppLog("log", "at pages/volunteer/register.vue:85", "开始请求注册接口...");
          const res = await uni.request({
            url: `${this.$config.baseUrl}/user/user/volunteer/register`,
            method: "POST",
            data: this.formData,
            header: {
              "content-type": "application/json"
            }
          });
          formatAppLog("log", "at pages/volunteer/register.vue:95", "接口返回数据：", res);
          if (res.data.success) {
            uni.showToast({
              title: "申请提交成功",
              icon: "success"
            });
            setTimeout(() => {
              uni.navigateBack();
            }, 1500);
          } else {
            formatAppLog("error", "at pages/volunteer/register.vue:106", "注册失败，错误信息：", res.data);
            uni.showToast({
              title: res.data.message || "提交失败",
              icon: "none"
            });
          }
        } catch (error) {
          formatAppLog("error", "at pages/volunteer/register.vue:113", "请求发生错误：", error);
          formatAppLog("error", "at pages/volunteer/register.vue:114", "错误详情：", {
            错误信息: error.message,
            错误堆栈: error.stack,
            请求数据: this.formData
          });
          uni.showToast({
            title: "提交失败，请重试",
            icon: "none"
          });
        }
      }
    }
  };
  function _sfc_render$1j(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("view", { class: "register-container" }, [
      vue$1.createElementVNode("view", { class: "form-header" }, [
        vue$1.createElementVNode("text", { class: "header-title" }, "成为志愿者"),
        vue$1.createElementVNode("text", { class: "header-subtitle" }, "让我们一起帮助他人")
      ]),
      vue$1.createElementVNode("view", { class: "form-content" }, [
        vue$1.createElementVNode("view", { class: "form-item" }, [
          vue$1.createElementVNode("text", { class: "label" }, "姓名"),
          vue$1.withDirectives(vue$1.createElementVNode(
            "input",
            {
              type: "text",
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.formData.name = $event),
              placeholder: "请输入您的真实姓名"
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue$1.vModelText, $data.formData.name]
          ])
        ]),
        vue$1.createElementVNode("view", { class: "form-item" }, [
          vue$1.createElementVNode("text", { class: "label" }, "手机号码"),
          vue$1.withDirectives(vue$1.createElementVNode(
            "input",
            {
              type: "number",
              "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.formData.phone = $event),
              placeholder: "请输入手机号码",
              maxlength: "11"
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue$1.vModelText, $data.formData.phone]
          ])
        ]),
        vue$1.createElementVNode("view", { class: "form-item" }, [
          vue$1.createElementVNode("text", { class: "label" }, "身份证号"),
          vue$1.withDirectives(vue$1.createElementVNode(
            "input",
            {
              type: "idcard",
              "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.formData.idCard = $event),
              placeholder: "请输入身份证号码"
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue$1.vModelText, $data.formData.idCard]
          ])
        ]),
        vue$1.createElementVNode("button", {
          class: "submit-btn",
          onClick: _cache[3] || (_cache[3] = (...args) => $options.submitForm && $options.submitForm(...args))
        }, "提交申请")
      ])
    ]);
  }
  const PagesVolunteerRegister = /* @__PURE__ */ _export_sfc(_sfc_main$1k, [["render", _sfc_render$1j], ["__scopeId", "data-v-b0cd4e8b"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages/volunteer/register.vue"]]);
  const _sfc_main$1j = {
    data() {
      return {
        login: {
          show: false,
          // 是否已登录
          avatar: "/static/default_avatar.png",
          // 默认头像
          nickname: ""
          // 存储昵称
        },
        userId: "",
        // 用户ID
        tempLocalPath: "",
        // 本地临时文件路径（下载后的头像路径）
        loading: false,
        // 加载状态
        email: "",
        // 密码登录邮箱
        password: "",
        // 密码
        emailForCode: "",
        // 验证码登录邮箱
        code: "",
        // 验证码
        isSendingCode: false,
        // 是否正在发送验证码
        countdown: 60,
        // 验证码倒计时
        isAdmin: false,
        // 是否为管理员
        loginTab: 0,
        // 0: 验证码登录, 1: 密码登录
        unreadCount: 0,
        // 未读消息数量
        notificationTimer: null
        // 定时器，用于更新未读数量
      };
    },
    onLoad() {
      const userInfo = uni.getStorageSync("userInfo");
      const token = uni.getStorageSync("token");
      formatAppLog("log", "at pages/user/profile.vue:209", "页面加载：从Storage读取UserInfo:", userInfo);
      formatAppLog("log", "at pages/user/profile.vue:210", "页面加载：从Storage读取Token:", token);
      if (userInfo && userInfo.id) {
        this.login.show = true;
        this.userId = userInfo.id;
        this.login.avatar = userInfo.avatarUrl || this.login.avatar;
        this.login.nickname = userInfo.nickname || "";
        this.isAdmin = userInfo.role === "admin" || userInfo.role === "管理员";
        this.initNotificationService();
      }
      formatAppLog("log", "at pages/user/profile.vue:223", "onLoad处理后：login.show =", this.login.show);
      formatAppLog("log", "at pages/user/profile.vue:224", "onLoad处理后：isAdmin =", this.isAdmin);
    },
    onShow() {
      if (this.login.show) {
        this.updateUnreadCount();
      }
    },
    onUnload() {
      if (this.notificationTimer) {
        clearInterval(this.notificationTimer);
        this.notificationTimer = null;
      }
    },
    methods: {
      // 初始化通知服务
      initNotificationService() {
        try {
          notificationService.init();
          this.notificationTimer = setInterval(() => {
            this.updateUnreadCount();
          }, 2e3);
          this.updateUnreadCount();
          formatAppLog("log", "at pages/user/profile.vue:256", "[Profile] 通知服务初始化成功");
        } catch (error) {
          formatAppLog("error", "at pages/user/profile.vue:258", "[Profile] 通知服务初始化失败:", error);
        }
      },
      // 更新未读数量
      updateUnreadCount() {
        try {
          this.unreadCount = notificationService.getUnreadCount();
        } catch (error) {
          formatAppLog("error", "at pages/user/profile.vue:267", "[Profile] 更新未读数量失败:", error);
        }
      },
      // 打开通知中心
      openNotificationCenter() {
        uni.navigateTo({
          url: "/pages/notification/center"
        });
      },
      // 密码登录
      async handlePasswordLogin() {
        if (!this.email || !this.password) {
          uni.showToast({ title: "请输入邮箱和密码", icon: "none" });
          return;
        }
        if (this.loading)
          return;
        this.loading = true;
        uni.showLoading({ title: "登录中..." });
        try {
          const loginResponse = await uni.request({
            url: `${this.$config.baseUrl}/user/login/password`,
            method: "POST",
            data: {
              email: this.email,
              password: this.password
            },
            header: {
              "Content-Type": "application/json"
            }
          });
          if (loginResponse.data.code === 200) {
            const token = loginResponse.data.data.userInfo.token;
            const userInfoToSave = loginResponse.data.data.userInfo;
            formatAppLog("log", "at pages/user/profile.vue:306", "登录返回的原始数据:", loginResponse.data.data);
            formatAppLog("log", "at pages/user/profile.vue:307", "即将保存的Token:", token);
            formatAppLog("log", "at pages/user/profile.vue:308", "即将保存的UserInfo对象:", userInfoToSave);
            uni.setStorageSync("token", token);
            uni.setStorageSync("userInfo", userInfoToSave);
            formatAppLog("log", "at pages/user/profile.vue:313", "密码登录成功：已保存Token和用户信息到Storage。");
            formatAppLog("log", "at pages/user/profile.vue:314", "Storage中的Token:", uni.getStorageSync("token"));
            formatAppLog("log", "at pages/user/profile.vue:315", "Storage中的UserInfo:", uni.getStorageSync("userInfo"));
            this.login.show = true;
            this.login.avatar = userInfoToSave.avatarUrl || "/static/default_avatar.png";
            this.login.nickname = userInfoToSave.nickname || "默认昵称";
            this.isAdmin = userInfoToSave.role === "admin" || userInfoToSave.role === "管理员";
            if (this.isAdmin) {
              uni.showToast({
                title: "管理员登录成功",
                icon: "success"
              });
            } else {
              uni.showToast({
                title: "登录成功",
                icon: "success"
              });
            }
          } else {
            uni.showToast({
              title: loginResponse.data.message || "登录失败，请检查邮箱或密码",
              // 更改提示信息，更具体
              icon: "none"
            });
          }
        } catch (error) {
          formatAppLog("error", "at pages/user/profile.vue:344", "密码登录请求失败:", error);
          uni.showToast({
            title: "网络或服务器错误，请稍后重试",
            icon: "none"
          });
        } finally {
          this.loading = false;
          uni.hideLoading();
        }
      },
      // 邮箱验证码登录
      async handleEmailLogin() {
        if (!this.emailForCode || !this.code) {
          uni.showToast({ title: "请输入邮箱和验证码", icon: "none" });
          return;
        }
        if (this.loading)
          return;
        this.loading = true;
        uni.showLoading({ title: "登录中..." });
        try {
          const loginResponse = await uni.request({
            url: `${this.$config.baseUrl}/user/login/email`,
            method: "POST",
            data: {
              email: this.emailForCode,
              code: this.code
            },
            header: {
              "Content-Type": "application/json"
            }
          });
          if (loginResponse.data.code === 200) {
            const token = loginResponse.data.data.userInfo.token;
            const userInfoToSave = loginResponse.data.data.userInfo;
            formatAppLog("log", "at pages/user/profile.vue:382", "邮箱登录返回的原始数据:", loginResponse.data.data);
            formatAppLog("log", "at pages/user/profile.vue:383", "即将保存的Token:", token);
            formatAppLog("log", "at pages/user/profile.vue:384", "即将保存的UserInfo对象:", userInfoToSave);
            uni.setStorageSync("token", token);
            uni.setStorageSync("userInfo", userInfoToSave);
            formatAppLog("log", "at pages/user/profile.vue:389", "邮箱验证码登录成功：已保存Token和用户信息到Storage。");
            formatAppLog("log", "at pages/user/profile.vue:390", "Storage中的Token:", uni.getStorageSync("token"));
            formatAppLog("log", "at pages/user/profile.vue:391", "Storage中的UserInfo:", uni.getStorageSync("userInfo"));
            this.login.show = true;
            this.login.avatar = userInfoToSave.avatarUrl || "/static/default_avatar.png";
            this.login.nickname = userInfoToSave.nickname || "默认昵称";
            this.isAdmin = userInfoToSave.role === "admin" || userInfoToSave.role === "管理员";
            this.emailForCode = "";
            this.code = "";
            uni.showToast({ title: "登录成功", icon: "none" });
          } else {
            uni.showToast({
              title: loginResponse.data.message || "登录失败",
              icon: "none"
            });
          }
        } catch (error) {
          formatAppLog("error", "at pages/user/profile.vue:411", "登录失败:", error);
          uni.showToast({ title: "登录请求失败，请重试", icon: "none" });
        } finally {
          this.loading = false;
          uni.hideLoading();
        }
      },
      // 发送验证码
      async handleSendCode() {
        if (!this.emailForCode) {
          uni.showToast({ title: "请输入邮箱", icon: "none" });
          return;
        }
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(this.emailForCode)) {
          uni.showToast({ title: "请输入正确的邮箱格式", icon: "none" });
          return;
        }
        if (this.isSendingCode)
          return;
        this.isSendingCode = true;
        this.countdown = 60;
        try {
          const response = await uni.request({
            url: `${this.$config.baseUrl}/user/sendEmail/${this.emailForCode}`,
            method: "GET"
          });
          if (response.data === "验证码发送成功！") {
            uni.showToast({ title: "验证码已发送", icon: "none" });
            this.startCountdown();
          } else {
            uni.showToast({ title: response.data, icon: "none" });
            this.isSendingCode = false;
          }
        } catch (error) {
          formatAppLog("error", "at pages/user/profile.vue:452", "发送验证码失败:", error);
          uni.showToast({ title: "发送验证码失败", icon: "none" });
          this.isSendingCode = false;
        }
      },
      // 开始倒计时
      startCountdown() {
        const timer = setInterval(() => {
          if (this.countdown > 0) {
            this.countdown--;
          } else {
            clearInterval(timer);
            this.isSendingCode = false;
          }
        }, 1e3);
      },
      // 微信登录
      async handleAuth() {
        if (this.loading)
          return;
        this.loading = true;
        uni.showLoading({ title: "登录中..." });
        try {
          const { code: code2 } = await uni.login({ provider: "weixin" });
          const loginRes = await uni.request({
            url: `${this.$config.baseUrl}/user/login`,
            method: "POST",
            data: { code: code2 },
            header: { "Content-Type": "application/x-www-form-urlencoded" }
          });
          if (loginRes.data.code === 200) {
            const userInfo = loginRes.data.data.userInfo;
            const userInfoToSave = userInfo;
            uni.setStorageSync("userInfo", userInfoToSave);
            uni.setStorageSync("token", loginRes.data.data.token);
            formatAppLog("log", "at pages/user/profile.vue:492", "微信登录成功：已保存Token和用户信息到Storage。");
            formatAppLog("log", "at pages/user/profile.vue:493", "Storage中的Token:", uni.getStorageSync("token"));
            formatAppLog("log", "at pages/user/profile.vue:494", "Storage中的UserInfo:", uni.getStorageSync("userInfo"));
            this.login.show = true;
            this.userId = userInfoToSave.id;
            this.login.avatar = userInfoToSave.avatarUrl || "/static/default_avatar.png";
            this.login.nickname = userInfoToSave.nickname || "默认昵称";
            uni.showToast({ title: "登录成功", icon: "none" });
          } else {
            uni.showToast({
              title: `登录失败：${loginRes.data.msg || "未知错误"}`,
              icon: "none"
            });
          }
        } catch (error) {
          formatAppLog("error", "at pages/user/profile.vue:510", "登录失败:", error);
          uni.showToast({ title: "登录请求失败，请重试", icon: "none" });
        } finally {
          this.loading = false;
          uni.hideLoading();
        }
      },
      // 选择头像（本地相册选择）
      chooseAvatar() {
        uni.chooseImage({
          count: 1,
          sizeType: ["compressed"],
          sourceType: ["album", "camera"],
          success: async (res) => {
            if (res.tempFilePaths && res.tempFilePaths.length > 0) {
              const tempFilePath = res.tempFilePaths[0];
              this.login.avatar = tempFilePath;
              uni.showLoading({ title: "上传中..." });
              try {
                const token = uni.getStorageSync("token");
                if (!token)
                  throw new Error("未找到登录凭证");
                const uploadRes = await uni.uploadFile({
                  url: `${this.$config.baseUrl}/minio/upload`,
                  filePath: tempFilePath,
                  name: "file",
                  header: { "Authorization": `Bearer ${token}` }
                });
                if (uploadRes.statusCode === 200) {
                  const result = JSON.parse(uploadRes.data);
                  if (result.code === 200) {
                    const avatarUrl = result.data.url;
                    const userInfo = uni.getStorageSync("userInfo");
                    await this.updateUserInfo({
                      id: userInfo.id,
                      avatarUrl
                    });
                  } else {
                    throw new Error(result.message || "上传失败");
                  }
                } else {
                  throw new Error("上传失败，状态码:" + uploadRes.statusCode);
                }
              } catch (err) {
                uni.showToast({ title: err.message || "头像上传失败", icon: "none" });
              } finally {
                uni.hideLoading();
              }
            }
          },
          fail: () => {
            uni.showToast({ title: "未选择图片", icon: "none" });
          }
        });
      },
      // 处理昵称变化
      async handleNicknameChange(e2) {
        if (!this.login.show) {
          uni.showToast({ title: "请先登录", icon: "none" });
          return;
        }
        const nickname = e2.detail.value;
        if (nickname && nickname.trim() !== "") {
          const userInfo = uni.getStorageSync("userInfo");
          await this.updateUserInfo({
            id: userInfo.id,
            nickname: nickname.trim(),
            avatarUrl: userInfo.avatarUrl || this.login.avatar
          });
        }
      },
      // 通用更新方法
      async updateUserInfo(params) {
        try {
          const userInfo = uni.getStorageSync("userInfo");
          if (!userInfo || !userInfo.id) {
            throw new Error("用户未登录或ID缺失");
          }
          const token = uni.getStorageSync("token");
          if (!token) {
            throw new Error("未找到登录凭证");
          }
          const requestData = {
            id: params.id || userInfo.id,
            avatarUrl: params.avatarUrl || userInfo.avatarUrl || this.login.avatar,
            ...params
          };
          const updateRes = await uni.request({
            url: `${this.$config.baseUrl}/user/updateUserInfo`,
            method: "POST",
            data: requestData,
            header: {
              "Content-Type": "application/json",
              "Authorization": `Bearer ${token}`
            }
          });
          if (updateRes.data.code === 200) {
            const updatedUserInfo = {
              ...userInfo,
              ...params
            };
            uni.setStorageSync("userInfo", updatedUserInfo);
            if (params.nickname) {
              this.login.nickname = params.nickname;
            }
            if (params.avatarUrl) {
              this.login.avatar = params.avatarUrl;
            }
            uni.showToast({ title: "更新成功", icon: "none" });
          } else {
            throw new Error(updateRes.data.message || "更新失败");
          }
        } catch (error) {
          formatAppLog("error", "at pages/user/profile.vue:637", "更新失败:", error);
          uni.showToast({ title: error.message, icon: "none" });
        }
      },
      // 导航功能
      navigateTo(page) {
        if (page === "about") {
          uni.navigateTo({ url: "/pages/index/about" });
        } else if (page === "feedback") {
          uni.navigateTo({ url: "/pages/index/feedback" });
        } else if (page === "basicInfo") {
          uni.navigateTo({ url: "/pages/basicInfo/basicInfo" });
        } else {
          uni.navigateTo({ url: page });
        }
      },
      // 退出登录
      handleLogout() {
        uni.showModal({
          title: "提示",
          content: "确定要退出登录吗？",
          success: (res) => {
            if (res.confirm) {
              uni.removeStorageSync("userInfo");
              uni.removeStorageSync("token");
              this.login.show = false;
              this.login.avatar = "/static/default_avatar.png";
              this.login.nickname = "";
              this.userId = "";
              this.email = "";
              this.password = "";
              this.emailForCode = "";
              this.code = "";
              this.isAdmin = false;
              uni.showToast({ title: "已退出登录", icon: "none" });
            }
          }
        });
      },
      navigateToCustomerService() {
        uni.navigateTo({ url: "/pages-ai-desk/index/index" });
      }
    }
  };
  function _sfc_render$1i(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("view", { class: "container" }, [
      vue$1.createCommentVNode(" 顶部背景 "),
      vue$1.createElementVNode("view", { class: "top-bg" }),
      vue$1.createCommentVNode(" 顶部导航栏 "),
      $data.login.show ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
        key: 0,
        class: "top-navbar"
      }, [
        vue$1.createElementVNode("view", { class: "navbar-left" }, [
          vue$1.createElementVNode("text", { class: "navbar-title" }, "个人中心")
        ]),
        vue$1.createElementVNode("view", { class: "navbar-right" }, [
          vue$1.createCommentVNode(" 消息铃铛 "),
          vue$1.createElementVNode("view", {
            class: "notification-bell",
            onClick: _cache[0] || (_cache[0] = (...args) => $options.openNotificationCenter && $options.openNotificationCenter(...args))
          }, [
            vue$1.createElementVNode("text", { class: "bell-icon" }, "🔔"),
            vue$1.createCommentVNode(" 未读消息红点 "),
            $data.unreadCount > 0 ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
              key: 0,
              class: "notification-badge"
            }, [
              vue$1.createElementVNode(
                "text",
                { class: "badge-text" },
                vue$1.toDisplayString($data.unreadCount > 99 ? "99+" : $data.unreadCount),
                1
                /* TEXT */
              )
            ])) : vue$1.createCommentVNode("v-if", true)
          ])
        ])
      ])) : vue$1.createCommentVNode("v-if", true),
      vue$1.createCommentVNode(" 头像及登录状态 "),
      vue$1.createElementVNode("view", { class: "box" }, [
        vue$1.createElementVNode("view", { class: "head-box" }, [
          vue$1.createElementVNode("view", {
            class: "avatar-container",
            onClick: _cache[1] || (_cache[1] = (...args) => $options.chooseAvatar && $options.chooseAvatar(...args))
          }, [
            vue$1.createElementVNode("image", {
              class: "head-img",
              src: $data.login.avatar,
              mode: "aspectFill"
            }, null, 8, ["src"])
          ]),
          vue$1.createElementVNode(
            "view",
            { class: "tip" },
            vue$1.toDisplayString($data.login.show ? "点击头像可更换" : "当前未登录，请登录！"),
            1
            /* TEXT */
          ),
          vue$1.createCommentVNode(" 昵称输入框 "),
          $data.login.show ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
            key: 0,
            class: "nickname-container"
          }, [
            vue$1.createElementVNode("input", {
              type: "nickname",
              class: "nickname-input",
              placeholder: "请输入昵称",
              value: $data.login.nickname,
              onChange: _cache[2] || (_cache[2] = (...args) => $options.handleNicknameChange && $options.handleNicknameChange(...args))
            }, null, 40, ["value"])
          ])) : vue$1.createCommentVNode("v-if", true)
        ]),
        vue$1.createCommentVNode(" 登录/注册按钮 "),
        !$data.login.show ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
          key: 0,
          class: "login-section"
        }, [
          vue$1.createCommentVNode(" 登录方式切换条 "),
          vue$1.createElementVNode("view", { class: "login-tabs" }, [
            vue$1.createElementVNode(
              "view",
              {
                class: vue$1.normalizeClass(["tab-item", $data.loginTab === 0 ? "active" : ""]),
                onClick: _cache[3] || (_cache[3] = ($event) => $data.loginTab = 0)
              },
              "验证码登录",
              2
              /* CLASS */
            ),
            vue$1.createElementVNode(
              "view",
              {
                class: vue$1.normalizeClass(["tab-item", $data.loginTab === 1 ? "active" : ""]),
                onClick: _cache[4] || (_cache[4] = ($event) => $data.loginTab = 1)
              },
              "密码登录",
              2
              /* CLASS */
            )
          ]),
          vue$1.createCommentVNode(" 验证码登录表单 "),
          $data.loginTab === 0 ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
            key: 0,
            class: "email-login"
          }, [
            vue$1.withDirectives(vue$1.createElementVNode(
              "input",
              {
                type: "text",
                class: "email-input",
                placeholder: "请输入邮箱",
                "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.emailForCode = $event)
              },
              null,
              512
              /* NEED_PATCH */
            ), [
              [vue$1.vModelText, $data.emailForCode]
            ]),
            vue$1.createElementVNode("view", { class: "code-input-group" }, [
              vue$1.withDirectives(vue$1.createElementVNode(
                "input",
                {
                  type: "text",
                  class: "code-input",
                  placeholder: "请输入验证码",
                  "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $data.code = $event)
                },
                null,
                512
                /* NEED_PATCH */
              ), [
                [vue$1.vModelText, $data.code]
              ]),
              vue$1.createElementVNode("button", {
                class: "send-code-btn",
                disabled: $data.isSendingCode,
                onClick: _cache[7] || (_cache[7] = (...args) => $options.handleSendCode && $options.handleSendCode(...args))
              }, vue$1.toDisplayString($data.isSendingCode ? `${$data.countdown}s后重试` : "发送验证码"), 9, ["disabled"])
            ]),
            vue$1.createElementVNode("button", {
              onClick: _cache[8] || (_cache[8] = (...args) => $options.handleEmailLogin && $options.handleEmailLogin(...args)),
              class: "email-login-btn"
            }, [
              vue$1.createElementVNode("text", { class: "login-text" }, "邮箱验证码登录")
            ])
          ])) : vue$1.createCommentVNode("v-if", true),
          vue$1.createCommentVNode(" 密码登录表单 "),
          $data.loginTab === 1 ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
            key: 1,
            class: "password-login"
          }, [
            vue$1.withDirectives(vue$1.createElementVNode(
              "input",
              {
                type: "text",
                class: "email-input",
                placeholder: "请输入邮箱",
                "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => $data.email = $event)
              },
              null,
              512
              /* NEED_PATCH */
            ), [
              [vue$1.vModelText, $data.email]
            ]),
            vue$1.withDirectives(vue$1.createElementVNode(
              "input",
              {
                type: "password",
                class: "email-input",
                placeholder: "请输入密码",
                "onUpdate:modelValue": _cache[10] || (_cache[10] = ($event) => $data.password = $event)
              },
              null,
              512
              /* NEED_PATCH */
            ), [
              [vue$1.vModelText, $data.password]
            ]),
            vue$1.createElementVNode("button", {
              onClick: _cache[11] || (_cache[11] = (...args) => $options.handlePasswordLogin && $options.handlePasswordLogin(...args)),
              class: "email-login-btn"
            }, [
              vue$1.createElementVNode("text", { class: "login-text" }, "密码登录")
            ])
          ])) : vue$1.createCommentVNode("v-if", true),
          vue$1.createCommentVNode(" 分割线 "),
          vue$1.createElementVNode("view", { class: "divider" }, [
            vue$1.createElementVNode("view", { class: "divider-line" }),
            vue$1.createElementVNode("text", { class: "divider-text" }, "或"),
            vue$1.createElementVNode("view", { class: "divider-line" })
          ]),
          vue$1.createCommentVNode(" 微信登录按钮 "),
          vue$1.createElementVNode("button", {
            onClick: _cache[12] || (_cache[12] = (...args) => $options.handleAuth && $options.handleAuth(...args)),
            class: "login-btn"
          }, [
            vue$1.createElementVNode("text", { class: "login-text" }, "微信快捷登录")
          ])
        ])) : vue$1.createCommentVNode("v-if", true),
        vue$1.createCommentVNode(" 功能列表 "),
        $data.login.show ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
          key: 1,
          class: "function-list"
        }, [
          vue$1.createCommentVNode(" 管理员功能入口 "),
          $data.isAdmin ? (vue$1.openBlock(), vue$1.createElementBlock("button", {
            key: 0,
            class: "row",
            onClick: _cache[13] || (_cache[13] = ($event) => $options.navigateTo("/pages/admin/index"))
          }, [
            vue$1.createElementVNode("view", { class: "left" }, [
              vue$1.createElementVNode("icon", {
                class: "icon-small",
                type: "success",
                size: "16",
                color: "green"
              }),
              vue$1.createElementVNode("text", { class: "text" }, "管理后台")
            ]),
            vue$1.createElementVNode("view", { class: "right" }, "》")
          ])) : vue$1.createCommentVNode("v-if", true),
          vue$1.createCommentVNode(" 其他功能入口 "),
          vue$1.createElementVNode("button", {
            class: "row",
            onClick: _cache[14] || (_cache[14] = ($event) => $options.navigateTo("/pages/policy/favorites"))
          }, [
            vue$1.createElementVNode("view", { class: "left" }, [
              vue$1.createElementVNode("icon", {
                class: "icon-small",
                type: "success",
                size: "16",
                color: "green"
              }),
              vue$1.createElementVNode("text", { class: "text" }, "我的收藏")
            ]),
            vue$1.createElementVNode("view", { class: "right" }, "》")
          ]),
          vue$1.createElementVNode("button", {
            class: "row",
            onClick: _cache[15] || (_cache[15] = ($event) => $options.navigateTo("/pages/basicInfo/basicInfo"))
          }, [
            vue$1.createElementVNode("view", { class: "left" }, [
              vue$1.createElementVNode("icon", {
                class: "icon-small",
                type: "success",
                size: "16",
                color: "green"
              }),
              vue$1.createElementVNode("text", { class: "text" }, "基本信息")
            ]),
            vue$1.createElementVNode("view", { class: "right" }, "》")
          ]),
          vue$1.createElementVNode("button", {
            class: "row",
            onClick: _cache[16] || (_cache[16] = ($event) => $options.navigateTo("/pages/common/feedback"))
          }, [
            vue$1.createElementVNode("view", { class: "left" }, [
              vue$1.createElementVNode("icon", {
                class: "icon-small",
                type: "success",
                size: "16",
                color: "green"
              }),
              vue$1.createElementVNode("text", { class: "text" }, "我要反馈")
            ]),
            vue$1.createElementVNode("view", { class: "right" }, "》")
          ]),
          vue$1.createElementVNode("button", {
            class: "row",
            style: { "width": "100%" },
            onClick: _cache[17] || (_cache[17] = ($event) => $options.navigateTo("/pages/common/about"))
          }, [
            vue$1.createElementVNode("view", { class: "left" }, [
              vue$1.createElementVNode("icon", {
                class: "icon-small",
                type: "success",
                size: "16",
                color: "green"
              }),
              vue$1.createElementVNode("text", { class: "text" }, "关于我们")
            ]),
            vue$1.createElementVNode("view", { class: "right" }, "》")
          ]),
          vue$1.createElementVNode("button", {
            class: "row",
            style: { "width": "100%" },
            "open-type": "contact",
            onClick: _cache[18] || (_cache[18] = (...args) => $options.navigateToCustomerService && $options.navigateToCustomerService(...args))
          }, [
            vue$1.createElementVNode("view", { class: "left" }, [
              vue$1.createElementVNode("icon", {
                class: "icon-small",
                type: "success",
                size: "16",
                color: "green"
              }),
              vue$1.createElementVNode("text", { class: "text" }, "在线客服")
            ]),
            vue$1.createElementVNode("view", { class: "right" }, "》")
          ])
        ])) : vue$1.createCommentVNode("v-if", true),
        vue$1.createCommentVNode(" 退出登录按钮 "),
        $data.login.show ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
          key: 2,
          class: "logout-section"
        }, [
          vue$1.createElementVNode("button", {
            onClick: _cache[19] || (_cache[19] = (...args) => $options.handleLogout && $options.handleLogout(...args)),
            class: "logout-btn"
          }, [
            vue$1.createElementVNode("text", { class: "logout-text" }, "退出登录")
          ])
        ])) : vue$1.createCommentVNode("v-if", true)
      ]),
      vue$1.createCommentVNode(" 页脚 "),
      vue$1.createElementVNode("view", { class: "footer" }, [
        vue$1.createElementVNode("text", null, "© 2025 公益助盲个人中心")
      ])
    ]);
  }
  const PagesUserProfile = /* @__PURE__ */ _export_sfc(_sfc_main$1j, [["render", _sfc_render$1i], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages/user/profile.vue"]]);
  const _imports_0 = "/static/loading.gif";
  const _imports_1 = "/static/error.png";
  const _sfc_main$1i = {
    data() {
      return {
        regions: ["全国", "北京", "上海", "广州", "深圳"],
        currentRegion: "全国",
        policyList: [],
        page: 1,
        pageSize: 10,
        loading: false,
        hasMore: true,
        error: false,
        searchTitle: "",
        favoriteMap: {}
      };
    },
    onLoad() {
      this.loadPolicies();
    },
    onReachBottom() {
      if (!this.loading && this.hasMore) {
        this.loadPolicies();
      }
    },
    methods: {
      async loadPolicies(reset = false) {
        if (this.loading || !this.hasMore && !reset)
          return;
        if (reset) {
          this.policyList = [];
          this.page = 1;
          this.hasMore = true;
          this.error = false;
        }
        this.loading = true;
        this.error = false;
        try {
          const params = {
            pageNum: this.page,
            pageSize: this.pageSize
          };
          if (this.currentRegion && this.currentRegion !== "全国") {
            params.policyLevel = this.currentRegion;
          }
          if (this.searchTitle) {
            params.title = this.searchTitle;
          }
          const url2 = `${this.$config.baseUrl}/policy/page`;
          const res = await uni.request({
            url: url2,
            method: "GET",
            data: params
          });
          if (res.data.code !== 200)
            throw new Error(res.data.message || "接口错误");
          const newPolicies = res.data.data.records || [];
          if (newPolicies.length === 0) {
            this.hasMore = false;
            return;
          }
          await Promise.all(newPolicies.map((item) => this.fetchFavoriteStatus(item.id)));
          newPolicies.forEach((policy) => {
            const card = { ...policy, loaded: true };
            this.policyList.push(card);
          });
          this.hasMore = newPolicies.length === this.pageSize;
          this.page++;
        } catch (error) {
          this.error = true;
        } finally {
          this.loading = false;
        }
      },
      async fetchFavoriteStatus(policyId) {
        try {
          const token = uni.getStorageSync("token");
          if (!token)
            return;
          const url2 = `${this.$config.baseUrl}/policy/${policyId}/favorite`;
          formatAppLog("log", "at pages/policy/policy.vue:154", "请求收藏状态 URL:", url2);
          const res = await uni.request({
            url: url2,
            method: "GET",
            header: { "Authorization": `Bearer ${token}` }
          });
          if (res.data.code === 200) {
            this.$set(this.favoriteMap, policyId, !!res.data.data);
          }
        } catch (e2) {
        }
      },
      onRegionChange(e2) {
        this.currentRegion = this.regions[e2.detail.value];
        this.policyList = [];
        this.page = 1;
        this.hasMore = true;
        this.error = false;
        this.loadPolicies(true);
      },
      onImageLoad(id) {
        const index = this.policyList.findIndex((item) => item.id === id);
        if (index !== -1)
          this.policyList[index].loaded = true;
      },
      navigateToDetail(id) {
        uni.navigateTo({ url: `/pages/policy/detail?id=${id}` });
      },
      formatDate(timestamp) {
        const date2 = new Date(timestamp);
        return date2.toISOString().split("T")[0];
      },
      formatViews(views) {
        return views >= 1e4 ? `${(views / 1e4).toFixed(1)}万` : views;
      },
      navigateToFavorites() {
        uni.navigateTo({ url: "/pages/policy/favorites" });
      }
    }
  };
  function _sfc_render$1h(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("view", { class: "container" }, [
      vue$1.createCommentVNode(" 地区选择器 "),
      vue$1.createElementVNode("view", { class: "header" }, [
        vue$1.createElementVNode("picker", {
          mode: "selector",
          range: $data.regions,
          onChange: _cache[0] || (_cache[0] = (...args) => $options.onRegionChange && $options.onRegionChange(...args)),
          class: "region-picker"
        }, [
          vue$1.createElementVNode("view", { class: "picker-content" }, [
            vue$1.createElementVNode(
              "text",
              { class: "selected-region" },
              vue$1.toDisplayString($data.currentRegion),
              1
              /* TEXT */
            ),
            vue$1.createElementVNode("text", { class: "picker-arrow" }, "▼")
          ])
        ], 40, ["range"]),
        vue$1.createElementVNode("text", {
          class: "my-favorites-btn",
          onClick: _cache[1] || (_cache[1] = (...args) => $options.navigateToFavorites && $options.navigateToFavorites(...args))
        }, " 我的收藏 ")
      ]),
      vue$1.createCommentVNode(" 单列内容区 "),
      vue$1.createElementVNode("view", { class: "policy-list" }, [
        (vue$1.openBlock(true), vue$1.createElementBlock(
          vue$1.Fragment,
          null,
          vue$1.renderList($data.policyList, (item) => {
            return vue$1.openBlock(), vue$1.createElementBlock("view", {
              key: item.id,
              class: "policy-card",
              onClick: ($event) => $options.navigateToDetail(item.id),
              style: vue$1.normalizeStyle({ opacity: item.loaded ? 1 : 0 }),
              role: "button",
              "aria-label": item.title + "，点击查看详情",
              tabindex: "0"
            }, [
              item.cover ? (vue$1.openBlock(), vue$1.createElementBlock("image", {
                key: 0,
                src: item.cover,
                mode: "widthFix",
                class: "card-cover",
                loading: "lazy",
                onLoad: ($event) => $options.onImageLoad(item.id)
              }, null, 40, ["src", "onLoad"])) : vue$1.createCommentVNode("v-if", true),
              item.tags && item.tags.length ? (vue$1.openBlock(), vue$1.createElementBlock(
                "view",
                {
                  key: 1,
                  class: "card-tag"
                },
                vue$1.toDisplayString(item.tags[0]),
                1
                /* TEXT */
              )) : vue$1.createCommentVNode("v-if", true),
              vue$1.createElementVNode("view", { class: "card-content" }, [
                vue$1.createElementVNode(
                  "text",
                  { class: "card-title" },
                  vue$1.toDisplayString(item.title),
                  1
                  /* TEXT */
                ),
                vue$1.createElementVNode(
                  "text",
                  { class: "card-summary" },
                  vue$1.toDisplayString(item.summary),
                  1
                  /* TEXT */
                ),
                vue$1.createElementVNode("view", { class: "card-footer" }, [
                  vue$1.createElementVNode(
                    "text",
                    { class: "publish-date" },
                    vue$1.toDisplayString($options.formatDate(item.publishDate)),
                    1
                    /* TEXT */
                  ),
                  vue$1.createElementVNode(
                    "text",
                    { class: "views" },
                    vue$1.toDisplayString($options.formatViews(item.views)) + "阅读",
                    1
                    /* TEXT */
                  )
                ])
              ])
            ], 12, ["onClick", "aria-label"]);
          }),
          128
          /* KEYED_FRAGMENT */
        ))
      ]),
      vue$1.createCommentVNode(" 加载状态 "),
      $data.loading || !$data.hasMore ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
        key: 0,
        class: "loading-container"
      }, [
        $data.loading ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
          key: 0,
          class: "loading"
        }, [
          vue$1.createElementVNode("image", {
            src: _imports_0,
            mode: "widthFix",
            class: "loading-icon"
          }),
          vue$1.createElementVNode("text", null, "加载中...")
        ])) : !$data.hasMore ? (vue$1.openBlock(), vue$1.createElementBlock("text", {
          key: 1,
          class: "no-more"
        }, "没有更多数据了")) : vue$1.createCommentVNode("v-if", true)
      ])) : vue$1.createCommentVNode("v-if", true),
      vue$1.createCommentVNode(" 错误状态 "),
      $data.error ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
        key: 1,
        class: "error-container"
      }, [
        vue$1.createElementVNode("image", {
          src: _imports_1,
          mode: "widthFix",
          class: "error-icon"
        }),
        vue$1.createElementVNode("text", { class: "error-text" }, "加载失败，请检查网络"),
        vue$1.createElementVNode("button", {
          class: "retry-btn",
          onClick: _cache[2] || (_cache[2] = (...args) => $options.loadPolicies && $options.loadPolicies(...args))
        }, "重试")
      ])) : vue$1.createCommentVNode("v-if", true)
    ]);
  }
  const PagesPolicyPolicy = /* @__PURE__ */ _export_sfc(_sfc_main$1i, [["render", _sfc_render$1h], ["__scopeId", "data-v-e4e5fb8d"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages/policy/policy.vue"]]);
  const _sfc_main$1h = {
    data() {
      return {
        policy: null,
        loading: true,
        error: false,
        isFavorite: false
      };
    },
    onLoad(options) {
      if (options.id) {
        this.loadPolicyDetail(options.id);
        this.fetchFavoriteStatus(options.id);
      }
    },
    methods: {
      async loadPolicyDetail(id) {
        this.loading = true;
        this.error = false;
        try {
          const response = await uni.request({
            url: `${this.$config.baseUrl}/policy/detail/${id}`
          });
          const { data } = response;
          if (data.code === 200) {
            this.policy = data.data;
            this.fetchFavoriteStatus(id);
          }
        } catch (err) {
          this.error = true;
          formatAppLog("error", "at pages/policy/detail.vue:94", "Failed to load policy detail:", err);
        } finally {
          this.loading = false;
        }
      },
      async fetchFavoriteStatus(id) {
        try {
          const token = uni.getStorageSync("token");
          if (!token)
            return;
          const res = await uni.request({
            url: `${this.$config.baseUrl}/policy/favorite/${id}`,
            method: "GET",
            header: { "Authorization": `Bearer ${token}` }
          });
          if (res.data.code === 200) {
            this.isFavorite = !!res.data.data;
          }
        } catch (e2) {
        }
      },
      async toggleFavorite() {
        const token = uni.getStorageSync("token");
        if (!token) {
          uni.showToast({ title: "请先登录", icon: "none" });
          return;
        }
        try {
          if (this.isFavorite) {
            await uni.request({
              url: `${this.$config.baseUrl}/policy/favorite/${this.policy.id}`,
              method: "DELETE",
              header: { "Authorization": `Bearer ${token}` }
            });
            this.isFavorite = false;
            uni.showToast({ title: "已取消收藏", icon: "none" });
          } else {
            await uni.request({
              url: `${this.$config.baseUrl}/policy/favorite/${this.policy.id}`,
              method: "POST",
              header: { "Authorization": `Bearer ${token}` }
            });
            this.isFavorite = true;
            uni.showToast({ title: "已收藏", icon: "none" });
          }
        } catch (e2) {
          uni.showToast({ title: "操作失败", icon: "none" });
        }
      },
      goBack() {
        uni.navigateBack();
      },
      formatDate(timestamp) {
        const date2 = new Date(timestamp);
        return `${date2.getFullYear()}-${String(date2.getMonth() + 1).padStart(2, "0")}-${String(date2.getDate()).padStart(2, "0")}`;
      }
    }
  };
  function _sfc_render$1g(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("view", { class: "container" }, [
      vue$1.createCommentVNode(" 顶部导航栏 "),
      vue$1.createElementVNode("view", { class: "header" }, [
        vue$1.createElementVNode("view", {
          class: "back-btn",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.goBack && $options.goBack(...args)),
          "aria-label": "返回政策列表",
          tabindex: "0"
        }, [
          vue$1.createElementVNode("text", { class: "back-icon" }, "←")
        ]),
        vue$1.createElementVNode("text", { class: "title" }, "政策详情")
      ]),
      vue$1.createCommentVNode(" 政策内容 "),
      $data.policy ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
        key: 0,
        class: "content"
      }, [
        $data.policy.cover ? (vue$1.openBlock(), vue$1.createElementBlock("image", {
          key: 0,
          src: $data.policy.cover,
          mode: "widthFix",
          class: "cover-image"
        }, null, 8, ["src"])) : vue$1.createCommentVNode("v-if", true),
        vue$1.createElementVNode("view", { class: "policy-header" }, [
          vue$1.createElementVNode(
            "text",
            { class: "policy-title" },
            vue$1.toDisplayString($data.policy.title),
            1
            /* TEXT */
          ),
          vue$1.createElementVNode("view", {
            class: vue$1.normalizeClass(["favorite-btn", { active: $data.isFavorite }]),
            onClick: _cache[1] || (_cache[1] = (...args) => $options.toggleFavorite && $options.toggleFavorite(...args)),
            "aria-label": $data.isFavorite ? "取消收藏" : "收藏该政策",
            tabindex: "0"
          }, [
            $data.isFavorite ? (vue$1.openBlock(), vue$1.createElementBlock("text", { key: 0 }, "★ 已收藏")) : (vue$1.openBlock(), vue$1.createElementBlock("text", { key: 1 }, "☆ 收藏"))
          ], 10, ["aria-label"]),
          vue$1.createElementVNode("view", { class: "meta-info" }, [
            vue$1.createElementVNode(
              "text",
              { class: "publish-date" },
              "发布时间：" + vue$1.toDisplayString($options.formatDate($data.policy.publishDate)),
              1
              /* TEXT */
            ),
            vue$1.createElementVNode(
              "text",
              { class: "region" },
              "地区：" + vue$1.toDisplayString($data.policy.policyLevel),
              1
              /* TEXT */
            )
          ]),
          $data.policy.tags && $data.policy.tags.length ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
            key: 0,
            class: "tags"
          }, [
            (vue$1.openBlock(true), vue$1.createElementBlock(
              vue$1.Fragment,
              null,
              vue$1.renderList($data.policy.tags, (tag, index) => {
                return vue$1.openBlock(), vue$1.createElementBlock(
                  "text",
                  {
                    key: index,
                    class: "tag"
                  },
                  vue$1.toDisplayString(tag),
                  1
                  /* TEXT */
                );
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ])) : vue$1.createCommentVNode("v-if", true)
        ]),
        vue$1.createElementVNode("view", { class: "policy-content" }, [
          vue$1.createElementVNode("rich-text", {
            nodes: $data.policy.content
          }, null, 8, ["nodes"])
        ])
      ])) : vue$1.createCommentVNode("v-if", true),
      vue$1.createCommentVNode(" 加载状态 "),
      $data.loading ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
        key: 1,
        class: "loading"
      }, [
        vue$1.createElementVNode("image", {
          src: _imports_0,
          mode: "widthFix",
          class: "loading-icon"
        }),
        vue$1.createElementVNode("text", null, "加载中...")
      ])) : vue$1.createCommentVNode("v-if", true),
      vue$1.createCommentVNode(" 错误状态 "),
      $data.error ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
        key: 2,
        class: "error-container"
      }, [
        vue$1.createElementVNode("image", {
          src: _imports_1,
          mode: "widthFix",
          class: "error-icon"
        }),
        vue$1.createElementVNode("text", { class: "error-text" }, "加载失败，请检查网络"),
        vue$1.createElementVNode("button", {
          class: "retry-btn",
          onClick: _cache[2] || (_cache[2] = (...args) => $options.loadPolicyDetail && $options.loadPolicyDetail(...args))
        }, "重试")
      ])) : vue$1.createCommentVNode("v-if", true)
    ]);
  }
  const PagesPolicyDetail = /* @__PURE__ */ _export_sfc(_sfc_main$1h, [["render", _sfc_render$1g], ["__scopeId", "data-v-059a76ff"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages/policy/detail.vue"]]);
  const _sfc_main$1g = {
    data() {
      return {
        isVolunteer: false,
        // 新增：是否为志愿者
        userInfo: {
          id: "",
          nickname: "",
          name: "",
          phone: "",
          usualAddress: "",
          voiceSettings: "",
          serviceHours: "",
          serviceRating: "",
          organization: "",
          certificationTime: "",
          username: ""
        }
      };
    },
    onLoad() {
      this.loadUserInfo();
    },
    onShow() {
      this.checkVolunteerStatus();
    },
    methods: {
      // 加载用户信息
      async loadUserInfo() {
        try {
          const userInfo = uni.getStorageSync("userInfo");
          formatAppLog("log", "at pages/basicInfo/basicInfo.vue:79", "存储的用户信息:", userInfo);
          if (!userInfo) {
            throw new Error("未找到用户信息，请先登录");
          }
          if (!userInfo.id) {
            formatAppLog("error", "at pages/basicInfo/basicInfo.vue:86", "用户信息中缺少ID:", userInfo);
            throw new Error("用户信息不完整，请重新登录");
          }
          const token = uni.getStorageSync("token");
          formatAppLog("log", "at pages/basicInfo/basicInfo.vue:91", "存储的token:", token);
          if (!token) {
            throw new Error("未找到登录凭证，请重新登录");
          }
          const res = await uni.request({
            url: `${this.$config.baseUrl}/user/getUserInfo?id=${userInfo.id}`,
            method: "GET",
            header: {
              "Authorization": `Bearer ${token}`
            }
          });
          formatAppLog("log", "at pages/basicInfo/basicInfo.vue:105", "获取用户信息响应:", res);
          if (res.data.code === 200) {
            this.userInfo = { ...this.userInfo, ...res.data.data.userInfo };
            formatAppLog("log", "at pages/basicInfo/basicInfo.vue:110", "更新后的用户信息:", this.userInfo);
          } else {
            throw new Error(res.data.message || "获取用户信息失败");
          }
        } catch (error) {
          formatAppLog("error", "at pages/basicInfo/basicInfo.vue:115", "加载用户信息失败:", error);
          if (error.message.includes("未找到用户信息") || error.message.includes("未找到登录凭证")) {
            uni.showModal({
              title: "提示",
              content: "请先登录",
              showCancel: false,
              success: () => {
                uni.switchTab({
                  url: "/pages/user/profile"
                });
              }
            });
          } else {
            uni.showToast({
              title: error.message || "加载失败，请重试",
              icon: "none"
            });
          }
        }
      },
      // 保存修改
      async handleSave() {
        try {
          const userInfo = uni.getStorageSync("userInfo");
          if (!userInfo || !userInfo.id) {
            throw new Error("用户未登录");
          }
          const token = uni.getStorageSync("token");
          if (!token) {
            throw new Error("未找到登录凭证");
          }
          this.userInfo.id = userInfo.id;
          const res = await uni.request({
            url: `${this.$config.baseUrl}/user/updateUserInfo`,
            method: "POST",
            data: this.userInfo,
            header: {
              "Content-Type": "application/json",
              "Authorization": `Bearer ${token}`
            }
          });
          if (res.data.code === 200) {
            uni.showToast({
              title: "保存成功",
              icon: "success"
            });
            uni.setStorageSync("userInfo", {
              ...userInfo,
              ...this.userInfo
            });
          } else {
            throw new Error(res.data.message || "保存失败");
          }
        } catch (error) {
          formatAppLog("error", "at pages/basicInfo/basicInfo.vue:177", "保存失败:", error);
          uni.showToast({
            title: error.message || "保存失败，请重试",
            icon: "none"
          });
        }
      }
    }
  };
  function _sfc_render$1f(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("view", { class: "container" }, [
      vue$1.createCommentVNode(" 顶部背景 "),
      vue$1.createElementVNode("view", { class: "top-bg" }),
      vue$1.createCommentVNode(" 基本信息表单 "),
      vue$1.createElementVNode("view", { class: "form-container" }, [
        vue$1.createElementVNode("view", { class: "form-group" }, [
          vue$1.createElementVNode("text", { class: "label" }, "昵称"),
          vue$1.withDirectives(vue$1.createElementVNode(
            "input",
            {
              type: "nickname",
              class: "input",
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.userInfo.nickname = $event),
              placeholder: "请输入昵称",
              "aria-label": "昵称",
              tabindex: "0"
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue$1.vModelText, $data.userInfo.nickname]
          ])
        ]),
        vue$1.createElementVNode("view", { class: "form-group" }, [
          vue$1.createElementVNode("text", { class: "label" }, "姓名"),
          vue$1.withDirectives(vue$1.createElementVNode(
            "input",
            {
              type: "text",
              class: "input",
              "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.userInfo.username = $event),
              placeholder: "请输入用户名",
              "aria-label": "姓名",
              tabindex: "0"
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue$1.vModelText, $data.userInfo.username]
          ])
        ]),
        vue$1.createElementVNode("view", { class: "form-group" }, [
          vue$1.createElementVNode("text", { class: "label" }, "手机号"),
          vue$1.withDirectives(vue$1.createElementVNode(
            "input",
            {
              type: "number",
              class: "input",
              "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.userInfo.phone = $event),
              placeholder: "请输入手机号",
              "aria-label": "手机号",
              tabindex: "0"
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue$1.vModelText, $data.userInfo.phone]
          ])
        ]),
        vue$1.createElementVNode("view", { class: "form-group" }, [
          vue$1.createElementVNode("text", { class: "label" }, "常用地址"),
          vue$1.withDirectives(vue$1.createElementVNode(
            "input",
            {
              type: "text",
              class: "input",
              "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.userInfo.usualAddress = $event),
              placeholder: "请输入常用地址",
              "aria-label": "常用地址",
              tabindex: "0"
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue$1.vModelText, $data.userInfo.usualAddress]
          ])
        ])
      ]),
      vue$1.createCommentVNode(" 保存按钮 "),
      vue$1.createElementVNode("view", { class: "button-container" }, [
        vue$1.createElementVNode("button", {
          class: "save-btn",
          onClick: _cache[4] || (_cache[4] = (...args) => $options.handleSave && $options.handleSave(...args)),
          "aria-label": "保存基本信息",
          tabindex: "0"
        }, "保存修改")
      ])
    ]);
  }
  const PagesBasicInfoBasicInfo = /* @__PURE__ */ _export_sfc(_sfc_main$1g, [["render", _sfc_render$1f], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages/basicInfo/basicInfo.vue"]]);
  const TUICallKit$1 = requireNativePlugin("TencentCloud-TUICallKit");
  uni.$TUICallKit = TUICallKit$1;
  const _sfc_main$1f = {
    data() {
      return {
        isLogin: false,
        userID: "",
        isRequesting: false,
        wsConnection: null,
        roomId: null,
        heartbeatTimer: null,
        tuicallkitUserSig: "",
        tuicallkitSDKAppID: 1600094381
      };
    },
    onLoad() {
      const userInfo = uni.getStorageSync("userInfo");
      if (!userInfo || !userInfo.id) {
        uni.showToast({
          title: "请先登录",
          icon: "none"
        });
        setTimeout(() => {
          uni.navigateBack();
        }, 1500);
        return;
      }
      this.userID = userInfo.id.toString();
      this.loginToTUICallKit();
      this.initWebSocket();
    },
    onUnload() {
      if (this.wsConnection) {
        this.wsConnection.close();
      }
      if (this.heartbeatTimer) {
        clearInterval(this.heartbeatTimer);
      }
      if (uni.$TUICallKit) {
        uni.$TUICallKit.removeEventListener("onCallReceived");
        uni.$TUICallKit.removeEventListener("onCallAccepted");
        uni.$TUICallKit.removeEventListener("onCallRejected");
        uni.$TUICallKit.removeEventListener("onCallEnded");
        uni.$TUICallKit.removeEventListener("onCallTimeout");
        uni.$TUICallKit.removeEventListener("onError");
      }
    },
    methods: {
      initWebSocket() {
        const token = uni.getStorageSync("token");
        this.wsConnection = uni.connectSocket({
          url: `${config$3.baseUrl.replace("http", "ws")}/ws?token=${token}`,
          success: () => {
            formatAppLog("log", "at pages/video-call/caller.vue:75", "WebSocket连接成功");
            this.startHeartbeat();
          }
        });
        this.wsConnection.onMessage((res) => {
          const data = JSON.parse(res.data);
          formatAppLog("log", "at pages/video-call/caller.vue:84", "[WebSocket] 收到消息:", data);
          if (data.type === "CALL_ACCEPT") {
            if (!data.data || !data.data.callerId || !data.data.calleeId) {
              formatAppLog("error", "at pages/video-call/caller.vue:87", "[WebSocket] CALL_ACCEPT消息数据不完整:", data);
              return;
            }
            this.handleCallAccepted(data);
          } else {
            this.handleWebSocketMessage(data);
          }
        });
        this.wsConnection.onClose(() => {
          formatAppLog("log", "at pages/video-call/caller.vue:98", "WebSocket连接已关闭");
        });
      },
      startHeartbeat() {
        this.heartbeatTimer = setInterval(() => {
          if (this.wsConnection) {
            this.wsConnection.send({
              data: JSON.stringify({
                type: "HEARTBEAT"
              })
            });
          }
        }, 15e3);
      },
      handleWebSocketMessage(message) {
        formatAppLog("log", "at pages/video-call/caller.vue:117", "[WebSocket] 收到消息:", message);
        switch (message.type) {
          case "CALL_REQUEST":
            this.handleIncomingCall(message);
            break;
          case "CALL_ACCEPT":
            this.handleCallAccepted(message);
            break;
          case "CALL_REJECT":
            this.handleCallRejected(message);
            break;
          case "CALL_END":
            this.handleCallEnded(message);
            break;
          case "CALL_TIMEOUT":
            this.handleCallTimeout(message);
            break;
          case "ERROR":
            this.handleErrorMessage(message);
            break;
          default:
            formatAppLog("warn", "at pages/video-call/caller.vue:138", "[WebSocket] 未知消息类型:", message.type);
        }
      },
      async loginToTUICallKit() {
        const token = uni.getStorageSync("token");
        if (!token) {
          uni.showToast({ title: "请先登录", icon: "none" });
          return;
        }
        try {
          const res = await uni.request({
            url: `${config$3.baseUrl}/user/userSig`,
            method: "GET",
            header: { "Authorization": `Bearer ${token}` },
            data: { userID: "" }
          });
          if (res[1] && res[1].statusCode === 200 && res[1].data.code === 200 || res.statusCode === 200 && res.data.code === 200) {
            const data = res[1] ? res[1].data.data : res.data.data;
            const userSig = data.userSig;
            const userID = data.userId;
            if (!userSig || !userID) {
              throw new Error("UserSig或userID为空");
            }
            this.tuicallkitUserSig = userSig;
            this.userID = userID;
            const SDKAppID = this.tuicallkitSDKAppID;
            uni.$TUICallKit.login({
              SDKAppID,
              userID,
              userSig
            }, (loginRes) => {
              if (loginRes.code === 0) {
                this.isLogin = true;
                formatAppLog("log", "at pages/video-call/caller.vue:180", "[主叫方TUICallKit] 登录成功");
                this.setupTUICallKitListeners();
              } else {
                this.isLogin = false;
                formatAppLog("error", "at pages/video-call/caller.vue:184", "[主叫方TUICallKit] 登录失败:", loginRes.msg);
                uni.showToast({ title: "视频通话系统登录失败: " + loginRes.msg, icon: "none" });
              }
            });
          } else {
            this.isLogin = false;
            const errorMsg = res[1] ? res[1].data.message : res.data.message;
            formatAppLog("error", "at pages/video-call/caller.vue:191", "[主叫方TUICallKit] 获取UserSig失败:", errorMsg);
            uni.showToast({ title: "获取UserSig失败: " + errorMsg, icon: "none" });
          }
        } catch (err) {
          this.isLogin = false;
          formatAppLog("error", "at pages/video-call/caller.vue:196", "[主叫方TUICallKit] 获取UserSig异常:", err);
          uni.showToast({ title: "获取UserSig失败", icon: "none" });
        }
      },
      handleCall() {
        if (this.isRequesting)
          return;
        this.isRequesting = true;
        uni.request({
          url: `${config$3.baseUrl}/api/call/request`,
          method: "POST",
          header: {
            "Authorization": `Bearer ${uni.getStorageSync("token")}`
          },
          success: (res) => {
            if (res.statusCode === 200 && res.data.code === 200) {
              formatAppLog("log", "at pages/video-call/caller.vue:215", "通话请求已发送，等待志愿者接听");
            } else {
              this.isRequesting = false;
              uni.showToast({
                title: res.data.message || "发起通话请求失败",
                icon: "none"
              });
            }
          },
          fail: (err) => {
            this.isRequesting = false;
            formatAppLog("error", "at pages/video-call/caller.vue:226", "请求失败:", err);
            uni.showToast({
              title: "网络请求失败",
              icon: "none"
            });
          }
        });
      },
      handleIncomingCall(message) {
        formatAppLog("log", "at pages/video-call/caller.vue:236", "[TUICallKit] handleIncomingCall triggered with message:", message);
        uni.showModal({
          title: "收到通话请求",
          content: `用户 ${message.callerId} 请求与您通话`,
          confirmText: "接受",
          cancelText: "拒绝",
          success: (res) => {
            if (res.confirm) {
              this.acceptCall(message.roomId);
            } else {
              this.rejectCall(message.roomId);
            }
          }
        });
      },
      acceptCall(roomId) {
        uni.request({
          url: `${config$3.baseUrl}/api/call/accept`,
          method: "POST",
          header: {
            "Authorization": `Bearer ${uni.getStorageSync("token")}`,
            "Content-Type": "application/json"
          },
          data: {
            roomId
          },
          success: (res) => {
            if (res.statusCode === 200 && res.data.code === 200) {
              formatAppLog("log", "at pages/video-call/caller.vue:268", "已接受通话请求");
            } else {
              uni.showToast({
                title: res.data.message || "接受通话失败",
                icon: "none"
              });
            }
          }
        });
      },
      rejectCall(roomId) {
        uni.request({
          url: `${config$3.baseUrl}/api/call/reject`,
          method: "POST",
          header: {
            "Authorization": `Bearer ${uni.getStorageSync("token")}`,
            "Content-Type": "application/json"
          },
          data: {
            roomId
          },
          success: (res) => {
            if (res.statusCode === 200 && res.data.code === 200) {
              formatAppLog("log", "at pages/video-call/caller.vue:292", "已拒绝通话请求");
            } else {
              uni.showToast({
                title: res.data.message || "拒绝通话失败",
                icon: "none"
              });
            }
          }
        });
      },
      handleCallAccepted(message) {
        formatAppLog("log", "at pages/video-call/caller.vue:304", "[handleCallAccepted] 收到通话接受消息:", message);
        const data = message.data || {};
        const callerId = data.callerId || message.callerId;
        const calleeId = data.calleeId || message.calleeId;
        const roomId = data.roomId || message.roomId;
        const callerRole = data.callerRole || "视障用户";
        const calleeRole = data.calleeRole || "志愿者";
        formatAppLog("log", "at pages/video-call/caller.vue:314", "[handleCallAccepted] 用户信息:", {
          callerId,
          calleeId,
          roomId,
          callerRole,
          calleeRole
        });
        this.startCall(roomId, calleeId);
      },
      handleCallRejected(message) {
        this.isRequesting = false;
        uni.showToast({
          title: "志愿者拒绝了通话请求",
          icon: "none"
        });
      },
      handleCallEnded(message) {
        this.isRequesting = false;
        uni.$TUICallKit.hangup();
        uni.showToast({
          title: "通话已结束",
          icon: "none"
        });
      },
      handleCallTimeout(message) {
        this.isRequesting = false;
        uni.showToast({
          title: message.content || "通话请求超时",
          icon: "none"
        });
      },
      handleErrorMessage(message) {
        this.isRequesting = false;
        uni.showToast({
          title: message.content || "发生错误",
          icon: "none"
        });
      },
      startCall(roomId, remoteUserId) {
        try {
          const userIDList = [String(remoteUserId)];
          const callParams = {
            userIDList,
            callMediaType: 2,
            callParams: {
              strRoomID: String(roomId),
              timeout: 30
            }
          };
          uni.$TUICallKit.calls(callParams, (res) => {
            if (res.code !== 0) {
              this.isRequesting = false;
              formatAppLog("error", "at pages/video-call/caller.vue:375", "[TUICallKit] 通话启动失败:", res.msg);
              uni.showToast({
                title: "发起通话失败: " + (res.msg || res.code),
                icon: "none"
              });
            } else {
              formatAppLog("log", "at pages/video-call/caller.vue:381", "[TUICallKit] 通话启动成功");
            }
          });
        } catch (error) {
          formatAppLog("error", "at pages/video-call/caller.vue:385", "[TUICallKit] 通话错误:", error);
          this.isRequesting = false;
          uni.showToast({
            title: "发起通话失败: " + error.message,
            icon: "none"
          });
        }
      },
      // 设置TUICallKit事件监听
      setupTUICallKitListeners() {
        uni.$TUICallKit.addEventListener("onCallReceived", (event) => {
          formatAppLog("log", "at pages/video-call/caller.vue:398", "[主叫方TUICallKit] 收到通话邀请");
        });
        uni.$TUICallKit.addEventListener("onCallAccepted", (event) => {
          formatAppLog("log", "at pages/video-call/caller.vue:403", "[主叫方TUICallKit] 通话被接受");
        });
        uni.$TUICallKit.addEventListener("onCallRejected", (event) => {
          formatAppLog("log", "at pages/video-call/caller.vue:408", "[主叫方TUICallKit] 通话被拒绝");
          this.isRequesting = false;
          uni.showToast({ title: "通话被拒绝", icon: "none" });
        });
        uni.$TUICallKit.addEventListener("onCallEnded", (event) => {
          formatAppLog("log", "at pages/video-call/caller.vue:415", "[主叫方TUICallKit] 通话结束");
          this.isRequesting = false;
          uni.showToast({ title: "通话已结束", icon: "none" });
        });
        uni.$TUICallKit.addEventListener("onCallTimeout", (event) => {
          formatAppLog("log", "at pages/video-call/caller.vue:422", "[主叫方TUICallKit] 通话超时");
          this.isRequesting = false;
          uni.showToast({ title: "通话请求超时", icon: "none" });
        });
        uni.$TUICallKit.addEventListener("onError", (event) => {
          formatAppLog("error", "at pages/video-call/caller.vue:429", "[主叫方TUICallKit] 发生错误:", event.code);
          this.isRequesting = false;
          uni.showToast({ title: "通话系统错误: " + event.code, icon: "none" });
        });
      }
    }
  };
  function _sfc_render$1e(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("view", { class: "container" }, [
      !$data.isLogin ? (vue$1.openBlock(), vue$1.createElementBlock("text", { key: 0 }, "正在登录视频通话系统...")) : vue$1.createCommentVNode("v-if", true),
      $data.isLogin ? (vue$1.openBlock(), vue$1.createElementBlock(
        "text",
        { key: 1 },
        "已登录志愿者协助系统，用户ID: " + vue$1.toDisplayString($data.userID),
        1
        /* TEXT */
      )) : vue$1.createCommentVNode("v-if", true),
      $data.isLogin ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
        key: 2,
        class: "call-section"
      }, [
        vue$1.createElementVNode("button", {
          onClick: _cache[0] || (_cache[0] = (...args) => $options.handleCall && $options.handleCall(...args)),
          disabled: $data.isRequesting,
          "aria-label": "点击开始寻找帮助",
          tabindex: "0"
        }, vue$1.toDisplayString($data.isRequesting ? "正在寻找在线志愿者..." : "点击开始寻找帮助"), 9, ["disabled"]),
        $data.isRequesting ? (vue$1.openBlock(), vue$1.createElementBlock("text", {
          key: 0,
          class: "hint-text",
          "aria-label": "请稍候，系统正在为您匹配在线志愿者"
        }, "请稍候，系统正在为您匹配在线志愿者...")) : vue$1.createCommentVNode("v-if", true)
      ])) : vue$1.createCommentVNode("v-if", true)
    ]);
  }
  const PagesVideoCallCaller = /* @__PURE__ */ _export_sfc(_sfc_main$1f, [["render", _sfc_render$1e], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages/video-call/caller.vue"]]);
  const TUICallKit = requireNativePlugin("TencentCloud-TUICallKit");
  uni.$TUICallKit = TUICallKit;
  const _sfc_main$1e = {
    data() {
      return {
        isLogin: false,
        userID: "",
        isRequesting: false,
        wsConnection: null,
        roomId: null,
        heartbeatTimer: null,
        boardingStation: "",
        exit: "",
        travelTime: ""
      };
    },
    onLoad() {
      const userInfo = uni.getStorageSync("userInfo");
      if (!userInfo || !userInfo.id) {
        uni.showToast({
          title: "请先登录",
          icon: "none"
        });
        setTimeout(() => {
          uni.navigateBack();
        }, 1500);
        return;
      }
      this.userID = userInfo.id.toString();
      this.loginToTUICallKit();
      this.initWebSocket();
    },
    onUnload() {
      if (this.wsConnection) {
        this.wsConnection.close();
      }
      if (this.heartbeatTimer) {
        clearInterval(this.heartbeatTimer);
      }
    },
    methods: {
      initWebSocket() {
        const token = uni.getStorageSync("token");
        this.wsConnection = uni.connectSocket({
          url: `${config$3.baseUrl.replace("http", "ws")}/ws?token=${token}`,
          success: () => {
            formatAppLog("log", "at pages/travel/travel-appointment/travel-appointment.vue:81", "WebSocket连接成功");
            this.startHeartbeat();
          }
        });
        this.wsConnection.onMessage((res) => {
          const data = JSON.parse(res.data);
          this.handleWebSocketMessage(data);
        });
        this.wsConnection.onClose(() => {
          formatAppLog("log", "at pages/travel/travel-appointment/travel-appointment.vue:92", "WebSocket连接已关闭");
        });
      },
      startHeartbeat() {
        this.heartbeatTimer = setInterval(() => {
          if (this.wsConnection) {
            this.wsConnection.send({
              data: JSON.stringify({
                type: "HEARTBEAT"
              })
            });
          }
        }, 15e3);
      },
      handleWebSocketMessage(message) {
        switch (message.type) {
          case "CALL_REQUEST":
            this.handleIncomingCall(message);
            break;
          case "CALL_ACCEPT":
            this.handleCallAccepted(message);
            break;
          case "CALL_REJECT":
            this.handleCallRejected(message);
            break;
          case "CALL_END":
            this.handleCallEnded(message);
            break;
          case "CALL_TIMEOUT":
            this.handleCallTimeout(message);
            break;
          case "ERROR":
            this.handleErrorMessage(message);
            break;
        }
      },
      loginToTUICallKit() {
        uni.request({
          url: `${config$3.baseUrl}/user/userSig`,
          method: "GET",
          data: {
            userID: this.userID
          },
          success: (res) => {
            formatAppLog("log", "at pages/travel/travel-appointment/travel-appointment.vue:139", "[TUICallKit] 获取UserSig响应数据:", JSON.stringify(res.data, null, 2));
            if (res.statusCode === 200 && res.data.code === 200) {
              const { userSig } = res.data.data;
              const SDKAppID = 1600089018;
              formatAppLog("log", "at pages/travel/travel-appointment/travel-appointment.vue:143", "[TUICallKit] 解析后的UserSig信息:", {
                userSig,
                SDKAppID,
                userID: this.userID
              });
              const loginParams = {
                SDKAppID,
                userID: this.userID,
                userSig
              };
              uni.$TUICallKit.login(loginParams, (res2) => {
                if (res2.code === 0) {
                  this.isLogin = true;
                  formatAppLog("log", "at pages/travel/travel-appointment/travel-appointment.vue:157", "[TUICallKit] login success");
                } else {
                  formatAppLog("error", "at pages/travel/travel-appointment/travel-appointment.vue:159", "[TUICallKit] TUICallKit login failed:", res2.msg);
                  uni.showToast({
                    title: "语音通话系统登录失败",
                    icon: "none"
                  });
                }
              });
            } else {
              formatAppLog("error", "at pages/travel/travel-appointment/travel-appointment.vue:167", "[TUICallKit] Failed to get userSig. Status Code:", res.statusCode);
              formatAppLog("error", "at pages/travel/travel-appointment/travel-appointment.vue:168", "[TUICallKit] Failed to get userSig. Response Data:", res.data);
              formatAppLog("error", "at pages/travel/travel-appointment/travel-appointment.vue:169", "[TUICallKit] Failed to get userSig. Message:", res.data.message || res.data.msg || "未知错误");
              uni.showToast({
                title: res.data.message || res.data.msg || "获取语音通话凭证失败",
                icon: "none"
              });
            }
          },
          fail: (err) => {
            formatAppLog("error", "at pages/travel/travel-appointment/travel-appointment.vue:177", "[TUICallKit] Network error:", err);
            uni.showToast({
              title: "网络请求失败",
              icon: "none"
            });
          }
        });
      },
      handleVoiceCall() {
        if (this.isRequesting)
          return;
        if (!this.boardingStation || !this.exit || !this.travelTime) {
          uni.showToast({
            title: "请填写完整的乘车信息",
            icon: "none"
          });
          return;
        }
        this.isRequesting = true;
        uni.request({
          url: `${config$3.baseUrl}/api/call/request`,
          method: "POST",
          header: {
            "Authorization": `Bearer ${uni.getStorageSync("token")}`
          },
          data: {
            // 可以考虑将乘车信息也发送给后端
            // 例如：details: `乘车站点：${this.boardingStation}, 出入口：${this.exit}, 乘车时间：${this.travelTime}`
          },
          success: (res) => {
            if (res.statusCode === 200 && res.data.code === 200) {
              formatAppLog("log", "at pages/travel/travel-appointment/travel-appointment.vue:211", "语音通话请求已发送，等待志愿者接听");
            } else {
              this.isRequesting = false;
              uni.showToast({
                title: res.data.message || "发起语音通话请求失败",
                icon: "none"
              });
            }
          },
          fail: (err) => {
            this.isRequesting = false;
            formatAppLog("error", "at pages/travel/travel-appointment/travel-appointment.vue:222", "请求失败:", err);
            uni.showToast({
              title: "网络请求失败",
              icon: "none"
            });
          }
        });
      },
      handleIncomingCall(message) {
        uni.showModal({
          title: "收到通话请求",
          content: `用户 ${message.callerId} 请求与您通话`,
          confirmText: "接受",
          cancelText: "拒绝",
          success: (res) => {
            if (res.confirm) {
              this.acceptCall(message.roomId);
            } else {
              this.rejectCall(message.roomId);
            }
          }
        });
      },
      acceptCall(roomId) {
        uni.request({
          url: `${config$3.baseUrl}/api/call/accept`,
          method: "POST",
          header: {
            "Authorization": `Bearer ${uni.getStorageSync("token")}`,
            "Content-Type": "application/json"
          },
          data: {
            roomId
          },
          success: (res) => {
            if (res.statusCode === 200 && res.data.code === 200) {
              formatAppLog("log", "at pages/travel/travel-appointment/travel-appointment.vue:260", "已接受通话请求");
            } else {
              uni.showToast({
                title: res.data.message || "接受通话失败",
                icon: "none"
              });
            }
          }
        });
      },
      rejectCall(roomId) {
        uni.request({
          url: `${config$3.baseUrl}/api/call/reject`,
          method: "POST",
          header: {
            "Authorization": `Bearer ${uni.getStorageSync("token")}`,
            "Content-Type": "application/json"
          },
          data: {
            roomId
          },
          success: (res) => {
            if (res.statusCode === 200 && res.data.code === 200) {
              formatAppLog("log", "at pages/travel/travel-appointment/travel-appointment.vue:284", "已拒绝通话请求");
            } else {
              uni.showToast({
                title: res.data.message || "拒绝通话失败",
                icon: "none"
              });
            }
          }
        });
      },
      handleCallAccepted(message) {
        this.startCall(message.roomId, message.calleeId);
      },
      handleCallRejected(message) {
        this.isRequesting = false;
        uni.showToast({
          title: "志愿者拒绝了通话请求",
          icon: "none"
        });
      },
      handleCallEnded(message) {
        this.isRequesting = false;
        uni.$TUICallKit.hangup();
        uni.showToast({
          title: "通话已结束",
          icon: "none"
        });
      },
      handleCallTimeout(message) {
        this.isRequesting = false;
        uni.showToast({
          title: message.content || "通话请求超时",
          icon: "none"
        });
      },
      handleErrorMessage(message) {
        this.isRequesting = false;
        uni.showToast({
          title: message.content || "发生错误",
          icon: "none"
        });
      },
      startCall(roomId, calleeId) {
        try {
          const callParams = {
            userIDList: [calleeId],
            callMediaType: 1,
            // 语音通话
            callParams: {
              roomID: parseInt(roomId),
              strRoomID: roomId,
              timeout: 30
            }
          };
          uni.$TUICallKit.calls(callParams, (res) => {
            formatAppLog("log", "at pages/travel/travel-appointment/travel-appointment.vue:345", "[TUICallKit] 通话参数:", JSON.stringify(res));
            if (res.code !== 0) {
              this.isRequesting = false;
              uni.showToast({
                title: "发起语音通话失败",
                icon: "none"
              });
            }
          });
        } catch (error) {
          formatAppLog("error", "at pages/travel/travel-appointment/travel-appointment.vue:355", "[TUICallKit] 通话错误:", error);
          this.isRequesting = false;
          uni.showToast({
            title: "发起语音通话失败",
            icon: "none"
          });
        }
      }
    }
  };
  function _sfc_render$1d(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("view", { class: "container" }, [
      !$data.isLogin ? (vue$1.openBlock(), vue$1.createElementBlock("text", {
        key: 0,
        "aria-label": "正在登录语音通话系统"
      }, "正在登录语音通话系统...")) : (vue$1.openBlock(), vue$1.createElementBlock(
        "text",
        {
          key: 1,
          "aria-label": "已登录语音通话系统，用户ID：{{ userID }}"
        },
        "已登录语音通话系统，用户ID: " + vue$1.toDisplayString($data.userID),
        1
        /* TEXT */
      )),
      vue$1.createElementVNode("view", { class: "input-section" }, [
        vue$1.createElementVNode("view", { class: "input-item" }, [
          vue$1.createElementVNode("text", { class: "label" }, "乘车站点:"),
          vue$1.withDirectives(vue$1.createElementVNode(
            "input",
            {
              class: "input",
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.boardingStation = $event),
              placeholder: "请输入乘车站点",
              "aria-label": "请输入乘车站点",
              tabindex: "0"
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue$1.vModelText, $data.boardingStation]
          ])
        ]),
        vue$1.createElementVNode("view", { class: "input-item" }, [
          vue$1.createElementVNode("text", { class: "label" }, "出入口:"),
          vue$1.withDirectives(vue$1.createElementVNode(
            "input",
            {
              class: "input",
              "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.exit = $event),
              placeholder: "请输入出入口信息",
              "aria-label": "请输入出入口信息",
              tabindex: "0"
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue$1.vModelText, $data.exit]
          ])
        ]),
        vue$1.createElementVNode("view", { class: "input-item" }, [
          vue$1.createElementVNode("text", { class: "label" }, "乘车时间:"),
          vue$1.withDirectives(vue$1.createElementVNode(
            "input",
            {
              class: "input",
              "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.travelTime = $event),
              placeholder: "请输入乘车时间 (例如：HH:mm)",
              "aria-label": "请输入乘车时间，例如几点几分",
              tabindex: "0"
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue$1.vModelText, $data.travelTime]
          ])
        ])
      ]),
      $data.isLogin ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
        key: 2,
        class: "call-section"
      }, [
        vue$1.createElementVNode("button", {
          onClick: _cache[3] || (_cache[3] = (...args) => $options.handleVoiceCall && $options.handleVoiceCall(...args)),
          disabled: $data.isRequesting,
          "aria-label": "{{ isRequesting ? '正在寻找在线志愿者' : '开始语音通话' }}",
          tabindex: "0"
        }, vue$1.toDisplayString($data.isRequesting ? "正在寻找在线志愿者..." : "开始语音通话"), 9, ["disabled"]),
        $data.isRequesting ? (vue$1.openBlock(), vue$1.createElementBlock("text", {
          key: 0,
          class: "hint-text",
          "aria-label": "请稍候，系统正在为您匹配在线志愿者"
        }, "请稍候，系统正在为您匹配在线志愿者...")) : vue$1.createCommentVNode("v-if", true)
      ])) : vue$1.createCommentVNode("v-if", true)
    ]);
  }
  const PagesTravelTravelAppointmentTravelAppointment = /* @__PURE__ */ _export_sfc(_sfc_main$1e, [["render", _sfc_render$1d], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages/travel/travel-appointment/travel-appointment.vue"]]);
  const _sfc_main$1d = {
    data() {
      return {
        stats: {
          userCount: 0,
          policyCount: 0,
          faqCount: 0,
          feedbackCount: 0
        },
        recentActivities: [],
        regions: ["全国", "北京", "上海", "广州", "深圳"],
        currentRegion: "全国",
        leftColumn: [],
        rightColumn: [],
        page: 1,
        pageSize: 10,
        loading: false,
        hasMore: true,
        error: false,
        searchTitle: "",
        // 收藏状态缓存，key为政策id，value为true/false
        favoriteMap: {},
        showPolicyForm: false,
        editingPolicy: null,
        policyForm: {
          title: "",
          publishDate: "",
          policyLevel: "",
          tags: "",
          content: "",
          attachmentUrl: ""
        },
        activeManagementSection: null,
        // 控制当前显示的管理模块: 'policy' 或 'user'
        // 用户管理相关数据
        userList: [],
        userPage: 1,
        userPageSize: 10,
        userLoading: false,
        userHasMore: true,
        userError: false,
        searchUserEmail: "",
        searchUserRole: "",
        searchUserStatus: null,
        // null表示所有状态
        userRoles: ["所有角色", "普通用户", "管理员"],
        // 用于picker选择
        userStatuses: ["所有状态", "启用", "禁用"],
        // 用于picker选择
        showUserForm: false,
        editingUser: null,
        userForm: {
          id: null,
          email: "",
          nickname: "",
          password: "",
          role: "",
          status: null
        },
        // FAQ管理相关
        faqList: [],
        faqPage: 1,
        faqPageSize: 10,
        faqLoading: false,
        faqHasMore: true,
        searchFaqQuestion: "",
        showFaqForm: false,
        editingFaq: null,
        faqForm: {
          id: null,
          question: "",
          answer: ""
        },
        // 用户反馈管理相关
        feedbackList: [],
        feedbackPage: 1,
        feedbackPageSize: 10,
        feedbackLoading: false,
        feedbackHasMore: true,
        searchFeedbackUserId: "",
        searchFeedbackStartTime: "",
        searchFeedbackEndTime: "",
        showFeedbackDetail: false,
        feedbackDetail: {}
      };
    },
    computed: {
      policiesToDisplay() {
        return this.leftColumn.concat(this.rightColumn);
      }
    },
    onLoad() {
      this.checkTokenValidity();
      this.loadStats();
      this.loadRecentActivities();
    },
    methods: {
      // 检查token有效性
      checkTokenValidity() {
        const token = uni.getStorageSync("token");
        formatAppLog("log", "at pages/admin/index.vue:350", "页面加载 - 当前token:", token);
        if (!token) {
          formatAppLog("warn", "at pages/admin/index.vue:352", "页面加载 - 未找到token");
          uni.showToast({ title: "请先登录", icon: "none" });
          return false;
        }
        if (!token.includes(".") || token.split(".").length !== 3) {
          formatAppLog("warn", "at pages/admin/index.vue:361", "页面加载 - token格式无效");
          uni.showToast({ title: "登录凭证无效，请重新登录", icon: "none" });
          uni.removeStorageSync("token");
          return false;
        }
        formatAppLog("log", "at pages/admin/index.vue:367", "页面加载 - token验证通过");
        return true;
      },
      async loadStats() {
        try {
          const token = uni.getStorageSync("token");
          if (!token) {
            uni.showToast({ title: "请先登录", icon: "none" });
            return;
          }
          const userRes = await uni.request({
            url: `${this.$config.baseUrl}/user/manage/page`,
            method: "GET",
            data: { pageNum: 1, pageSize: 1 },
            header: { "Authorization": `Bearer ${token}` }
          });
          const userCount = userRes.data.data.total || 0;
          formatAppLog("log", "at pages/admin/index.vue:385", "userRes", userRes.data);
          const policyRes = await uni.request({
            url: `${this.$config.baseUrl}/policy/page`,
            method: "GET",
            data: { pageNum: 1, pageSize: 1 },
            header: { "Authorization": `Bearer ${token}` }
          });
          const policyCount = policyRes.data.data.total || 0;
          formatAppLog("log", "at pages/admin/index.vue:394", "policyRes", policyRes.data);
          const faqRes = await uni.request({
            url: `${this.$config.baseUrl}/faq/page`,
            method: "GET",
            data: { pageNum: 1, pageSize: 1 },
            header: { "Authorization": `Bearer ${token}` }
          });
          const faqCount = faqRes.data.data.total || 0;
          formatAppLog("log", "at pages/admin/index.vue:403", "faqRes", faqRes.data);
          const feedbackRes = await uni.request({
            url: `${this.$config.baseUrl}/user/manage/feedback/page`,
            method: "GET",
            data: { pageNum: 1, pageSize: 1 },
            header: { "Authorization": `Bearer ${token}` }
          });
          const feedbackCount = feedbackRes.data.data.total || 0;
          formatAppLog("log", "at pages/admin/index.vue:412", "feedbackRes", feedbackRes.data);
          this.stats = {
            userCount,
            policyCount,
            faqCount,
            feedbackCount
          };
        } catch (error) {
          uni.showToast({ title: "获取统计数据失败", icon: "none" });
        }
      },
      async loadRecentActivities() {
        try {
          this.recentActivities = [];
        } catch (error) {
          uni.showToast({
            title: "获取活动记录失败",
            icon: "none"
          });
        }
      },
      async loadPolicies(reset = false) {
        const token = uni.getStorageSync("token");
        if (!token) {
          uni.showToast({ title: "请先登录", icon: "none" });
          return;
        }
        if (this.loading || !this.hasMore && !reset)
          return;
        if (reset) {
          this.leftColumn = [];
          this.rightColumn = [];
          this.page = 1;
          this.hasMore = true;
          this.error = false;
        }
        this.loading = true;
        this.error = false;
        try {
          const params = {
            pageNum: this.page,
            pageSize: this.pageSize
          };
          if (this.currentRegion && this.currentRegion !== "全国") {
            params.policyLevel = this.currentRegion;
          }
          if (this.searchTitle) {
            params.title = this.searchTitle;
          }
          const res = await uni.request({
            url: `${this.$config.baseUrl}/policy/page`,
            method: "GET",
            data: params,
            header: { "Authorization": `Bearer ${token}` }
          });
          if (res.data.code !== 200)
            throw new Error(res.data.message || "接口错误");
          const newPolicies = res.data.data.records || [];
          formatAppLog("log", "at pages/admin/index.vue:477", "加载的政策数据:", newPolicies);
          if (newPolicies.length === 0) {
            this.hasMore = false;
            return;
          }
          newPolicies.forEach((policy) => {
            const card = { ...policy, loaded: true };
            this.leftColumn.push(card);
          });
          this.hasMore = newPolicies.length === this.pageSize;
          this.page++;
        } catch (error) {
          this.error = true;
          formatAppLog("error", "at pages/admin/index.vue:498", "加载数据失败:", error);
        } finally {
          this.loading = false;
        }
      },
      // fetchFavoriteStatus 和 toggleFavorite 在管理后台不再需要，可以考虑移除或调整
      async fetchFavoriteStatus(policyId) {
        try {
          const token = uni.getStorageSync("token");
          if (!token)
            return;
          const res = await uni.request({
            url: `${this.$config.baseUrl}/policy/favorite/${policyId}`,
            method: "GET",
            header: { "Authorization": `Bearer ${token}` }
          });
          if (res.data.code === 200) {
            this.$set(this.favoriteMap, policyId, !!res.data.data);
          }
        } catch (e2) {
        }
      },
      async toggleFavorite(policyId) {
        const isFav = this.favoriteMap[policyId];
        const token = uni.getStorageSync("token");
        if (!token) {
          uni.showToast({ title: "请先登录", icon: "none" });
          return;
        }
        try {
          if (isFav) {
            await uni.request({
              url: `${this.$config.baseUrl}/policy/favorite/${policyId}`,
              method: "DELETE",
              header: { "Authorization": `Bearer ${token}` }
            });
            this.$set(this.favoriteMap, policyId, false);
            uni.showToast({ title: "已取消收藏", icon: "none" });
          } else {
            await uni.request({
              url: `${this.$config.baseUrl}/policy/favorite/${policyId}`,
              method: "POST",
              header: { "Authorization": `Bearer ${token}` }
            });
            this.$set(this.favoriteMap, policyId, true);
            uni.showToast({ title: "已收藏", icon: "none" });
          }
        } catch (e2) {
          uni.showToast({ title: "操作失败", icon: "none" });
        }
      },
      onRegionChange(e2) {
        this.currentRegion = this.regions[e2.detail.value];
        this.loadPolicies(true);
      },
      onSearch() {
        this.loadPolicies(true);
      },
      onImageLoad(id) {
        const updateColumn = (column) => {
          const index = column.findIndex((item) => item.id === id);
          if (index !== -1)
            column[index].loaded = true;
        };
        updateColumn(this.leftColumn);
        updateColumn(this.rightColumn);
      },
      navigateToDetail(id) {
        uni.navigateTo({ url: `/pages/policy/detail?id=${id}` });
      },
      formatDate(timestamp) {
        if (!timestamp)
          return "";
        const date2 = new Date(timestamp);
        return date2.toISOString().split("T")[0];
      },
      formatViews(views) {
        return views >= 1e4 ? `${(views / 1e4).toFixed(1)}万` : views;
      },
      navigateTo(url2) {
        uni.navigateTo({
          url: url2
        });
      },
      onDateChange(e2) {
        this.policyForm.publishDate = e2.detail.value;
      },
      openPolicyForm(policy = null) {
        this.showPolicyForm = true;
        if (policy) {
          formatAppLog("log", "at pages/admin/index.vue:592", "编辑政策数据:", policy);
          this.editingPolicy = policy;
          this.policyForm = {
            id: policy.id,
            title: policy.title || "",
            publishDate: this.formatDateForPicker(policy.publishDate),
            // 确保日期格式正确
            policyLevel: policy.policyLevel || "",
            tags: Array.isArray(policy.tags) ? policy.tags.join(",") : policy.tags || "",
            // 标签数组转字符串，兼容非数组情况
            content: policy.content || "",
            attachmentUrl: policy.attachmentUrl || ""
          };
          formatAppLog("log", "at pages/admin/index.vue:604", "填充后的表单数据:", this.policyForm);
        } else {
          this.editingPolicy = null;
          this.policyForm = {
            title: "",
            publishDate: "",
            policyLevel: "",
            tags: "",
            content: "",
            attachmentUrl: ""
          };
        }
      },
      closePolicyForm() {
        this.showPolicyForm = false;
        this.editingPolicy = null;
        this.policyForm = {
          title: "",
          publishDate: "",
          policyLevel: "",
          tags: "",
          content: "",
          attachmentUrl: ""
        };
      },
      async submitPolicyForm() {
        const token = uni.getStorageSync("token");
        if (!token) {
          uni.showToast({ title: "请先登录", icon: "none" });
          return;
        }
        if (!this.policyForm.title || !this.policyForm.publishDate || !this.policyForm.policyLevel || !this.policyForm.content) {
          uni.showToast({ title: "请填写所有必填项 (标题、发布日期、级别、内容)", icon: "none" });
          return;
        }
        uni.showLoading({ title: "提交中..." });
        try {
          const url2 = this.editingPolicy ? `${this.$config.baseUrl}/policy/update/${this.editingPolicy.id}` : `${this.$config.baseUrl}/policy`;
          const method2 = this.editingPolicy ? "PUT" : "POST";
          let tags = this.policyForm.tags;
          if (typeof tags === "string" && tags.trim()) {
            tags = tags.split(",").map((tag) => tag.trim()).filter(Boolean);
          } else if (!Array.isArray(tags)) {
            tags = [];
          }
          const requestData = {
            title: this.policyForm.title,
            // 注意：publishDate需要是后端期望的LocalDate格式，例如"YYYY-MM-DD"
            publishDate: this.policyForm.publishDate,
            policyLevel: this.policyForm.policyLevel,
            tags,
            content: this.policyForm.content,
            attachmentUrl: this.policyForm.attachmentUrl || null
          };
          formatAppLog("log", "at pages/admin/index.vue:667", "提交的政策数据:", requestData);
          const res = await uni.request({
            url: url2,
            method: method2,
            data: requestData,
            header: {
              "Authorization": `Bearer ${token}`,
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/admin/index.vue:679", "提交响应:", res.data);
          if (res.data.code === 200) {
            uni.showToast({ title: this.editingPolicy ? "政策更新成功" : "政策创建成功", icon: "success" });
            this.closePolicyForm();
            this.loadPolicies(true);
          } else {
            throw new Error(res.data.message || "操作失败");
          }
        } catch (error) {
          formatAppLog("error", "at pages/admin/index.vue:689", "政策提交失败:", error);
          uni.showToast({ title: error.message || "提交失败", icon: "none" });
        } finally {
          uni.hideLoading();
        }
      },
      deletePolicy(id) {
        const token = uni.getStorageSync("token");
        if (!token) {
          uni.showToast({ title: "请先登录", icon: "none" });
          return;
        }
        uni.showModal({
          title: "确认删除",
          content: "确定要删除这条政策吗？",
          success: async (res) => {
            if (res.confirm) {
              uni.showLoading({ title: "删除中..." });
              try {
                const res2 = await uni.request({
                  url: `${this.$config.baseUrl}/policy/delete/${id}`,
                  method: "DELETE",
                  header: { "Authorization": `Bearer ${token}` }
                });
                if (res2.data.code === 200) {
                  uni.showToast({ title: "删除成功", icon: "success" });
                  this.loadPolicies(true);
                } else {
                  throw new Error(res2.data.message || "删除失败");
                }
              } catch (error) {
                formatAppLog("error", "at pages/admin/index.vue:721", "政策删除失败:", error);
                uni.showToast({ title: error.message || "删除失败", icon: "none" });
              } finally {
                uni.hideLoading();
              }
            }
          }
        });
      },
      // 新增方法：切换管理模块显示
      toggleManagementSection(section) {
        if (this.activeManagementSection === section) {
          this.activeManagementSection = null;
        } else {
          this.activeManagementSection = section;
          if (section === "policy") {
            this.loadPolicies(true);
          } else if (section === "user") {
            this.loadUsers(true);
          } else if (section === "faq") {
            this.loadFaqs(true);
          } else if (section === "feedback") {
            this.loadFeedbacks(true);
          }
        }
      },
      // 用户管理相关方法
      async loadUsers(reset = false) {
        const token = uni.getStorageSync("token");
        if (!token) {
          uni.showToast({ title: "请先登录才能管理用户", icon: "none" });
          this.userError = true;
          this.userHasMore = false;
          return;
        }
        if (this.userLoading || !this.userHasMore && !reset)
          return;
        if (reset) {
          this.userList = [];
          this.userPage = 1;
          this.userHasMore = true;
          this.userError = false;
        }
        this.userLoading = true;
        this.userError = false;
        try {
          const params = {
            pageNum: this.userPage,
            pageSize: this.userPageSize
          };
          if (this.searchUserEmail) {
            params.email = this.searchUserEmail;
          }
          if (this.searchUserRole && this.searchUserRole !== "所有角色") {
            params.role = this.searchUserRole;
          }
          if (this.searchUserStatus !== null && this.searchUserStatus !== "所有状态") {
            params.status = this.mapUserStatusToNumber(this.searchUserStatus);
          }
          const res = await uni.request({
            url: `${this.$config.baseUrl}/user/manage/page`,
            method: "GET",
            data: params,
            header: { "Authorization": `Bearer ${token}` }
          });
          if (res.data.code !== 200)
            throw new Error(res.data.message || "接口错误");
          const newUsers = res.data.data.records || [];
          if (newUsers.length === 0) {
            this.userHasMore = false;
            return;
          }
          this.userList = this.userList.concat(newUsers);
          this.userHasMore = newUsers.length === this.userPageSize;
          this.userPage++;
        } catch (error) {
          this.userError = true;
          formatAppLog("error", "at pages/admin/index.vue:804", "加载用户数据失败:", error);
          uni.showToast({ title: error.message || "加载用户失败", icon: "none" });
        } finally {
          this.userLoading = false;
        }
      },
      onUserRoleChange(e2) {
        this.searchUserRole = this.userRoles[e2.detail.value];
        this.loadUsers(true);
      },
      onUserStatusChange(e2) {
        this.searchUserStatus = this.userStatuses[e2.detail.value];
        this.loadUsers(true);
      },
      formatUserStatus(status) {
        if (status === 0 || status === "禁用")
          return "禁用";
        if (status === 1 || status === "启用")
          return "启用";
        return "所有状态";
      },
      mapUserStatusToNumber(statusText) {
        if (statusText === "启用")
          return 1;
        if (statusText === "禁用")
          return 0;
        return null;
      },
      openUserForm(user = null) {
        this.showUserForm = true;
        if (user) {
          this.editingUser = user;
          this.userForm = {
            id: user.id,
            email: user.email,
            nickname: user.nickname || "",
            password: "",
            // 不回显密码
            role: user.role,
            status: user.status
          };
        } else {
          this.editingUser = null;
          this.userForm = {
            id: null,
            email: "",
            nickname: "",
            password: "",
            role: "",
            status: null
          };
        }
      },
      closeUserForm() {
        this.showUserForm = false;
        this.editingUser = null;
        this.userForm = {
          id: null,
          email: "",
          nickname: "",
          password: "",
          role: "",
          status: null
        };
      },
      onUserFormRoleChange(e2) {
        this.userForm.role = this.userRoles[e2.detail.value];
        if (this.userForm.role === "所有角色")
          this.userForm.role = "";
      },
      onUserFormStatusChange(e2) {
        const selectedStatusText = this.userStatuses[e2.detail.value];
        this.userForm.status = this.mapUserStatusToNumber(selectedStatusText);
      },
      async submitUserForm() {
        const token = uni.getStorageSync("token");
        if (!token) {
          uni.showToast({ title: "请先登录", icon: "none" });
          return;
        }
        if (!this.userForm.email || !this.userForm.role || this.userForm.status === null) {
          uni.showToast({ title: "请填写用户邮箱、角色和状态", icon: "none" });
          return;
        }
        if (!this.editingUser && !this.userForm.password) {
          uni.showToast({ title: "新建用户时密码不能为空", icon: "none" });
          return;
        }
        uni.showLoading({ title: "提交中..." });
        try {
          const url2 = this.editingUser ? `${this.$config.baseUrl}/user/manage/${this.editingUser.id}` : `${this.$config.baseUrl}/user/manage`;
          const method2 = this.editingUser ? "PUT" : "POST";
          const requestData = {
            email: this.userForm.email,
            nickname: this.userForm.nickname || null,
            role: this.userForm.role,
            status: this.userForm.status
          };
          if (!this.editingUser && this.userForm.password) {
            requestData.password = this.userForm.password;
          }
          const res = await uni.request({
            url: url2,
            method: method2,
            data: requestData,
            header: {
              "Authorization": `Bearer ${token}`,
              "Content-Type": "application/json"
            }
          });
          if (res.data.code === 200) {
            uni.showToast({ title: this.editingUser ? "用户更新成功" : "用户创建成功", icon: "success" });
            this.closeUserForm();
            this.loadUsers(true);
          } else {
            throw new Error(res.data.message || "操作失败");
          }
        } catch (error) {
          formatAppLog("error", "at pages/admin/index.vue:925", "用户提交失败:", error);
          uni.showToast({ title: error.message || "提交失败", icon: "none" });
        } finally {
          uni.hideLoading();
        }
      },
      async deleteUser(id) {
        const token = uni.getStorageSync("token");
        if (!token) {
          uni.showToast({ title: "请先登录", icon: "none" });
          return;
        }
        uni.showModal({
          title: "确认删除",
          content: "确定要删除该用户吗？",
          success: async (res) => {
            if (res.confirm) {
              uni.showLoading({ title: "删除中..." });
              try {
                const res2 = await uni.request({
                  url: `${this.$config.baseUrl}/user/manage/${id}`,
                  method: "DELETE",
                  header: { "Authorization": `Bearer ${token}` }
                });
                if (res2.data.code === 200) {
                  uni.showToast({ title: "删除成功", icon: "success" });
                  this.loadUsers(true);
                } else {
                  throw new Error(res2.data.message || "删除失败");
                }
              } catch (error) {
                formatAppLog("error", "at pages/admin/index.vue:957", "用户删除失败:", error);
                uni.showToast({ title: error.message || "删除失败", icon: "none" });
              } finally {
                uni.hideLoading();
              }
            }
          }
        });
      },
      // 工具方法：格式化日期为 YYYY-MM-DD 格式，用于日期选择器回显
      formatDateForPicker(timestamp) {
        if (!timestamp)
          return "";
        const date2 = new Date(timestamp);
        const year = date2.getFullYear();
        const month = String(date2.getMonth() + 1).padStart(2, "0");
        const day = String(date2.getDate()).padStart(2, "0");
        return `${year}-${month}-${day}`;
      },
      async loadFaqs(reset = false) {
        const token = uni.getStorageSync("token");
        if (!token) {
          uni.showToast({ title: "请先登录", icon: "none" });
          return;
        }
        if (this.faqLoading || !this.faqHasMore && !reset)
          return;
        if (reset) {
          this.faqList = [];
          this.faqPage = 1;
          this.faqHasMore = true;
        }
        this.faqLoading = true;
        try {
          const params = {
            pageNum: this.faqPage,
            pageSize: this.faqPageSize
          };
          if (this.searchFaqQuestion) {
            params.question = this.searchFaqQuestion;
          }
          const res = await uni.request({
            url: `${this.$config.baseUrl}/faq/page`,
            method: "GET",
            data: params,
            header: { "Authorization": `Bearer ${token}` }
          });
          if (res.data.code !== 200)
            throw new Error(res.data.message || "接口错误");
          const newFaqs = res.data.data.records || [];
          if (newFaqs.length === 0) {
            this.faqHasMore = false;
            return;
          }
          this.faqList = this.faqList.concat(newFaqs);
          this.faqHasMore = newFaqs.length === this.faqPageSize;
          this.faqPage++;
        } catch (error) {
          uni.showToast({ title: error.message || "加载FAQ失败", icon: "none" });
        } finally {
          this.faqLoading = false;
        }
      },
      openFaqForm(item = null) {
        this.showFaqForm = true;
        if (item) {
          this.editingFaq = item;
          this.faqForm = { ...item };
        } else {
          this.editingFaq = null;
          this.faqForm = { id: null, question: "", answer: "" };
        }
      },
      closeFaqForm() {
        this.showFaqForm = false;
        this.editingFaq = null;
        this.faqForm = { id: null, question: "", answer: "" };
      },
      async submitFaqForm() {
        const token = uni.getStorageSync("token");
        formatAppLog("log", "at pages/admin/index.vue:1034", "FAQ提交 - 当前token:", token);
        if (!token) {
          uni.showToast({ title: "请先登录", icon: "none" });
          return;
        }
        if (!this.faqForm.question || !this.faqForm.answer) {
          uni.showToast({ title: "请填写问题和答案", icon: "none" });
          return;
        }
        formatAppLog("log", "at pages/admin/index.vue:1043", "FAQ提交 - 表单数据:", this.faqForm);
        uni.showLoading({ title: this.editingFaq ? "保存中..." : "新建中..." });
        try {
          let res;
          if (this.editingFaq) {
            const requestData = {
              question: this.faqForm.question,
              answer: this.faqForm.answer
            };
            formatAppLog("log", "at pages/admin/index.vue:1053", "FAQ编辑 - 请求URL:", `${this.$config.baseUrl}/faq/${this.faqForm.id}`);
            formatAppLog("log", "at pages/admin/index.vue:1054", "FAQ编辑 - 请求数据:", requestData);
            formatAppLog("log", "at pages/admin/index.vue:1055", "FAQ编辑 - 请求头:", { "Authorization": `Bearer ${token}` });
            res = await uni.request({
              url: `${this.$config.baseUrl}/faq/${this.faqForm.id}`,
              method: "PUT",
              data: requestData,
              header: { "Authorization": `Bearer ${token}` }
            });
          } else {
            const requestData = {
              question: this.faqForm.question,
              answer: this.faqForm.answer
            };
            formatAppLog("log", "at pages/admin/index.vue:1069", "FAQ新建 - 请求URL:", `${this.$config.baseUrl}/faq`);
            formatAppLog("log", "at pages/admin/index.vue:1070", "FAQ新建 - 请求数据:", requestData);
            formatAppLog("log", "at pages/admin/index.vue:1071", "FAQ新建 - 请求头:", { "Authorization": `Bearer ${token}` });
            res = await uni.request({
              url: `${this.$config.baseUrl}/faq`,
              method: "POST",
              data: requestData,
              header: { "Authorization": `Bearer ${token}` }
            });
          }
          formatAppLog("log", "at pages/admin/index.vue:1080", "FAQ提交 - 响应数据:", res.data);
          if (res.data.code === 200) {
            uni.showToast({ title: this.editingFaq ? "保存成功" : "新建成功", icon: "success" });
            this.closeFaqForm();
            this.loadFaqs(true);
          } else {
            throw new Error(res.data.message || "操作失败");
          }
        } catch (error) {
          formatAppLog("error", "at pages/admin/index.vue:1089", "FAQ提交失败:", error);
          uni.showToast({ title: error.message || "操作失败", icon: "none" });
        } finally {
          uni.hideLoading();
        }
      },
      async deleteFaq(id) {
        const token = uni.getStorageSync("token");
        if (!token) {
          uni.showToast({ title: "请先登录", icon: "none" });
          return;
        }
        uni.showModal({
          title: "确认删除",
          content: "确定要删除该FAQ吗？",
          success: async (res) => {
            if (res.confirm) {
              uni.showLoading({ title: "删除中..." });
              try {
                const res2 = await uni.request({
                  url: `${this.$config.baseUrl}/faq/${id}`,
                  method: "DELETE",
                  header: { "Authorization": `Bearer ${token}` }
                });
                if (res2.data.code === 200) {
                  uni.showToast({ title: "删除成功", icon: "success" });
                  this.loadFaqs(true);
                } else {
                  throw new Error(res2.data.message || "删除失败");
                }
              } catch (error) {
                uni.showToast({ title: error.message || "删除失败", icon: "none" });
              } finally {
                uni.hideLoading();
              }
            }
          }
        });
      },
      async loadFeedbacks(reset = false) {
        const token = uni.getStorageSync("token");
        if (!token) {
          uni.showToast({ title: "请先登录", icon: "none" });
          return;
        }
        if (this.feedbackLoading || !this.feedbackHasMore && !reset)
          return;
        if (reset) {
          this.feedbackList = [];
          this.feedbackPage = 1;
          this.feedbackHasMore = true;
        }
        this.feedbackLoading = true;
        try {
          const params = {
            pageNum: this.feedbackPage,
            pageSize: this.feedbackPageSize
          };
          if (this.searchFeedbackUserId)
            params.userId = this.searchFeedbackUserId;
          if (this.searchFeedbackStartTime)
            params.startTime = this.searchFeedbackStartTime;
          if (this.searchFeedbackEndTime)
            params.endTime = this.searchFeedbackEndTime;
          const res = await uni.request({
            url: `${this.$config.baseUrl}/user/manage/feedback/page`,
            method: "GET",
            data: params,
            header: { "Authorization": `Bearer ${token}` }
          });
          if (res.data.code !== 200)
            throw new Error(res.data.message || "接口错误");
          const newFeedbacks = res.data.data.records || [];
          if (newFeedbacks.length === 0) {
            this.feedbackHasMore = false;
            return;
          }
          this.feedbackList = this.feedbackList.concat(newFeedbacks);
          this.feedbackHasMore = newFeedbacks.length === this.feedbackPageSize;
          this.feedbackPage++;
        } catch (error) {
          uni.showToast({ title: error.message || "加载反馈失败", icon: "none" });
        } finally {
          this.feedbackLoading = false;
        }
      },
      async openFeedbackDetail(id) {
        const token = uni.getStorageSync("token");
        if (!token) {
          uni.showToast({ title: "请先登录", icon: "none" });
          return;
        }
        uni.showLoading({ title: "加载详情..." });
        try {
          const res = await uni.request({
            url: `${this.$config.baseUrl}/user/manage/feedback/${id}`,
            method: "GET",
            header: { "Authorization": `Bearer ${token}` }
          });
          if (res.data.code === 200) {
            this.feedbackDetail = res.data.data || {};
            this.showFeedbackDetail = true;
          } else {
            throw new Error(res.data.message || "获取详情失败");
          }
        } catch (error) {
          uni.showToast({ title: error.message || "获取详情失败", icon: "none" });
        } finally {
          uni.hideLoading();
        }
      },
      closeFeedbackDetail() {
        this.showFeedbackDetail = false;
        this.feedbackDetail = {};
      },
      onFeedbackStartTimeChange(e2) {
        this.searchFeedbackStartTime = e2.detail.value;
        this.loadFeedbacks(true);
      },
      onFeedbackEndTimeChange(e2) {
        this.searchFeedbackEndTime = e2.detail.value;
        this.loadFeedbacks(true);
      },
      onFeedbackFilterConfirm() {
        this.loadFeedbacks(true);
      },
      onReachBottom() {
        if (this.activeManagementSection === "policy" && !this.loading && this.hasMore) {
          this.loadPolicies();
        }
      },
      testToken() {
        const token = uni.getStorageSync("token");
        formatAppLog("log", "at pages/admin/index.vue:1217", "测试Token - 当前token:", token);
        if (!token) {
          uni.showToast({ title: "未找到token", icon: "none" });
          return;
        }
        if (!token.includes(".") || token.split(".").length !== 3) {
          uni.showToast({ title: "Token格式无效", icon: "none" });
          return;
        }
        uni.showLoading({ title: "验证中..." });
        uni.request({
          url: `${this.$config.baseUrl}/faq/page`,
          method: "GET",
          data: { pageNum: 1, pageSize: 1 },
          header: { "Authorization": `Bearer ${token}` },
          success: (res) => {
            formatAppLog("log", "at pages/admin/index.vue:1238", "Token测试 - API响应:", res.data);
            if (res.data.code === 200) {
              uni.showToast({ title: "Token有效", icon: "success" });
            } else if (res.data.code === 401) {
              uni.showToast({ title: "Token已过期", icon: "none" });
              uni.removeStorageSync("token");
            } else {
              uni.showToast({ title: `Token验证失败: ${res.data.message}`, icon: "none" });
            }
          },
          fail: (error) => {
            formatAppLog("error", "at pages/admin/index.vue:1249", "Token测试 - 请求失败:", error);
            uni.showToast({ title: "网络请求失败", icon: "none" });
          },
          complete: () => {
            uni.hideLoading();
          }
        });
      }
    }
  };
  function _sfc_render$1c(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("view", { class: "admin-container" }, [
      vue$1.createCommentVNode(" 顶部信息栏 "),
      vue$1.createElementVNode("view", { class: "admin-header" }, [
        vue$1.createElementVNode("view", { class: "admin-info" }, [
          vue$1.createElementVNode("view", { class: "admin-details" }, [
            vue$1.createElementVNode("text", { class: "admin-name" }, "管理员页面")
          ])
        ]),
        vue$1.createElementVNode("view", { class: "admin-stats" }, [
          vue$1.createElementVNode("view", { class: "stat-item" }, [
            vue$1.createElementVNode(
              "text",
              { class: "stat-num" },
              vue$1.toDisplayString($data.stats.userCount),
              1
              /* TEXT */
            ),
            vue$1.createElementVNode("text", { class: "stat-label" }, "用户总数")
          ]),
          vue$1.createElementVNode("view", { class: "stat-item" }, [
            vue$1.createElementVNode(
              "text",
              { class: "stat-num" },
              vue$1.toDisplayString($data.stats.policyCount),
              1
              /* TEXT */
            ),
            vue$1.createElementVNode("text", { class: "stat-label" }, "政策总数")
          ]),
          vue$1.createElementVNode("view", { class: "stat-item" }, [
            vue$1.createElementVNode(
              "text",
              { class: "stat-num" },
              vue$1.toDisplayString($data.stats.faqCount),
              1
              /* TEXT */
            ),
            vue$1.createElementVNode("text", { class: "stat-label" }, "常见问题总数")
          ]),
          vue$1.createElementVNode("view", { class: "stat-item" }, [
            vue$1.createElementVNode(
              "text",
              { class: "stat-num" },
              vue$1.toDisplayString($data.stats.feedbackCount),
              1
              /* TEXT */
            ),
            vue$1.createElementVNode("text", { class: "stat-label" }, "用户反馈总数")
          ])
        ])
      ]),
      vue$1.createCommentVNode(" 快捷功能入口 "),
      vue$1.createElementVNode("view", { class: "quick-actions" }, [
        vue$1.createElementVNode("view", { class: "action-grid" }, [
          vue$1.createElementVNode("view", {
            class: "action-item",
            onClick: _cache[0] || (_cache[0] = ($event) => $options.toggleManagementSection("user")),
            "aria-label": "用户管理",
            tabindex: "0"
          }, [
            vue$1.createElementVNode("text", { class: "iconfont icon-user" }),
            vue$1.createElementVNode("text", { class: "action-label" }, "用户管理")
          ]),
          vue$1.createElementVNode("view", {
            class: "action-item",
            onClick: _cache[1] || (_cache[1] = ($event) => $options.toggleManagementSection("policy")),
            "aria-label": "政策管理",
            tabindex: "0"
          }, [
            vue$1.createElementVNode("text", { class: "iconfont icon-policy" }),
            vue$1.createElementVNode("text", { class: "action-label" }, "政策管理")
          ]),
          vue$1.createElementVNode("view", {
            class: "action-item",
            onClick: _cache[2] || (_cache[2] = ($event) => $options.toggleManagementSection("faq")),
            "aria-label": "常见问题管理",
            tabindex: "0"
          }, [
            vue$1.createElementVNode("text", { class: "iconfont icon-faq" }),
            vue$1.createElementVNode("text", { class: "action-label" }, "常见问题管理")
          ]),
          vue$1.createElementVNode("view", {
            class: "action-item",
            onClick: _cache[3] || (_cache[3] = ($event) => $options.toggleManagementSection("feedback")),
            "aria-label": "用户反馈",
            tabindex: "0"
          }, [
            vue$1.createElementVNode("text", { class: "iconfont icon-feedback" }),
            vue$1.createElementVNode("text", { class: "action-label" }, "用户反馈")
          ])
        ])
      ]),
      vue$1.createCommentVNode(" 用户管理模块 "),
      $data.activeManagementSection === "user" ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
        key: 0,
        class: "user-manage-card"
      }, [
        vue$1.createElementVNode("view", { class: "manage-header" }, [
          vue$1.createElementVNode("text", { class: "manage-title" }, "用户管理"),
          vue$1.createElementVNode("button", {
            class: "create-btn",
            onClick: _cache[4] || (_cache[4] = ($event) => $options.openUserForm()),
            "aria-label": "新建用户",
            tabindex: "0"
          }, "新建用户")
        ]),
        vue$1.createElementVNode("view", { class: "manage-search" }, [
          vue$1.withDirectives(vue$1.createElementVNode(
            "input",
            {
              class: "search-input",
              "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.searchUserEmail = $event),
              placeholder: "搜索用户邮箱",
              onConfirm: _cache[6] || (_cache[6] = ($event) => $options.loadUsers(true)),
              "aria-label": "搜索用户邮箱",
              tabindex: "0"
            },
            null,
            544
            /* NEED_HYDRATION, NEED_PATCH */
          ), [
            [vue$1.vModelText, $data.searchUserEmail]
          ]),
          vue$1.createElementVNode("picker", {
            mode: "selector",
            range: $data.userRoles,
            onChange: _cache[7] || (_cache[7] = (...args) => $options.onUserRoleChange && $options.onUserRoleChange(...args)),
            class: "region-picker",
            "aria-label": "选择用户角色",
            tabindex: "0"
          }, [
            vue$1.createElementVNode("view", { class: "picker-content" }, [
              vue$1.createElementVNode(
                "text",
                { class: "selected-region" },
                vue$1.toDisplayString($data.searchUserRole || "所有角色"),
                1
                /* TEXT */
              ),
              vue$1.createElementVNode("text", { class: "picker-arrow" }, "▼")
            ])
          ], 40, ["range"]),
          vue$1.createElementVNode("picker", {
            mode: "selector",
            range: $data.userStatuses,
            onChange: _cache[8] || (_cache[8] = (...args) => $options.onUserStatusChange && $options.onUserStatusChange(...args)),
            class: "region-picker",
            "aria-label": "选择用户状态",
            tabindex: "0"
          }, [
            vue$1.createElementVNode("view", { class: "picker-content" }, [
              vue$1.createElementVNode(
                "text",
                { class: "selected-region" },
                vue$1.toDisplayString($options.formatUserStatus($data.searchUserStatus) || "所有状态"),
                1
                /* TEXT */
              ),
              vue$1.createElementVNode("text", { class: "picker-arrow" }, "▼")
            ])
          ], 40, ["range"])
        ]),
        vue$1.createElementVNode("view", { class: "manage-list" }, [
          (vue$1.openBlock(true), vue$1.createElementBlock(
            vue$1.Fragment,
            null,
            vue$1.renderList($data.userList, (user) => {
              return vue$1.openBlock(), vue$1.createElementBlock("view", {
                class: "manage-item",
                key: user.id,
                onClick: ($event) => $options.openUserForm(user),
                role: "button",
                "aria-label": "用户" + user.nickname + "，点击编辑或查看详情",
                tabindex: "0"
              }, [
                vue$1.createElementVNode("view", { class: "item-info" }, [
                  vue$1.createElementVNode(
                    "text",
                    { class: "item-title" },
                    vue$1.toDisplayString(user.nickname || user.email),
                    1
                    /* TEXT */
                  ),
                  vue$1.createElementVNode(
                    "text",
                    { class: "item-summary" },
                    "角色: " + vue$1.toDisplayString(user.role) + " | 状态: " + vue$1.toDisplayString($options.formatUserStatus(user.status)),
                    1
                    /* TEXT */
                  )
                ]),
                vue$1.createElementVNode("view", { class: "item-actions" }, [
                  vue$1.createElementVNode("button", {
                    class: "edit-btn",
                    onClick: vue$1.withModifiers(($event) => $options.openUserForm(user), ["stop"]),
                    "aria-label": "编辑用户",
                    tabindex: "0"
                  }, "编辑", 8, ["onClick"]),
                  vue$1.createElementVNode("button", {
                    class: "delete-btn",
                    onClick: vue$1.withModifiers(($event) => $options.deleteUser(user.id), ["stop"]),
                    "aria-label": "删除用户",
                    tabindex: "0"
                  }, "删除", 8, ["onClick"])
                ])
              ], 8, ["onClick", "aria-label"]);
            }),
            128
            /* KEYED_FRAGMENT */
          )),
          $data.userLoading ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
            key: 0,
            class: "loading"
          }, "加载中...")) : vue$1.createCommentVNode("v-if", true),
          !$data.userHasMore && !$data.userLoading ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
            key: 1,
            class: "no-more"
          }, "没有更多用户数据")) : vue$1.createCommentVNode("v-if", true)
        ])
      ])) : vue$1.createCommentVNode("v-if", true),
      vue$1.createCommentVNode(" 政策管理模块 "),
      $data.activeManagementSection === "policy" ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
        key: 1,
        class: "policy-manage-card"
      }, [
        vue$1.createElementVNode("view", { class: "manage-header" }, [
          vue$1.createElementVNode("text", { class: "manage-title" }, "政策管理"),
          vue$1.createElementVNode("button", {
            class: "create-btn",
            onClick: _cache[9] || (_cache[9] = ($event) => $options.openPolicyForm()),
            "aria-label": "新建政策",
            tabindex: "0"
          }, "新建政策")
        ]),
        vue$1.createElementVNode("view", { class: "manage-search" }, [
          vue$1.withDirectives(vue$1.createElementVNode(
            "input",
            {
              class: "search-input",
              "onUpdate:modelValue": _cache[10] || (_cache[10] = ($event) => $data.searchTitle = $event),
              placeholder: "搜索政策标题",
              onConfirm: _cache[11] || (_cache[11] = (...args) => $options.onSearch && $options.onSearch(...args)),
              "aria-label": "搜索政策标题",
              tabindex: "0"
            },
            null,
            544
            /* NEED_HYDRATION, NEED_PATCH */
          ), [
            [vue$1.vModelText, $data.searchTitle]
          ]),
          vue$1.createElementVNode("picker", {
            mode: "selector",
            range: $data.regions,
            onChange: _cache[12] || (_cache[12] = (...args) => $options.onRegionChange && $options.onRegionChange(...args)),
            class: "region-picker",
            "aria-label": "选择政策区域",
            tabindex: "0"
          }, [
            vue$1.createElementVNode("view", { class: "picker-content" }, [
              vue$1.createElementVNode(
                "text",
                { class: "selected-region" },
                vue$1.toDisplayString($data.currentRegion),
                1
                /* TEXT */
              ),
              vue$1.createElementVNode("text", { class: "picker-arrow" }, "▼")
            ])
          ], 40, ["range"])
        ]),
        vue$1.createElementVNode("view", { class: "manage-list" }, [
          (vue$1.openBlock(true), vue$1.createElementBlock(
            vue$1.Fragment,
            null,
            vue$1.renderList($data.leftColumn, (item) => {
              return vue$1.openBlock(), vue$1.createElementBlock("view", {
                class: "manage-item",
                key: item.id,
                onClick: ($event) => $options.openPolicyForm(item),
                role: "button",
                "aria-label": "政策" + item.title + "，点击编辑或查看详情",
                tabindex: "0"
              }, [
                vue$1.createElementVNode("view", { class: "item-info" }, [
                  vue$1.createElementVNode(
                    "text",
                    { class: "item-title" },
                    vue$1.toDisplayString(item.title),
                    1
                    /* TEXT */
                  ),
                  vue$1.createElementVNode(
                    "text",
                    { class: "item-summary" },
                    vue$1.toDisplayString(item.summary),
                    1
                    /* TEXT */
                  )
                ]),
                vue$1.createElementVNode("view", { class: "item-actions" }, [
                  vue$1.createElementVNode("button", {
                    class: "edit-btn",
                    onClick: vue$1.withModifiers(($event) => $options.openPolicyForm(item), ["stop"]),
                    "aria-label": "编辑政策",
                    tabindex: "0"
                  }, "编辑", 8, ["onClick"]),
                  vue$1.createElementVNode("button", {
                    class: "delete-btn",
                    onClick: vue$1.withModifiers(($event) => $options.deletePolicy(item.id), ["stop"]),
                    "aria-label": "删除政策",
                    tabindex: "0"
                  }, "删除", 8, ["onClick"])
                ])
              ], 8, ["onClick", "aria-label"]);
            }),
            128
            /* KEYED_FRAGMENT */
          )),
          $data.loading ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
            key: 0,
            class: "loading"
          }, "加载中...")) : vue$1.createCommentVNode("v-if", true),
          !$data.hasMore && !$data.loading ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
            key: 1,
            class: "no-more"
          }, "没有更多数据")) : vue$1.createCommentVNode("v-if", true)
        ])
      ])) : vue$1.createCommentVNode("v-if", true),
      vue$1.createCommentVNode(" 常见问题管理模块 "),
      $data.activeManagementSection === "faq" ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
        key: 2,
        class: "faq-manage-card"
      }, [
        vue$1.createElementVNode("view", { class: "manage-header" }, [
          vue$1.createElementVNode("text", { class: "manage-title" }, "常见问题管理"),
          vue$1.createElementVNode("button", {
            class: "create-btn",
            onClick: _cache[13] || (_cache[13] = ($event) => $options.openFaqForm()),
            "aria-label": "新建FAQ",
            tabindex: "0"
          }, "新建FAQ")
        ]),
        vue$1.createElementVNode("view", { class: "manage-search" }, [
          vue$1.withDirectives(vue$1.createElementVNode(
            "input",
            {
              class: "search-input",
              "onUpdate:modelValue": _cache[14] || (_cache[14] = ($event) => $data.searchFaqQuestion = $event),
              placeholder: "搜索问题",
              onConfirm: _cache[15] || (_cache[15] = ($event) => $options.loadFaqs(true)),
              "aria-label": "搜索问题",
              tabindex: "0"
            },
            null,
            544
            /* NEED_HYDRATION, NEED_PATCH */
          ), [
            [vue$1.vModelText, $data.searchFaqQuestion]
          ])
        ]),
        vue$1.createElementVNode("view", { class: "manage-list" }, [
          (vue$1.openBlock(true), vue$1.createElementBlock(
            vue$1.Fragment,
            null,
            vue$1.renderList($data.faqList, (item) => {
              return vue$1.openBlock(), vue$1.createElementBlock("view", {
                class: "manage-item",
                key: item.id,
                onClick: ($event) => $options.openFaqForm(item),
                role: "button",
                "aria-label": "FAQ" + item.question,
                tabindex: "0"
              }, [
                vue$1.createElementVNode("view", { class: "item-info" }, [
                  vue$1.createElementVNode(
                    "text",
                    { class: "item-title" },
                    vue$1.toDisplayString(item.question),
                    1
                    /* TEXT */
                  ),
                  vue$1.createElementVNode(
                    "text",
                    { class: "item-summary" },
                    vue$1.toDisplayString(item.answer.slice(0, 20)) + "...",
                    1
                    /* TEXT */
                  )
                ]),
                vue$1.createElementVNode("view", { class: "item-actions" }, [
                  vue$1.createElementVNode("button", {
                    class: "edit-btn",
                    onClick: vue$1.withModifiers(($event) => $options.openFaqForm(item), ["stop"]),
                    "aria-label": "编辑FAQ",
                    tabindex: "0"
                  }, "编辑", 8, ["onClick"]),
                  vue$1.createElementVNode("button", {
                    class: "delete-btn",
                    onClick: vue$1.withModifiers(($event) => $options.deleteFaq(item.id), ["stop"]),
                    "aria-label": "删除FAQ",
                    tabindex: "0"
                  }, "删除", 8, ["onClick"])
                ])
              ], 8, ["onClick", "aria-label"]);
            }),
            128
            /* KEYED_FRAGMENT */
          )),
          $data.faqLoading ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
            key: 0,
            class: "loading"
          }, "加载中...")) : vue$1.createCommentVNode("v-if", true),
          !$data.faqHasMore && !$data.faqLoading ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
            key: 1,
            class: "no-more"
          }, "没有更多FAQ")) : vue$1.createCommentVNode("v-if", true)
        ])
      ])) : vue$1.createCommentVNode("v-if", true),
      vue$1.createCommentVNode(" 用户反馈管理模块 "),
      $data.activeManagementSection === "feedback" ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
        key: 3,
        class: "feedback-manage-card"
      }, [
        vue$1.createElementVNode("view", { class: "manage-header" }, [
          vue$1.createElementVNode("text", { class: "manage-title" }, "用户反馈")
        ]),
        vue$1.createElementVNode("view", {
          class: "filter-bar",
          style: { "display": "flex", "align-items": "center", "gap": "16rpx", "margin-bottom": "20rpx" }
        }, [
          vue$1.createElementVNode("text", { style: { "font-weight": "bold", "font-size": "28rpx", "margin-right": "16rpx" } }, "筛选用户反馈"),
          vue$1.withDirectives(vue$1.createElementVNode(
            "input",
            {
              class: "search-input short-input",
              "onUpdate:modelValue": _cache[16] || (_cache[16] = ($event) => $data.searchFeedbackUserId = $event),
              placeholder: "用户ID",
              "aria-label": "用户ID",
              tabindex: "0"
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue$1.vModelText, $data.searchFeedbackUserId]
          ]),
          vue$1.createElementVNode("picker", {
            mode: "date",
            value: $data.searchFeedbackStartTime,
            onChange: _cache[17] || (_cache[17] = (...args) => $options.onFeedbackStartTimeChange && $options.onFeedbackStartTimeChange(...args))
          }, [
            vue$1.createElementVNode(
              "view",
              { class: "search-input date-input" },
              vue$1.toDisplayString($data.searchFeedbackStartTime ? $data.searchFeedbackStartTime : "开始日期"),
              1
              /* TEXT */
            )
          ], 40, ["value"]),
          vue$1.createElementVNode("picker", {
            mode: "date",
            value: $data.searchFeedbackEndTime,
            onChange: _cache[18] || (_cache[18] = (...args) => $options.onFeedbackEndTimeChange && $options.onFeedbackEndTimeChange(...args))
          }, [
            vue$1.createElementVNode(
              "view",
              { class: "search-input date-input" },
              vue$1.toDisplayString($data.searchFeedbackEndTime ? $data.searchFeedbackEndTime : "结束日期"),
              1
              /* TEXT */
            )
          ], 40, ["value"]),
          vue$1.createElementVNode("button", {
            class: "filter-btn",
            onClick: _cache[19] || (_cache[19] = (...args) => $options.onFeedbackFilterConfirm && $options.onFeedbackFilterConfirm(...args)),
            "aria-label": "确定筛选",
            tabindex: "0"
          }, "确定")
        ]),
        vue$1.createElementVNode("view", { class: "manage-list" }, [
          (vue$1.openBlock(true), vue$1.createElementBlock(
            vue$1.Fragment,
            null,
            vue$1.renderList($data.feedbackList, (item) => {
              return vue$1.openBlock(), vue$1.createElementBlock("view", {
                class: "manage-item",
                key: item.id,
                onClick: ($event) => $options.openFeedbackDetail(item.id),
                role: "button",
                "aria-label": "反馈" + item.id,
                tabindex: "0"
              }, [
                vue$1.createElementVNode("view", { class: "item-info" }, [
                  vue$1.createElementVNode(
                    "text",
                    { class: "item-title" },
                    "反馈 " + vue$1.toDisplayString(item.id),
                    1
                    /* TEXT */
                  ),
                  vue$1.createElementVNode(
                    "text",
                    { class: "item-summary" },
                    "用户ID: " + vue$1.toDisplayString(item.userId) + " | " + vue$1.toDisplayString(item.createTime),
                    1
                    /* TEXT */
                  )
                ]),
                vue$1.createElementVNode("view", { class: "item-actions" }, [
                  vue$1.createElementVNode("button", {
                    class: "edit-btn",
                    onClick: vue$1.withModifiers(($event) => $options.openFeedbackDetail(item.id), ["stop"]),
                    "aria-label": "查看详情",
                    tabindex: "0"
                  }, "查看详情", 8, ["onClick"])
                ])
              ], 8, ["onClick", "aria-label"]);
            }),
            128
            /* KEYED_FRAGMENT */
          )),
          $data.feedbackLoading ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
            key: 0,
            class: "loading"
          }, "加载中...")) : vue$1.createCommentVNode("v-if", true),
          !$data.feedbackHasMore && !$data.feedbackLoading ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
            key: 1,
            class: "no-more"
          }, "没有更多反馈")) : vue$1.createCommentVNode("v-if", true)
        ])
      ])) : vue$1.createCommentVNode("v-if", true),
      vue$1.createCommentVNode(" 新建/编辑政策弹窗 "),
      $data.showPolicyForm ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
        key: 4,
        class: "policy-form-modal"
      }, [
        vue$1.createElementVNode("view", { class: "policy-form" }, [
          vue$1.createElementVNode(
            "view",
            { class: "form-title" },
            vue$1.toDisplayString($data.editingPolicy ? "编辑政策" : "新建政策"),
            1
            /* TEXT */
          ),
          vue$1.withDirectives(vue$1.createElementVNode(
            "input",
            {
              "onUpdate:modelValue": _cache[20] || (_cache[20] = ($event) => $data.policyForm.title = $event),
              placeholder: "政策标题",
              class: "form-input",
              "aria-label": "政策标题",
              tabindex: "0"
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue$1.vModelText, $data.policyForm.title]
          ]),
          vue$1.withDirectives(vue$1.createElementVNode(
            "input",
            {
              "onUpdate:modelValue": _cache[21] || (_cache[21] = ($event) => $data.policyForm.policyLevel = $event),
              placeholder: "政策级别",
              class: "form-input",
              "aria-label": "政策级别",
              tabindex: "0"
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue$1.vModelText, $data.policyForm.policyLevel]
          ]),
          vue$1.createElementVNode("picker", {
            mode: "date",
            value: $data.policyForm.publishDate,
            onChange: _cache[22] || (_cache[22] = (...args) => $options.onDateChange && $options.onDateChange(...args)),
            class: "form-input date-picker",
            "aria-label": "选择发布日期",
            tabindex: "0"
          }, [
            vue$1.createElementVNode(
              "view",
              { class: "picker-text" },
              vue$1.toDisplayString($data.policyForm.publishDate || "选择发布日期"),
              1
              /* TEXT */
            )
          ], 40, ["value"]),
          vue$1.withDirectives(vue$1.createElementVNode(
            "input",
            {
              "onUpdate:modelValue": _cache[23] || (_cache[23] = ($event) => $data.policyForm.tags = $event),
              placeholder: "标签（逗号分隔）",
              class: "form-input",
              "aria-label": "标签",
              tabindex: "0"
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue$1.vModelText, $data.policyForm.tags]
          ]),
          vue$1.withDirectives(vue$1.createElementVNode(
            "input",
            {
              "onUpdate:modelValue": _cache[24] || (_cache[24] = ($event) => $data.policyForm.attachmentUrl = $event),
              placeholder: "附件URL",
              class: "form-input",
              "aria-label": "附件URL",
              tabindex: "0"
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue$1.vModelText, $data.policyForm.attachmentUrl]
          ]),
          vue$1.withDirectives(vue$1.createElementVNode(
            "textarea",
            {
              "onUpdate:modelValue": _cache[25] || (_cache[25] = ($event) => $data.policyForm.content = $event),
              placeholder: "政策内容",
              class: "form-textarea",
              "aria-label": "政策内容",
              tabindex: "0"
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue$1.vModelText, $data.policyForm.content]
          ]),
          vue$1.createElementVNode("view", { class: "form-actions" }, [
            vue$1.createElementVNode(
              "button",
              {
                class: "save-btn",
                onClick: _cache[26] || (_cache[26] = (...args) => $options.submitPolicyForm && $options.submitPolicyForm(...args)),
                "aria-label": "保存政策",
                tabindex: "0"
              },
              vue$1.toDisplayString($data.editingPolicy ? "保存" : "新建"),
              1
              /* TEXT */
            ),
            vue$1.createElementVNode("button", {
              class: "cancel-btn",
              onClick: _cache[27] || (_cache[27] = (...args) => $options.closePolicyForm && $options.closePolicyForm(...args)),
              "aria-label": "取消",
              tabindex: "0"
            }, "取消")
          ])
        ])
      ])) : vue$1.createCommentVNode("v-if", true),
      vue$1.createCommentVNode(" 新建/编辑用户弹窗 "),
      $data.showUserForm ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
        key: 5,
        class: "policy-form-modal"
      }, [
        vue$1.createElementVNode("view", { class: "policy-form" }, [
          vue$1.createElementVNode(
            "view",
            { class: "form-title" },
            vue$1.toDisplayString($data.editingUser ? "编辑用户" : "新建用户"),
            1
            /* TEXT */
          ),
          vue$1.withDirectives(vue$1.createElementVNode(
            "input",
            {
              "onUpdate:modelValue": _cache[28] || (_cache[28] = ($event) => $data.userForm.email = $event),
              placeholder: "用户邮箱",
              class: "form-input",
              "aria-label": "用户邮箱",
              tabindex: "0"
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue$1.vModelText, $data.userForm.email]
          ]),
          vue$1.withDirectives(vue$1.createElementVNode(
            "input",
            {
              "onUpdate:modelValue": _cache[29] || (_cache[29] = ($event) => $data.userForm.nickname = $event),
              placeholder: "用户昵称",
              class: "form-input",
              "aria-label": "用户昵称",
              tabindex: "0"
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue$1.vModelText, $data.userForm.nickname]
          ]),
          !$data.editingUser ? vue$1.withDirectives((vue$1.openBlock(), vue$1.createElementBlock(
            "input",
            {
              key: 0,
              "onUpdate:modelValue": _cache[30] || (_cache[30] = ($event) => $data.userForm.password = $event),
              type: "password",
              placeholder: "用户密码 (新建时必填)",
              class: "form-input",
              "aria-label": "用户密码",
              tabindex: "0"
            },
            null,
            512
            /* NEED_PATCH */
          )), [
            [vue$1.vModelText, $data.userForm.password]
          ]) : vue$1.createCommentVNode("v-if", true),
          vue$1.createElementVNode("picker", {
            mode: "selector",
            range: $data.userRoles,
            onChange: _cache[31] || (_cache[31] = (...args) => $options.onUserFormRoleChange && $options.onUserFormRoleChange(...args)),
            class: "form-input date-picker",
            "aria-label": "选择用户角色",
            tabindex: "0"
          }, [
            vue$1.createElementVNode(
              "view",
              { class: "picker-text" },
              vue$1.toDisplayString($data.userForm.role || "选择角色"),
              1
              /* TEXT */
            )
          ], 40, ["range"]),
          vue$1.createElementVNode("picker", {
            mode: "selector",
            range: $data.userStatuses,
            onChange: _cache[32] || (_cache[32] = (...args) => $options.onUserFormStatusChange && $options.onUserFormStatusChange(...args)),
            class: "form-input date-picker",
            "aria-label": "选择用户状态",
            tabindex: "0"
          }, [
            vue$1.createElementVNode(
              "view",
              { class: "picker-text" },
              vue$1.toDisplayString($options.formatUserStatus($data.userForm.status) || "选择状态"),
              1
              /* TEXT */
            )
          ], 40, ["range"]),
          vue$1.createElementVNode("view", { class: "form-actions" }, [
            vue$1.createElementVNode(
              "button",
              {
                class: "save-btn",
                onClick: _cache[33] || (_cache[33] = (...args) => $options.submitUserForm && $options.submitUserForm(...args)),
                "aria-label": "保存用户",
                tabindex: "0"
              },
              vue$1.toDisplayString($data.editingUser ? "保存" : "新建"),
              1
              /* TEXT */
            ),
            vue$1.createElementVNode("button", {
              class: "cancel-btn",
              onClick: _cache[34] || (_cache[34] = (...args) => $options.closeUserForm && $options.closeUserForm(...args)),
              "aria-label": "取消",
              tabindex: "0"
            }, "取消")
          ])
        ])
      ])) : vue$1.createCommentVNode("v-if", true),
      vue$1.createCommentVNode(" 新建/编辑FAQ弹窗 "),
      $data.showFaqForm ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
        key: 6,
        class: "policy-form-modal"
      }, [
        vue$1.createElementVNode("view", { class: "policy-form" }, [
          vue$1.createElementVNode(
            "view",
            { class: "form-title" },
            vue$1.toDisplayString($data.editingFaq ? "编辑FAQ" : "新建FAQ"),
            1
            /* TEXT */
          ),
          vue$1.withDirectives(vue$1.createElementVNode(
            "input",
            {
              "onUpdate:modelValue": _cache[35] || (_cache[35] = ($event) => $data.faqForm.question = $event),
              placeholder: "问题",
              class: "form-input",
              "aria-label": "问题",
              tabindex: "0"
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue$1.vModelText, $data.faqForm.question]
          ]),
          vue$1.withDirectives(vue$1.createElementVNode(
            "textarea",
            {
              "onUpdate:modelValue": _cache[36] || (_cache[36] = ($event) => $data.faqForm.answer = $event),
              placeholder: "答案",
              class: "form-textarea",
              "aria-label": "答案",
              tabindex: "0"
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue$1.vModelText, $data.faqForm.answer]
          ]),
          vue$1.createElementVNode("view", { class: "form-actions" }, [
            vue$1.createElementVNode(
              "button",
              {
                class: "save-btn",
                onClick: _cache[37] || (_cache[37] = (...args) => $options.submitFaqForm && $options.submitFaqForm(...args)),
                "aria-label": "保存FAQ",
                tabindex: "0"
              },
              vue$1.toDisplayString($data.editingFaq ? "保存" : "新建"),
              1
              /* TEXT */
            ),
            vue$1.createElementVNode("button", {
              class: "cancel-btn",
              onClick: _cache[38] || (_cache[38] = (...args) => $options.closeFaqForm && $options.closeFaqForm(...args)),
              "aria-label": "取消",
              tabindex: "0"
            }, "取消")
          ])
        ])
      ])) : vue$1.createCommentVNode("v-if", true),
      vue$1.createCommentVNode(" 用户反馈详情弹窗 "),
      $data.showFeedbackDetail ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
        key: 7,
        class: "policy-form-modal"
      }, [
        vue$1.createElementVNode("view", { class: "policy-form" }, [
          vue$1.createElementVNode("view", { class: "form-title" }, "反馈详情"),
          vue$1.createElementVNode(
            "view",
            { class: "form-input" },
            "反馈ID：" + vue$1.toDisplayString($data.feedbackDetail.id),
            1
            /* TEXT */
          ),
          vue$1.createElementVNode(
            "view",
            { class: "form-input" },
            "用户ID：" + vue$1.toDisplayString($data.feedbackDetail.userId),
            1
            /* TEXT */
          ),
          vue$1.createElementVNode(
            "view",
            { class: "form-input" },
            "提交时间：" + vue$1.toDisplayString($data.feedbackDetail.createTime),
            1
            /* TEXT */
          ),
          vue$1.createElementVNode(
            "view",
            { class: "form-textarea" },
            "内容：" + vue$1.toDisplayString($data.feedbackDetail.content),
            1
            /* TEXT */
          ),
          vue$1.createElementVNode("view", { class: "form-actions" }, [
            vue$1.createElementVNode("button", {
              class: "cancel-btn",
              onClick: _cache[39] || (_cache[39] = (...args) => $options.closeFeedbackDetail && $options.closeFeedbackDetail(...args)),
              "aria-label": "关闭",
              tabindex: "0"
            }, "关闭")
          ])
        ])
      ])) : vue$1.createCommentVNode("v-if", true)
    ]);
  }
  const PagesAdminIndex = /* @__PURE__ */ _export_sfc(_sfc_main$1d, [["render", _sfc_render$1c], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages/admin/index.vue"]]);
  const _sfc_main$1c = {
    data() {
      return {
        leftColumn: [],
        rightColumn: [],
        page: 1,
        pageSize: 10,
        loading: false,
        hasMore: true,
        error: false
      };
    },
    onLoad() {
      this.loadFavorites();
    },
    onReachBottom() {
      if (!this.loading && this.hasMore) {
        this.loadFavorites();
      }
    },
    methods: {
      goBack() {
        uni.navigateBack();
      },
      async loadFavorites(reset = false) {
        const token = uni.getStorageSync("token");
        if (!token) {
          uni.showToast({ title: "请先登录才能查看收藏", icon: "none" });
          this.error = true;
          this.hasMore = false;
          return;
        }
        if (this.loading || !this.hasMore && !reset)
          return;
        if (reset) {
          this.leftColumn = [];
          this.rightColumn = [];
          this.page = 1;
          this.hasMore = true;
          this.error = false;
        }
        this.loading = true;
        this.error = false;
        try {
          const url2 = `${this.$config.baseUrl}/policy/favorites`;
          formatAppLog("log", "at pages/policy/favorites.vue:145", "请求我的收藏 URL:", url2);
          const res = await uni.request({
            url: url2,
            method: "GET",
            data: {
              pageNum: this.page,
              pageSize: this.pageSize
            },
            header: { "Authorization": `Bearer ${token}` }
          });
          if (res.data.code !== 200)
            throw new Error(res.data.message || "接口错误");
          const newPolicies = res.data.data.records || [];
          if (newPolicies.length === 0) {
            this.hasMore = false;
            return;
          }
          newPolicies.forEach((policy) => {
            const card = { ...policy, loaded: true };
            if ((this.leftColumn.length + this.rightColumn.length) % 2 === 0) {
              this.leftColumn.push(card);
            } else {
              this.rightColumn.push(card);
            }
          });
          this.hasMore = newPolicies.length === this.pageSize;
          this.page++;
        } catch (error) {
          this.error = true;
          formatAppLog("error", "at pages/policy/favorites.vue:177", "加载我的收藏失败:", error);
          uni.showToast({ title: "加载收藏失败", icon: "none" });
        } finally {
          this.loading = false;
        }
      },
      onImageLoad(id) {
        const updateColumn = (column) => {
          const index = column.findIndex((item) => item.id === id);
          if (index !== -1)
            column[index].loaded = true;
        };
        updateColumn(this.leftColumn);
        updateColumn(this.rightColumn);
      },
      navigateToDetail(id) {
        uni.navigateTo({ url: `/pages/policy/detail?id=${id}` });
      },
      formatDate(timestamp) {
        if (!timestamp)
          return "";
        const date2 = new Date(timestamp);
        return date2.toISOString().split("T")[0];
      },
      formatViews(views) {
        return views >= 1e4 ? `${(views / 1e4).toFixed(1)}万` : views;
      }
    }
  };
  function _sfc_render$1b(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("view", { class: "container" }, [
      vue$1.createCommentVNode(" 顶部导航栏 "),
      vue$1.createElementVNode("view", { class: "header" }, [
        vue$1.createElementVNode("view", {
          class: "back-btn",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.goBack && $options.goBack(...args))
        }, [
          vue$1.createElementVNode("text", { class: "back-icon" }, "←")
        ]),
        vue$1.createElementVNode("text", { class: "title" }, "我的收藏")
      ]),
      vue$1.createCommentVNode(" 瀑布流内容区 "),
      vue$1.createElementVNode("view", { class: "waterfall-container" }, [
        vue$1.createElementVNode("view", { class: "waterfall-column left-column" }, [
          (vue$1.openBlock(true), vue$1.createElementBlock(
            vue$1.Fragment,
            null,
            vue$1.renderList($data.leftColumn, (item, index) => {
              return vue$1.openBlock(), vue$1.createElementBlock("view", {
                key: item.id || index,
                class: "policy-card",
                onClick: ($event) => $options.navigateToDetail(item.id),
                style: vue$1.normalizeStyle({ opacity: item.loaded ? 1 : 0 }),
                role: "button",
                "aria-label": item.title + "，点击查看政策详情",
                tabindex: "0"
              }, [
                item.cover ? (vue$1.openBlock(), vue$1.createElementBlock("image", {
                  key: 0,
                  src: item.cover,
                  mode: "widthFix",
                  class: "card-cover",
                  loading: "lazy",
                  onLoad: ($event) => $options.onImageLoad(item.id)
                }, null, 40, ["src", "onLoad"])) : vue$1.createCommentVNode("v-if", true),
                vue$1.createCommentVNode(" 这里不再显示收藏标签和按钮，因为已经是收藏列表 "),
                vue$1.createElementVNode("view", { class: "card-content" }, [
                  vue$1.createElementVNode(
                    "text",
                    { class: "card-title" },
                    vue$1.toDisplayString(item.title),
                    1
                    /* TEXT */
                  ),
                  vue$1.createElementVNode(
                    "text",
                    { class: "card-summary" },
                    vue$1.toDisplayString(item.summary),
                    1
                    /* TEXT */
                  ),
                  vue$1.createElementVNode("view", { class: "card-footer" }, [
                    vue$1.createElementVNode(
                      "text",
                      { class: "publish-date" },
                      vue$1.toDisplayString($options.formatDate(item.publishDate)),
                      1
                      /* TEXT */
                    ),
                    vue$1.createElementVNode(
                      "text",
                      { class: "views" },
                      vue$1.toDisplayString($options.formatViews(item.views)) + "阅读",
                      1
                      /* TEXT */
                    )
                  ])
                ])
              ], 12, ["onClick", "aria-label"]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ]),
        vue$1.createElementVNode("view", { class: "waterfall-column right-column" }, [
          (vue$1.openBlock(true), vue$1.createElementBlock(
            vue$1.Fragment,
            null,
            vue$1.renderList($data.rightColumn, (item, index) => {
              return vue$1.openBlock(), vue$1.createElementBlock("view", {
                key: item.id || index,
                class: "policy-card",
                onClick: ($event) => $options.navigateToDetail(item.id),
                style: vue$1.normalizeStyle({ opacity: item.loaded ? 1 : 0 }),
                role: "button",
                "aria-label": item.title + "，点击查看政策详情",
                tabindex: "0"
              }, [
                item.cover ? (vue$1.openBlock(), vue$1.createElementBlock("image", {
                  key: 0,
                  src: item.cover,
                  mode: "widthFix",
                  class: "card-cover",
                  loading: "lazy",
                  onLoad: ($event) => $options.onImageLoad(item.id)
                }, null, 40, ["src", "onLoad"])) : vue$1.createCommentVNode("v-if", true),
                vue$1.createElementVNode("view", { class: "card-content" }, [
                  vue$1.createElementVNode(
                    "text",
                    { class: "card-title" },
                    vue$1.toDisplayString(item.title),
                    1
                    /* TEXT */
                  ),
                  vue$1.createElementVNode(
                    "text",
                    { class: "card-summary" },
                    vue$1.toDisplayString(item.summary),
                    1
                    /* TEXT */
                  ),
                  vue$1.createElementVNode("view", { class: "card-footer" }, [
                    vue$1.createElementVNode(
                      "text",
                      { class: "publish-date" },
                      vue$1.toDisplayString($options.formatDate(item.publishDate)),
                      1
                      /* TEXT */
                    ),
                    vue$1.createElementVNode(
                      "text",
                      { class: "views" },
                      vue$1.toDisplayString($options.formatViews(item.views)) + "阅读",
                      1
                      /* TEXT */
                    )
                  ])
                ])
              ], 12, ["onClick", "aria-label"]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ])
      ]),
      vue$1.createCommentVNode(" 加载状态 "),
      $data.loading || !$data.hasMore ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
        key: 0,
        class: "loading-container"
      }, [
        $data.loading ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
          key: 0,
          class: "loading"
        }, [
          vue$1.createElementVNode("image", {
            src: _imports_0,
            mode: "widthFix",
            class: "loading-icon"
          }),
          vue$1.createElementVNode("text", null, "加载中...")
        ])) : !$data.hasMore ? (vue$1.openBlock(), vue$1.createElementBlock("text", {
          key: 1,
          class: "no-more"
        }, "没有更多数据了")) : vue$1.createCommentVNode("v-if", true)
      ])) : vue$1.createCommentVNode("v-if", true),
      vue$1.createCommentVNode(" 错误状态 "),
      $data.error ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
        key: 1,
        class: "error-container"
      }, [
        vue$1.createElementVNode("image", {
          src: _imports_1,
          mode: "widthFix",
          class: "error-icon"
        }),
        vue$1.createElementVNode("text", { class: "error-text" }, "加载失败，请检查网络"),
        vue$1.createElementVNode("button", {
          class: "retry-btn",
          onClick: _cache[1] || (_cache[1] = (...args) => $options.loadFavorites && $options.loadFavorites(...args))
        }, "重试")
      ])) : vue$1.createCommentVNode("v-if", true)
    ]);
  }
  const PagesPolicyFavorites = /* @__PURE__ */ _export_sfc(_sfc_main$1c, [["render", _sfc_render$1b], ["__scopeId", "data-v-ac8da1cc"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages/policy/favorites.vue"]]);
  const _sfc_main$1b = {
    data() {
      return {
        faqs: []
      };
    },
    onLoad() {
      this.fetchFaqs();
    },
    methods: {
      fetchFaqs() {
        uni.request({
          url: `${config$3.baseUrl}/faq/all`,
          method: "GET",
          success: (res) => {
            if (res.statusCode === 200 && res.data.code === 200) {
              this.faqs = res.data.data.map((item) => ({
                ...item,
                expanded: false
              }));
            }
          }
        });
      },
      toggleAnswer(index) {
        this.faqs[index].expanded = !this.faqs[index].expanded;
      },
      goToCustomerService() {
        uni.navigateTo({ url: "/pages-ai-desk/index/index" });
      }
    }
  };
  function _sfc_render$1a(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("view", { class: "faq-list-container" }, [
      vue$1.createElementVNode("text", { class: "section-title" }, "全部常见问题"),
      (vue$1.openBlock(true), vue$1.createElementBlock(
        vue$1.Fragment,
        null,
        vue$1.renderList($data.faqs, (item, index) => {
          return vue$1.openBlock(), vue$1.createElementBlock("view", {
            key: item.id || index,
            class: "faq-item",
            onClick: ($event) => $options.toggleAnswer(index),
            role: "button",
            "aria-label": item.question + (item.expanded ? "，已展开答案" : "，点击展开答案"),
            tabindex: "0"
          }, [
            vue$1.createElementVNode("view", { class: "question-block" }, [
              vue$1.createElementVNode(
                "text",
                { class: "question-text" },
                vue$1.toDisplayString(item.question),
                1
                /* TEXT */
              ),
              vue$1.createElementVNode(
                "view",
                {
                  class: vue$1.normalizeClass(["arrow", { expanded: item.expanded }])
                },
                null,
                2
                /* CLASS */
              )
            ]),
            item.expanded ? (vue$1.openBlock(), vue$1.createElementBlock(
              "view",
              {
                key: 0,
                class: "answer-block"
              },
              vue$1.toDisplayString(item.answer),
              1
              /* TEXT */
            )) : vue$1.createCommentVNode("v-if", true)
          ], 8, ["onClick", "aria-label"]);
        }),
        128
        /* KEYED_FRAGMENT */
      )),
      vue$1.createElementVNode("view", { class: "contact-support" }, [
        vue$1.createElementVNode("text", null, "无法解决您的问题？"),
        vue$1.createElementVNode("button", {
          class: "contact-btn",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.goToCustomerService && $options.goToCustomerService(...args)),
          "aria-label": "联系客服",
          tabindex: "0"
        }, " 联系客服 ")
      ])
    ]);
  }
  const PagesCommonFaq = /* @__PURE__ */ _export_sfc(_sfc_main$1b, [["render", _sfc_render$1a], ["__scopeId", "data-v-8d16a8e1"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages/common/faq.vue"]]);
  const _sfc_main$1a = {
    name: "AboutPage"
  };
  function _sfc_render$19(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("view", { class: "about-container" }, [
      vue$1.createElementVNode("text", { class: "about-title" }, "关于我们"),
      vue$1.createElementVNode("view", { class: "about-content" }, [
        vue$1.createElementVNode("text", null, " 本软件是一款专为视障及有特殊需求用户打造的无障碍服务平台。 我们致力于为用户提供便捷的志愿者视频协助、出行预约、政策查询、常见问题解答和人工客服等功能。 软件支持语音提示、触觉反馈，并对所有操作区块进行了无障碍优化，确保TalkBack、旁白等读屏工具可顺畅使用。 欢迎提出宝贵意见，让我们一起让世界更有温度！ "),
        vue$1.createElementVNode("view", { class: "about-section" }, [
          vue$1.createElementVNode("text", { class: "about-subtitle" }, "主要功能："),
          vue$1.createElementVNode("text", null, "1. 视频协助：一键呼叫志愿者，获得实时帮助。"),
          vue$1.createElementVNode("text", null, "2. 出行预约：提前预约志愿者协助出行。"),
          vue$1.createElementVNode("text", null, "3. 政策查询：查阅最新补贴政策和相关信息。"),
          vue$1.createElementVNode("text", null, "4. 常见问题：快速获取常见问题解答。"),
          vue$1.createElementVNode("text", null, "5. 人工客服：遇到难题可随时联系客服。"),
          vue$1.createElementVNode("text", null, "6. 全面无障碍：支持读屏、语音、触觉反馈。")
        ]),
        vue$1.createElementVNode("view", { class: "about-section" }, [
          vue$1.createElementVNode("text", { class: "about-subtitle" }, "联系我们："),
          vue$1.createElementVNode("text", null, "如有建议或合作意向，请通过客服入口与我们联系。")
        ])
      ])
    ]);
  }
  const PagesCommonAbout = /* @__PURE__ */ _export_sfc(_sfc_main$1a, [["render", _sfc_render$19], ["__scopeId", "data-v-d75f624b"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages/common/about.vue"]]);
  const _sfc_main$19 = {
    data() {
      return {
        content: "",
        contact: "",
        submitting: false
      };
    },
    methods: {
      submitFeedback() {
        if (!this.content.trim()) {
          uni.showToast({ title: "请填写反馈内容", icon: "none" });
          return;
        }
        this.submitting = true;
        uni.request({
          url: `${config$3.baseUrl}/user/manage/feedback`,
          method: "POST",
          header: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${uni.getStorageSync("token")}`
          },
          data: {
            content: this.content,
            contact: this.contact
          },
          success: (res) => {
            if (res.statusCode === 200 && res.data.code === 200) {
              uni.showToast({ title: "反馈提交成功", icon: "success" });
              this.content = "";
              this.contact = "";
            } else {
              uni.showToast({ title: res.data.msg || "提交失败", icon: "none" });
            }
          },
          fail: () => {
            uni.showToast({ title: "网络错误", icon: "none" });
          },
          complete: () => {
            this.submitting = false;
          }
        });
      }
    }
  };
  function _sfc_render$18(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("view", { class: "feedback-container" }, [
      vue$1.createElementVNode("text", { class: "feedback-title" }, "我要反馈"),
      vue$1.createElementVNode("view", { class: "feedback-form" }, [
        vue$1.withDirectives(vue$1.createElementVNode(
          "textarea",
          {
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.content = $event),
            class: "feedback-textarea",
            placeholder: "请输入您的反馈内容",
            maxlength: "500",
            "aria-label": "请输入您的反馈内容",
            tabindex: "0"
          },
          null,
          512
          /* NEED_PATCH */
        ), [
          [vue$1.vModelText, $data.content]
        ]),
        vue$1.withDirectives(vue$1.createElementVNode(
          "input",
          {
            "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.contact = $event),
            class: "feedback-input",
            placeholder: "联系方式（可选）",
            "aria-label": "联系方式，可选",
            tabindex: "0"
          },
          null,
          512
          /* NEED_PATCH */
        ), [
          [vue$1.vModelText, $data.contact]
        ]),
        vue$1.createElementVNode("button", {
          class: "submit-btn",
          onClick: _cache[2] || (_cache[2] = (...args) => $options.submitFeedback && $options.submitFeedback(...args)),
          disabled: $data.submitting
        }, vue$1.toDisplayString($data.submitting ? "提交中..." : "提交反馈"), 9, ["disabled"])
      ])
    ]);
  }
  const PagesCommonFeedback = /* @__PURE__ */ _export_sfc(_sfc_main$19, [["render", _sfc_render$18], ["__scopeId", "data-v-14faa9d4"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages/common/feedback.vue"]]);
  const _sfc_main$18 = {
    data() {
      return {
        debugOutput: "",
        originalConsoleLog: null,
        originalConsoleError: null
      };
    },
    onLoad() {
      this.originalConsoleLog = console.log;
      this.originalConsoleError = console.error;
      console.log = (...args) => {
        this.originalConsoleLog(...args);
        this.debugOutput += args.map(
          (arg) => typeof arg === "object" ? JSON.stringify(arg, null, 2) : String(arg)
        ).join(" ") + "\n";
      };
      console.error = (...args) => {
        this.originalConsoleError(...args);
        this.debugOutput += "❌ " + args.map(
          (arg) => typeof arg === "object" ? JSON.stringify(arg, null, 2) : String(arg)
        ).join(" ") + "\n";
      };
    },
    onUnload() {
      if (this.originalConsoleLog) {
        console.log = this.originalConsoleLog;
      }
      if (this.originalConsoleError) {
        console.error = this.originalConsoleError;
      }
    },
    methods: {
      // 检查存储数据
      checkStorageData() {
        formatAppLog("log", "at pages/debug/debug.vue:70", "=== 存储数据检查 ===");
        const token = uni.getStorageSync("token");
        const userInfo = uni.getStorageSync("userInfo");
        formatAppLog("log", "at pages/debug/debug.vue:75", "token:", token);
        formatAppLog("log", "at pages/debug/debug.vue:76", "userInfo:", userInfo);
        if (userInfo && userInfo.token) {
          formatAppLog("log", "at pages/debug/debug.vue:79", "userInfo.token:", userInfo.token);
          formatAppLog("log", "at pages/debug/debug.vue:80", "token是否一致:", token === userInfo.token);
        }
      },
      // 验证Token
      validateToken() {
        formatAppLog("log", "at pages/debug/debug.vue:86", "=== Token验证开始 ===");
        const token = uni.getStorageSync("token");
        const userInfo = uni.getStorageSync("userInfo");
        formatAppLog("log", "at pages/debug/debug.vue:91", "当前token:", token);
        formatAppLog("log", "at pages/debug/debug.vue:92", "userInfo:", userInfo);
        if (!token) {
          formatAppLog("error", "at pages/debug/debug.vue:95", "❌ Token不存在");
          return false;
        }
        const parseJwt = (token2) => {
          try {
            const base64Url = token2.split(".")[1];
            const base64 = base64Url.replace(/-/g, "+").replace(/_/g, "/");
            const jsonPayload = decodeURIComponent(atob(base64).split("").map(function(c2) {
              return "%" + ("00" + c2.charCodeAt(0).toString(16)).slice(-2);
            }).join(""));
            return JSON.parse(jsonPayload);
          } catch (e2) {
            formatAppLog("error", "at pages/debug/debug.vue:109", "Token解析失败:", e2);
            return null;
          }
        };
        const payload = parseJwt(token);
        if (payload) {
          formatAppLog("log", "at pages/debug/debug.vue:116", "✅ Token解析成功");
          formatAppLog("log", "at pages/debug/debug.vue:117", "用户ID:", payload.sub);
          formatAppLog("log", "at pages/debug/debug.vue:118", "过期时间:", new Date(payload.exp * 1e3));
          formatAppLog("log", "at pages/debug/debug.vue:119", "签发时间:", new Date(payload.iat * 1e3));
          const now = Math.floor(Date.now() / 1e3);
          if (payload.exp < now) {
            formatAppLog("error", "at pages/debug/debug.vue:124", "❌ Token已过期");
            return false;
          } else {
            formatAppLog("log", "at pages/debug/debug.vue:127", "✅ Token未过期");
            return true;
          }
        } else {
          formatAppLog("error", "at pages/debug/debug.vue:131", "❌ Token格式错误");
          return false;
        }
      },
      // 测试UserSig接口
      async testUserSig() {
        formatAppLog("log", "at pages/debug/debug.vue:138", "=== UserSig接口测试开始 ===");
        try {
          const token = uni.getStorageSync("token");
          formatAppLog("log", "at pages/debug/debug.vue:142", "使用的token:", token);
          const res = await uni.request({
            url: `${config$3.baseUrl}/user/userSig`,
            method: "GET",
            header: {
              "Authorization": `Bearer ${token}`
            },
            data: { userID: "" }
          });
          formatAppLog("log", "at pages/debug/debug.vue:153", "响应状态:", res[1] ? res[1].statusCode : res.statusCode);
          formatAppLog("log", "at pages/debug/debug.vue:154", "响应数据:", res[1] ? res[1].data : res.data);
          if (res[1] && res[1].statusCode === 200 && res[1].data.code === 200 || res.statusCode === 200 && res.data.code === 200) {
            const data = res[1] ? res[1].data.data : res.data.data;
            formatAppLog("log", "at pages/debug/debug.vue:159", "✅ UserSig获取成功");
            formatAppLog("log", "at pages/debug/debug.vue:160", "返回的用户ID:", data.userID);
            formatAppLog("log", "at pages/debug/debug.vue:161", "UserSig长度:", data.userSig.length);
            formatAppLog("log", "at pages/debug/debug.vue:162", "UserSig前50字符:", data.userSig.substring(0, 50) + "...");
            return data;
          } else {
            formatAppLog("error", "at pages/debug/debug.vue:165", "❌ UserSig获取失败:", res[1] ? res[1].data.message : res.data.message);
            return null;
          }
        } catch (error) {
          formatAppLog("error", "at pages/debug/debug.vue:169", "❌ 请求异常:", error);
          return null;
        }
      },
      // 测试WebSocket连接
      testWebSocket() {
        formatAppLog("log", "at pages/debug/debug.vue:176", "=== WebSocket连接测试开始 ===");
        const token = uni.getStorageSync("token");
        const wsUrl = `${config$3.baseUrl.replace("http", "ws")}/ws?token=${token}`;
        formatAppLog("log", "at pages/debug/debug.vue:181", "连接URL:", wsUrl);
        formatAppLog("log", "at pages/debug/debug.vue:182", "使用的token:", token);
        let socketTask = null;
        socketTask = uni.connectSocket({
          url: wsUrl,
          success: () => {
            formatAppLog("log", "at pages/debug/debug.vue:190", "✅ WebSocket连接创建成功");
          },
          fail: (error) => {
            formatAppLog("error", "at pages/debug/debug.vue:193", "❌ WebSocket连接创建失败:", error);
          }
        });
        socketTask.onOpen(() => {
          formatAppLog("log", "at pages/debug/debug.vue:199", "✅ WebSocket连接已打开");
          socketTask.send({
            data: JSON.stringify({
              type: "HEARTBEAT",
              timestamp: Date.now()
            }),
            success: () => {
              formatAppLog("log", "at pages/debug/debug.vue:208", "✅ 测试消息发送成功");
            },
            fail: (error) => {
              formatAppLog("error", "at pages/debug/debug.vue:211", "❌ 测试消息发送失败:", error);
            }
          });
        });
        socketTask.onMessage((res) => {
          formatAppLog("log", "at pages/debug/debug.vue:218", "收到WebSocket消息:", res.data);
        });
        socketTask.onError((error) => {
          formatAppLog("error", "at pages/debug/debug.vue:223", "❌ WebSocket连接错误:", error);
        });
        socketTask.onClose((res) => {
          formatAppLog("log", "at pages/debug/debug.vue:228", "WebSocket连接关闭:", res);
          formatAppLog("log", "at pages/debug/debug.vue:229", "关闭代码:", res.code);
          formatAppLog("log", "at pages/debug/debug.vue:230", "关闭原因:", res.reason);
        });
        setTimeout(() => {
          if (socketTask) {
            socketTask.close();
            formatAppLog("log", "at pages/debug/debug.vue:237", "测试连接已关闭");
          }
        }, 5e3);
      },
      // 验证TUICallKit配置
      async validateTUICallKit() {
        formatAppLog("log", "at pages/debug/debug.vue:244", "=== TUICallKit配置验证开始 ===");
        const TUICallKit2 = requireNativePlugin("TencentCloud-TUICallKit");
        const sdkAppId = 1600093684;
        formatAppLog("log", "at pages/debug/debug.vue:250", "SDKAppID:", sdkAppId);
        try {
          const userSigData = await this.testUserSig();
          if (!userSigData) {
            formatAppLog("error", "at pages/debug/debug.vue:256", "❌ 无法获取UserSig");
            return null;
          }
          const userID = userSigData.userID;
          const userSig = userSigData.userSig;
          formatAppLog("log", "at pages/debug/debug.vue:263", "✅ UserSig获取成功");
          formatAppLog("log", "at pages/debug/debug.vue:264", "用户ID:", userID);
          formatAppLog("log", "at pages/debug/debug.vue:265", "UserSig:", userSig.substring(0, 50) + "...");
          const loginParams = {
            SDKAppID: sdkAppId,
            userID,
            userSig
          };
          formatAppLog("log", "at pages/debug/debug.vue:274", "TUICallKit登录参数:", loginParams);
          TUICallKit2.login(loginParams, (res) => {
            formatAppLog("log", "at pages/debug/debug.vue:278", "TUICallKit登录结果:", res);
            if (res.code === 0) {
              formatAppLog("log", "at pages/debug/debug.vue:280", "✅ TUICallKit登录成功");
            } else {
              formatAppLog("error", "at pages/debug/debug.vue:282", "❌ TUICallKit登录失败:", res.msg);
            }
          });
          return loginParams;
        } catch (error) {
          formatAppLog("error", "at pages/debug/debug.vue:288", "❌ 获取UserSig异常:", error);
          return null;
        }
      },
      // 运行完整调试
      async runFullDebug() {
        formatAppLog("log", "at pages/debug/debug.vue:295", "🚀 开始完整调试流程...");
        formatAppLog("log", "at pages/debug/debug.vue:298", "\n--- 步骤1: Token验证 ---");
        const tokenValid = this.validateToken();
        if (!tokenValid) {
          formatAppLog("error", "at pages/debug/debug.vue:302", "❌ Token验证失败，停止调试");
          return;
        }
        formatAppLog("log", "at pages/debug/debug.vue:307", "\n--- 步骤2: UserSig接口测试 ---");
        const userSigData = await this.testUserSig();
        if (!userSigData) {
          formatAppLog("error", "at pages/debug/debug.vue:311", "❌ UserSig获取失败，停止调试");
          return;
        }
        formatAppLog("log", "at pages/debug/debug.vue:316", "\n--- 步骤3: WebSocket连接测试 ---");
        this.testWebSocket();
        formatAppLog("log", "at pages/debug/debug.vue:320", "\n--- 步骤4: TUICallKit配置验证 ---");
        setTimeout(() => {
          this.validateTUICallKit();
        }, 2e3);
        formatAppLog("log", "at pages/debug/debug.vue:325", "\n✅ 调试流程启动完成，请查看控制台输出");
      },
      // 清空输出
      clearOutput() {
        this.debugOutput = "";
      },
      // 打开通知测试页面
      openNotificationTest() {
        uni.navigateTo({
          url: "/pages/debug/notification-test"
        });
      }
    }
  };
  function _sfc_render$17(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("view", { class: "debug-container" }, [
      vue$1.createElementVNode("view", { class: "debug-header" }, [
        vue$1.createElementVNode("text", { class: "debug-title" }, "WebSocket & UserSig 调试工具"),
        vue$1.createElementVNode("text", { class: "debug-subtitle" }, "点击按钮执行相应的调试功能")
      ]),
      vue$1.createElementVNode("view", { class: "debug-buttons" }, [
        vue$1.createElementVNode("button", {
          class: "debug-btn",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.checkStorageData && $options.checkStorageData(...args))
        }, "检查存储数据"),
        vue$1.createElementVNode("button", {
          class: "debug-btn",
          onClick: _cache[1] || (_cache[1] = (...args) => $options.validateToken && $options.validateToken(...args))
        }, "验证Token"),
        vue$1.createElementVNode("button", {
          class: "debug-btn",
          onClick: _cache[2] || (_cache[2] = (...args) => $options.testUserSig && $options.testUserSig(...args))
        }, "测试UserSig接口"),
        vue$1.createElementVNode("button", {
          class: "debug-btn",
          onClick: _cache[3] || (_cache[3] = (...args) => $options.testWebSocket && $options.testWebSocket(...args))
        }, "测试WebSocket连接"),
        vue$1.createElementVNode("button", {
          class: "debug-btn",
          onClick: _cache[4] || (_cache[4] = (...args) => $options.validateTUICallKit && $options.validateTUICallKit(...args))
        }, "验证TUICallKit"),
        vue$1.createElementVNode("button", {
          class: "debug-btn notification",
          onClick: _cache[5] || (_cache[5] = (...args) => $options.openNotificationTest && $options.openNotificationTest(...args))
        }, "通知功能测试"),
        vue$1.createElementVNode("button", {
          class: "debug-btn primary",
          onClick: _cache[6] || (_cache[6] = (...args) => $options.runFullDebug && $options.runFullDebug(...args))
        }, "运行完整调试")
      ]),
      vue$1.createElementVNode("view", { class: "debug-output" }, [
        vue$1.createElementVNode("text", { class: "output-title" }, "调试输出:"),
        vue$1.createElementVNode("scroll-view", {
          class: "output-content",
          "scroll-y": ""
        }, [
          vue$1.createElementVNode(
            "text",
            { class: "output-text" },
            vue$1.toDisplayString($data.debugOutput),
            1
            /* TEXT */
          )
        ]),
        vue$1.createElementVNode("button", {
          class: "clear-btn",
          onClick: _cache[7] || (_cache[7] = (...args) => $options.clearOutput && $options.clearOutput(...args))
        }, "清空输出")
      ])
    ]);
  }
  const PagesDebugDebug = /* @__PURE__ */ _export_sfc(_sfc_main$18, [["render", _sfc_render$17], ["__scopeId", "data-v-12bbb3dc"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages/debug/debug.vue"]]);
  const _sfc_main$17 = {
    data() {
      return {
        apiTestResult: "",
        markAsReadResult: "",
        testMessageId: "",
        notifications: []
      };
    },
    onLoad() {
      this.refreshNotifications();
    },
    methods: {
      // 测试API连接
      async testApiConnection() {
        this.apiTestResult = "测试中...";
        try {
          const result = await notificationService.testApiConnection();
          this.apiTestResult = result ? "✅ API连接正常" : "❌ API连接失败";
        } catch (error) {
          this.apiTestResult = `❌ 测试失败: ${error.message}`;
        }
      },
      // 测试标记已读
      async testMarkAsRead() {
        if (!this.testMessageId) {
          this.markAsReadResult = "请输入通知ID";
          return;
        }
        this.markAsReadResult = "测试中...";
        try {
          await notificationService.markAsRead(this.testMessageId);
          this.markAsReadResult = "✅ 标记已读成功";
          this.refreshNotifications();
        } catch (error) {
          this.markAsReadResult = `❌ 标记已读失败: ${error.message}`;
        }
      },
      // 刷新通知列表
      refreshNotifications() {
        this.notifications = notificationService.getNotifications();
      },
      // 标记所有为已读
      async markAllAsRead() {
        try {
          await notificationService.markAllAsRead();
          this.refreshNotifications();
          uni.showToast({
            title: "标记所有为已读成功",
            icon: "success"
          });
        } catch (error) {
          uni.showToast({
            title: "标记所有为已读失败",
            icon: "none"
          });
        }
      },
      markAsReadLocal(messageId) {
        this.notifications.forEach((n2) => {
          if (n2.messageId === messageId)
            n2.isRead = true;
        });
        this.updateUnreadCount();
      }
    }
  };
  function _sfc_render$16(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("view", { class: "notification-test" }, [
      vue$1.createElementVNode("view", { class: "test-header" }, [
        vue$1.createElementVNode("text", { class: "test-title" }, "通知API测试")
      ]),
      vue$1.createElementVNode("view", { class: "test-section" }, [
        vue$1.createElementVNode("text", { class: "section-title" }, "API连接测试"),
        vue$1.createElementVNode("button", {
          class: "test-btn",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.testApiConnection && $options.testApiConnection(...args))
        }, "测试API连接"),
        vue$1.createElementVNode(
          "text",
          { class: "test-result" },
          vue$1.toDisplayString($data.apiTestResult),
          1
          /* TEXT */
        )
      ]),
      vue$1.createElementVNode("view", { class: "test-section" }, [
        vue$1.createElementVNode("text", { class: "section-title" }, "标记已读测试"),
        vue$1.withDirectives(vue$1.createElementVNode(
          "input",
          {
            class: "test-input",
            "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.testMessageId = $event),
            placeholder: "输入通知ID"
          },
          null,
          512
          /* NEED_PATCH */
        ), [
          [vue$1.vModelText, $data.testMessageId]
        ]),
        vue$1.createElementVNode("button", {
          class: "test-btn",
          onClick: _cache[2] || (_cache[2] = (...args) => $options.testMarkAsRead && $options.testMarkAsRead(...args))
        }, "测试标记已读"),
        vue$1.createElementVNode(
          "text",
          { class: "test-result" },
          vue$1.toDisplayString($data.markAsReadResult),
          1
          /* TEXT */
        )
      ]),
      vue$1.createElementVNode("view", { class: "test-section" }, [
        vue$1.createElementVNode("text", { class: "section-title" }, "当前通知列表"),
        vue$1.createElementVNode("view", { class: "notification-list" }, [
          (vue$1.openBlock(true), vue$1.createElementBlock(
            vue$1.Fragment,
            null,
            vue$1.renderList($data.notifications, (notification) => {
              return vue$1.openBlock(), vue$1.createElementBlock("view", {
                key: notification.messageId,
                class: "notification-item"
              }, [
                vue$1.createElementVNode(
                  "text",
                  { class: "notification-id" },
                  "ID: " + vue$1.toDisplayString(notification.messageId),
                  1
                  /* TEXT */
                ),
                vue$1.createElementVNode(
                  "text",
                  { class: "notification-title" },
                  vue$1.toDisplayString(notification.title),
                  1
                  /* TEXT */
                ),
                vue$1.createElementVNode(
                  "text",
                  {
                    class: vue$1.normalizeClass(["notification-status", { "unread": !notification.isRead }])
                  },
                  vue$1.toDisplayString(notification.isRead ? "已读" : "未读"),
                  3
                  /* TEXT, CLASS */
                )
              ]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ])
      ]),
      vue$1.createElementVNode("view", { class: "test-section" }, [
        vue$1.createElementVNode("text", { class: "section-title" }, "操作"),
        vue$1.createElementVNode("button", {
          class: "test-btn",
          onClick: _cache[3] || (_cache[3] = (...args) => $options.refreshNotifications && $options.refreshNotifications(...args))
        }, "刷新通知列表"),
        vue$1.createElementVNode("button", {
          class: "test-btn",
          onClick: _cache[4] || (_cache[4] = (...args) => $options.markAllAsRead && $options.markAllAsRead(...args))
        }, "标记所有为已读")
      ])
    ]);
  }
  const PagesDebugNotificationTest = /* @__PURE__ */ _export_sfc(_sfc_main$17, [["render", _sfc_render$16], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages/debug/notification-test.vue"]]);
  const _sfc_main$16 = {
    data() {
      return {
        notifications: [],
        unreadCount: 0,
        refreshTimer: null
      };
    },
    onLoad() {
      this.loadNotifications();
      this.startRefreshTimer();
    },
    onShow() {
      this.loadNotifications();
    },
    onUnload() {
      this.stopRefreshTimer();
    },
    methods: {
      // 加载通知列表
      loadNotifications() {
        try {
          const all = notificationService.getNotifications();
          const unique = [];
          const seen = /* @__PURE__ */ new Set();
          for (const n2 of all) {
            if (!seen.has(n2.messageId)) {
              unique.push(n2);
              seen.add(n2.messageId);
            }
          }
          this.notifications = unique;
          this.unreadCount = unique.filter((n2) => !n2.isRead).length;
        } catch (error) {
          formatAppLog("error", "at pages/notification/center.vue:112", "[NotificationCenter] 加载通知失败:", error);
        }
      },
      // 开始刷新定时器
      startRefreshTimer() {
        this.refreshTimer = setInterval(() => {
          this.loadNotifications();
        }, 3e3);
      },
      // 停止刷新定时器
      stopRefreshTimer() {
        if (this.refreshTimer) {
          clearInterval(this.refreshTimer);
          this.refreshTimer = null;
        }
      },
      // 返回上一页
      goBack() {
        uni.navigateBack();
      },
      // 处理通知点击
      handleNotificationTap(notification) {
        if (!notification.isRead) {
          this.markAsRead(notification.messageId);
        }
        switch (notification.type) {
          case "CALL":
            this.handleCallNotification(notification);
            break;
          case "POLICY":
            this.handlePolicyNotification(notification);
            break;
          case "SYSTEM":
            this.handleSystemNotification(notification);
            break;
          default:
            this.showNotificationDetail(notification);
        }
      },
      // 标记为已读
      async markAsRead(messageId) {
        try {
          await notificationService.markAsRead(messageId);
          this.loadNotifications();
          formatAppLog("log", "at pages/notification/center.vue:165", "[NotificationCenter] 标记已读成功:", messageId);
        } catch (error) {
          formatAppLog("error", "at pages/notification/center.vue:167", "[NotificationCenter] 标记已读失败:", error);
          uni.showToast({
            title: "标记已读失败",
            icon: "none"
          });
        }
      },
      // 删除通知
      deleteNotification(messageId) {
        uni.showModal({
          title: "确认删除",
          content: "确定要删除这条通知吗？",
          success: (res) => {
            if (res.confirm) {
              try {
                this.notifications = this.notifications.filter((n2) => n2.messageId !== messageId);
                this.loadNotifications();
                uni.showToast({
                  title: "删除成功",
                  icon: "success"
                });
              } catch (error) {
                formatAppLog("error", "at pages/notification/center.vue:192", "[NotificationCenter] 删除通知失败:", error);
                uni.showToast({
                  title: "删除失败",
                  icon: "none"
                });
              }
            }
          }
        });
      },
      // 清空所有通知
      clearAllNotifications() {
        uni.showModal({
          title: "确认清空",
          content: "确定要清空所有通知吗？此操作不可恢复。",
          success: (res) => {
            if (res.confirm) {
              try {
                notificationService.clearNotifications();
                this.loadNotifications();
                uni.showToast({
                  title: "清空成功",
                  icon: "success"
                });
              } catch (error) {
                formatAppLog("error", "at pages/notification/center.vue:218", "[NotificationCenter] 清空通知失败:", error);
                uni.showToast({
                  title: "清空失败",
                  icon: "none"
                });
              }
            }
          }
        });
      },
      // 处理通话通知
      handleCallNotification(notification) {
        const extraData = notification.extraData ? JSON.parse(notification.extraData) : {};
        uni.navigateTo({
          url: `/pages/video-call/caller?roomId=${extraData.roomId || ""}`
        });
      },
      // 处理政策通知
      handlePolicyNotification(notification) {
        uni.navigateTo({
          url: `/pages/policy/detail?id=${notification.messageId}`
        });
      },
      // 处理系统通知
      handleSystemNotification(notification) {
        this.showNotificationDetail(notification);
      },
      // 显示通知详情
      showNotificationDetail(notification) {
        uni.showModal({
          title: notification.title,
          content: notification.content,
          showCancel: false,
          confirmText: "知道了"
        });
      },
      // 获取通知图标
      getNotificationIcon(type) {
        const iconMap = {
          "SYSTEM": "🔔",
          "CALL": "📞",
          "EMAIL": "📧",
          "USER": "👤",
          "POLICY": "📋",
          "FAQ": "❓"
        };
        return iconMap[type] || "📢";
      },
      // 获取级别样式类
      getLevelClass(level) {
        const classMap = {
          "URGENT": "level-urgent",
          "HIGH": "level-high",
          "NORMAL": "level-normal",
          "LOW": "level-low"
        };
        return classMap[level] || "level-normal";
      },
      // 获取级别文本
      getLevelText(level) {
        const textMap = {
          "URGENT": "紧急",
          "HIGH": "重要",
          "NORMAL": "普通",
          "LOW": "低优先级"
        };
        return textMap[level] || "普通";
      },
      // 格式化时间
      formatTime(timeStr) {
        if (!timeStr)
          return "";
        const date2 = new Date(timeStr);
        const now = /* @__PURE__ */ new Date();
        const diff = now - date2;
        if (diff < 6e4) {
          return "刚刚";
        }
        if (diff < 36e5) {
          return `${Math.floor(diff / 6e4)}分钟前`;
        }
        if (diff < 864e5) {
          return `${Math.floor(diff / 36e5)}小时前`;
        }
        if (diff < 6048e5) {
          return `${Math.floor(diff / 864e5)}天前`;
        }
        return date2.toLocaleDateString();
      },
      // 标记所有为已读
      async markAllAsRead() {
        try {
          await notificationService.markAllAsRead();
          this.loadNotifications();
          formatAppLog("log", "at pages/notification/center.vue:327", "[NotificationCenter] 标记所有为已读成功");
        } catch (error) {
          formatAppLog("error", "at pages/notification/center.vue:329", "[NotificationCenter] 标记所有为已读失败:", error);
          uni.showToast({
            title: "标记所有为已读失败",
            icon: "none"
          });
        }
      }
    }
  };
  function _sfc_render$15(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("view", { class: "notification-center" }, [
      vue$1.createCommentVNode(" 顶部导航栏 "),
      vue$1.createElementVNode("view", { class: "navbar" }, [
        vue$1.createElementVNode("view", {
          class: "navbar-left",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.goBack && $options.goBack(...args))
        }, [
          vue$1.createElementVNode("text", { class: "back-icon" }, "←")
        ]),
        vue$1.createElementVNode("view", { class: "navbar-title" }, "消息中心"),
        vue$1.createElementVNode("view", { class: "navbar-right" }, [
          $data.unreadCount > 0 ? (vue$1.openBlock(), vue$1.createElementBlock("text", {
            key: 0,
            class: "mark-all-read-btn",
            onClick: _cache[1] || (_cache[1] = (...args) => $options.markAllAsRead && $options.markAllAsRead(...args))
          }, "全部已读")) : vue$1.createCommentVNode("v-if", true),
          vue$1.createElementVNode("text", {
            class: "clear-btn",
            onClick: _cache[2] || (_cache[2] = (...args) => $options.clearAllNotifications && $options.clearAllNotifications(...args))
          }, "清空")
        ])
      ]),
      vue$1.createCommentVNode(" 通知列表 "),
      $data.notifications.length > 0 ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
        key: 0,
        class: "notification-list"
      }, [
        (vue$1.openBlock(true), vue$1.createElementBlock(
          vue$1.Fragment,
          null,
          vue$1.renderList($data.notifications, (notification) => {
            return vue$1.openBlock(), vue$1.createElementBlock("view", {
              key: notification.id,
              class: vue$1.normalizeClass(["notification-item", { "unread": !notification.isRead }]),
              onClick: ($event) => $options.handleNotificationTap(notification)
            }, [
              vue$1.createCommentVNode(" 通知图标 "),
              vue$1.createElementVNode("view", { class: "notification-icon" }, [
                vue$1.createElementVNode(
                  "text",
                  {
                    class: vue$1.normalizeClass($options.getNotificationIcon(notification.type))
                  },
                  null,
                  2
                  /* CLASS */
                )
              ]),
              vue$1.createCommentVNode(" 通知内容 "),
              vue$1.createElementVNode("view", { class: "notification-content" }, [
                vue$1.createElementVNode("view", { class: "notification-header" }, [
                  vue$1.createElementVNode(
                    "text",
                    { class: "notification-title" },
                    vue$1.toDisplayString(notification.title),
                    1
                    /* TEXT */
                  ),
                  vue$1.createElementVNode(
                    "text",
                    { class: "notification-time" },
                    vue$1.toDisplayString($options.formatTime(notification.createTime)),
                    1
                    /* TEXT */
                  )
                ]),
                vue$1.createElementVNode(
                  "text",
                  { class: "notification-text" },
                  vue$1.toDisplayString(notification.content),
                  1
                  /* TEXT */
                ),
                vue$1.createCommentVNode(" 通知级别标签 "),
                notification.level ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
                  key: 0,
                  class: "notification-level"
                }, [
                  vue$1.createElementVNode(
                    "text",
                    {
                      class: vue$1.normalizeClass($options.getLevelClass(notification.level))
                    },
                    vue$1.toDisplayString($options.getLevelText(notification.level)),
                    3
                    /* TEXT, CLASS */
                  )
                ])) : vue$1.createCommentVNode("v-if", true)
              ]),
              vue$1.createCommentVNode(" 操作按钮 "),
              vue$1.createElementVNode("view", { class: "notification-actions" }, [
                !notification.isRead ? (vue$1.openBlock(), vue$1.createElementBlock("text", {
                  key: 0,
                  class: "mark-read-btn",
                  onClick: vue$1.withModifiers(($event) => $options.markAsRead(notification.messageId), ["stop"])
                }, " 标记已读 ", 8, ["onClick"])) : vue$1.createCommentVNode("v-if", true)
              ])
            ], 10, ["onClick"]);
          }),
          128
          /* KEYED_FRAGMENT */
        ))
      ])) : (vue$1.openBlock(), vue$1.createElementBlock(
        vue$1.Fragment,
        { key: 1 },
        [
          vue$1.createCommentVNode(" 空状态 "),
          vue$1.createElementVNode("view", { class: "empty-state" }, [
            vue$1.createElementVNode("text", { class: "empty-icon" }, "📭"),
            vue$1.createElementVNode("text", { class: "empty-title" }, "暂无消息"),
            vue$1.createElementVNode("text", { class: "empty-desc" }, "您还没有收到任何通知消息")
          ])
        ],
        2112
        /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
      )),
      vue$1.createCommentVNode(" 统计信息 "),
      vue$1.createElementVNode("view", { class: "stats-bar" }, [
        vue$1.createElementVNode(
          "text",
          { class: "stats-text" },
          "共 " + vue$1.toDisplayString($data.notifications.length) + " 条消息，" + vue$1.toDisplayString($data.unreadCount) + " 条未读",
          1
          /* TEXT */
        )
      ])
    ]);
  }
  const PagesNotificationCenter = /* @__PURE__ */ _export_sfc(_sfc_main$16, [["render", _sfc_render$15], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages/notification/center.vue"]]);
  let vueVersion;
  vueVersion = 3;
  const VueUni = /* @__PURE__ */ _mergeNamespaces({
    __proto__: null,
    get vueVersion() {
      return vueVersion;
    }
  }, [vue__namespace]);
  let vue = VueUni;
  var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
  function getDefaultExportFromCjs(x2) {
    return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
  }
  var chat = { exports: {} };
  (function(module, exports) {
    !function(e2, t2) {
      module.exports = t2();
    }(commonjsGlobal, function() {
      function l2(e3, t3) {
        (null == t3 || t3 > e3.length) && (t3 = e3.length);
        for (var n3 = 0, o3 = Array(t3); n3 < t3; n3++)
          o3[n3] = e3[n3];
        return o3;
      }
      function b2(e3) {
        if (Array.isArray(e3))
          return e3;
      }
      function i2(e3, t3, n3) {
        t3 = x2(t3);
        var o3 = e3, t3 = V2() ? Reflect.construct(t3, n3 || [], x2(e3).constructor) : t3.apply(e3, n3);
        if (!t3 || "object" != typeof t3 && "function" != typeof t3) {
          if (void 0 !== t3)
            throw new TypeError("Derived constructors may only return object or undefined");
          if (void 0 === (t3 = o3))
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return t3;
      }
      function p2(e3, t3) {
        if (!(e3 instanceof t3))
          throw new TypeError("Cannot call a class as a function");
      }
      function w2(e3, t3) {
        for (var n3 = 0; n3 < t3.length; n3++) {
          var o3 = t3[n3];
          o3.enumerable = o3.enumerable || false, o3.configurable = true, "value" in o3 && (o3.writable = true), Object.defineProperty(e3, J2(o3.key), o3);
        }
      }
      function e2(e3, t3, n3) {
        return t3 && w2(e3.prototype, t3), n3 && w2(e3, n3), Object.defineProperty(e3, "prototype", { writable: false }), e3;
      }
      function F2(e3, t3) {
        var n3, o3, i3, a3, s3 = "undefined" != typeof Symbol && e3[Symbol.iterator] || e3["@@iterator"];
        if (s3)
          return i3 = !(o3 = true), { s: function() {
            s3 = s3.call(e3);
          }, n: function() {
            var e4 = s3.next();
            return o3 = e4.done, e4;
          }, e: function(e4) {
            i3 = true, n3 = e4;
          }, f: function() {
            try {
              o3 || null == s3.return || s3.return();
            } finally {
              if (i3)
                throw n3;
            }
          } };
        if (Array.isArray(e3) || (s3 = X2(e3)) || t3 && e3 && "number" == typeof e3.length)
          return s3 && (e3 = s3), a3 = 0, { s: t3 = function() {
          }, n: function() {
            return a3 >= e3.length ? { done: true } : { done: false, value: e3[a3++] };
          }, e: function(e4) {
            throw e4;
          }, f: t3 };
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function q2(e3, t3, n3) {
        return (t3 = J2(t3)) in e3 ? Object.defineProperty(e3, t3, { value: n3, enumerable: true, configurable: true, writable: true }) : e3[t3] = n3, e3;
      }
      function x2(e3) {
        return (x2 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(e4) {
          return e4.__proto__ || Object.getPrototypeOf(e4);
        })(e3);
      }
      function t2(e3, t3) {
        if ("function" != typeof t3 && null !== t3)
          throw new TypeError("Super expression must either be null or a function");
        e3.prototype = Object.create(t3 && t3.prototype, { constructor: { value: e3, writable: true, configurable: true } }), Object.defineProperty(e3, "prototype", { writable: false }), t3 && Y2(e3, t3);
      }
      function V2() {
        try {
          var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          }));
        } catch (e4) {
        }
        return (V2 = function() {
          return !!e3;
        })();
      }
      function B2(e3) {
        if ("undefined" != typeof Symbol && null != e3[Symbol.iterator] || null != e3["@@iterator"])
          return Array.from(e3);
      }
      function H2() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function K2(t3, e3) {
        var n3, o3 = Object.keys(t3);
        return Object.getOwnPropertySymbols && (n3 = Object.getOwnPropertySymbols(t3), e3 && (n3 = n3.filter(function(e4) {
          return Object.getOwnPropertyDescriptor(t3, e4).enumerable;
        })), o3.push.apply(o3, n3)), o3;
      }
      function y2(t3) {
        for (var e3 = 1; e3 < arguments.length; e3++) {
          var n3 = null != arguments[e3] ? arguments[e3] : {};
          e3 % 2 ? K2(Object(n3), true).forEach(function(e4) {
            q2(t3, e4, n3[e4]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t3, Object.getOwnPropertyDescriptors(n3)) : K2(Object(n3)).forEach(function(e4) {
            Object.defineProperty(t3, e4, Object.getOwnPropertyDescriptor(n3, e4));
          });
        }
        return t3;
      }
      function W2(e3, t3) {
        if (null == e3)
          return {};
        var n3, o3 = function(e4, t4) {
          if (null == e4)
            return {};
          var n4, o4 = {};
          for (n4 in e4)
            if ({}.hasOwnProperty.call(e4, n4)) {
              if (0 <= t4.indexOf(n4))
                continue;
              o4[n4] = e4[n4];
            }
          return o4;
        }(e3, t3);
        if (Object.getOwnPropertySymbols)
          for (var i3 = Object.getOwnPropertySymbols(e3), a3 = 0; a3 < i3.length; a3++)
            n3 = i3[a3], 0 <= t3.indexOf(n3) || {}.propertyIsEnumerable.call(e3, n3) && (o3[n3] = e3[n3]);
        return o3;
      }
      function Y2(e3, t3) {
        return (Y2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(e4, t4) {
          return e4.__proto__ = t4, e4;
        })(e3, t3);
      }
      function j2(e3, t3) {
        return b2(e3) || function(e4, t4) {
          var n3 = null == e4 ? null : "undefined" != typeof Symbol && e4[Symbol.iterator] || e4["@@iterator"];
          if (null != n3) {
            var o3, i3, a3, s3, r3 = [], c3 = true, u3 = false;
            try {
              if (a3 = (n3 = n3.call(e4)).next, 0 === t4) {
                if (Object(n3) !== n3)
                  return;
                c3 = false;
              } else
                for (; !(c3 = (o3 = a3.call(n3)).done) && (r3.push(o3.value), r3.length !== t4); c3 = true)
                  ;
            } catch (e5) {
              u3 = true, i3 = e5;
            } finally {
              try {
                if (!c3 && null != n3.return && (s3 = n3.return(), Object(s3) !== s3))
                  return;
              } finally {
                if (u3)
                  throw i3;
              }
            }
            return r3;
          }
        }(e3, t3) || X2(e3, t3) || H2();
      }
      function d2(e3) {
        return function(e4) {
          if (Array.isArray(e4))
            return l2(e4);
        }(e3) || B2(e3) || X2(e3) || function() {
          throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }();
      }
      function J2(e3) {
        e3 = function(e4) {
          if ("object" != typeof e4 || !e4)
            return e4;
          var t3 = e4[Symbol.toPrimitive];
          if (void 0 === t3)
            return String(e4);
          t3 = t3.call(e4, "string");
          if ("object" != typeof t3)
            return t3;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }(e3);
        return "symbol" == typeof e3 ? e3 : e3 + "";
      }
      function z2(e3) {
        return (z2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
          return typeof e4;
        } : function(e4) {
          return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
        })(e3);
      }
      function X2(e3, t3) {
        var n3;
        if (e3)
          return "string" == typeof e3 ? l2(e3, t3) : "Map" === (n3 = "Object" === (n3 = {}.toString.call(e3).slice(8, -1)) && e3.constructor ? e3.constructor.name : n3) || "Set" === n3 ? Array.from(e3) : "Arguments" === n3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3) ? l2(e3, t3) : void 0;
      }
      function Z2(e3) {
        var n3 = "function" == typeof Map ? /* @__PURE__ */ new Map() : void 0;
        return function(e4) {
          if (null === e4 || !function(t4) {
            try {
              return -1 !== Function.toString.call(t4).indexOf("[native code]");
            } catch (e5) {
              return "function" == typeof t4;
            }
          }(e4))
            return e4;
          if ("function" != typeof e4)
            throw new TypeError("Super expression must either be null or a function");
          if (void 0 !== n3) {
            if (n3.has(e4))
              return n3.get(e4);
            n3.set(e4, t3);
          }
          function t3() {
            return function(e5, t4, n4) {
              var o3;
              return V2() ? Reflect.construct.apply(null, arguments) : ((o3 = [null]).push.apply(o3, t4), t4 = new (e5.bind.apply(e5, o3))(), n4 && Y2(t4, n4.prototype), t4);
            }(e4, arguments, x2(this).constructor);
          }
          return t3.prototype = Object.create(e4.prototype, { constructor: { value: t3, enumerable: false, writable: true, configurable: true } }), Y2(t3, e4);
        }(e3);
      }
      var h2 = { SDK_READY: "sdkStateReady", SDK_NOT_READY: "sdkStateNotReady", SDK_DESTROY: "sdkDestroy", MESSAGE_RECEIVED: "onMessageReceived", ROOM_CUSTOM_DATA_RECEIVED: "onRoomCustomDataReceived", MESSAGE_MODIFIED: "onMessageModified", MESSAGE_REVOKED: "onMessageRevoked", MESSAGE_READ_BY_PEER: "onMessageReadByPeer", MESSAGE_READ_RECEIPT_RECEIVED: "onMessageReadReceiptReceived", MESSAGE_EXTENSIONS_UPDATED: "onMessageExtensionsUpdated", MESSAGE_EXTENSIONS_DELETED: "onMessageExtensionsDeleted", MESSAGE_REACTIONS_UPDATED: "onMessageReactionsUpdated", CONVERSATION_LIST_UPDATED: "onConversationListUpdated", TOTAL_UNREAD_MESSAGE_COUNT_UPDATED: "onTotalUnreadMessageCountUpdated", CONVERSATION_GROUP_LIST_UPDATED: "onConversationGroupListUpdated", CONVERSATION_IN_GROUP_UPDATED: "onConversationInGroupUpdated", GROUP_LIST_UPDATED: "onGroupListUpdated", GROUP_ATTRIBUTES_UPDATED: "groupAttributesUpdated", GROUP_COUNTER_UPDATED: "onGroupCounterUpdated", TOPIC_CREATED: "onTopicCreated", TOPIC_DELETED: "onTopicDeleted", TOPIC_UPDATED: "onTopicUpdated", PROFILE_UPDATED: "onProfileUpdated", USER_STATUS_UPDATED: "onUserStatusUpdated", BLACKLIST_UPDATED: "blacklistUpdated", FRIEND_LIST_UPDATED: "onFriendListUpdated", FRIEND_GROUP_LIST_UPDATED: "onFriendGroupListUpdated", FRIEND_APPLICATION_LIST_UPDATED: "onFriendApplicationListUpdated", MY_FOLLOWERS_LIST_UPDATED: "onMyFollowersListUpdated", MY_FOLLOWING_LIST_UPDATED: "onMyFollowingListUpdated", MUTUAL_FOLLOWERS_LIST_UPDATED: "onMutualFollowersListUpdated", KICKED_OUT: "kickedOut", ERROR: "error", NET_STATE_CHANGE: "netStateChange", ALL_RECEIVE_MESSAGE_OPT_UPDATED: "onAllReceiveMessageOptUpdated", SERVER_CONFIG_UPDATED: "onServerConfigUpdated" }, R2 = { MSG_TEXT: "TIMTextElem", MSG_IMAGE: "TIMImageElem", MSG_SOUND: "TIMSoundElem", MSG_AUDIO: "TIMSoundElem", MSG_FILE: "TIMFileElem", MSG_FACE: "TIMFaceElem", MSG_VIDEO: "TIMVideoFileElem", MSG_GEO: "TIMLocationElem", MSG_LOCATION: "TIMLocationElem", MSG_GRP_TIP: "TIMGroupTipElem", MSG_GRP_SYS_NOTICE: "TIMGroupSystemNoticeElem", MSG_CUSTOM: "TIMCustomElem", MSG_MERGER: "TIMRelayElem", MSG_PRIORITY_HIGH: "High", MSG_PRIORITY_NORMAL: "Normal", MSG_PRIORITY_LOW: "Low", MSG_PRIORITY_LOWEST: "Lowest", CONV_C2C: "C2C", CONV_GROUP: "GROUP", CONV_TOPIC: "TOPIC", CONV_SYSTEM: "@TIM#SYSTEM", CONV_AT_ME: 1, CONV_AT_ALL: 2, CONV_AT_ALL_AT_ME: 3, CONV_MARK_TYPE_STAR: 1, CONV_MARK_TYPE_UNREAD: 2, CONV_MARK_TYPE_FOLD: 4, CONV_MARK_TYPE_HIDE: 8, GRP_PRIVATE: "Private", GRP_WORK: "Private", GRP_PUBLIC: "Public", GRP_CHATROOM: "ChatRoom", GRP_MEETING: "ChatRoom", GRP_AVCHATROOM: "AVChatRoom", GRP_COMMUNITY: "Community", GRP_ROOM: "Room", GRP_LIVE: "Live", GRP_MBR_ROLE_OWNER: "Owner", GRP_MBR_ROLE_ADMIN: "Admin", GRP_MBR_ROLE_MEMBER: "Member", GRP_MBR_ROLE_CUSTOM: "Custom", GRP_TIP_MBR_JOIN: 1, GRP_TIP_MBR_QUIT: 2, GRP_TIP_MBR_KICKED_OUT: 3, GRP_TIP_MBR_SET_ADMIN: 4, GRP_TIP_MBR_CANCELED_ADMIN: 5, GRP_TIP_GRP_PROFILE_UPDATED: 6, GRP_TIP_MBR_PROFILE_UPDATED: 7, GRP_TIP_BAN_AVCHATROOM_MEMBER: 10, GRP_TIP_UNBAN_AVCHATROOM_MEMBER: 11, MSG_REMIND_ACPT_AND_NOTE: "AcceptAndNotify", MSG_REMIND_ACPT_NOT_NOTE: "AcceptNotNotify", MSG_REMIND_DISCARD: "Discard", RECEIVE_WITH_OFFLINE_PUSH_EXCEPT_AT: "AcceptNotNotifyExceptAt", NOT_RECEIVE_OFFLINE_PUSH_EXCEPT_AT: "AcceptNotNotifyExceptAt", NOT_RECEIVE_MSG_EXCEPT_AT: "NotReceiveMsgExceptAt", GENDER_UNKNOWN: "Gender_Type_Unknown", GENDER_FEMALE: "Gender_Type_Female", GENDER_MALE: "Gender_Type_Male", KICKED_OUT_MULT_ACCOUNT: "multipleAccount", KICKED_OUT_MULT_DEVICE: "multipleDevice", KICKED_OUT_USERSIG_EXPIRED: "userSigExpired", KICKED_OUT_REST_API: "REST_API_Kick", ALLOW_TYPE_ALLOW_ANY: "AllowType_Type_AllowAny", ALLOW_TYPE_NEED_CONFIRM: "AllowType_Type_NeedConfirm", ALLOW_TYPE_DENY_ANY: "AllowType_Type_DenyAny", FORBID_TYPE_NONE: "AdminForbid_Type_None", FORBID_TYPE_SEND_OUT: "AdminForbid_Type_SendOut", JOIN_OPTIONS_FREE_ACCESS: "FreeAccess", JOIN_OPTIONS_NEED_PERMISSION: "NeedPermission", JOIN_OPTIONS_DISABLE_APPLY: "DisableApply", JOIN_STATUS_SUCCESS: "JoinedSuccess", JOIN_STATUS_ALREADY_IN_GROUP: "AlreadyInGroup", JOIN_STATUS_WAIT_APPROVAL: "WaitAdminApproval", INVITE_OPTIONS_DISABLE_INVITE: "DisableInvite", INVITE_OPTIONS_NEED_PERMISSION: "NeedPermission", INVITE_OPTIONS_FREE_ACCESS: "FreeAccess", GRP_PROFILE_OWNER_ID: "ownerID", GRP_PROFILE_CREATE_TIME: "createTime", GRP_PROFILE_LAST_INFO_TIME: "lastInfoTime", GRP_PROFILE_MEMBER_NUM: "memberNum", GRP_PROFILE_MAX_MEMBER_NUM: "maxMemberNum", GRP_PROFILE_JOIN_OPTION: "joinOption", GRP_PROFILE_INVITE_OPTION: "inviteOption", GRP_PROFILE_INTRODUCTION: "introduction", GRP_PROFILE_NOTIFICATION: "notification", GRP_PROFILE_MUTE_ALL_MBRS: "muteAllMembers", SNS_ADD_TYPE_SINGLE: "Add_Type_Single", SNS_ADD_TYPE_BOTH: "Add_Type_Both", SNS_DELETE_TYPE_SINGLE: "Delete_Type_Single", SNS_DELETE_TYPE_BOTH: "Delete_Type_Both", SNS_APPLICATION_TYPE_BOTH: "Pendency_Type_Both", SNS_APPLICATION_SENT_TO_ME: "Pendency_Type_ComeIn", SNS_APPLICATION_SENT_BY_ME: "Pendency_Type_SendOut", SNS_APPLICATION_AGREE: "Response_Action_Agree", SNS_APPLICATION_AGREE_AND_ADD: "Response_Action_AgreeAndAdd", SNS_CHECK_TYPE_BOTH: "CheckResult_Type_Both", SNS_CHECK_TYPE_SINGLE: "CheckResult_Type_Single", SNS_TYPE_NO_RELATION: "CheckResult_Type_NoRelation", SNS_TYPE_A_WITH_B: "CheckResult_Type_AWithB", SNS_TYPE_B_WITH_A: "CheckResult_Type_BWithA", SNS_TYPE_BOTH_WAY: "CheckResult_Type_BothWay", NET_STATE_CONNECTED: "connected", NET_STATE_CONNECTING: "connecting", NET_STATE_DISCONNECTED: "disconnected", MSG_AT_ALL: "__kImSDK_MesssageAtALL__", READ_ALL_C2C_MSG: "readAllC2CMessage", READ_ALL_GROUP_MSG: "readAllGroupMessage", READ_ALL_MSG: "readAllMessage", USER_STATUS_UNKNOWN: 0, USER_STATUS_ONLINE: 1, USER_STATUS_OFFLINE: 2, USER_STATUS_UNLOGINED: 3, IOS_OFFLINE_PUSH_NO_SOUND: "push.no_sound", IOS_OFFLINE_PUSH_DEFAULT_SOUND: "default" }, _2 = { NEW_INVITATION_RECEIVED: "newInvitationReceived", INVITEE_ACCEPTED: "ts_invitee_accepted", INVITEE_REJECTED: "ts_invitee_rejected", INVITATION_CANCELLED: "ts_invitation_cancelled", INVITATION_TIMEOUT: "ts_invitation_timeout", INVITATION_MODIFIED: "ts_invitation_modified", ACTION_TYPE_UNKNOWN: 0, ACTION_TYPE_INVITE: 1, ACTION_TYPE_CANCEL_INVITE: 2, ACTION_TYPE_ACCEPT_INVITE: 3, ACTION_TYPE_REJECT_INVITE: 4, ACTION_TYPE_INVITE_TIMEOUT: 5 }, Q2 = e2(function e3() {
        p2(this, e3), this.cache = [], this.options = null;
      }, [{ key: "use", value: function(e3) {
        if ("function" != typeof e3)
          throw "middleware must be a function";
        return this.cache.push(e3), this;
      } }, { key: "next", value: function(e3) {
        if (this.middlewares && 0 < this.middlewares.length)
          return this.middlewares.shift().call(this, this.options, this.next.bind(this));
      } }, { key: "run", value: function(e3) {
        return this.middlewares = this.cache.map(function(e4) {
          return e4;
        }), this.options = e3, this.next();
      } }]), $2 = e2(function e3() {
        var t3 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 0, n3 = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0;
        p2(this, e3), this.high = t3, this.low = n3;
      }, [{ key: "equal", value: function(e3) {
        return null !== e3 && this.low === e3.low && this.high === e3.high;
      } }, { key: "toString", value: function() {
        var e3 = Number(this.high).toString(16), t3 = Number(this.low).toString(16);
        if (t3.length < 8)
          for (var n3 = 8 - t3.length; n3; )
            t3 = "0" + t3, n3--;
        return e3 + t3;
      } }]), ee2 = { TEST: { CHINA: { DEFAULT: "wss://wss-dev.tim.qq.com" }, OVERSEA: { DEFAULT: "wss://wss-dev.tim.qq.com" }, SINGAPORE: { DEFAULT: "wss://wsssgp-dev.im.qcloud.com" }, KOREA: { DEFAULT: "wss://wsskr-dev.im.qcloud.com" }, GERMANY: { DEFAULT: "wss://wssger-dev.im.qcloud.com" }, IND: { DEFAULT: "wss://wssind-dev.im.qcloud.com" }, JPN: { DEFAULT: "wss://wssjpn-dev.im.qcloud.com" }, USA: { DEFAULT: "wss://wssusa-dev.im.qcloud.com" }, INDONESIA: { DEFAULT: "wss://wssidn-dev.im.qcloud.com" } }, PRODUCTION: { CHINA: { DEFAULT0: "wss://*w4c.my-imcloud.com", DEFAULT: "wss://wss.im.qcloud.com", IPV6: "wss://wssv6.im.qcloud.com", BACKUP: "wss://wss.tim.qq.com", BACKUP_WEB: "wss://*w4c.my-cpaas.com", STAT: "https://events.im.qcloud.com", ANYCAST: "wss://162.14.13.203" }, OVERSEA: { DEFAULT0: "wss://*w4c.my-imcloud.com", DEFAULT: "wss://wss.im.qcloud.com", IPV6: "wss://wssv6.im.qcloud.com", BACKUP: "wss://wss.my-imcloud.com", BACKUP_WEB: "wss://*w4c.my-cpaas.com", STAT: "https://api.my-imcloud.com" }, SINGAPORE: { DEFAULT0: "wss://*w4s.my-imcloud.com", DEFAULT: "wss://wsssgp.im.qcloud.com", IPV6: "wss://wsssgpv6.im.qcloud.com", BACKUP: "wss://wsssgp.my-imcloud.com", BACKUP_WEB: "wss://*w4s.my-cpaas.com", STAT: "https://apisgp.my-imcloud.com", ANYCAST: "wss://162.14.19.159" }, KOREA: { DEFAULT0: "wss://*w4k.my-imcloud.com", DEFAULT: "wss://wsskr.im.qcloud.com", IPV6: "wss://wsskrv6.im.qcloud.com", BACKUP: "wss://wsskr.my-imcloud.com", BACKUP_WEB: "wss://*w4k.my-cpaas.com", STAT: "https://apikr.my-imcloud.com", ANYCAST: "wss://162.14.13.104" }, GERMANY: { DEFAULT0: "wss://*w4g.my-imcloud.com", DEFAULT: "wss://wssger.im.qcloud.com", IPV6: "wss://wssgerv6.im.qcloud.com", BACKUP: "wss://wssger.my-imcloud.com", BACKUP_WEB: "wss://*w4g.my-cpaas.com", STAT: "https://apiger.my-imcloud.com", ANYCAST: "wss://162.14.3.17" }, IND: { DEFAULT0: "wss://*w4i.my-imcloud.com", DEFAULT: "wss://wssind.my-imcloud.com", IPV6: "wss://wssindv6.im.qcloud.com", BACKUP: "wss://wssind.im.qcloud.com", BACKUP_WEB: "wss://*w4i.my-cpaas.com", STAT: "https://apiind.my-imcloud.com", ANYCAST: "wss://162.14.19.46" }, JPN: { DEFAULT0: "wss://*w4j.my-imcloud.com", DEFAULT: "wss://wssjpn.im.qcloud.com", IPV6: "wss://wssjpnv6.im.qcloud.com", BACKUP: "wss://wssjpn.my-imcloud.com", BACKUP_WEB: "wss://*w4j.my-cpaas.com", STAT: "https://apijpn.my-imcloud.com" }, USA: { DEFAULT0: "wss://*w4u.my-imcloud.com", DEFAULT: "wss://wssusa.im.qcloud.com", IPV6: "wss://wssusav6.im.qcloud.com", BACKUP: "wss://wssusa.my-imcloud.com", BACKUP_WEB: "wss://*w4u.my-cpaas.com", STAT: "https://apiusa.my-imcloud.com", ANYCAST: "wss://162.14.10.42" }, INDONESIA: { DEFAULT0: "wss://*w4y.my-imcloud.com", DEFAULT: "wss://wssidn.im.qcloud.com", IPV6: "wss://wssidnv6.im.qcloud.com", BACKUP: "wss://wssidn.my-imcloud.com", BACKUP_WEB: "wss://*w4y.my-cpaas.com", STAT: "https://apiidn.my-imcloud.com", ANYCAST: "wss://43.129.34.169" } } }, te2 = { ANDROID: 2, IOS: 3, MAC: 4, WEB: 7, WX_MP: 8, QQ_MP: 9, TT_MP: 10, BAIDU_MP: 11, ALI_MP: 12, IPAD: 13, UNI_NATIVE_APP: 15, DONUT_NATIVE_APP: 19, NS_NATIVE_APP: 20, RN_NATIVE_APP: 21 }, ne2 = "1.7.3", oe2 = 537048168, ae2 = "CHINA", a2 = { HOST: { CURRENT: { DEFAULT: "wss://wss.im.qcloud.com", STAT: "https://events.im.qcloud.com" }, setCurrent: function() {
        this.CURRENT = ee2.PRODUCTION[0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : ae2];
      } }, NAME: { OPEN_IM: "openim", OPEN_IM_MSG_EXT: "openim_msg_ext_http_svc", GRP: "group_open_http_svc", GRP_AV: "group_open_avchatroom_http_svc", GRP_COMMUNITY: "million_group_open_http_svc", GRP_ATTR: "group_open_attr_http_svc", FD: "sns", PROFILE: "profile", RECENT_CONTACT: "recentcontact", PIC: "openpic", BIG_GRP_NO_AUTH: "group_open_http_noauth_svc", BIG_GRP_POLLING: "group_open_long_polling_http_svc", BIG_GRP_POLLING_NO_AUTH: "group_open_long_polling_http_noauth_svc", IM_OPEN_STAT: "imopenstat", WEB_IM: "webim", IM_COS_SIGN: "im_cos_sign_svr", CUSTOM_UPLOAD: "im_cos_msg", HEARTBEAT: "heartbeat", IM_OPEN_PUSH: "im_open_push", IM_OPEN_STATUS: "im_open_status", IM_LONG_MSG: "im_long_msg", IM_CONFIG_MANAGER: "im_sdk_config_mgr", STAT_SERVICE: "StatSvc", OVERLOAD_PUSH: "OverLoadPush", IM_MSG_AUDIT_MGR: "im_msg_audit_mgr", TUIROOM_SVR: "tui_room_svr", IM_OPEN_TRANSLATE: "im_open_translate", IM_OPEN_SPEECH: "im_open_speech", MSG_SEARCH: "message_search", GRP_SEARCH: "group_search", GRP_MEMBER_SEARCH: "group_member_search", USER_SEARCH: "user_search", FOLLOW: "follow", OFFLINE_PUSH_REPORT: "offline_push_report", IM_MSG_LOGIC: "im_msg_db_logic" } }, g2 = { SEARCH_GRP_SNS: new $2(0, Math.pow(2, 1)).toString(), AV_HISTORY_MSG: new $2(0, Math.pow(2, 2)).toString(), GRP_COMMUNITY: new $2(0, Math.pow(2, 3)).toString(), MSG_TO_SPECIFIED_GRP_MBR: new $2(0, Math.pow(2, 4)).toString(), AV_MBR_LIST: new $2(0, Math.pow(2, 6)).toString(), USER_STATUS: new $2(0, Math.pow(2, 7)).toString(), CONV_MARK: new $2(0, Math.pow(2, 9)).toString(), CONV_GROUP: new $2(0, Math.pow(2, 10)).toString(), AV_BAN_MBR: new $2(0, Math.pow(2, 11)).toString(), MSG_EXT: new $2(0, Math.pow(2, 13)).toString(), GRP_COUNTER: new $2(0, Math.pow(2, 15)).toString(), PLUGIN_TRANSLATE: new $2(Math.pow(2, 6)).toString(), PLUGIN_VOICE_TO_TEXT: new $2(Math.pow(2, 7)).toString(), PLUGIN_CS: new $2(Math.pow(2, 8)).toString(), PLUGIN_PUSH: new $2(Math.pow(2, 9)).toString(), PLUGIN_BOT: new $2(Math.pow(2, 10)).toString(), MSG_REACTION: new $2(Math.pow(2, 16)).toString(), FOLLOW: new $2(Math.pow(2, 20)).toString() }, se2 = "group_profile", re2 = ["Type", "Name", "Introduction", "Notification", "FaceUrl", "Owner_Account", "CreateTime", "InfoSeq", "LastInfoTime", "LastMsgTime", "MemberNum", "MaxMemberNum", "ApplyJoinOption", "NextMsgSeq", "ShutUpAllMember", "InviteJoinOption"], ce2 = ["Role", "JoinTime", "MsgSeq", "MsgFlag"], ue2 = "web.sdk.qcloud.com", le2 = "web.sdk.cloud.tencent.cn", de2 = "web.sdk.tencent.cn";
      a2.HOST.setCurrent(ae2);
      for (var pe2, _e2 = "undefined" != typeof wx && "function" == typeof wx.getSystemInfoSync && Boolean(wx.getSystemInfoSync().fontSizeSetting), he2 = _e2 && "function" == typeof wx.createGamePortal, ge2 = "undefined" != typeof qq && "function" == typeof qq.getSystemInfoSync && Boolean(qq.getSystemInfoSync().fontSizeSetting), fe2 = "undefined" != typeof tt && "function" == typeof tt.getSystemInfoSync && Boolean(tt.getSystemInfoSync().fontSizeSetting), me2 = "undefined" != typeof swan && "function" == typeof swan.getSystemInfoSync && Boolean(swan.getSystemInfoSync().fontSizeSetting), ve2 = "undefined" != typeof my && "function" == typeof my.getSystemInfoSync && Boolean(my.getSystemInfoSync().fontSizeSetting), n2 = "undefined" != typeof jd && "function" == typeof jd.getSystemInfoSync, Ie2 = "undefined" != typeof uni && "undefined" == typeof window && "function" == typeof requireNativePlugin, o2 = _e2 && "object" === z2(wx.miniapp), Me2 = "undefined" != typeof uni, v2 = _e2 || ge2 || fe2 || me2 || ve2 || Ie2 || n2, s2 = "undefined" == typeof window && !v2 && "undefined" != typeof commonjsGlobal && void 0 !== commonjsGlobal.NativeScriptGlobals, ye2 = "undefined" != typeof commonjsGlobal && (void 0 !== commonjsGlobal.nativeModuleProxy || void 0 !== commonjsGlobal.ReactNative), Ce2 = "undefined" != typeof uni ? !v2 : "undefined" != typeof window && !v2 && !ye2, I2 = ge2 ? qq : fe2 ? tt : me2 ? swan : ve2 ? my : _e2 ? wx : Ie2 ? uni : n2 ? jd : {}, Te2 = Ce2 && window && window.navigator && window.navigator.userAgent || "", De2 = (n2 = "WEB", /(micromessenger|webbrowser)/i.test(Te2) ? n2 = "WEB" : ge2 ? n2 = "QQ_MP" : fe2 ? n2 = "TT_MP" : me2 ? n2 = "BAIDU_MP" : ve2 ? n2 = "ALI_MP" : _e2 ? n2 = o2 ? "DONUT_NATIVE_APP" : "WX_MP" : Ie2 ? n2 = "UNI_NATIVE_APP" : s2 ? n2 = "NS_NATIVE_APP" : ye2 && (n2 = "RN_NATIVE_APP"), te2[n2]), o2 = /iPad/i.test(Te2), s2 = /iPhone/i.test(Te2) && !o2, n2 = /iPod/i.test(Te2), Ee2 = s2 || o2 || n2, Le2 = (s2 = Te2.match(/OS (\d+)_/i)) && s2[1] ? s2[1] : null, Se2 = /Android/i.test(Te2), ke2 = (o2 = Te2.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i)) ? (n2 = o2[1] && parseFloat(o2[1]), s2 = o2[2] && parseFloat(o2[2]), n2 && s2 ? parseFloat(o2[1] + "." + o2[2]) : n2 || null) : null, s2 = /Edge/i.test(Te2), o2 = !s2 && /Chrome/i.test(Te2), Re2 = /MSIE/.test(Te2) || -1 < Te2.indexOf("Trident") && -1 < Te2.indexOf("rv:11.0"), Ae2 = n2 = !(n2 = (n2 = /MSIE\s(\d+)\.\d/.exec(Te2)) && parseFloat(n2[1])) && /Trident\/7.0/i.test(Te2) && /rv:11.0/.test(Te2) ? 11 : n2, n2 = /Safari/i.test(Te2) && !o2 && !Se2 && !s2, Oe2 = /Windows/i.test(Te2), Ne2 = /MAC OS X/i.test(Te2), Ge2 = Ce2 && "undefined" != typeof Worker && !Re2, Pe2 = Se2 || Ee2, Ue2 = Ce2 && void 0 !== window.tencent_cloud_im_csig_flutter_for_web_25F_cy, be2 = "undefined" != typeof window && void 0 !== window.navigator && (o2 = window.navigator.standalone, !(!Ee2 || o2 || n2)), we2 = "undefined" != typeof console ? console : "undefined" != typeof commonjsGlobal && commonjsGlobal.console ? commonjsGlobal.console : "undefined" != typeof window && window.console ? window.console : {}, Fe2 = function() {
      }, qe2 = ["assert", "clear", "count", "debug", "dir", "dirxml", "error", "group", "groupCollapsed", "groupEnd", "info", "log", "profile", "profileEnd", "table", "time", "timeEnd", "timeStamp", "trace", "warn"], xe2 = qe2.length; xe2--; )
        pe2 = qe2[xe2], console[pe2] || (we2[pe2] = Fe2);
      function Ve2() {
        var e3 = /* @__PURE__ */ new Date();
        return e3.setTime(Ye2()), e3;
      }
      function Be2() {
        We2 = 0;
      }
      function He2() {
        return Math.floor(Ye2() / 1e3);
      }
      var Ke2 = we2, We2 = 0, Ye2 = function() {
        return (/* @__PURE__ */ new Date()).getTime() + We2;
      }, je2 = 0;
      function Je2() {
        return en() ? "%c Chat %c" : "Chat";
      }
      function ze2() {
        var e3 = Ve2();
        return e3.toLocaleTimeString("en-US", { hour12: false }) + "." + function(e4) {
          var t3;
          switch (e4.toString().length) {
            case 1:
              t3 = "00" + e4;
              break;
            case 2:
              t3 = "0" + e4;
              break;
            default:
              t3 = e4;
          }
          return t3;
        }(e3.getMilliseconds());
      }
      var M2 = { arguments2String: function(e3) {
        var t3 = "";
        if (1 === e3.length)
          t3 = e3[0];
        else
          for (var n3 = 0, o3 = e3.length; n3 < o3; n3++) {
            if (Tt2(e3[n3]))
              try {
                t3 += Dt2(e3[n3]) ? JSON.stringify(e3[n3], ["message", "code"]) : JSON.stringify(e3[n3]);
              } catch (e4) {
                t3 += e4 ? e4.message : "";
                break;
              }
            else
              t3 += e3[n3];
            t3 += " ";
          }
        return t3;
      }, _exec: function(e3, t3) {
        en() ? Ke2[e3](Je2(), "background:#0abf5b; padding:1px; border-radius:3px; color: #fff", "background:transparent", ze2(), t3) : Ke2[e3]("".concat(Je2(), " ").concat(ze2(), " ").concat(t3));
      }, d: function() {
        var e3;
        je2 <= -1 && (e3 = this.arguments2String(arguments), this._exec("debug", e3));
      }, l: function() {
        var e3;
        je2 <= 0 && (e3 = this.arguments2String(arguments), this._exec("log", e3));
      }, log: function() {
        var e3;
        je2 <= 0 && (e3 = this.arguments2String(arguments), this._exec("log", e3));
      }, i: function() {
        var e3;
        je2 <= 1 && (e3 = this.arguments2String(arguments), this._exec("info", e3));
      }, w: function() {
        var e3;
        je2 <= 2 && (e3 = this.arguments2String(arguments), this._exec("warn", e3));
      }, e: function() {
        var e3;
        je2 <= 3 && (e3 = this.arguments2String(arguments), this._exec("error", e3));
      }, setLevel: function(e3) {
        e3 < 4 && this._exec("log", "set level from " + je2 + " to " + e3), je2 = e3;
      }, getLevel: function() {
        return je2;
      } }, Xe2 = { JPG: 1, JPEG: 1, GIF: 2, PNG: 3, BMP: 4, UNKNOWN: 255 }, s2 = "Tag_Profile_IM_", f2 = { NICK: "".concat(s2, "Nick"), GENDER: "".concat(s2, "Gender"), BIRTHDAY: "".concat(s2, "BirthDay"), LOCATION: "".concat(s2, "Location"), SELFSIGNATURE: "".concat(s2, "SelfSignature"), ALLOWTYPE: "".concat(s2, "AllowType"), LANGUAGE: "".concat(s2, "Language"), AVATAR: "".concat(s2, "Image"), MESSAGESETTINGS: "".concat(s2, "MsgSettings"), ADMINFORBIDTYPE: "".concat(s2, "AdminForbidType"), LEVEL: "".concat(s2, "Level"), ROLE: "".concat(s2, "Role") }, Ze2 = { GROUP: "".concat("Tag_SNS_IM_", "Group"), REMARK: "".concat("Tag_SNS_IM_", "Remark"), ADDSOURCE: "".concat("Tag_SNS_IM_", "AddSource"), ADDWORDING: "".concat("Tag_SNS_IM_", "Wording"), ADDTIME: "".concat("Tag_SNS_IM_", "AddTime") }, o2 = "Gender_Type_", Qe2 = { UNKNOWN: "".concat(o2, "Unknown"), FEMALE: "".concat(o2, "Female"), MALE: "".concat(o2, "Male") }, $e2 = { NONE: "".concat("AdminForbid_Type_", "None"), SEND_OUT: "".concat("AdminForbid_Type_", "SendOut") }, et2 = { NEED_CONFIRM: "".concat("AllowType_Type_", "NeedConfirm"), ALLOW_ANY: "".concat("AllowType_Type_", "AllowAny"), DENY_ANY: "".concat("AllowType_Type_", "DenyAny") }, nt2 = "JoinedSuccess", ot2 = "WaitAdminApproval", it2 = "@TOPIC#_", at2 = Object.prototype.hasOwnProperty;
      function S2(e3) {
        if (null == e3)
          return true;
        if ("boolean" == typeof e3)
          return false;
        if ("number" == typeof e3)
          return 0 === e3;
        if ("string" == typeof e3)
          return 0 === e3.length;
        if ("function" == typeof e3)
          return 0 === e3.length;
        if (Array.isArray(e3))
          return 0 === e3.length;
        if (e3 instanceof Error)
          return "" === e3.message;
        if (m2(e3)) {
          for (var t3 in e3)
            if (at2.call(e3, t3))
              return false;
          return true;
        }
        return !!(st2(e3) || rt2(e3) || ct2(e3)) && 0 === e3.size;
      }
      function st2(e3) {
        return "map" === Et2(e3);
      }
      function rt2(e3) {
        return "set" === Et2(e3);
      }
      function ct2(e3) {
        return "file" === Et2(e3);
      }
      function A2(e3) {
        return null !== e3 && ("number" == typeof e3 && !isNaN(+e3) || "object" === z2(e3) && e3.constructor === Number);
      }
      function ut2(e3) {
        return null !== e3 && "object" === z2(e3);
      }
      function m2(e3) {
        if ("object" === z2(e3) && null !== e3) {
          if (null === (e3 = Object.getPrototypeOf(e3)))
            return 1;
          for (var t3 = e3; null !== Object.getPrototypeOf(t3); )
            t3 = Object.getPrototypeOf(t3);
          return e3 === t3;
        }
      }
      function O2(e3) {
        return "function" == typeof Array.isArray ? Array.isArray(e3) : "array" === Et2(e3);
      }
      function lt2(e3) {
        return O2(e3) && 0 < e3.length;
      }
      function dt2(e3) {
        return "function" == typeof e3;
      }
      function pt2(e3) {
        return "filelist" === Et2(e3);
      }
      function _t2(e3) {
        return "string" == typeof e3 && (e3 = e3[0], !/[^a-zA-Z0-9]/.test(e3));
      }
      function ht2(e3, t3, n3, o3) {
        if (!Tt2(e3) || !Tt2(t3))
          return 0;
        for (var i3, a3 = 0, s3 = Object.keys(t3), r3 = 0, c3 = s3.length; r3 < c3; r3++)
          if (i3 = s3[r3], !(N2(t3[i3]) || n3 && n3.includes(i3)))
            if (Tt2(e3[i3]) && Tt2(t3[i3]))
              a3 += ht2(e3[i3], t3[i3], n3, o3);
            else {
              if (o3 && o3.includes(t3[i3]))
                continue;
              e3[i3] !== t3[i3] && (e3[i3] = t3[i3], a3 += 1);
            }
        return a3;
      }
      function gt2(e3, t3) {
        var n3, o3 = /* @__PURE__ */ new Map(), i3 = F2(e3.entries());
        try {
          for (i3.s(); !(n3 = i3.n()).done; ) {
            var a3 = j2(n3.value, 2), s3 = a3[0], r3 = a3[1];
            r3 && o3.set(s3, t3 ? JSON.stringify(r3) : JSON.parse(JSON.stringify(r3)));
          }
        } catch (e4) {
          i3.e(e4);
        } finally {
          i3.f();
        }
        return o3;
      }
      function ft2(e3) {
        if (0 === e3.length)
          return 0;
        for (var t3 = 0, n3 = 0, o3 = "undefined" != typeof document && void 0 !== document.characterSet ? document.characterSet : "UTF-8"; void 0 !== e3[t3]; )
          n3 += e3[t3++].charCodeAt[t3] <= 255 ? 1 : false === o3 ? 3 : 2;
        return n3;
      }
      function mt2(e3) {
        return e3 = e3 || 99999999, Math.round(Math.random() * e3);
      }
      function vt2() {
        for (var e3 = "", t3 = 32; 0 < t3; --t3)
          e3 += Lt2[Math.floor(Math.random() * St2)];
        return e3;
      }
      function It2(e3, t3) {
        for (var n3 in e3)
          if (e3[n3] === t3)
            return 1;
      }
      function Mt2(e3) {
        return -1 === e3.indexOf("http://") || -1 === e3.indexOf("https://") ? "https://" + e3 : e3.replace(/https|http/, "https");
      }
      function yt2(e3) {
        if (0 === Object.getOwnPropertyNames(e3).length)
          return /* @__PURE__ */ Object.create(null);
        var t3, n3, o3 = Array.isArray(e3) ? [] : /* @__PURE__ */ Object.create(null);
        for (n3 in e3)
          null !== e3[n3] ? void 0 !== e3[n3] ? (t3 = z2(e3[n3]), 0 <= ["string", "number", "function", "boolean"].indexOf(t3) ? o3[n3] = e3[n3] : o3[n3] = yt2(e3[n3])) : o3[n3] = void 0 : o3[n3] = null;
        return o3;
      }
      var Ct2 = ["url"], C2 = function(e3) {
        return "string" == typeof e3;
      }, N2 = function(e3) {
        return void 0 === e3;
      }, Tt2 = function(e3) {
        return O2(e3) || ut2(e3);
      }, Dt2 = function(e3) {
        return e3 instanceof Error;
      }, Et2 = function(e3) {
        return Object.prototype.toString.call(e3).match(/^\[object (.*)\]$/)[1].toLowerCase();
      }, Lt2 = (Date.now || (Date.now = function() {
        return (/* @__PURE__ */ new Date()).getTime();
      }), "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), St2 = Lt2.length, kt2 = {};
      function Rt2(o3, e3) {
        var i3;
        return !(!O2(o3) || !O2(e3)) && (i3 = false, e3.forEach(function(e4) {
          var t3 = e4.key, e4 = e4.value, n3 = o3.find(function(e5) {
            return e5.key === t3;
          });
          n3 ? n3.value !== e4 && (n3.value = e4, i3 = true) : (o3.push({ key: t3, value: e4 }), i3 = true);
        }), i3);
      }
      function At2(e3) {
        return S2(e3) ? [] : e3.filter(function(e4) {
          return true === e4.isModified;
        });
      }
      function Ot2(e3) {
        if (m2(e3) && m2(e3.webhookInfo)) {
          var t3 = [];
          if (e3.webhookInfo.disableCloudMessagePreHook && t3.push("ForbidBeforeSendMsgCallback"), e3.webhookInfo.disableCloudMessagePostHook && t3.push("ForbidAfterSendMsgCallback"), 0 !== t3.length)
            return t3;
        }
      }
      function Nt2(e3) {
        return S2(e3) ? [] : e3.filter(function(e4) {
          return false === e4.isModified;
        });
      }
      function Gt2(e3) {
        return e3 === R2.GRP_AVCHATROOM;
      }
      function Pt2(e3) {
        var t3 = e3.type, e3 = e3.groupID;
        return t3 === R2.GRP_COMMUNITY || "".concat(e3).startsWith("@TGS#_") && !"".concat(e3).includes(it2);
      }
      function Ut2(e3) {
        return "".concat(e3).startsWith("@TGS#_") && "".concat(e3).includes(it2);
      }
      function bt2(e3) {
        return C2(e3) && e3.slice(0, 3) === R2.CONV_C2C;
      }
      function wt2(e3) {
        return C2(e3) && e3.slice(0, 5) === R2.CONV_GROUP;
      }
      function Ft2(e3) {
        return C2(e3) && e3 === R2.CONV_SYSTEM;
      }
      function qt2(t3, n3) {
        var o3 = {};
        return Object.keys(t3).forEach(function(e3) {
          o3[e3] = n3(t3[e3], e3);
        }), o3;
      }
      function xt2(o3) {
        return ye2 ? Promise.resolve({ width: 0, height: 0 }) : v2 ? new Promise(function(t3, e3) {
          I2.getImageInfo({ src: o3, success: function(e4) {
            t3({ width: e4.width, height: e4.height });
          }, fail: function() {
            t3({ width: 0, height: 0 });
          } });
        }) : Re2 && 9 === Ae2 ? Promise.resolve({ width: 0, height: 0 }) : new Promise(function(e3, t3) {
          var n3 = new Image();
          n3.onload = function() {
            e3({ width: this.width, height: this.height }), n3 = null;
          }, n3.onerror = function() {
            e3({ width: 0, height: 0 }), n3 = null;
          }, n3.src = o3;
        });
      }
      function Vt2() {
        function e3() {
          return (65536 * (1 + Math.random()) | 0).toString(16).substring(1);
        }
        return "".concat(e3() + e3()).concat(e3()).concat(e3()).concat(e3()).concat(e3()).concat(e3()).concat(e3());
      }
      function Bt2() {
        var e3 = Se2 ? "android" : Ee2 ? "ios" : Oe2 ? "windows" : Ne2 ? "mac" : "unknown";
        if (v2)
          try {
            var t3 = I2.getSystemInfoSync().platform;
            void 0 !== t3 && (e3 = t3);
          } catch (e4) {
          }
        return e3;
      }
      function Ht2(e3, t3) {
        e3 = e3.split("."), t3 = t3.split(".");
        for (var n3 = Math.max(e3.length, t3.length); e3.length < n3; )
          e3.push("0");
        for (; t3.length < n3; )
          t3.push("0");
        for (var o3 = 0; o3 < n3; o3++) {
          var i3 = parseInt(e3[o3]), a3 = parseInt(t3[o3]);
          if (a3 < i3)
            return 1;
          if (i3 < a3)
            return -1;
        }
        return 0;
      }
      function Kt2(e3) {
        var t3 = e3.originUrl, t3 = void 0 === t3 ? void 0 : t3, n3 = e3.originWidth, o3 = e3.originHeight, e3 = e3.min, e3 = void 0 === e3 ? 198 : e3, n3 = parseInt(n3), o3 = parseInt(o3), i3 = { url: void 0, width: 0, height: 0 };
        return (n3 <= o3 ? n3 : o3) <= e3 ? (i3.url = t3, i3.width = n3, i3.height = o3) : (o3 <= n3 ? (i3.width = Math.ceil(n3 * e3 / o3), i3.height = e3) : (i3.width = e3, i3.height = Math.ceil(o3 * e3 / n3)), o3 = t3 && -1 < t3.indexOf("?") ? "".concat(t3, "&") : "".concat(t3, "?"), i3.url = "".concat(o3, 198 === e3 ? "imageView2/3/w/198/h/198" : "imageView2/3/w/720/h/720")), N2(t3) ? W2(i3, Ct2) : i3;
      }
      function Wt2(e3) {
        var t3 = e3[2];
        e3[2] = e3[1], e3[1] = t3;
        for (var n3 = 0; n3 < e3.length; n3++)
          e3[n3].setType(n3);
      }
      function Yt2(e3) {
        e3 = e3.servcmd;
        return e3.slice(e3.indexOf(".") + 1);
      }
      function jt2(e3, t3) {
        return Math.round(Number(e3) * Math.pow(10, t3)) / Math.pow(10, t3);
      }
      function Jt2(e3, t3) {
        return e3.includes(t3);
      }
      function zt(e3, t3) {
        return e3.includes(t3);
      }
      function Xt2(e3) {
        return e3.split(it2)[0];
      }
      function Zt2(e3, t3, n3) {
        if (N2(t3))
          return "";
        switch (e3) {
          case R2.MSG_TEXT:
            return t3.text;
          case R2.MSG_IMAGE:
            return n3 ? "[Image]" : "[图片]";
          case R2.MSG_LOCATION:
            return n3 ? "[Location]" : "[位置]";
          case R2.MSG_AUDIO:
            return n3 ? "[Voice]" : "[语音]";
          case R2.MSG_VIDEO:
            return n3 ? "[Video]" : "[视频]";
          case R2.MSG_FILE:
            return n3 ? "[File]" : "[文件]";
          case R2.MSG_CUSTOM:
            return n3 ? "[Custom Messages]" : "[自定义消息]";
          case R2.MSG_GRP_TIP:
            return n3 ? "[Group Notification]" : "[群提示消息]";
          case R2.MSG_GRP_SYS_NOTICE:
            return n3 ? "[Group System Message]" : "[群系统通知]";
          case R2.MSG_FACE:
            return n3 ? "[Animated Sticker]" : "[动画表情]";
          case R2.MSG_MERGER:
            return n3 ? "[Chat Record]" : "[聊天记录]";
          default:
            return "";
        }
      }
      function Qt2(e3) {
        return e3 === R2.MSG_TEXT || e3 === R2.MSG_CUSTOM || e3 === R2.MSG_LOCATION || e3 === R2.MSG_FACE;
      }
      function $t2(e3) {
        var t3 = [];
        if (C2(e3)) {
          var n3 = e3.length;
          if (0 !== n3)
            for (var o3 = n3 - 1; 0 <= o3; o3--)
              "1" === e3[o3] && t3.push(Math.pow(2, n3 - o3 - 1));
        }
        return t3;
      }
      function en() {
        return !Re2 && !v2;
      }
      function tn(e3) {
        return "the length of userIDList cannot exceed ".concat(e3);
      }
      function nn(e3) {
        var t3;
        if (O2(e3) && 0 !== e3.length)
          return t3 = 0, e3.forEach(function(e4) {
            t3 += e4;
          }), t3.toFixed(0);
      }
      function on(e3) {
        var t3;
        if (O2(e3) && 0 !== e3.length)
          return t3 = 0, e3.forEach(function(e4) {
            t3 += e4;
          }), (t3 / e3.length).toFixed(0);
      }
      function an(e3, t3, n3) {
        var t3 = !(1 < arguments.length && void 0 !== t3) || t3, n3 = !(2 < arguments.length && void 0 !== n3) || n3, o3 = Date.now();
        return t3 ? n3 ? "".concat(o3 - e3, " ms") : "".concat(Math.round((o3 - e3) / 1e3), " s") : n3 ? o3 - e3 : Math.round((o3 - e3) / 1e3);
      }
      function sn(e3) {
        return e3 && 1 < e3 ? true : false;
      }
      function rn(e3, t3, n3, o3) {
        var i3, a3, s3;
        return void 0 === t3 || (i3 = true, t3.required && S2(e3) && (M2.e("[".concat(n3, '] Missing required params: "').concat(o3, '".')), i3 = false), S2(e3) || (a3 = Et2(e3)) === (s3 = t3.type.toLowerCase()) || "asyncfunction" === a3 && "function" === s3 || (M2.e("[".concat(n3, '] Invalid params: type check failed for "').concat(o3, '". Expected ').concat(t3.type, ".")), i3 = false), t3.validator && !t3.validator(e3, n3, o3) && (M2.e("[".concat(n3, '] Invalid params: custom validator check failed for "').concat(o3, '".')), i3 = false), i3);
      }
      function cn(e3) {
        return !(!e3 || !(bt2(e3) || wt2(e3) || Ft2(e3)) && ((e3 = u2("InvalidConversationID", e3)) && M2.w(e3), 1));
      }
      function r2(e3) {
        "" !== e3.desc && "" !== u2("API_REFER") && M2.w("[".concat(e3.api, "] | ").concat(e3.paramName, " | ").concat(e3.desc, ", ").concat(u2("API_REFER")).concat(e3.api));
      }
      function un() {
        return u2("StringRequiredLog");
      }
      function ln(e3) {
        return u2("NonEmptyStringRequiredLog", e3);
      }
      function dn() {
        return u2("NumberRequiredLog");
      }
      function pn() {
        return u2("UndefinedNotAllowedLog");
      }
      function _n() {
        return u2("FileRequiredLog");
      }
      function hn() {
        return u2("FunctionRequiredLog");
      }
      function gn() {
        return u2("ArrayRequiredLog");
      }
      function fn() {
        return u2("NonEmptyArrayLog");
      }
      function mn() {
        return u2("CallbackMissingLog");
      }
      function vn() {
        return u2("PositiveIntegerRequiredLog");
      }
      function In(e3, t3) {
        return u2("StringNotLongerThanLog", e3, t3);
      }
      function Mn(e3, t3) {
        return u2("NumberGreaterThanLog", e3, t3);
      }
      function yn(e3, t3) {
        return u2("NumberGreaterOrEqualLog", e3, t3);
      }
      function Cn(e3) {
        return u2("KeyValueStringRequiredLog", e3);
      }
      function Tn() {
        return u2("PlainObjectRequiredLog");
      }
      function Dn() {
        return u2("NonEmptyContentRequiredLog");
      }
      function En() {
        return u2("FileNotSelectedLog");
      }
      function Ln() {
        return u2("MessageInstanceRequiredLog");
      }
      function Sn() {
        return u2("NonAnonymousFunctionLog");
      }
      function kn() {
        return u2("MessageExtensionNotAvailableLog");
      }
      function Rn() {
        return u2("MessageReactionRequiredLog");
      }
      function An(e3, t3) {
        return u2("ContainsUnsupportedTypeLog", e3, t3);
      }
      function On(e3, t3, n3, o3) {
        var i3 = o3.allowUndefined, a3 = o3.allowEmpty, o3 = o3.maxLength;
        return N2(e3) ? !!i3 || (r2({ api: t3, paramName: n3, desc: pn() }), false) : O2(e3) ? !(0 === e3.length && (r2({ api: t3, paramName: n3, desc: fn() }), !a3) || o3 && e3.length > o3 && (r2({ api: t3, paramName: n3, desc: u2("MaximumArrayLengthLog", n3, o3) }), 1)) : (r2({ api: t3, paramName: n3, desc: gn() }), false);
      }
      function Nn(e3, t3, n3, o3) {
        var i3 = o3.allowUndefined, a3 = o3.min, o3 = o3.max;
        return N2(e3) ? !!i3 || (r2({ api: t3, paramName: n3, desc: pn() }), false) : A2(e3) ? A2(a3) && e3 < a3 ? (r2({ api: t3, paramName: n3, desc: 0 === a3 ? yn(n3, a3) : Mn(n3, a3 - 1) }), false) : !(A2(o3) && o3 < e3 && (r2({ api: t3, paramName: n3, desc: u2("MaximumNumberLog", n3, o3) }), 1)) : (r2({ api: t3, paramName: n3, desc: dn() }), false);
      }
      function T2(e3) {
        return { code: 0, data: e3 || {} };
      }
      function D2(e3) {
        return Promise.resolve(T2(e3));
      }
      function E2(e3) {
        var t3, n3 = 1 < arguments.length && void 0 !== arguments[1] && arguments[1];
        return e3 instanceof L2 ? (n3 && null !== Kn && Kn.emit(h2.ERROR, e3), Promise.reject(e3)) : e3 instanceof Error ? (t3 = new L2({ code: k2.UNCAUGHT_ERROR }), n3 && null !== Kn && Kn.emit(h2.ERROR, t3), Promise.reject(t3)) : N2(e3) || N2(e3.code) ? Promise.reject(new L2({ code: k2.UNCAUGHT_ERROR })) : (t3 = new L2(e3), n3 && null !== Kn && Kn.emit(h2.ERROR, t3), Promise.reject(t3));
      }
      var Gn = "unSend", Pn = "success", Un = "fail", bn = "notStart", wn = "pending", Fn = "resolved", qn = "rejected", n2 = { type: "String", required: true }, s2 = { type: "Array", required: true }, o2 = { type: "Object", required: true }, xn = { type: "Boolean", required: true }, c2 = { type: "number", required: true }, Vn = { keywordListForMsg: { type: "Array", required: false, validator: function(e3, t3, n3) {
        return On(e3, t3, n3, { allowUndefined: true, allowEmpty: true, maxLength: 5 });
      } }, keywordListExceptMsg: { type: "Array", required: true, validator: function(e3, t3, n3) {
        return On(e3, t3, n3, { allowUndefined: false, allowEmpty: false, maxLength: 5 });
      } }, keywordListMatchType: { type: "String", required: false, validator: function(e3, t3, n3) {
        return !e3 || "or" === e3 || "and" === e3 || r2({ api: t3, paramName: n3, desc: "".concat(e3, " is invalid match type") });
      } }, cursor: { type: "String", required: false }, count: { type: "Number", required: false, validator: function(e3, t3, n3) {
        return Nn(e3, t3, n3, { allowUndefined: true, min: 1, max: 100 });
      } }, groupTypeList: { type: "Array", required: false, validator: function(e3, t3, n3) {
        var o3;
        return !e3 || !(!On(e3, t3, n3, { allowUndefined: true, allowEmpty: true }) || (o3 = [R2.GRP_PUBLIC, R2.GRP_COMMUNITY, R2.GRP_WORK, R2.GRP_MEETING], 0 < e3.filter(function(e4) {
          return -1 === o3.indexOf(e4);
        }).length && (r2({ api: t3, paramName: n3, desc: An(n3, "group") }), 1)));
      } } }, u2 = null, Bn = { hookGetAPITips: function(e3) {
        u2 = e3;
      }, login: { userID: n2, userSig: n2 }, addToBlacklist: { userIDList: s2 }, removeFromBlacklist: { userIDList: s2 }, on: [{ name: "eventName", type: "String", validator: function(e3, t3, n3) {
        return "string" == typeof e3 && 0 !== e3.length || (r2({ api: t3, paramName: n3, desc: ln(n3) }), false);
      } }, { name: "handler", type: "Function", validator: function(e3, t3, n3) {
        return "function" != typeof e3 ? (r2({ api: t3, paramName: n3, desc: hn() }), false) : ("" === e3.name && r2({ api: t3, paramName: n3, desc: Sn() }), true);
      } }], once: [{ name: "eventName", type: "String", validator: function(e3, t3, n3) {
        return "string" == typeof e3 && 0 !== e3.length || (r2({ api: t3, paramName: n3, desc: ln(n3) }), false);
      } }, { name: "handler", type: "Function", validator: function(e3, t3, n3) {
        return "function" != typeof e3 ? (r2({ api: t3, paramName: n3, desc: hn() }), false) : ("" === e3.name && r2({ api: t3, paramName: n3, desc: Sn() }), true);
      } }], off: [{ name: "eventName", type: "String", validator: function(e3, t3, n3) {
        return "string" == typeof e3 && 0 !== e3.length || (r2({ api: t3, paramName: n3, desc: ln(n3) }), false);
      } }, { name: "handler", type: "Function", validator: function(e3, t3, n3) {
        return "function" != typeof e3 ? (r2({ api: t3, paramName: n3, desc: hn() }), false) : ("" === e3.name && r2({ api: t3, paramName: n3, desc: Sn() }), true);
      } }], sendMessage: [y2({ name: "message" }, o2)], setMessageExtensions: [y2(y2({ name: "message" }, o2), {}, { validator: function(e3, t3, n3) {
        return e3.status === Pn && true === e3.isSupportExtension || (r2({ api: t3, paramName: n3, desc: kn() }), false);
      } }), y2({ name: "extensions" }, s2)], getMessageExtensions: [y2(y2({ name: "message" }, o2), {}, { validator: function(e3, t3, n3) {
        return e3.status === Pn && true === e3.isSupportExtension || (r2({ api: t3, paramName: n3, desc: kn() }), false);
      } })], deleteMessageExtensions: [y2(y2({ name: "message" }, o2), {}, { validator: function(e3, t3, n3) {
        return e3.status === Pn && true === e3.isSupportExtension || (r2({ api: t3, paramName: n3, desc: kn() }), false);
      } })], addMessageReaction: [y2(y2({ name: "message" }, o2), {}, { validator: function(e3, t3, n3) {
        return e3.status === Pn || (r2({ api: t3, paramName: n3, desc: Rn() }), false);
      } }), y2({ name: "reactionID" }, n2)], removeMessageReaction: [y2(y2({ name: "message" }, o2), {}, { validator: function(e3, t3, n3) {
        return e3.status === Pn || (r2({ api: t3, paramName: n3, desc: Rn() }), false);
      } }), y2({ name: "reactionID" }, n2)], getMessageReactions: { messageList: y2({}, s2) }, getAllUserListOfMessageReaction: { message: y2(y2({}, o2), {}, { validator: function(e3, t3, n3) {
        return e3.status === Pn || (r2({ api: t3, paramName: n3, desc: Rn() }), false);
      } }), reactionID: y2({}, n2), nextSeq: { type: "Number" }, count: { type: "Number" } }, getMessageList: { conversationID: y2(y2({}, n2), {}, { validator: cn }), nextReqMessageID: { type: "String" }, count: { type: "Number", validator: function(e3, t3, n3) {
        return !(!N2(e3) && !/^[1-9][0-9]*$/.test(e3) && (r2({ api: t3, paramName: n3, desc: vn() }), 1));
      } } }, getMessageListHopping: { conversationID: y2(y2({}, n2), {}, { validator: cn }), sequence: { type: "Number" }, time: { type: "Number" }, direction: { type: "Number", validator: function(e3, t3, n3) {
        return !(!N2(e3) && 0 !== e3 && 1 !== e3 && (r2({ api: t3, paramName: n3, desc: u2("0Or1RequiredLog") }), 1));
      } }, count: { type: "Number", validator: function(e3, t3, n3) {
        return !(!N2(e3) && !/^[1-9][0-9]*$/.test(e3) && (r2({ api: t3, paramName: n3, desc: vn }), 1));
      } } }, setMessageRead: { conversationID: y2(y2({}, n2), {}, { validator: cn }) }, setAllMessageRead: { scope: { type: "String", required: false, validator: function(e3, t3, n3) {
        return !e3 || -1 !== [R2.READ_ALL_C2C_MSG, R2.READ_ALL_GROUP_MSG, R2.READ_ALL_MSG].indexOf(e3) || (r2({ api: t3, paramName: n3, desc: u2("ValidScopeRequired") }), false);
      } } }, getConversationProfile: [y2(y2({ name: "conversationID" }, n2), {}, { validator: cn })], clearHistoryMessage: [y2(y2({ name: "conversationID" }, n2), {}, { validator: cn })], pinConversation: { conversationID: y2(y2({}, n2), {}, { validator: cn }), isPinned: y2({}, xn) }, setConversationDraft: { conversationID: y2(y2({}, n2), {}, { validator: cn }), draftText: { type: "String", validator: function(e3, t3, n3) {
        return !!C2(e3) || (r2({ api: t3, paramName: n3, desc: un() }), false);
      } } }, setConversationCustomData: { conversationIDList: y2({}, s2), customData: { type: "String", validator: function(e3, t3, n3) {
        return C2(e3) ? !(256 < e3.length && (r2({ api: t3, paramName: n3, desc: In(n3, 256) }), 1)) : (r2({ api: t3, paramName: n3, desc: un() }), false);
      } } }, markConversation: { conversationIDList: y2({}, s2), markType: { type: "number", validator: function(e3, t3, n3) {
        return A2(e3) ? e3 <= 0 ? (r2({ api: t3, paramName: n3, desc: Mn(n3, 0) }), false) : !(e3 >= Math.pow(2, 64) && (r2({ api: t3, paramName: n3, desc: u2("NumberLessThanLog", n3, "Math.pow(2,64)") }), 1)) : (r2({ api: t3, paramName: n3, desc: dn() }), false);
      } }, enableMark: y2({}, xn) }, createConversationGroup: { conversationIDList: y2({}, s2), groupName: y2(y2({}, n2), {}, { validator: function(e3, t3, n3) {
        return !(!e3 || 32 < e3.length && (r2({ api: t3, paramName: n3, desc: In(n3, 32) }), 1));
      } }) }, deleteConversationGroup: [y2({ name: "groupName" }, n2)], renameConversationGroup: { oldName: y2({}, n2), newName: y2(y2({}, n2), {}, { validator: function(e3, t3, n3) {
        return !(!e3 || 32 < e3.length && (r2({ api: t3, paramName: n3, desc: In(n3, 32) }), 1));
      } }) }, addConversationsToGroup: { conversationIDList: y2({}, s2), groupName: y2({}, n2) }, deleteConversationsFromGroup: { conversationIDList: y2({}, s2), groupName: y2({}, n2) }, getGroupList: { groupProfileFilter: { type: "Array" } }, getGroupProfile: { groupID: n2, groupCustomFieldFilter: { type: "Array" }, memberCustomFieldFilter: { type: "Array" } }, getGroupProfileAdvance: { groupIDList: s2 }, createGroup: { name: n2 }, joinGroup: { groupID: n2, type: { type: "String" }, applyMessage: { type: "String" } }, quitGroup: [y2({ name: "groupID" }, n2)], handleApplication: { message: o2, handleAction: n2, handleMessage: { type: "String" } }, changeGroupOwner: { groupID: n2, newOwnerID: n2 }, updateGroupProfile: { groupID: n2, muteAllMembers: { type: "Boolean" } }, dismissGroup: [y2({ name: "groupID" }, n2)], searchGroupByID: [y2({ name: "groupID" }, n2)], getGroupOnlineMemberCount: [y2({ name: "groupID" }, n2)], initGroupAttributes: { groupID: n2, groupAttributes: y2(y2({}, o2), {}, { validator: function(t3, n3, o3) {
        var i3 = true;
        return Object.keys(t3).forEach(function(e3) {
          if (!C2(t3[e3]))
            return r2({ api: n3, paramName: o3, desc: Cn("value") }), i3 = false;
        }), i3;
      } }) }, setGroupAttributes: { groupID: n2, groupAttributes: y2(y2({}, o2), {}, { validator: function(t3, n3, o3) {
        var i3 = true;
        return Object.keys(t3).forEach(function(e3) {
          if (!C2(t3[e3]))
            return r2({ api: n3, paramName: o3, desc: Cn("value") }), i3 = false;
        }), i3;
      } }) }, deleteGroupAttributes: { groupID: n2, keyList: { type: "Array", validator: function(e3, t3, n3) {
        var o3;
        return N2(e3) || !O2(e3) ? (r2({ api: t3, paramName: n3, desc: gn() }), false) : !!S2(e3) || (o3 = true, e3.forEach(function(e4) {
          if (!C2(e4))
            return r2({ api: t3, paramName: n3, desc: u2("StringArrayRequiredLog") }), o3 = false;
        }), o3);
      } } }, getGroupAttributes: { groupID: n2, keyList: { type: "Array", validator: function(e3, t3, n3) {
        var o3;
        return N2(e3) || !O2(e3) ? (r2({ api: t3, paramName: n3, desc: gn() }), false) : !!S2(e3) || (o3 = true, e3.forEach(function(e4) {
          if (!C2(e4))
            return r2({ api: t3, paramName: n3, desc: Cn("key") }), o3 = false;
        }), o3);
      } } }, setGroupCounters: { groupID: n2, counters: o2 }, increaseGroupCounter: { groupID: n2, key: n2, value: c2 }, decreaseGroupCounter: { groupID: n2, key: n2, value: c2 }, getGroupCounters: { groupID: n2 }, getGroupMemberList: { groupID: n2, count: { type: "Number" } }, getGroupMemberProfile: { groupID: n2, userIDList: s2, memberCustomFieldFilter: { type: "Array" } }, addGroupMember: { groupID: n2, userIDList: s2 }, setGroupMemberRole: { groupID: n2, userID: n2, role: n2 }, setGroupMemberMuteTime: { groupID: n2, userID: n2, muteTime: { type: "Number", validator: function(e3) {
        return 0 <= e3;
      } } }, setGroupMemberNameCard: { groupID: n2, userID: { type: "String" }, nameCard: { type: "String", validator: function(e3, t3, n3) {
        return C2(e3) ? (e3.length, true) : (r2({ api: t3, paramName: n3, desc: un() }), false);
      } } }, setGroupMemberCustomField: { groupID: n2, userID: { type: "String" }, memberCustomField: s2 }, deleteGroupMember: { groupID: n2 }, markGroupMemberList: { groupID: n2, markType: { type: "number", validator: function(e3, t3, n3) {
        return A2(e3) ? !(e3 < 1e3 && (r2({ api: t3, paramName: n3, desc: yn(n3, 1e3) }), 1)) : (r2({ api: t3, paramName: n3, desc: dn() }), false);
      } }, userIDList: y2({}, s2), enableMark: y2({}, xn) }, createTextMessage: { to: n2, conversationType: n2, payload: y2(y2({}, o2), {}, { validator: function(e3, t3, n3) {
        return m2(e3) ? C2(e3.text) ? 0 !== e3.text.length || (r2({ api: t3, paramName: "payload.text", desc: Dn() }), false) : (r2({ api: t3, paramName: "payload.text", desc: un() }), false) : (r2({ api: t3, paramName: n3, desc: Tn() }), false);
      } }) }, createTextAtMessage: { to: n2, conversationType: n2, payload: y2(y2({}, o2), {}, { validator: function(e3, t3, n3) {
        return m2(e3) ? C2(e3.text) ? 0 === e3.text.length ? (r2({ api: t3, paramName: "payload.text", desc: Dn() }), false) : !(e3.atUserList && !O2(e3.atUserList) && (r2({ api: t3, paramName: "payload.atUserList", desc: gn() }), 1)) : (r2({ api: t3, paramName: "payload.text", desc: un() }), false) : (r2({ api: t3, paramName: n3, desc: Tn() }), false);
      } }) }, createCustomMessage: { to: n2, conversationType: n2, payload: y2(y2({}, o2), {}, { validator: function(e3, t3, n3) {
        return m2(e3) ? e3.data && !C2(e3.data) ? (r2({ api: t3, paramName: "payload.data", desc: un() }), false) : e3.description && !C2(e3.description) ? (r2({ api: t3, paramName: "payload.description", desc: un() }), false) : !(e3.extension && !C2(e3.extension) && (r2({ api: t3, paramName: "payload.extension", desc: un() }), 1)) : (r2({ api: t3, paramName: "payload", desc: Tn() }), false);
      } }) }, createImageMessage: { to: n2, conversationType: n2, payload: y2(y2({}, o2), {}, { validator: function(e3, t3, n3) {
        if (!m2(e3))
          return r2({ api: t3, paramName: n3, desc: Tn() }), false;
        if (N2(e3.file))
          return r2({ api: t3, paramName: "payload.file", desc: pn() }), false;
        if (Ce2) {
          if (!(e3.file instanceof HTMLInputElement || ct2(e3.file)))
            return m2(e3.file) && "undefined" != typeof uni ? 0 !== e3.file.tempFilePaths.length && 0 !== e3.file.tempFiles.length || (r2({ api: t3, paramName: "payload.file", desc: En() }), false) : (r2({ api: t3, paramName: "payload.file", desc: _n() }), false);
          if (e3.file instanceof HTMLInputElement && 0 === e3.file.files.length)
            return r2({ api: t3, paramName: "payload.file", desc: En() }), false;
        }
        return true;
      }, onProgress: { type: "Function", required: false, validator: function(e3, t3, n3) {
        return N2(e3) && r2({ api: t3, paramName: n3, desc: mn() }), true;
      } } }) }, createAudioMessage: { to: n2, conversationType: n2, payload: y2(y2({}, o2), {}, { validator: function(e3, t3, n3) {
        return !!m2(e3) || (r2({ api: t3, paramName: n3, desc: Tn() }), false);
      } }), onProgress: { type: "Function", required: false, validator: function(e3, t3, n3) {
        return N2(e3) && r2({ api: t3, paramName: n3, desc: mn() }), true;
      } } }, createVideoMessage: { to: n2, conversationType: n2, payload: y2(y2({}, o2), {}, { validator: function(e3, t3, n3) {
        if (!m2(e3))
          return r2({ api: t3, paramName: n3, desc: Tn() }), false;
        if (N2(e3.file))
          return r2({ api: t3, paramName: "payload.file", desc: pn() }), false;
        if (Ce2) {
          if (!(e3.file instanceof HTMLInputElement || ct2(e3.file)))
            return m2(e3.file) && "undefined" != typeof uni ? !!ct2(e3.file.tempFile) || (r2({ api: t3, paramName: "payload.file", desc: En() }), false) : (r2({ api: t3, paramName: "payload.file", desc: _n() }), false);
          if (e3.file instanceof HTMLInputElement && 0 === e3.file.files.length)
            return r2({ api: t3, paramName: "payload.file", desc: En() }), false;
        }
        return true;
      } }), onProgress: { type: "Function", required: false, validator: function(e3, t3, n3) {
        return N2(e3) && r2({ api: t3, paramName: n3, desc: mn() }), true;
      } } }, createFaceMessage: { to: n2, conversationType: n2, payload: y2(y2({}, o2), {}, { validator: function(e3, t3, n3) {
        return m2(e3) ? A2(e3.index) ? !!C2(e3.data) || (r2({ api: t3, paramName: "payload.data", desc: un() }), false) : (r2({ api: t3, paramName: "payload.index", desc: dn() }), false) : (r2({ api: t3, paramName: n3, desc: Tn() }), false);
      } }) }, createFileMessage: { to: n2, conversationType: n2, payload: y2(y2({}, o2), {}, { validator: function(e3, t3, n3) {
        if (!m2(e3))
          return r2({ api: t3, paramName: n3, desc: Tn() }), false;
        if (N2(e3.file))
          return r2({ api: t3, paramName: "payload.file", desc: pn() }), false;
        if (Ce2) {
          if (!(e3.file instanceof HTMLInputElement || ct2(e3.file)))
            return m2(e3.file) && "undefined" != typeof uni ? 0 !== e3.file.tempFilePaths.length && 0 !== e3.file.tempFiles.length || (r2({ api: t3, paramName: "payload.file", desc: En() }), false) : (r2({ api: t3, paramName: "payload.file", desc: _n() }), false);
          if (e3.file instanceof HTMLInputElement && 0 === e3.file.files.length)
            return r2({ api: t3, paramName: "payload.file", desc: En() }), false;
        }
        return true;
      } }), onProgress: { type: "Function", required: false, validator: function(e3, t3, n3) {
        return N2(e3) && r2({ api: t3, paramName: n3, desc: mn() }), true;
      } } }, createLocationMessage: { to: n2, conversationType: n2, payload: y2(y2({}, o2), {}, { validator: function(e3, t3, n3) {
        return m2(e3) ? C2(e3.description) ? A2(e3.longitude) ? !!A2(e3.latitude) || (r2({ api: t3, paramName: "payload.latitude", desc: dn() }), false) : (r2({ api: t3, paramName: "payload.longitude", desc: dn() }), false) : (r2({ api: t3, paramName: "payload.description", desc: un() }), false) : (r2({ api: t3, paramName: n3, desc: Tn() }), false);
      } }) }, createMergerMessage: { to: n2, conversationType: n2, payload: y2(y2({}, o2), {}, { validator: function(e3, t3, n3) {
        var o3;
        return S2(e3.messageList) ? (r2({ api: t3, paramName: "payload.messageList", desc: fn() }), false) : S2(e3.compatibleText) ? (r2({ api: t3, paramName: "payload.compatibleText", desc: ln("compatibleText") }), false) : (o3 = false, e3.messageList.forEach(function(e4) {
          e4.status === Un && (o3 = true);
        }), !o3 || (r2({ api: t3, paramName: "payload.messageList", desc: u2("MergeFailedMessageLog") }), false));
      } }) }, revokeMessage: [y2(y2({ name: "message" }, o2), {}, { validator: function(e3, t3, n3) {
        return S2(e3) ? (r2({ api: t3, paramName: n3, desc: Ln() }), false) : e3.conversationType === R2.CONV_SYSTEM ? (r2({ api: t3, paramName: n3, desc: u2("MessageCanBeRevokedDesc") }), false) : true !== e3.isRevoked || (r2({ api: t3, paramName: n3, desc: u2("MessageRevokedLog") }), false);
      } })], deleteMessage: [y2(y2({ name: "messageList" }, s2), {}, { validator: function(e3, t3, n3) {
        return !S2(e3) || (r2({ api: t3, paramName: n3, desc: fn() }), false);
      } })], translateText: { sourceTextList: s2, sourceLanguage: n2, targetLanguage: n2 }, convertVoiceToText: { message: y2(y2({}, o2), {}, { validator: function(e3, t3, n3) {
        return S2(e3) ? (r2({ api: t3, paramName: n3, desc: Ln() }), false) : e3.type === R2.MSG_AUDIO && e3.status === Pn || (r2({ api: t3, paramName: n3, desc: u2("AudioMessageRequiredLog") }), false);
      } }) }, modifyMessage: [y2(y2({ name: "message" }, o2), {}, { validator: function(e3, t3, n3) {
        return S2(e3) ? (r2({ api: t3, paramName: n3, desc: Ln() }), false) : e3.conversationType === R2.CONV_SYSTEM ? (r2({ api: t3, paramName: n3, desc: u2("MessageCanBeModifiedLog") }), false) : true !== e3._onlineOnlyFlag || (r2({ api: t3, paramName: n3, desc: u2("OnlineMessageNotSupportLog") }), false);
      } })], searchCloudMessages: { keywordList: Vn.keywordListForMsg, keywordListMatchType: Vn.keywordListMatchType, cursor: Vn.cursor, senderUserIDList: { type: "Array", required: false, validator: function(e3, t3, n3) {
        return On(e3, t3, n3, { allowUndefined: true, allowEmpty: true, maxLength: 5 });
      } }, messageTypeList: { type: "Array", required: false, validator: function(e3, t3, n3) {
        var o3;
        return !e3 || !(!On(e3, t3, n3, { allowUndefined: true, allowEmpty: true }) || (o3 = [R2.MSG_TEXT, R2.MSG_IMAGE, R2.MSG_AUDIO, R2.MSG_FILE, R2.MSG_VIDEO, R2.MSG_LOCATION, R2.MSG_CUSTOM, R2.MSG_MERGER], 0 < e3.filter(function(e4) {
          return -1 === o3.indexOf(e4);
        }).length && (r2({ api: t3, paramName: n3, desc: An(n3, "message") }), 1)));
      } }, conversationID: { type: "String", required: false, validator: function(e3) {
        return !e3 || cn(e3);
      } }, timePosition: { type: "number", required: false, validator: function(e3, t3, n3) {
        return Nn(e3, t3, n3, { allowUndefined: true, min: 0 });
      } }, timePeriod: { type: "number", required: false, validator: function(e3, t3, n3) {
        return Nn(e3, t3, n3, { allowUndefined: true, min: 0 });
      } } }, searchCloudUsers: { keywordList: Vn.keywordListExceptMsg, keywordListMatchType: Vn.keywordListMatchType, cursor: Vn.cursor, count: Vn.count, miniBirthday: { type: "Number", required: false, validator: function(e3, t3, n3) {
        return Nn(e3, t3, n3, { allowUndefined: true, min: 0 });
      } }, maxBirthday: { type: "Number", required: false, validator: function(e3, t3, n3) {
        return Nn(e3, t3, n3, { allowUndefined: true, min: 0 });
      } }, gender: { type: "String", required: false, validator: function(e3, t3, n3) {
        return !e3 || e3 === R2.GENDER_FEMALE || e3 === R2.GENDER_MALE || r2({ api: t3, paramName: n3, desc: "".concat(e3, " is invalid match type") });
      } } }, searchCloudGroups: { keywordList: Vn.keywordListExceptMsg, keywordListMatchType: Vn.keywordListMatchType, cursor: Vn.cursor, count: Vn.count, groupTypeList: Vn.groupTypeList }, searchCloudGroupMembers: { keywordList: Vn.keywordListExceptMsg, keywordListMatchType: Vn.keywordListMatchType, cursor: Vn.cursor, count: Vn.count, groupTypeList: Vn.groupTypeList, groupIDList: { type: "Array", required: false, validator: function(e3, t3, n3) {
        return On(e3, t3, n3, { allowUndefined: true, allowEmpty: true });
      } } }, getUserProfile: { userIDList: { type: "Array", validator: function(e3, t3, n3) {
        return O2(e3) ? (0 === e3.length && r2({ api: t3, paramName: n3, desc: fn() }), true) : (r2({ api: t3, paramName: n3, desc: gn() }), false);
      } } }, updateMyProfile: { profileCustomField: { type: "Array", validator: function(e3, t3, n3) {
        return !!N2(e3) || !!O2(e3) || (r2({ api: t3, paramName: n3, desc: gn() }), false);
      } } }, setSelfStatus: { customStatus: { type: "String", validator: function(e3, t3, n3) {
        return !!C2(e3) || (r2({ api: t3, paramName: n3, desc: un() }), false);
      } } }, getUserStatus: { userIDList: { type: "Array", validator: function(e3, t3, n3) {
        return O2(e3) ? 0 !== e3.length || (r2({ api: t3, paramName: n3, desc: fn() }), false) : (r2({ api: t3, paramName: n3, desc: gn() }), false);
      } } }, subscribeUserStatus: { userIDList: { type: "Array", validator: function(e3, t3, n3) {
        return O2(e3) ? 0 !== e3.length || (r2({ api: t3, paramName: n3, desc: fn() }), false) : (r2({ api: t3, paramName: n3, desc: gn() }), false);
      } } }, unsubscribeUserStatus: { userIDList: { type: "Array", validator: function(e3, t3, n3) {
        return !e3 || !!O2(e3) || (r2({ api: t3, paramName: n3, desc: gn() }), false);
      } } }, addFriend: { to: n2, source: { type: "String", required: true, validator: function(e3, t3, n3) {
        return !(!e3 || (e3.startsWith("AddSource_Type_") ? 8 < e3.replace("AddSource_Type_", "").length && (r2({ api: t3, paramName: n3, desc: In("keyword", 8) }), 1) : (r2({ api: t3, paramName: n3, desc: u2("SourcePrefixLog") }), 1)));
      } }, remark: { type: "String", required: false, validator: function(e3, t3, n3) {
        return !(C2(e3) && 96 < e3.length && (r2({ api: t3, paramName: n3, desc: In(n3, 96) }), 1));
      } } }, deleteFriend: { userIDList: s2 }, checkFriend: { userIDList: s2 }, getFriendProfile: { userIDList: s2 }, updateFriend: { userID: n2, remark: { type: "String", required: false, validator: function(e3, t3, n3) {
        return !(C2(e3) && 96 < e3.length && (r2({ api: t3, paramName: n3, desc: In(n3, 96) }), 1));
      } }, friendCustomField: { type: "Array", required: false, validator: function(e3, t3, n3) {
        var o3;
        return !e3 || (O2(e3) ? (o3 = true, e3.forEach(function(e4) {
          return C2(e4.key) && -1 !== e4.key.indexOf("Tag_SNS_Custom") ? C2(e4.value) ? 8 < e4.key.replace("Tag_SNS_Custom_", "").length ? (r2({ api: t3, paramName: n3, desc: In("keyword", 8) }), o3 = false) : void 0 : (r2({ api: t3, paramName: n3, desc: Cn("value") }), o3 = false) : (r2({ api: t3, paramName: n3, desc: u2("FriendCustomFieldPrefixLog") }), o3 = false);
        }), o3) : (r2({ api: t3, paramName: n3, desc: gn() }), false));
      } } }, acceptFriendApplication: { userID: n2 }, refuseFriendApplication: { userID: n2 }, deleteFriendApplication: { userID: n2 }, createFriendGroup: { name: n2 }, deleteFriendGroup: { name: n2 }, addToFriendGroup: { name: n2, userIDList: s2 }, removeFromFriendGroup: { name: n2, userIDList: s2 }, renameFriendGroup: { oldName: n2, newName: n2 }, sendMessageReadReceipt: [{ name: "messageList", type: "Array", validator: function(e3, t3, n3) {
        return O2(e3) ? 0 !== e3.length || (r2({ api: t3, paramName: n3, desc: fn() }), false) : (r2({ api: t3, paramName: n3, desc: gn() }), false);
      } }], getMessageReadReceiptList: [{ name: "messageList", type: "Array", validator: function(e3, t3, n3) {
        return O2(e3) ? 0 !== e3.length || (r2({ api: t3, paramName: n3, desc: fn() }), false) : (r2({ api: t3, paramName: n3, desc: gn() }), false);
      } }], createTopicInCommunity: { groupID: n2, topicName: n2 }, deleteTopicFromCommunity: { groupID: n2, topicIDList: { type: "Array", validator: function(e3, t3, n3) {
        return !e3 || !!O2(e3) || (r2({ api: t3, paramName: n3, desc: gn() }), false);
      } } }, updateTopicProfile: { groupID: n2, topicID: n2 }, getTopicList: { groupID: n2, topicIDList: { type: "Array", validator: function(e3, t3, n3) {
        return !e3 || !!O2(e3) || (r2({ api: t3, paramName: n3, desc: gn() }), false);
      } } }, followUser: [y2({ name: "userIDList" }, s2)], unfollowUser: [y2({ name: "userIDList" }, s2)], getMyFollowingList: [y2(y2({ name: "startIndex" }, n2), {}, { required: false })], getMyFollowersList: [y2(y2({ name: "startIndex" }, n2), {}, { required: false })], getMutualFollowersList: [y2(y2({ name: "startIndex" }, n2), {}, { required: false })], getUserFollowInfo: [y2(y2({ name: "userIDList" }, s2), {}, { required: false })], checkFollowType: [y2({ name: "userIDList" }, s2)], addSignalingListener: [{ name: "eventName", type: "String", validator: function(e3, t3, n3) {
        return "string" == typeof e3 && 0 !== e3.length || (r2({ api: t3, paramName: n3, desc: ln(n3) }), false);
      } }, { name: "handler", type: "Function", validator: function(e3, t3, n3) {
        return "function" != typeof e3 ? (r2({ api: t3, paramName: n3, desc: hn() }), false) : ("" === e3.name && r2({ api: t3, paramName: n3, desc: Sn() }), true);
      } }], removeSignalingListener: [{ name: "eventName", type: "String", validator: function(e3, t3, n3) {
        return "string" == typeof e3 && 0 !== e3.length || (r2({ api: t3, paramName: n3, desc: ln(n3) }), false);
      } }, { name: "handler", type: "Function", validator: function(e3, t3, n3) {
        return "function" != typeof e3 ? (r2({ api: t3, paramName: n3, desc: hn() }), false) : ("" === e3.name && r2({ api: t3, paramName: n3, desc: Sn() }), true);
      } }], invite: { userID: n2 }, inviteSync: [y2(y2({}, o2), {}, { validator: function(e3, t3, n3) {
        return m2(e3) ? !!C2(e3.userID) || (r2({ api: t3, paramName: "options.userID", desc: un() }), false) : (r2({ api: t3, paramName: "options", desc: Tn() }), false);
      } }), { name: "successCb", type: "Function", required: false, validator: function(e3, t3, n3) {
        return N2(e3) && r2({ api: t3, paramName: n3, desc: hn() }), true;
      } }, { name: "errorCb", type: "Function", required: false, validator: function(e3, t3, n3) {
        return N2(e3) && r2({ api: t3, paramName: n3, desc: hn() }), true;
      } }], inviteInGroup: { groupID: n2, inviteeList: s2 }, inviteInGroupSync: [y2(y2({}, o2), {}, { validator: function(e3, t3, n3) {
        return m2(e3) ? C2(e3.groupID) ? !!O2(e3.inviteeList) || (r2({ api: t3, paramName: "options.inviteeList", desc: gn() }), false) : (r2({ api: t3, paramName: "options.groupID", desc: un() }), false) : (r2({ api: t3, paramName: "options", desc: Tn() }), false);
      } }), { name: "successCb", type: "Function", required: false, validator: function(e3, t3, n3) {
        return N2(e3) && r2({ api: t3, paramName: n3, desc: hn() }), true;
      } }, { name: "errorCb", type: "Function", required: false, validator: function(e3, t3, n3) {
        return N2(e3) && r2({ api: t3, paramName: n3, desc: hn() }), true;
      } }], accept: { inviteID: n2 }, reject: { inviteID: n2 }, getSignalingInfo: [y2(y2({ name: "message" }, o2), {}, { validator: function(e3, t3, n3) {
        return !S2(e3) || (r2({ api: t3, paramName: n3, desc: Ln() }), false);
      } })], modifyInvitation: { inviteID: n2, data: n2 } }, Hn = { login: 1, logout: 1, getLoginUser: 1, getServerTime: 1, on: 1, once: 1, off: 1, setLogLevel: 1, registerPlugin: 1, destroy: 1, isReady: 1, createTextMessage: 1, createTextAtMessage: 1, createImageMessage: 1, createAudioMessage: 1, createVideoMessage: 1, createCustomMessage: 1, createFaceMessage: 1, createFileMessage: 1, createLocationMessage: 1, createMergerMessage: 1, downloadMergerMessage: 1, createForwardMessage: 1, sendMessage: 1, resendMessage: 1, revokeMessage: 1, deleteMessage: 1, translateText: 1, convertVoiceToText: 1, modifyMessage: 1, sendMessageReadReceipt: 1, getGroupMessageReadMemberList: 1, getMessageReadReceiptList: 1, setMessageExtensions: 1, getMessageExtensions: 1, deleteMessageExtensions: 1, addMessageReaction: 1, removeMessageReaction: 1, getMessageReactions: 1, getAllUserListOfMessageReaction: 1, getMessageList: 1, findMessage: 1, getMessageListHopping: 1, setMessageRead: 1, setAllMessageRead: 1, getConversationList: 1, getConversationProfile: 1, deleteConversation: 1, setConversationDraft: 1, pinConversation: 1, getTotalUnreadMessageCount: 1, setConversationCustomData: 1, markConversation: 1, createConversationGroup: 1, getConversationGroupList: 1, deleteConversationGroup: 1, renameConversationGroup: 1, addConversationsToGroup: 1, deleteConversationsFromGroup: 1, clearHistoryMessage: 1, setMessageRemindType: 1, setAllReceiveMessageOpt: 1, getAllReceiveMessageOpt: 1, getGroupList: 1, getGroupProfile: 1, createGroup: 1, joinGroup: 1, updateGroupProfile: 1, quitGroup: 1, dismissGroup: 1, changeGroupOwner: 1, searchGroupByID: 1, getGroupApplicationList: 1, handleGroupApplication: 1, initGroupAttributes: 1, setGroupAttributes: 1, deleteGroupAttributes: 1, getGroupAttributes: 1, setGroupCounters: 1, increaseGroupCounter: 1, decreaseGroupCounter: 1, getGroupCounters: 1, getJoinedCommunityList: 1, createTopicInCommunity: 1, deleteTopicFromCommunity: 1, updateTopicProfile: 1, getTopicList: 1, getGroupMemberProfile: 1, getGroupMemberList: 1, addGroupMember: 1, deleteGroupMember: 1, setGroupMemberNameCard: 1, setGroupMemberMuteTime: 1, setGroupMemberRole: 1, setGroupMemberCustomField: 1, getGroupOnlineMemberCount: 1, markGroupMemberList: 1, getMyProfile: 1, getUserProfile: 1, updateMyProfile: 1, setSelfStatus: 1, getUserStatus: 1, subscribeUserStatus: 1, unsubscribeUserStatus: 1, getBlacklist: 1, addToBlacklist: 1, removeFromBlacklist: 1, searchCloudMessages: 1, searchCloudUsers: 1, searchCloudGroups: 1, searchCloudGroupMembers: 1, getFriendList: 1, addFriend: 1, deleteFriend: 1, checkFriend: 1, updateFriend: 1, getFriendProfile: 1, getFriendApplicationList: 1, refuseFriendApplication: 1, deleteFriendApplication: 1, acceptFriendApplication: 1, setFriendApplicationRead: 1, getFriendGroupList: 1, createFriendGroup: 1, renameFriendGroup: 1, deleteFriendGroup: 1, addToFriendGroup: 1, removeFromFriendGroup: 1, followUser: 1, unfollowUser: 1, getMyFollowingList: 1, getMyFollowersList: 1, getMutualFollowersList: 1, getUserFollowInfo: 1, checkFollowType: 1, callExperimentalAPI: 1, addSignalingListener: 1, removeSignalingListener: 1, invite: 1, inviteSync: 1, inviteInGroup: 1, inviteInGroupSync: 1, cancel: 1, accept: 1, reject: 1, getSignalingInfo: 1, modifyInvitation: 1 }, L2 = (t2(ro, Z2(Error)), e2(ro)), k2 = { NO_SDKAPPID: 2e3, NO_ACCOUNT_TYPE: 2001, NO_IDENTIFIER: 2002, NO_USERSIG: 2003, NO_TINYID: 2022, NO_A2KEY: 2023, USER_NOT_LOGGED_IN: 2024, REPEAT_LOGIN: 2025, COS_UNDETECTED: 2040, COS_GET_SIG_FAIL: 2041, MSG_SEND_FAIL: 2100, MSG_SEND_FAIL_NOT_IN_AV: 2101, MSG_INSTANCE_REQUIRED: 2105, MSG_INVALID_CONV_TYPE: 2106, MSG_F_IS_EMPTY: 2108, MSG_ONPROGRESS_ERR: 2109, MSG_REVOKE_FAIL: 2110, MSG_DELETE_FAIL: 2111, MSG_UNREAD_ALL_FAIL: 2112, READ_RECEIPT_MSG_LIST_EMPTY: 2114, MSG_SEND_GRP_WITH_TOPIC_FAIL: 2115, CANNOT_DELETE_GRP_SYSTEM_NOTICE: 2116, TRANSLATE_TEXT_FAIL: 2117, VOICE_TO_TEXT_FAIL: 2118, UNSUPPORTED_VOICE_FORMAT: 2119, MSG_I_SELECT_F_FIRST: 2251, MSG_I_TYPES_LIMIT: 2252, MSG_I_SIZE_LIMIT: 2253, MSG_A_UPLOAD_FAIL: 2300, MSG_A_SIZE_LIMIT: 2301, MSG_V_UPLOAD_FAIL: 2350, MSG_V_SIZE_LIMIT: 2351, MSG_V_TYPES_LIMIT: 2352, MSG_F_UPLOAD_FAIL: 2400, MSG_F_SELECT_F_FIRST: 2401, MSG_F_SIZE_LIMIT: 2402, MSG_F_URL_IS_EMPTY: 2403, MSG_MERGER_TYPE_INVALID: 2450, MSG_MERGER_KEY_INVALID: 2451, MSG_MERGER_DOWNLOAD_FAIL: 2452, MSG_FORWARD_TYPE_INVALID: 2453, MSG_FORWARD_INVALID_ELEMENTS: 2454, MSG_MODIFY_CONFLICT: 2480, MSG_MODIFY_DISABLED_IN_AV: 2481, CONV_NOT_FOUND: 2500, USER_OR_GRP_NOT_FOUND: 2501, CONV_UN_RECORDED_TYPE: 2502, INVALID_CONV_ID: 2503, ILLEGAL_GRP_TYPE: 2600, ILLEGAL_GRP_ID: 2602, CANNOT_FIND_GRP: 2603, CANNOT_CHANGE_OWNER_IN_AV: 2620, CANNOT_CHANGE_OWNER_TO_SELF: 2621, MEMBER_NOT_IN_GRP: 2623, JOIN_GRP_FAIL: 2660, CANNOT_ADD_MEMBER_IN_AV: 2661, CANNOT_JOIN_NON_AV_WITHOUT_LOGIN: 2662, NOT_OWNER: 2681, INVALID_MEMBER_ROLE: 2683, CANNOT_SET_SELF_MEMBER_ROLE: 2684, CANNOT_MUTE_SELF: 2685, BAN_DURATION_INVALID: 2686, OPERATION_NOT_SUPPORTED_IN_AV: 2687, NOT_MY_FRIEND: 2700, ALREADY_MY_FRIEND: 2701, FRIEND_GRP_EXISTED: 2710, FRIEND_GRP_NOT_EXIST: 2711, FRIEND_APPLICATION_NOT_EXIST: 2716, UPDATE_PROFILE_INVALID_PARAM: 2721, UPDATE_PROFILE_NO_KEY: 2722, CANNOT_ADD_SELF_TO_BLACKLIST: 2742, NETWORK_ERROR: 2800, NETWORK_TIMEOUT: 2801, NO_NETWORK: 2805, UNCAUGHT_ERROR: 2903, INVALID_OPERATION: 2905, INVALID_TRTC_CMD: 2995, OVER_FREQUENCY_LIMIT: 2996, NO_PROTOCOL: 2997, NO_MODULE: 2998, SDK_IS_NOT_READY: 2999, LOGGING_IN: 3e3, LOGIN_FAILED: 3001, KICKED_OUT_MULT_DEVICE: 3002, KICKED_OUT_MULT_ACCOUNT: 3003, KICKED_OUT_USERSIG_EXPIRED: 3004, LOGGED_OUT: 3005, KICKED_OUT_REST_API: 3006, ILLEGAL_TOPIC_ID: 3021, NO_USE: 3122, PROFANITY_FOUND: 3123, OPTIONS_IS_EMPTY: 3153, MSG_A2KEY_EXPIRED: 20002, ACCOUNT_A2KEY_EXPIRED: 70001, HELLO_ANSWER_KICKED_OUT: 1002, OPEN_SERVICE_OVERLOAD_ERROR: 60022, SIGNALING_INVALID_INVITE_ID: 8010, SIGNALING_NO_PERMISSION: 8011, SIGNALING_ALREADY_EXISTS: 8012, INVALID_CANCEL_MESSAGE: 8020 }, Kn = null, c2 = e2(function e3(t3) {
        p2(this, e3), this._m = t3, this._n = "";
      }, [{ key: "isLoggedIn", value: function() {
        return this._m.get(12).isLoggedIn();
      } }, { key: "isOversea", value: function() {
        return this._m.get(12).isOversea();
      } }, { key: "isPrivateNetWork", value: function() {
        var e3 = this._m.get(12);
        return e3.isPrivateNetWork() && !e3.getFileDownloadProxy();
      } }, { key: "getFileDownloadProxy", value: function() {
        return this._m.get(12).getFileDownloadProxy();
      } }, { key: "getDownloadFileAuthKey", value: function() {
        return this._m.get(12).getDownloadFileAuthKey();
      } }, { key: "getMyUserID", value: function() {
        return this._m.get(12).getUserID();
      } }, { key: "getMyTinyID", value: function() {
        return this._m.get(12).getTinyID();
      } }, { key: "getSDKAppID", value: function() {
        return this._m.get(12).getSDKAppID();
      } }, { key: "isIntl", value: function() {
        return this._m.get(12).isIntl();
      } }, { key: "isUsingChatCore", value: function() {
        return this._m.get(12).isUsingChatCore();
      } }, { key: "isDevMode", value: function() {
        return this._m.get(12).isDevMode();
      } }, { key: "get", value: function(e3) {
        return this._m.get(e3);
      } }, { key: "getPlatform", value: function() {
        return De2;
      } }, { key: "getCloudConfig", value: function(e3) {
        return this._m.get(23).getCloudConfig(e3);
      } }, { key: "emitOEvt", value: function(e3, t3) {
        this._m.getOEmitInst().emit(e3, t3);
      } }, { key: "emitIEvt", value: function(e3, t3) {
        this._m.getIEmitInst().emit(e3, t3);
      } }, { key: "getIEmitInst", value: function() {
        return this._m.getIEmitInst();
      } }, { key: "req", value: function(e3) {
        return this._m.get(20).req(e3);
      } }, { key: "canIUse", value: function(e3) {
        return this._m.get(27).canIUse(e3);
      } }, { key: "getErrMsg", value: function(e3, t3, n3) {
        return this._m.getErrMsg(e3, t3, n3);
      } }, { key: "warn", value: function(e3, t3, n3) {
        e3 = this.getErrMsg(e3, t3, n3);
        e3 && M2.w(e3);
      } }, { key: "noUse", value: function(e3) {
        var t3 = k2.NO_USE;
        return E2({ code: t3, message: this.getErrMsg(t3, e3) });
      } }]), G2 = { LOGIN: "wslogin", LOGOUT: "wslogout", HELLO: "wshello", KICK_OTHER: "KickOther", SYNC_UNREAD_MSG: "getmsg", SEND_C2C_MSG: "sendmsg", SEND_GRP_MSG: "send_group_msg", GET_USER_PROFILE: "portrait_get_all", UPDATE_MY_PROFILE: "portrait_set", GET_BL: "black_list_get", ADD_TO_BL: "black_list_add", RM_FROM_BL: "black_list_delete", GET_FD_LIST: "friend_get", GET_FD_PROFILE: "friend_get_specified", CHECK_FD: "friend_check", DEL_FD: "friend_delete", ADD_FD: "friend_add", UPDATE_FD: "friend_update", RESPOND_FD_APPLICATION: "friend_response", GET_FD_APPLICATION_LIST: "pendency_get", DEL_FD_APPLICATION: "pendency_delete", REFUSE_FD_APPLICATION: "pendency_refuse", REPORT_FD_APPLICATION: "pendency_report", GET_FD_GRP_LIST: "group_get", CREATE_FD_GRP: "group_add", DEL_FD_GRP: "group_delete", UPDATE_FD_GRP: "group_update", REVOKE_C2C_MSG: "msgwithdraw", SET_C2C_MSG_READ: "msgreaded", SET_C2C_PEER_MUTE_NOTIFICATIONS: "set_c2c_peer_mute_notifications", GET_C2C_PEER_MUTE_NOTIFICATIONS: "get_c2c_peer_mute_notifications", GET_C2C_ROAMING_MSG: "getroammsg", GET_C2C_PEER_READ_TIME: "get_peer_read_time", DEL_C2C_MSG: "delete_c2c_msg_ramble", MODIFY_C2C_MSG: "modify_c2c_msg", MODIFY_C2C_MSG_EXT: "set_key_values", GET_C2C_MSG_EXT: "get_key_values", ADD_C2C_MSG_REACTION: "reaction_add", RM_C2C_MSG_REACTION: "reaction_del", GET_C2C_MSG_REACTIONS: "reaction_multi_stat", GET_C2C_MSG_REACTION_USER_LIST: "reaction_iterate", PAGING_GET_CONV_LIST: "page_get", DEL_CONV: "batch_delete", CLEAR_HISTORY_MSG: "clear_msg", PIN_CONV: "top", DEL_GROUP_AT_TIPS: "deletemsg", SET_CONV_CUSTOM_DATA: "set_conv_custom_data", MARK_CONV: "mark_contact", CREATE_CONV_GRP: "create_contact_group", DEL_CONV_GRP: "del_contact_group", RENAME_CONV_GRP: "update_contact_group", ADD_CONV_TO_GRP: "add_conv_to_group", DEL_CONV_FROM_GRP: "del_conv_from_group", GET_CONV_GRP_LIST: "get_contact_group", SEARCH_CONV_GRP_MARK: "search_contact_group", GET_GRP_LIST: "get_joined_group_list", GET_GRP_PROFILE: "get_group_self_member_info", CREATE_GRP: "create_group", DISMISS_GRP: "destroy_group", UPDATE_GRP_PROFILE: "modify_group_base_info", APPLY_JOIN_GRP: "apply_join_group", APPLY_JOIN_GRP_NOAUTH: "apply_join_group_noauth", QUIT_GRP: "quit_group", SEARCH_GRP: "get_group_public_info", CHANGE_GRP_OWNER: "change_group_owner", HANDLE_GRP_APPLICATION: "handle_apply_join_group", HANDLE_INVITE_JOIN_GRP: "handle_invite_join_permission_group", HANDLE_GRP_INVITATION: "handle_invite_join_group", REVOKE_GRP_MSG: "group_msg_recall", SET_GRP_MSG_READ: "msg_read_report", SET_ALL_MSG_READ: "read_all_unread_msg", GET_GRP_ROAMING_MSG: "group_msg_get", GET_READ_RECEIPT: "get_group_msg_receipt", SEND_READ_RECEIPT: "group_msg_receipt", SEND_C2C_READ_RECEIPT: "c2c_msg_read_receipt", GET_READ_RECEIPT_DETAIL: "get_group_msg_receipt_detail", GET_GRP_RECEIPTS_BY_USERS: "get_group_msg_receipts_by_users", GET_GRP_PENDENCY: "get_pendency", DEL_GRP_SYSTEM_NOTICE: "deletemsg", AV_POLLING: "get_msg", AV_NOAUTH_POLLING: "get_msg_noauth", GET_ONLINE_MBR_NUM: "get_online_member_num", DEL_GRP_MSG: "delete_group_ramble_msg_by_seq", MODIFY_GRP_MSG: "modify_group_msg", SET_GRP_ATTR: "set_group_attr", MODIFY_GRP_ATTR: "modify_group_attr", DEL_GRP_ATTR: "delete_group_attr", CLEAR_GRP_ATTR: "clear_group_attr", GET_GRP_ATTR: "get_group_attr", MODIFY_GRP_MSG_EXT: "group_set_key_values", GET_GRP_MSG_EXT: "group_get_key_values", GET_GRP_NOTIFY: "batch_get_group_notify", UPDATE_GRP_COUNTER: "update_group_counter", GET_GRP_COUNTER: "get_group_counter", ADD_GRP_MSG_REACTION: "group_reaction_add", RM_GRP_MSG_REACTION: "group_reaction_del", GET_GRP_MSG_REACTIONS: "group_reaction_multi_stat", GET_GRP_MSG_REACTION_USER_LIST: "group_reaction_iterate", GET_GRP_MBR_LIST: "get_group_member_info", GET_AV_MBR_LIST: "get_members", GET_GRP_MBR_PROFILE: "get_specified_group_member_info", ADD_GRP_MBR: "add_group_member", DEL_GRP_MBR: "delete_group_member", BAN_AV_MBR: "ban_group_member", MODIFY_GRP_MBR_INFO: "modify_group_member_info", MARK_AV_MBR_INFO: "modify_user_info", COS_SIGN: "cos", COS_PRE_SIG: "pre_sig", SIMPLE_COS_PRE_SIG: "simple_sig", GET_IMAGE_INFO: "get_imageinfo", GET_IP: "get_final_ip", VIDEO_COVER: "video_cover", SSO_STAT: "tim_web_report_v2", PING: "alive", MSG_PUSH: "msg_push", CS: "query", GRP_CS: "query_grp", MBR_CS: "query_grp_member", USER_CS: "query_user", MULTI_MSG_PUSH: "multi_msg_push_ws", MSG_PUSH_ACK: "ws_msg_push_ack", STATUS_FORCE_OFFLINE: "stat_forceoffline", UPLOAD_MERGER_MSG: "save_relay_json_msg", DOWNLOAD_MERGER_MSG: "get_relay_json_msg", FETCH_CLOUD_CTRL_CONFIG: "fetch_config", PUSHED_CLOUD_CTRL_CONFIG: "push_configv2", FETCH_COMMERCIAL_CONFIG: "fetch_imsdk_purchase_bitsv2", PUSHED_COMMERCIAL_CONFIG: "push_imsdk_purchase_bitsv2", OVERLOAD_NOTIFY: "notify2", CREATE_TOPIC: "create_topic", DEL_TOPIC: "destroy_topic", UPDATE_TOPIC_PROFILE: "modify_topic", GET_TOPIC_LIST: "get_topic", SET_SELF_STATUS: "ws_set_custom_status", GET_USER_STATUS: "ws_get_user_status", SUB_USER_STATUS: "ws_status_subscribe", UNSUB_USER_STATUS: "ws_status_unsubscribe", STAT_BACKGROUND: "ws_stat_background", STAT_FOREGROUND: "ws_stat_foreground", SET_TOKEN: "ws_stat_settoken", PUSH_REPORT: "uniapp_sdk_report", GET_PROFANITY_LIST: "get_local_words", TRANSLATE_TEXT: "ws_batch_trans_text", VOICE_TO_TEXT: "ws_sentence_recognition", FOLLOW: "follow_add", UNFOLLOW: "follow_delete", GET_FOLLOW: "follow_get", GET_FOLLOW_INFO: "follow_get_info", CHECK_FOLLOW_TYPE: "follow_check", SET_ALL_RECEIVE_MSG_OPT: "ws_set_do_not_disturb", GET_ALL_RECEIVE_MSG_OPT: "ws_get_do_not_disturb" }, Wn = "networkRTT", Yn = "messageE2EDelay", jn = "sendMessageC2C", Jn = "sendMessageGroup", zn = "sendMessageGroupAV", Xn = "sendMessageRichMedia", Zn = "cosUpload", Qn = "messageReceivedGroup", $n = "messageReceivedGroupAVPush", eo = "messageReceivedGroupAVPull", to = q2(q2(q2(q2(q2(q2(q2(q2(q2(q2({}, Wn, 2), Yn, 3), jn, 4), Jn, 5), zn, 6), Xn, 7), Qn, 8), $n, 9), eo, 10), Zn, 11), no = { info: 4, warning: 5, error: 6 }, oo = { wifi: 1, "2g": 2, "3g": 3, "4g": 4, "5g": 5, unknown: 6, none: 7, online: 8 }, io = { login: 4, plugin_search: 16, plugin_translate: 16, plugin_voice_to_text: 16, plugin_cs: 16, plugin_push: 16, plugin_bot: 16, plugin_emoji_reaction: 16, tui_key_features: 16 }, P2 = e2(so, [{ key: "updateTimeStamp", value: function() {
        this.timestamp = Ye2();
      } }, { key: "start", value: function(e3) {
        return this._startts = e3, this;
      } }, { key: "end", value: function() {
        var e3, t3 = this, n3 = 0 < arguments.length && void 0 !== arguments[0] && arguments[0];
        this._sentFlag || (this._netMonitorModule && (e3 = this._netMonitorModule.getNetworkType(), this.setNetworkType(e3)), e3 = Ye2(), 0 === this.costTime && (this.costTime = e3 - this._startts), this.setMoreMessage("startts:".concat(this._startts, " endts:").concat(e3)), n3 ? (this._sentFlag = true, this._eventStatModule && this._eventStatModule.pushIn(this)) : setTimeout(function() {
          t3._sentFlag = true, t3._eventStatModule && t3._eventStatModule.pushIn(t3);
        }, 0));
      } }, { key: "setError", value: function(e3) {
        var t3;
        return e3 instanceof Error ? this._sentFlag || (t3 = true, (t3 = this._netMonitorModule ? this._netMonitorModule.isOnline() : t3) ? (e3.code && this.setCode(e3.code), e3.message && this.setMoreMessage(e3.message)) : this.setCode(k2.NO_NETWORK), this.setLevel("error")) : M2.w("".concat(this._n, ".setError value not instanceof Error, please check!")), this;
      } }, { key: "setCode", value: function(e3) {
        return N2(e3) || this._sentFlag || ("ECONNABORTED" === e3 && (this.code = 103), A2(e3) ? this.code = e3 : M2.w("".concat(this._n, ".setCode value not a number, please check!"), e3, z2(e3))), this;
      } }, { key: "setMessage", value: function(e3) {
        return N2(e3) || this._sentFlag || (A2(e3) && (this.message = e3.toString()), C2(e3) && (this.message = e3)), this;
      } }, { key: "setCostTime", value: function(e3) {
        return this.costTime = e3, this;
      } }, { key: "setLevel", value: function(e3) {
        return N2(e3) || this._sentFlag || (this.level = no[e3]), this;
      } }, { key: "setMoreMessage", value: function(e3) {
        return S2(this.moreMessage) ? this.moreMessage = "".concat(e3) : this.moreMessage += " ".concat(e3), this;
      } }, { key: "setNetworkType", value: function(e3) {
        return N2(e3) ? M2.w("".concat(this._n, ".setNetworkType value is undefined, please check!")) : (e3 = oo[e3.toLowerCase()], N2(e3) || (this.networkType = e3)), this;
      } }, { key: "getStartTs", value: function() {
        return this._startts;
      } }, { key: "setUIPlatform", value: function(e3) {
        return this.uiPlatform = e3, this;
      } }, { key: "setExtension", value: function(e3) {
        return this.extension = e3, this;
      } }, { key: "setEventType", value: function(e3) {
        return this.eventType = e3, this;
      } }], [{ key: "bindEventStatModule", value: function(e3) {
        so.prototype._eventStatModule = e3;
      } }, { key: "bindNetMonitorModule", value: function(e3) {
        so.prototype._netMonitorModule = e3;
      } }]), ao = e2(function e3(t3) {
        p2(this, e3), this.type = R2.MSG_TEXT, this.content = { text: t3.text || "" };
      }, [{ key: "setText", value: function(e3) {
        this.content.text = e3;
      } }, { key: "sendable", value: function() {
        return 0 !== this.content.text.length;
      } }]);
      function so(e3) {
        p2(this, so), this._n = "SSOLogData", this.eventType = io[e3] || 0, this.timestamp = 0, this.networkType = 8, this.code = 0, this.message = "", this.moreMessage = "", this.extension = e3, this.costTime = 0, this.duplicate = false, this.level = 4, this.uiPlatform = void 0, this._sentFlag = false, this._startts = Ye2();
      }
      function ro(e3) {
        p2(this, ro), t3 = i2(this, ro);
        var t3, n3 = e3.code, o3 = e3.message, e3 = e3.data;
        return t3.code = n3, o3 ? t3.message = o3 : t3._getErrMsg && (t3.message = t3._getErrMsg(t3.code)), t3.data = e3 || {}, t3;
      }
      function co(e3, t3, n3, o3) {
        var i3, o3 = 3 < arguments.length && void 0 !== o3 ? o3 : [];
        return e3 && (i3 = e3, t3 && (e3.startsWith("http://") ? i3 = e3.replace(/^http:\/\/[^/]+/, t3) : e3.startsWith("https://") && (i3 = e3.replace(/^https:\/\/[^/]+/, t3))), n3 && -1 === i3.indexOf("authKey=") && po(i3, o3) ? (-1 < i3.indexOf("?") ? "".concat(i3, "&authKey=") : "".concat(i3, "?authKey=")).concat(n3) : i3);
      }
      function uo(e3, t3, n3) {
        var o3 = 2 < arguments.length && void 0 !== n3 ? n3 : [], n3 = t3[0].content || t3[0].payload;
        return e3 === R2.MSG_IMAGE ? n3.imageInfoArray.forEach(function(e4) {
          po(e4.imageUrl, o3) && (e4.imageUrl = lo(e4.imageUrl));
        }) : e3 === R2.MSG_VIDEO ? (po(n3.snapshotUrl, o3) && (n3.snapshotUrl = lo(n3.snapshotUrl), n3.thumbUrl = lo(n3.thumbUrl)), po(n3.remoteVideoUrl, o3) && (n3.remoteVideoUrl = lo(n3.remoteVideoUrl))) : e3 === R2.MSG_AUDIO ? po(n3.remoteAudioUrl, o3) && (n3.remoteAudioUrl = lo(n3.remoteAudioUrl)) : e3 === R2.MSG_FILE ? po(n3.fileUrl, o3) && (n3.fileUrl = lo(n3.fileUrl)) : e3 === R2.MSG_MERGER && (e3 = (n3 = t3[0].content || t3[0].payload).downloadKey, n3 = void 0 === (n3 = n3.messageList) ? [] : n3, S2(void 0 === e3 ? "" : e3)) && n3.forEach(function(e4) {
          uo(e4.messageBody[0].type, e4.messageBody, o3);
        }), t3;
      }
      function lo(e3) {
        if (!e3)
          return e3;
        if (-1 === e3.indexOf("authKey="))
          return e3;
        for (var e3 = e3.split("?"), t3 = e3[1].split("&"), n3 = 0, o3 = 0; o3 < t3.length; o3++)
          if (-1 < t3[o3].indexOf("authKey=")) {
            n3 = o3;
            break;
          }
        return t3.splice(n3, 1), 0 < t3.length ? "".concat(e3[0], "?").concat(t3.join("&")) : e3[0];
      }
      function po(e3, t3) {
        var n3 = false;
        if (e3) {
          var e3 = e3.match(/:\/\/([0-9]?\.)?(.[^/:]+)/), o3 = e3 && e3[2] || "";
          if (o3.includes("rich-dev"))
            return 1;
          for (var i3 = 0; i3 < t3.length; i3++)
            if (o3.endsWith(t3[i3])) {
              n3 = true;
              break;
            }
        }
        return n3;
      }
      var _o = e2(function e3(t3, n3, o3, i3) {
        p2(this, e3), this._imageMemoryURL = "", this._fileDownloadProxy = n3, this._authKey = o3, this._fileDNList = i3, v2 || ye2 ? this.createImageDataASURL(t3.file) : this.createImageDataASURLInWeb(t3.file), this._initImageInfoModel(), this.type = R2.MSG_IMAGE, this._percent = 0, this.content = { imageFormat: t3.imageFormat || Xe2.UNKNOWN, uuid: t3.uuid, imageInfoArray: [] }, this.initImageInfoArray(t3.imageInfoArray), this._autoFixUrl();
      }, [{ key: "_initImageInfoModel", value: function() {
        var t3 = this;
        this._ImageInfoModel = function(e3) {
          this.instanceID = mt2(9999999), this.sizeType = e3.type || 0, this.type = 0, this.size = e3.size || 0, this.width = e3.width || 0, this.height = e3.height || 0, this.imageUrl = e3.imageUrl || e3.url || "", this.url = co(e3.url || t3._imageMemoryURL, t3._fileDownloadProxy, t3._authKey, t3._fileDNList);
        }, this._ImageInfoModel.prototype = { setSizeType: function(e3) {
          this.sizeType = e3;
        }, setType: function(e3) {
          this.type = e3;
        }, setImageUrl: function(e3) {
          e3 && (this.imageUrl = co(e3, t3._fileDownloadProxy, t3._authKey, t3._fileDNList));
        }, getImageUrl: function() {
          return this.imageUrl;
        } };
      } }, { key: "initImageInfoArray", value: function(e3) {
        for (var t3, n3 = 0, o3 = null; n3 <= 2; )
          t3 = N2(e3) || N2(e3[n3]) ? { type: 0, size: 0, width: 0, height: 0, url: "" } : e3[n3], (o3 = new this._ImageInfoModel(t3)).setSizeType(n3 + 1), o3.setType(n3), this.addImageInfo(o3), n3++;
        this.updateAccessSideImageInfoArray();
      } }, { key: "updateImageInfoArray", value: function(e3) {
        for (var t3, n3 = this.content.imageInfoArray.length, o3 = 0; o3 < n3; o3++)
          t3 = this.content.imageInfoArray[o3], e3[o3].size && (t3.size = e3[o3].size), e3[o3].url && t3.setImageUrl(e3[o3].url), e3[o3].width && (t3.width = e3[o3].width), e3[o3].height && (t3.height = e3[o3].height);
      } }, { key: "_autoFixUrl", value: function() {
        for (var e3 = this.content.imageInfoArray.length, t3 = "", n3 = "", o3 = ["http", "https"], i3 = null, a3 = 0; a3 < e3; a3++)
          this.content.imageInfoArray[a3].url && "" !== (i3 = this.content.imageInfoArray[a3]).imageUrl && (n3 = i3.imageUrl.slice(0, i3.imageUrl.indexOf("://") + 1), t3 = i3.imageUrl.slice(i3.imageUrl.indexOf("://") + 1), o3.indexOf(n3) < 0 && (n3 = "https:"), this.content.imageInfoArray[a3].setImageUrl([n3, t3].join("")));
      } }, { key: "updatePercent", value: function(e3) {
        this._percent = e3, 1 < this._percent && (this._percent = 1);
      } }, { key: "updateImageFormat", value: function(e3) {
        this.content.imageFormat = Xe2[e3.toUpperCase()] || Xe2.UNKNOWN;
      } }, { key: "createImageDataASURLInWeb", value: function(e3) {
        void 0 !== e3 && 0 < e3.files.length && (this._imageMemoryURL = window.URL.createObjectURL(e3.files[0]));
      } }, { key: "createImageDataASURL", value: function(e3) {
        e3 && e3.url && (this._imageMemoryURL = e3.url);
      } }, { key: "replaceImageInfo", value: function(e3, t3) {
        this.content.imageInfoArray[t3] instanceof this._ImageInfoModel || (this.content.imageInfoArray[t3] = e3);
      } }, { key: "addImageInfo", value: function(e3) {
        3 <= this.content.imageInfoArray.length || this.content.imageInfoArray.push(e3);
      } }, { key: "updateAccessSideImageInfoArray", value: function() {
        var e3 = this.content.imageInfoArray, t3 = e3[0], n3 = t3.width, n3 = void 0 === n3 ? 0 : n3, t3 = t3.height, t3 = void 0 === t3 ? 0 : t3;
        0 !== n3 && 0 !== t3 && (Wt2(e3), Object.assign(e3[2], Kt2({ originWidth: n3, originHeight: t3, min: 720 })));
      } }, { key: "sendable", value: function() {
        return 0 !== this.content.imageInfoArray.length && "" !== this.content.imageInfoArray[0].imageUrl && 0 !== this.content.imageInfoArray[0].size;
      } }]), ho = e2(function e3(t3) {
        p2(this, e3), this.type = R2.MSG_FACE, this.content = t3 || null;
      }, [{ key: "sendable", value: function() {
        return null !== this.content;
      } }]), go = e2(function e3(t3, n3, o3, i3) {
        p2(this, e3), this.type = R2.MSG_AUDIO, this._percent = 0, this._fileDownloadProxy = n3, this._authKey = o3, this._fileDNList = i3, this.content = { downloadFlag: 2, second: t3.second, size: t3.size, url: co(t3.url, this._fileDownloadProxy, this._authKey, this._fileDNList), remoteAudioUrl: co(t3.url || "", this._fileDownloadProxy, this._authKey, this._fileDNList), uuid: t3.uuid };
      }, [{ key: "updatePercent", value: function(e3) {
        this._percent = e3, 1 < this._percent && (this._percent = 1);
      } }, { key: "updateAudioUrl", value: function(e3) {
        this.content.remoteAudioUrl = co(e3, this._fileDownloadProxy, this._authKey, this._fileDNList);
      } }, { key: "sendable", value: function() {
        return "" !== this.content.remoteAudioUrl;
      } }]), fo = { from: true, groupID: true, groupName: true, to: true }, mo = e2(function e3(t3) {
        p2(this, e3), this.type = R2.MSG_GRP_TIP, this.content = {}, this._initContent(t3);
      }, [{ key: "_initContent", value: function(t3) {
        var n3 = this;
        Object.keys(t3).forEach(function(e3) {
          switch (e3) {
            case "remarkInfo":
              break;
            case "groupProfile":
              n3.content.groupProfile = {}, n3._initGroupProfile(t3[e3]);
              break;
            case "operatorInfo":
              n3.content.operatorInfo = {}, n3._initOperatorInfo(t3[e3]);
              break;
            case "memberInfoList":
            case "msgMemberInfo":
              n3._updateMemberList(t3[e3]);
              break;
            case "memberExtraInfo":
            case "onlineMemberInfo":
              break;
            case "memberNum":
              n3.content[e3] = t3[e3], n3.content.memberCount = t3[e3];
              break;
            case "newGroupProfile":
              n3.content.newGroupProfile = {}, n3._initNewGroupProfile(t3[e3]);
              break;
            default:
              n3.content[e3] = t3[e3];
          }
        }), this.content.userIDList || (this.content.userIDList = [this.content.operatorID]);
      } }, { key: "_initGroupProfile", value: function(e3) {
        for (var t3 = Object.keys(e3), n3 = 0; n3 < t3.length; n3++) {
          var o3 = t3[n3];
          fo[o3] && (this.content.groupProfile[o3] = e3[o3]);
        }
      } }, { key: "_initOperatorInfo", value: function(e3) {
        for (var t3 = Object.keys(e3), n3 = 0; n3 < t3.length; n3++) {
          var o3 = t3[n3];
          this.content.operatorInfo[o3] = e3[o3];
        }
      } }, { key: "_updateMemberList", value: function(e3) {
        S2(this.content.memberList) ? this.content.memberList = e3 : this.content.memberList.forEach(function(t3) {
          e3.forEach(function(e4) {
            t3.userID === e4.userID && Object.assign(t3, e4);
          });
        });
      } }, { key: "_initNewGroupProfile", value: function(e3) {
        for (var t3 = Object.keys(e3), n3 = 0; n3 < t3.length; n3++) {
          var o3 = t3[n3];
          this.content.newGroupProfile[o3] = "muteAllMembers" !== o3 ? e3[o3] : 1 === e3[o3];
        }
      } }]), vo = { from: true, groupID: true, groupName: true, to: true, groupType: true }, Io = e2(function e3(t3) {
        p2(this, e3), this.type = R2.MSG_GRP_SYS_NOTICE, this.content = {}, this._initContent(t3);
      }, [{ key: "_initContent", value: function(t3) {
        var n3 = this;
        Object.keys(t3).forEach(function(e3) {
          switch (e3) {
            case "memberInfoList":
              break;
            case "remarkInfo":
              n3.content.handleMessage = t3[e3];
              break;
            case "groupProfile":
              n3.content.groupProfile = {}, n3._initGroupProfile(t3[e3]);
              break;
            default:
              n3.content[e3] = t3[e3];
          }
        });
      } }, { key: "_initGroupProfile", value: function(e3) {
        for (var t3 = Object.keys(e3), n3 = 0; n3 < t3.length; n3++) {
          var o3 = t3[n3];
          vo[o3] && ("groupName" === o3 ? this.content.groupProfile.name = e3[o3] : this.content.groupProfile[o3] = e3[o3]);
        }
      } }]), Mo = e2(function e3(t3, n3, o3, i3) {
        p2(this, e3), this.type = R2.MSG_FILE, this._percent = 0;
        var a3 = this._getFileInfo(t3);
        this.content = { downloadFlag: 2, fileUrl: co(t3.url || t3.fileUrl, n3, o3, i3) || "", uuid: t3.uuid, fileName: a3.name || "", fileSize: a3.size || 0 };
      }, [{ key: "_getFileInfo", value: function(e3) {
        var t3, n3;
        return N2(e3.fileName) || N2(e3.fileSize) ? (t3 = e3.file.files[0], Ie2 && (t3.path && -1 !== t3.path.indexOf(".") && (n3 = t3.path.slice(t3.path.lastIndexOf(".") + 1).toLowerCase(), t3.type = n3, t3.name || (t3.name = "".concat(mt2(999999), ".").concat(n3))), t3.name || (t3.type = "", t3.name = t3.path.slice(t3.path.lastIndexOf("/") + 1).toLowerCase()), t3.suffix && (t3.type = t3.suffix), t3.url || (t3.url = t3.path)), { size: t3.size, name: t3.name }) : { size: e3.fileSize, name: e3.fileName };
      } }, { key: "updatePercent", value: function(e3) {
        this._percent = e3, 1 < this._percent && (this._percent = 1);
      } }, { key: "updateFileUrl", value: function(e3) {
        this.content.fileUrl = e3;
      } }, { key: "sendable", value: function() {
        return "" !== this.content.fileUrl && "" !== this.content.fileName && 0 !== this.content.fileSize;
      } }]), yo = e2(function e3(t3) {
        p2(this, e3), this.type = R2.MSG_CUSTOM, this.content = { data: t3.data || "", description: t3.description || "", extension: t3.extension || "" };
      }, [{ key: "setData", value: function(e3) {
        return this.content.data = e3, this;
      } }, { key: "setDescription", value: function(e3) {
        return this.content.description = e3, this;
      } }, { key: "setExtension", value: function(e3) {
        return this.content.extension = e3, this;
      } }, { key: "sendable", value: function() {
        return 0 !== this.content.data.length || 0 !== this.content.description.length || 0 !== this.content.extension.length;
      } }]), Co = e2(function e3(t3, n3, o3, i3) {
        p2(this, e3), this.type = R2.MSG_VIDEO, this._percent = 0, this._fileDownloadProxy = n3, this._authKey = o3, this._fileDNList = i3, this.content = { remoteVideoUrl: co(t3.remoteVideoUrl || t3.videoUrl || "", this._fileDownloadProxy, this._authKey, this._fileDNList), videoFormat: t3.videoFormat, videoSecond: parseInt(t3.videoSecond, 10), videoSize: t3.videoSize, videoUrl: co(t3.videoUrl, this._fileDownloadProxy, this._authKey, this._fileDNList), videoDownloadFlag: 2, videoUUID: t3.videoUUID, thumbUUID: t3.thumbUUID, thumbFormat: t3.thumbFormat, thumbWidth: t3.thumbWidth, snapshotWidth: t3.thumbWidth, thumbHeight: t3.thumbHeight, snapshotHeight: t3.thumbHeight, thumbSize: t3.thumbSize, snapshotSize: t3.thumbSize, thumbDownloadFlag: 2, thumbUrl: co(t3.thumbUrl, this._fileDownloadProxy, this._authKey, this._fileDNList), snapshotUrl: co(t3.thumbUrl, this._fileDownloadProxy, this._authKey, this._fileDNList) };
      }, [{ key: "updatePercent", value: function(e3) {
        this._percent = e3, 1 < this._percent && (this._percent = 1);
      } }, { key: "updateVideoUrl", value: function(e3) {
        e3 && (this.content.remoteVideoUrl = co(e3, this._fileDownloadProxy, this._authKey, this._fileDNList));
      } }, { key: "updateSnapshotInfo", value: function(e3) {
        var t3 = e3.snapshotUrl, n3 = e3.snapshotWidth, e3 = e3.snapshotHeight;
        S2(t3) || (this.content.thumbUrl = this.content.snapshotUrl = t3), S2(n3) || (this.content.thumbWidth = this.content.snapshotWidth = Number(n3)), S2(e3) || (this.content.thumbHeight = this.content.snapshotHeight = Number(e3));
      } }, { key: "sendable", value: function() {
        return "" !== this.content.remoteVideoUrl;
      } }]), To = e2(function e3(t3) {
        p2(this, e3), this.type = R2.MSG_LOCATION;
        var n3 = t3.description, o3 = t3.longitude, t3 = t3.latitude;
        this.content = { description: n3, longitude: o3, latitude: t3 };
      }, [{ key: "sendable", value: function() {
        return true;
      } }]), Do = e2(function e3(t3, n3, o3, i3) {
        var a3, s3;
        p2(this, e3), this.from = t3.from, this.messageSender = t3.from, this.time = t3.time, this.messageSequence = t3.sequence, this.clientSequence = t3.clientSequence || t3.sequence, this.messageRandom = t3.random, this.cloudCustomData = t3.cloudCustomData || "", this.clientTime = t3.clientTime || void 0, t3.ID ? (this.ID = t3.ID || "", this.nick = t3.nick || "", this.avatar = t3.avatar || "", t3.messageBody ? this.messageBody = JSON.parse(JSON.stringify(t3.messageBody)) : this.messageBody = [{ type: t3.type, payload: t3.payload }], t3.conversationType ? t3.conversationType.startsWith(R2.CONV_C2C) ? this.receiverUserID = t3.to : t3.conversationType.startsWith(R2.CONV_GROUP) && (this.receiverGroupID = t3.to) : t3.receiverGroupID ? this.receiverGroupID = t3.receiverGroupID : t3.receiverUserID && (this.receiverUserID = t3.receiverUserID), this.messageReceiver = t3.to || t3.messageReceiver) : (this.nick = t3.nick || "", this.avatar = t3.avatar || "", this.messageBody = [], a3 = t3.elements[0].type, s3 = t3.elements[0].content, this._patchRichMediaPayload(a3, s3), this._updateRichMediaDownloadUrl(a3, s3, n3, o3, i3), a3 === R2.MSG_MERGER ? this.messageBody.push({ type: a3, payload: new Eo(s3, n3, o3, i3).content }) : this.messageBody.push({ type: a3, payload: s3 }), t3.groupID && (this.receiverGroupID = t3.groupID, this.messageReceiver = t3.groupID), t3.to && (this.receiverUserID = t3.to, this.messageReceiver = t3.to), this.ID = "".concat(t3.tinyID, "-").concat(t3.clientTime, "-").concat(t3.random));
      }, [{ key: "_patchRichMediaPayload", value: function(e3, t3) {
        e3 === R2.MSG_IMAGE ? t3.imageInfoArray.forEach(function(e4) {
          !e4.imageUrl && e4.url && (e4.imageUrl = e4.url, e4.sizeType = e4.type, 1 === e4.type ? e4.type = 0 : 3 === e4.type && (e4.type = 1));
        }) : e3 === R2.MSG_VIDEO ? !t3.remoteVideoUrl && t3.videoUrl && (t3.remoteVideoUrl = t3.videoUrl) : e3 === R2.MSG_AUDIO ? !t3.remoteAudioUrl && t3.url && (t3.remoteAudioUrl = t3.url) : e3 === R2.MSG_FILE && !t3.fileUrl && t3.url && (t3.fileUrl = t3.url, t3.url = void 0);
      } }, { key: "_updateRichMediaDownloadUrl", value: function(e3, t3, n3, o3, i3) {
        (n3 || o3) && (e3 === R2.MSG_IMAGE ? t3.imageInfoArray.forEach(function(e4) {
          e4.imageUrl = co(e4.imageUrl, n3, o3, i3), e4.url = co(e4.url, n3, o3, i3);
        }) : e3 === R2.MSG_VIDEO ? (t3.remoteVideoUrl = co(t3.remoteVideoUrl, n3, o3, i3), t3.videoUrl = co(t3.videoUrl, n3, o3, i3), t3.thumbUrl = co(t3.thumbUrl, n3, o3, i3), t3.snapshotUrl = co(t3.thumbUrl, n3, o3, i3), t3.snapshotHeight = t3.thumbHeight, t3.snapshotWidth = t3.thumbWidth) : e3 === R2.MSG_AUDIO ? (t3.remoteAudioUrl = co(t3.remoteAudioUrl, n3, o3, i3), t3.url = co(t3.url, n3, o3, i3)) : e3 === R2.MSG_FILE && (t3.fileUrl = co(t3.fileUrl, n3, o3, i3)));
      } }]), Eo = e2(function e3(t3, n3, o3, i3) {
        var a3, s3, r3, c3, u3, l3, d3;
        p2(this, e3), this.type = R2.MSG_MERGER, this.content = { downloadKey: "", pbDownloadKey: "", messageList: [], title: "", abstractList: [], compatibleText: "", version: 0, layersOverLimit: false }, t3.downloadKey ? (s3 = t3.downloadKey, r3 = t3.pbDownloadKey, c3 = t3.title, u3 = t3.abstractList, l3 = t3.compatibleText, a3 = t3.version, this.content.downloadKey = s3, this.content.pbDownloadKey = r3, this.content.title = c3, this.content.abstractList = u3, this.content.compatibleText = l3, this.content.version = a3 || 0) : S2(t3.messageList) ? 1 === t3.layersOverLimit && (this.content.layersOverLimit = true) : (s3 = t3.messageList, r3 = t3.title, c3 = t3.abstractList, u3 = t3.compatibleText, l3 = t3.version, d3 = [], s3.forEach(function(e4) {
          S2(e4) || (e4 = new Do(e4, n3, o3, i3), d3.push(e4));
        }), this.content.messageList = d3, this.content.title = r3, this.content.abstractList = c3, this.content.compatibleText = u3, this.content.version = l3 || 0);
      }, [{ key: "sendable", value: function() {
        return !S2(this.content.messageList) || !S2(this.content.downloadKey);
      } }]), Lo = { 1: R2.MSG_PRIORITY_HIGH, 2: R2.MSG_PRIORITY_NORMAL, 3: R2.MSG_PRIORITY_LOW, 4: R2.MSG_PRIORITY_LOWEST }, So = e2(function e3(t3) {
        p2(this, e3), this.ID = "", this.conversationID = t3.conversationID || null, this.conversationType = t3.conversationType || R2.CONV_C2C, this.conversationSubType = t3.conversationSubType, this.time = t3.time || Math.ceil(Date.now() / 1e3), this.sequence = t3.sequence || 0, this.clientSequence = t3.clientSequence || t3.sequence || 0, this.random = t3.random || 0 === t3.random ? t3.random : mt2(), this.priority = this._computePriority(t3.priority), this.nick = t3.nick || "", this.avatar = t3.avatar || "", this.isPeerRead = false, this.nameCard = "", this.hasRiskContent = sn(t3.checkResult), this._elements = [], this.isPlaceMessage = t3.isPlaceMessage || 0, this.isRevoked = 2 === t3.isPlaceMessage || 8 === t3.msgFlagBits, this.from = t3.from || null, this.to = t3.to || null, this.flow = "", this.isSystemMessage = t3.isSystemMessage || false, this.protocol = t3.protocol || "JSON", this.isResend = false, this.isRead = false, this.status = t3.status || Pn, this._onlineOnlyFlag = false, this._groupAtInfoList = [], this._relayFlag = false, this.atUserList = [], this.cloudCustomData = t3.cloudCustomData || "", this.isDeleted = false, this.isModified = !!t3.messageVersion, this._isExcludedFromUnreadCount = !(!t3.messageControlInfo || 1 !== t3.messageControlInfo.excludedFromUnreadCount), this._isExcludedFromLastMessage = !(!t3.messageControlInfo || 1 !== t3.messageControlInfo.excludedFromLastMessage), this.clientTime = t3.clientTime || He2() || 0, this.senderTinyID = t3.senderTinyID || t3.tinyID || "", this.readReceiptInfo = t3.readReceiptInfo || { readCount: void 0, unreadCount: void 0, isPeerRead: void 0, timestamp: 0 }, this.needReadReceipt = true === t3.needReadReceipt || 1 === t3.needReadReceipt, this.version = t3.messageVersion || 0, this.isBroadcastMessage = t3.isBroadcastMessage || false, this._receiverList = t3.receiverList || void 0, this.isSupportExtension = true === t3.isSupportExtension || 1 === t3.isSupportExtension, this._cmConfigID = t3.customModerationConfigurationID, this.revoker = t3.revokerInfo && t3.revokerInfo.revoker || "", this.revokerInfo = t3.revokerInfo || { userID: "", nick: "", avatar: "" }, this.revokeReason = t3.revokeReason || "", this.reInitialize(t3.currentUser), this.extractGroupInfo(t3.groupProfile || null), this.handleGroupAtInfo(t3), this.initC2CReadReceiptInfo(t3);
      }, [{ key: "elements", get: function() {
        return this._elements;
      } }, { key: "getElements", value: function() {
        return this._elements;
      } }, { key: "extractGroupInfo", value: function(e3) {
        null !== e3 && (C2(e3.nick) && (this.nick = e3.nick), C2(e3.avatar) && (this.avatar = e3.avatar), e3 = e3.messageFromAccountExtraInformation, m2(e3)) && C2(e3.nameCard) && (this.nameCard = e3.nameCard);
      } }, { key: "handleGroupAtInfo", value: function(e3) {
        var t3 = this;
        e3.payload && e3.payload.atUserList && e3.payload.atUserList.forEach(function(e4) {
          e4 !== R2.MSG_AT_ALL ? (t3._groupAtInfoList.push({ groupAtAllFlag: 0, groupAtUserID: e4 }), t3.atUserList.push(e4)) : (t3._groupAtInfoList.push({ groupAtAllFlag: 1 }), t3.atUserList.push(R2.MSG_AT_ALL));
        }), O2(e3.groupAtInfo) && e3.groupAtInfo.forEach(function(e4) {
          0 === e4.groupAtAllFlag ? t3.atUserList.push(e4.groupAtUserID) : 1 === e4.groupAtAllFlag && t3.atUserList.push(R2.MSG_AT_ALL);
        });
      } }, { key: "getGroupAtInfoList", value: function() {
        return this._groupAtInfoList;
      } }, { key: "_initProxy", value: function() {
        this._elements[0] && (this.payload = this._elements[0].content, this.type = this._elements[0].type);
      } }, { key: "reInitialize", value: function(e3) {
        e3 && (this.status = this.from ? Pn : Gn, !this.from) && (this.from = e3), this._initFlow(e3), this._initSequence(e3), this._concatConversationID(e3), this.generateMessageID();
      } }, { key: "isSendable", value: function() {
        return 0 !== this._elements.length && (true === this._relayFlag || "function" == typeof this._elements[0].sendable && this._elements[0].sendable());
      } }, { key: "_initTo", value: function(e3) {
        this.conversationType === R2.CONV_GROUP && (this.to = e3.groupID);
      } }, { key: "_initSequence", value: function(e3) {
        var t3, n3, o3;
        0 === this.clientSequence && e3 && (this.clientSequence = !!(e3 = e3) && (void 0 === kt2[e3] && (o3 = /* @__PURE__ */ new Date(), t3 = "3".concat(o3.getHours()).slice(-2), n3 = "0".concat(o3.getMinutes()).slice(-2), o3 = "0".concat(o3.getSeconds()).slice(-2), kt2[e3] = parseInt([t3, n3, o3, "0001"].join("")), o3 = n3 = t3 = null, M2.l("autoIncrementIndex start index:".concat(kt2[e3]))), kt2[e3]++)), 0 === this.sequence && this.conversationType === R2.CONV_C2C && (this.sequence = this.clientSequence);
      } }, { key: "generateMessageID", value: function() {
        this.from === R2.CONV_SYSTEM && (this.senderTinyID = "144115198244471703"), this.ID = "".concat(this.senderTinyID, "-").concat(this.clientTime, "-").concat(this.random);
      } }, { key: "_initFlow", value: function(e3) {
        "" !== e3 && (e3 === this.from ? (this.flow = "out", this.isRead = true) : this.flow = "in");
      } }, { key: "_concatConversationID", value: function(e3) {
        var t3 = this.to, n3 = this.conversationType;
        n3 !== R2.CONV_SYSTEM ? (e3 = n3 === R2.CONV_C2C ? e3 === this.from ? t3 : this.from : this.to, this.conversationID = e3 ? "".concat(n3).concat(e3) : null) : this.conversationID = R2.CONV_SYSTEM;
      } }, { key: "isElement", value: function(e3) {
        return e3 instanceof ao || e3 instanceof _o || e3 instanceof ho || e3 instanceof go || e3 instanceof Mo || e3 instanceof Co || e3 instanceof mo || e3 instanceof Io || e3 instanceof yo || e3 instanceof To || e3 instanceof Eo;
      } }, { key: "setElement", value: function(e3, t3, n3, o3) {
        var i3 = this;
        if (this.isElement(e3))
          this._elements = [e3];
        else {
          var a3 = function(e4) {
            if (e4.type && e4.content)
              switch (e4.type) {
                case R2.MSG_TEXT:
                  i3.setTextElement(e4.content);
                  break;
                case R2.MSG_IMAGE:
                  i3.setImageElement(e4.content, t3, n3, o3);
                  break;
                case R2.MSG_AUDIO:
                  i3.setAudioElement(e4.content, t3, n3, o3);
                  break;
                case R2.MSG_FILE:
                  i3.setFileElement(e4.content, t3, n3, o3);
                  break;
                case R2.MSG_VIDEO:
                  i3.setVideoElement(e4.content, t3, n3, o3);
                  break;
                case R2.MSG_CUSTOM:
                  i3.setCustomElement(e4.content);
                  break;
                case R2.MSG_LOCATION:
                  i3.setLocationElement(e4.content);
                  break;
                case R2.MSG_GRP_TIP:
                  i3.setGroupTipElement(e4.content);
                  break;
                case R2.MSG_GRP_SYS_NOTICE:
                  i3.setGroupSystemNoticeElement(e4.content);
                  break;
                case R2.MSG_FACE:
                  i3.setFaceElement(e4.content);
                  break;
                case R2.MSG_MERGER:
                  i3.setMergerElement(e4.content, t3, n3, o3);
              }
          };
          if (O2(e3))
            for (var s3 = 0; s3 < e3.length; s3++)
              a3(e3[s3]);
          else
            a3(e3);
        }
        this._initProxy();
      } }, { key: "clearElement", value: function() {
        this._elements.length = 0;
      } }, { key: "setTextElement", value: function(e3) {
        e3 = "string" == typeof e3 ? e3 : e3.text, e3 = new ao({ text: e3 });
        this._elements.push(e3);
      } }, { key: "setImageElement", value: function(e3, t3, n3, o3) {
        e3 = new _o(e3, t3, n3, o3);
        this._elements.push(e3);
      } }, { key: "setAudioElement", value: function(e3, t3, n3, o3) {
        e3 = new go(e3, t3, n3, o3);
        this._elements.push(e3);
      } }, { key: "setFileElement", value: function(e3, t3, n3, o3) {
        e3 = new Mo(e3, t3, n3, o3);
        this._elements.push(e3);
      } }, { key: "setVideoElement", value: function(e3, t3, n3, o3) {
        e3 = new Co(e3, t3, n3, o3);
        this._elements.push(e3);
      } }, { key: "setLocationElement", value: function(e3) {
        e3 = new To(e3);
        this._elements.push(e3);
      } }, { key: "setCustomElement", value: function(e3) {
        e3 = new yo(e3);
        this._elements.push(e3);
      } }, { key: "setGroupTipElement", value: function(e3) {
        var t3, n3 = {}, o3 = e3.operationType;
        S2(e3.memberInfoList) ? e3.operatorInfo && (n3 = e3.operatorInfo) : o3 !== R2.GRP_TIP_MBR_JOIN && o3 !== R2.GRP_TIP_MBR_KICKED_OUT && o3 !== R2.GRP_TIP_MBR_SET_ADMIN && o3 !== R2.GRP_TIP_MBR_CANCELED_ADMIN || (n3 = e3.memberInfoList[0]), S2(e3.memberExtraInfo) || (t3 = e3.memberExtraInfo.reason, e3.msgMemberInfo.forEach(function(e4) {
          e4.reason = t3;
        }));
        o3 = n3.nick, n3 = n3.avatar, C2(o3) && (this.nick = o3), C2(n3) && (this.avatar = n3), o3 = new mo(e3);
        this._elements.push(o3);
      } }, { key: "setGroupSystemNoticeElement", value: function(e3) {
        e3 = new Io(e3);
        this._elements.push(e3);
      } }, { key: "setFaceElement", value: function(e3) {
        e3 = new ho(e3);
        this._elements.push(e3);
      } }, { key: "setMergerElement", value: function(e3, t3, n3, o3) {
        e3 = new Eo(e3, t3, n3, o3);
        this._elements.push(e3);
      } }, { key: "setIsRead", value: function(e3) {
        this.isRead = e3;
      } }, { key: "setRelayFlag", value: function(e3) {
        this._relayFlag = e3;
      } }, { key: "_computePriority", value: function(e3) {
        if (!N2(e3)) {
          if (C2(e3) && -1 !== Object.values(Lo).indexOf(e3))
            return e3;
          if (A2(e3)) {
            e3 = "" + e3;
            if (-1 !== Object.keys(Lo).indexOf(e3))
              return Lo[e3];
          }
        }
        return R2.MSG_PRIORITY_NORMAL;
      } }, { key: "setNickAndAvatar", value: function(e3) {
        var t3 = e3.nick, e3 = e3.avatar;
        C2(t3) && (this.nick = t3), C2(e3) && (this.avatar = e3);
      } }, { key: "setNameCard", value: function(e3) {
        C2(e3) && (this.nameCard = e3);
      } }, { key: "initC2CReadReceiptInfo", value: function(e3) {
        var t3 = e3.readReceiptSentByPeer, e3 = e3.timestamp, e3 = void 0 === e3 ? 0 : e3;
        this.conversationType === R2.CONV_C2C && true === this.needReadReceipt && (this.readReceiptInfo.isPeerRead = 1 === (void 0 === t3 ? void 0 : t3), this.readReceiptInfo.timestamp = e3);
      } }]), ko = ["sound", "FCMChannelID"], Ro = ["ignoreIOSBadge", "disableVoipPush", "enableIOSBackgroundNotification"], Ao = { HonorImportance: { range: ["LOW", "NORMAL"], defaultValue: void 0 }, MeizuNotifyType: { range: [0, 1], defaultValue: void 0 } }, Oo = { enableIOSBackgroundNotification: { range: [true, false], defaultValue: false }, interruptionLevel: { range: ["passive", "active", "time-sensitive", "critical"], defaultValue: "active" } };
      function No(e3, t3) {
        for (var n3 in t3) {
          var o3, i3;
          Object.prototype.hasOwnProperty.call(t3, n3) && (o3 = (i3 = t3[n3]).range, i3 = i3.defaultValue, e3[n3] = o3.includes(e3[n3]) ? e3[n3] : i3);
        }
        return e3;
      }
      function Go(e3) {
        if (m2(e3))
          return { pushFlag: true === e3.disablePush ? 1 : 0, title: e3.title || "", desc: e3.description || "", ext: e3.extension || "", apnsInfo: (n3 = (t3 = e3).apnsInfo, o3 = void 0 !== (o3 = t3.ignoreIOSBadge) && o3, t3 = t3.disableVoipPush, i3 = (n3 = No(void 0 === n3 ? {} : n3, Oo)).ignoreIOSBadge, a3 = n3.disableVoipPush, s3 = n3.enableIOSBackgroundNotification, n3 = W2(n3, Ro), i3 = true === i3 || true === o3 ? 1 : 0, o3 = void 0, N2(t3) || (o3 = false === t3 ? 1 : 0), N2(a3) || (o3 = false === a3 ? 1 : 0), y2(y2({}, n3), {}, { badgeMode: i3, isVoipPush: o3, contentAvailable: s3 ? 1 : 0 })), androidInfo: (a3 = void 0 === (a3 = (t3 = e3).androidInfo) ? {} : a3, t3 = t3.androidOPPOChannelID, t3 = a3.OPPOChannelID || (void 0 === t3 ? "" : t3), a3 = No(a3, Ao), n3 = void 0 === (n3 = a3.sound) ? "" : n3, i3 = void 0 === (i3 = a3.FCMChannelID) ? "" : i3, y2(y2({}, W2(a3, ko)), {}, { Sound: -1 === (n3 = (a3 = n3).lastIndexOf(".")) ? a3 : a3.slice(0, n3), OPPOChannelID: t3, GoogleChannelID: i3 })) };
        var t3, n3, o3, i3, a3, s3;
      }
      t2(bo, c2);
      var Po = e2(bo, [{ key: "onNewMessage", value: function(e3) {
        var t3 = e3.dataList, n3 = e3.isInstantMessage, o3 = e3.C2CRemainingUnreadList, i3 = e3.C2CPairUnreadList, e3 = e3.isSyncingEnded, t3 = (n3 || M2.l("".concat(this._n, ".onNewMessage C2CPairUnreadList:"), i3, "C2CRemainingUnreadList:", o3), this._assembly({ dataList: t3, C2CRemainingUnreadList: o3, C2CPairUnreadList: i3, isInstantMessage: n3 })), o3 = t3.conversationOptionsList, i3 = t3.messageList, t3 = t3.isUnreadC2CMessage, a3 = At2(i3), a3 = (0 < a3.length && this.emitOEvt(h2.MESSAGE_MODIFIED, a3), this.get(11).onNewMessage({ conversationOptionsList: o3, isInstantMessage: n3, isUnreadC2CMessage: t3, isSyncingEnded: e3 }), Nt2(i3));
        n3 && 0 < a3.length && this.emitOEvt(h2.MESSAGE_RECEIVED, a3), i3.length = 0;
      } }, { key: "_assembly", value: function(e3) {
        for (var t3 = e3.dataList, n3 = e3.C2CRemainingUnreadList, o3 = e3.C2CPairUnreadList, i3 = e3.isInstantMessage, a3 = null, s3 = [], r3 = [], c3 = {}, u3 = this.get(26), l3 = false, d3 = this.get(11), p3 = this.get(4), e3 = this.get(17), _3 = this.getFileDownloadProxy(), h3 = this.getDownloadFileAuthKey(), g3 = e3.getFileDNList(), f3 = 0, m3 = t3.length; f3 < m3; f3++)
          if (this._isC2CNotice(t3[f3]))
            this._noticeFromUnreadDBList.push(t3[f3].eventArray[0].c2CNotifyMsgArray[0]);
          else {
            var v3 = t3[f3], I3 = (v3.currentUser = this.getMyUserID(), v3.conversationType = R2.CONV_C2C, v3.isSystemMessage = !!v3.isSystemMessage, (N2(v3.nick) || N2(v3.avatar)) && (l3 = true), (a3 = new So(v3)).setElement(v3.elements, _3, h3, g3), a3.setNickAndAvatar({ nick: v3.nick, avatar: v3.avatar }), a3.conversationID);
            if (i3) {
              if (this._msgFromUnreadDBMap.get(a3.ID))
                continue;
              var M3, y3, C3 = false, T3 = (a3.from !== this.getMyUserID() ? (y3 = d3.getLatestMessageSentByPeer(I3)) && (M3 = y3.nick, y3 = y3.avatar, l3 ? a3.setNickAndAvatar({ nick: M3, avatar: y3 }) : M3 === a3.nick && y3 === a3.avatar || (C3 = true)) : (M3 = d3.getLatestMessageSentByMe(I3)) && (y3 = M3.nick, T3 = M3.avatar, y3 === a3.nick && T3 === a3.avatar || (d3.modifyMessageSentByMe({ conversationID: I3, latestNick: a3.nick, latestAvatar: a3.avatar }), p3.mockOnNickAvatarModified(a3.nick, a3.avatar))), 1 === t3[f3].isModified);
              if (d3.isMessageSentByCurrentInstance(a3) ? a3.isModified = T3 : T3 = false, 0 === v3.msgLifeTime)
                a3._onlineOnlyFlag = true, d3.isMessageSentByCurrentInstance(a3) || r3.push(a3);
              else {
                if (!d3.pushIntoMessageList(r3, a3, T3))
                  continue;
                C3 && (d3.modifyMessageSentByPeer({ conversationID: I3, latestNick: a3.nick, latestAvatar: a3.avatar }), d3.updateUserProfileSpecifiedKey({ conversationID: I3, nick: a3.nick, avatar: a3.avatar }));
              }
              i3 && 0 < a3.clientTime && u3.addMessageDelay(a3.clientTime);
            } else
              this._msgFromUnreadDBMap.set(a3.ID, a3);
            if (0 !== v3.msgLifeTime) {
              if (false === a3._onlineOnlyFlag) {
                C3 = d3.getLastMessageTime(I3);
                if (A2(C3) && a3.time < C3)
                  continue;
                i3 && (N2(c3[I3]) ? (v3 = 0, "in" !== a3.flow || a3._isExcludedFromUnreadCount || (v3 = 1), c3[I3] = s3.push({ conversationID: I3, unreadCount: v3, type: a3.conversationType, subType: a3.conversationSubType, lastMessage: a3._isExcludedFromLastMessage ? "" : a3 }) - 1) : (v3 = c3[I3], s3[v3].type = a3.conversationType, s3[v3].subType = a3.conversationSubType, s3[v3].lastMessage = a3._isExcludedFromLastMessage ? "" : a3, "in" !== a3.flow || a3._isExcludedFromUnreadCount || s3[v3].unreadCount++));
              }
            } else
              a3._onlineOnlyFlag = true;
          }
        this._handleNoticeFromUnreadDB();
        var D3 = false;
        if (O2(o3) && 0 < o3.length)
          for (var E3 = 0, L3 = o3.length; E3 < L3; E3++)
            !function(t4) {
              if (o3[t4].from === R2.CONV_SYSTEM)
                return;
              D3 = true;
              var e4 = s3.find(function(e5) {
                return e5.conversationID === "".concat(R2.CONV_C2C).concat(o3[t4].from);
              });
              e4 ? e4.unreadCount = o3[t4].unreadCount : s3.push({ conversationID: "".concat(R2.CONV_C2C).concat(o3[t4].from), unreadCount: o3[t4].unreadCount, type: R2.CONV_C2C });
            }(E3);
        if (O2(n3))
          for (var S3 = 0, k3 = n3.length; S3 < k3; S3++)
            !function(t4) {
              s3.find(function(e4) {
                return e4.conversationID === "".concat(R2.CONV_C2C).concat(n3[t4].from);
              }) || s3.push({ conversationID: "".concat(R2.CONV_C2C).concat(n3[t4].from), type: R2.CONV_C2C, lastMsgTime: n3[t4].lastMsgTime });
            }(S3);
        return { conversationOptionsList: s3, messageList: r3, isUnreadC2CMessage: D3 };
      } }, { key: "getMessageListFromUnreadDB", value: function() {
        return d2(this._msgFromUnreadDBMap.values());
      } }, { key: "_isC2CNotice", value: function(e3) {
        e3 = e3.eventArray;
        return !(!O2(e3) || 10 !== e3[0].event);
      } }, { key: "_handleNoticeFromUnreadDB", value: function() {
        var t3, e3 = this._noticeFromUnreadDBList.length;
        0 !== e3 && (M2.l("".concat(this._n, "._handleNoticeFromUnreadDB count:").concat(e3)), t3 = [], this._noticeFromUnreadDBList.forEach(function(e4) {
          e4.hasOwnProperty("c2cMessageRevokedNotify") && t3.push(e4);
        }), this.onMsgRevoked({ dataList: t3 }), this._noticeFromUnreadDBList.length = 0, t3.length = 0);
      } }, { key: "onMsgRevoked", value: function(e3, t3) {
        var a3, s3 = this, r3 = this.get(11), c3 = [];
        e3.dataList.forEach(function(e4) {
          e4.c2cMessageRevokedNotify && (e4 = e4.c2cMessageRevokedNotify.revokedInfos, N2(e4) || e4.forEach(function(e5) {
            var t4 = s3.getMyUserID() === e5.from ? "".concat(R2.CONV_C2C).concat(e5.to) : "".concat(R2.CONV_C2C).concat(e5.from);
            a3 = r3.revoke(t4, e5.sequence, e5.random);
            var n3, o3 = e5.revokerInfo && e5.revokerInfo.revoker, i3 = e5.revokerInfo && e5.revokerInfo.reason || "";
            a3 ? n3 = a3 : (n3 = { conversationID: t4, sequence: e5.sequence }, e5.tinyID && e5.clientTime && e5.random && (n3.ID = "".concat(e5.tinyID, "-").concat(e5.clientTime, "-").concat(e5.random)), e5.time && (n3.time = e5.time)), n3 && (n3.revoker = o3, n3.revokeReason = i3, n3.revokerInfo = { userID: o3, nick: "", avatar: "" }, c3.push(n3));
          }));
        }), 0 !== c3.length && (M2.l("".concat(this._n, ".onMsgRevoked count:").concat(c3.length, " updateUnreadCount:").concat(t3)), r3.onMessageRevoked(c3, t3), r3.updateRevokerInfo(c3).then(function(e4) {
          s3.emitOEvt(h2.MESSAGE_REVOKED, e4);
        }));
      } }, { key: "onMsgReadReceipt", value: function(e3) {
        var i3 = this;
        e3.dataList.forEach(function(e4) {
          var o3;
          S2(e4.c2cMessageReadReceipt) || (o3 = e4.c2cMessageReadReceipt.to, e4.c2cMessageReadReceipt.uinPairReadArray.forEach(function(e5) {
            var e5 = e5.peerReadTime, t3 = (M2.l("".concat(i3._n, ".onMsgReadReceipt to:").concat(o3, " peerReadTime:").concat(e5)), "".concat(R2.CONV_C2C).concat(o3)), n3 = i3.get(11);
            n3.recordPeerReadTime(t3, e5), n3.updateMsgIsPeerReadProp(t3, e5);
          }));
        });
      } }, { key: "onMsgReadNotice", value: function(e3) {
        var o3 = this;
        e3.dataList.forEach(function(e4) {
          var n3;
          S2(e4.c2cMessageReadNotice) || (n3 = o3.get(11), e4.c2cMessageReadNotice.uinPairReadArray.forEach(function(e5) {
            var t3 = e5.from, e5 = e5.peerReadTime, t3 = (M2.l("".concat(o3._n, ".onMsgReadNotice from:").concat(t3, " lastReadTime:").concat(e5)), "".concat(R2.CONV_C2C).concat(t3));
            n3.updateIsReadAfterReadReport({ conversationID: t3, lastMessageTime: e5 }), n3.updateUnreadCount(t3);
          }));
        });
      } }, { key: "onMsgModified", value: function(e3) {
        M2.l("".concat(this._n, ".onMsgModified options:"), e3);
        var t3 = this.get(11);
        e3.dataList.forEach(function(e4) {
          t3.onMessageModified(y2(y2({}, e4), {}, { conversationType: R2.CONV_C2C }));
        });
      } }, { key: "onReadReceiptList", value: function(e3) {
        M2.l("".concat(this._n, ".onReadReceiptList options:"), e3), this.get(11).updateReadReceiptInfo(e3.dataList);
      } }, { key: "sendMessage", value: function(e3, t3) {
        e3 = this._createC2CMessagePack(e3, t3);
        return this.req(e3);
      } }, { key: "_createC2CMessagePack", value: function(e3, t3) {
        var n3 = null, o3 = (t3 && (t3.offlinePushInfo && (n3 = t3.offlinePushInfo), true === t3.onlineUserOnly) && (n3 ? n3.disablePush = true : n3 = { disablePush: true }), ""), i3 = (C2(e3.cloudCustomData) && 0 < e3.cloudCustomData.length && (o3 = e3.cloudCustomData), []), a3 = (m2(t3) && m2(t3.messageControlInfo) && (a3 = (r3 = t3.messageControlInfo).excludedFromUnreadCount, s3 = r3.excludedFromLastMessage, r3 = r3.excludedFromContentModeration, true === a3 && i3.push("NoUnread"), true === s3 && i3.push("NoLastMsg"), true === r3) && i3.push("NoMsgCheck"), this.isOnlineMessage(e3, t3) ? 0 : void 0), s3 = JSON.parse(JSON.stringify(e3.getElements())), r3 = this.get(17).getFileDNList();
        return { P: G2.SEND_C2C_MSG, data: { fromAccount: this.getMyUserID(), toAccount: e3.to, msgBody: uo(e3.type, s3, r3), cloudCustomData: o3, msgSeq: e3.sequence, msgRandom: e3.random, msgLifeTime: a3, nick: e3.nick, avatar: e3.avatar, offlinePushInfo: Go(n3), messageControlInfo: 0 !== a3 ? i3 : void 0, clientTime: e3.clientTime, needReadReceipt: true === e3.needReadReceipt ? 1 : 0, isSupportExtension: true === e3.isSupportExtension ? 1 : 0, isRelayMessage: true === e3._relayFlag ? 1 : 0, cmConfigID: e3._cmConfigID, forbidCallbackControl: Ot2(t3) } };
      } }, { key: "isOnlineMessage", value: function(e3, t3) {
        return !(!t3 || true !== t3.onlineUserOnly);
      } }, { key: "revokeMessage", value: function(e3) {
        return this.req({ P: G2.REVOKE_C2C_MSG, data: { msgInfo: { fromAccount: e3.from, toAccount: e3.to, msgSeq: e3.sequence, msgRandom: e3.random, msgTimeStamp: e3.time } } });
      } }, { key: "deleteMessage", value: function(e3) {
        var t3 = e3.to, e3 = e3.keyList;
        return M2.l("".concat(this._n, ".deleteMessage toAccount:").concat(t3, " count:").concat(e3.length)), this.req({ P: G2.DEL_C2C_MSG, data: { fromAccount: this.getMyUserID(), to: t3, keyList: e3 } });
      } }, { key: "modifyRemoteMessage", value: function(e3) {
        var t3 = e3.from, n3 = e3.to, o3 = e3.version, o3 = void 0 === o3 ? 0 : o3, i3 = e3.sequence, a3 = e3.random, s3 = e3.time, r3 = e3.payload, c3 = e3.type, u3 = e3.cloudCustomData, e3 = e3._elements, l3 = void 0;
        return Qt2(c3) && (1 < e3.length && e3.splice(0, 1, { type: c3, content: r3 }), l3 = e3), this.req({ P: G2.MODIFY_C2C_MSG, data: { from: t3, to: n3, version: o3, sequence: i3, random: a3, time: s3, elements: l3, cloudCustomData: u3 } });
      } }, { key: "setMessageRead", value: function(e3) {
        var t3 = this, n3 = e3.conversationID, o3 = e3.lastMessageTime, i3 = "".concat(this._n, ".").concat("setMessageRead"), e3 = "convID:".concat(n3, " lastMessageTime:").concat(o3), a3 = (M2.l("".concat(i3, " ").concat(e3)), A2(o3) || this.warn("DoNotModifyLastTime"), new P2("setMessageRead"));
        return a3.setMessage(e3), this.req({ P: G2.SET_C2C_MSG_READ, data: { C2CMsgReaded: { cookie: "", C2CMsgReadedItem: [{ toAccount: n3.replace("C2C", ""), lastMessageTime: o3, receipt: 1 }] } } }).then(function() {
          a3.end(), M2.l("".concat(i3, " ok"));
          var e4 = t3.get(11);
          return e4.updateIsReadAfterReadReport({ conversationID: n3, lastMessageTime: o3 }), e4.updateUnreadCount(n3), T2();
        }).catch(function(e4) {
          return a3.setError(e4).end(), M2.l("".concat(i3, " failed. error:"), e4), E2(e4);
        });
      } }, { key: "getRoamingMessage", value: function(e3) {
        var s3 = this, r3 = "".concat(this._n, ".").concat("getRoamingMessage"), t3 = e3.peerAccount, c3 = e3.conversationID, n3 = e3.count, o3 = e3.lastMessageTime, e3 = e3.messageKey, u3 = "peerAccount:".concat(t3, " count:").concat(n3 || 15, " lastMessageTime:").concat(o3 || 0, " messageKey:").concat(e3), l3 = (M2.l("".concat(r3, " ").concat(u3)), new P2("getRoamingMessage"));
        return this.req({ P: G2.GET_C2C_ROAMING_MSG, data: { peerAccount: t3, count: n3 || 15, lastMessageTime: o3 || 0, messageKey: e3 } }).then(function(e4) {
          var e4 = e4.data, t4 = e4.complete, n4 = e4.messageList, o4 = e4.messageKey, e4 = e4.lastMessageTime, i3 = (N2(n4) ? M2.l("".concat(r3, " ok. complete:").concat(t4, " but messageList is undefined!")) : M2.l("".concat(r3, " ok. complete:").concat(t4, " count:").concat(n4.length)), l3.setMessage("".concat(u3, " complete:").concat(t4, " length:").concat(n4.length)).end(), s3.get(11)), t4 = 1 === t4, a3 = (t4 && i3.setCompleted(c3), []), n4 = i3.onRoamingMessage(n4, c3, true, a3), o4 = (i3.modifyMessageList(c3), i3.updateIsRead(c3), i3.updateRoamingMsgKeyAndTime(c3, o4, e4), i3.getPeerReadTime(c3)), o4 = (M2.l("".concat(r3, " update isPeerRead property. convID:").concat(c3, " peerReadTime:").concat(o4)), o4 ? i3.updateMsgIsPeerReadProp(c3, o4) : (e4 = c3.replace(R2.CONV_C2C, ""), s3.getRemotePeerReadTime([e4]).then(function() {
            i3.updateMsgIsPeerReadProp(c3, i3.getPeerReadTime(c3));
          })), "");
          return 0 < n4.length ? o4 = n4[0].ID : (e4 = i3.getLocalOldestMessage(c3)) && (o4 = e4.ID), M2.l("".concat(r3, " nextReqID:").concat(o4, " storedMsgCount:").concat(n4.length)), { nextReqID: o4, storedMessageList: n4, assembledMessageList: a3, isPullingCompleted: t4 };
        }).catch(function(e4) {
          return l3.setMessage(u3).setError(e4).end(), M2.w("".concat(r3, " failed. error:"), e4), E2(e4);
        });
      } }, { key: "getRoamingMessagesHopping", value: function(e3) {
        var a3 = this, s3 = "".concat(this._n, ".").concat("getRoamingMessagesHopping"), t3 = e3.peerAccount, n3 = e3.time, n3 = void 0 === n3 ? 0 : n3, o3 = e3.count, r3 = e3.direction, c3 = "".concat(R2.CONV_C2C).concat(t3), u3 = "peerAccount:".concat(t3, " count:").concat(o3, " time:").concat(n3, " direction:").concat(r3), l3 = (M2.l("".concat(s3, " ").concat(u3)), new P2("getRoamingMessagesHopping"));
        return this.req({ P: G2.GET_C2C_ROAMING_MSG, data: { peerAccount: t3, count: o3 + 1, lastMessageTime: n3, direction: r3 } }).then(function(e4) {
          var e4 = e4.data, t4 = e4.complete, n4 = e4.messageList, n4 = void 0 === n4 ? [] : n4, e4 = e4.lastMessageTime, o4 = "complete:".concat(t4, " count:").concat(n4.length), i3 = (M2.l("".concat(s3, " ok. ").concat(o4)), l3.setMessage("".concat(u3, " ").concat(o4)).end(), 1 !== t4 && (1 === r3 ? n4.pop() : n4.shift()), a3.get(11)), o4 = i3.onRoamingMessage(n4, c3, false), n4 = (a3._modifyMessageList(c3, o4), a3._computeResult({ complete: t4, lastMessageTime: e4, resultList: o4 })), t4 = (i3.storeHoppingMessageList(n4.messageList), i3.getPeerReadTime(c3));
          return M2.l("".concat(s3, " update isPeerRead property. convID:").concat(c3, " peerReadTime:").concat(t4)), t4 ? i3.updateMsgIsPeerReadProp(c3, t4) : (e4 = c3.replace(R2.CONV_C2C, ""), a3.getRemotePeerReadTime([e4]).then(function() {
            i3.updateMsgIsPeerReadProp(c3, i3.getPeerReadTime(c3));
          })), T2(n4);
        }).catch(function(e4) {
          return l3.setMessage(u3).setError(e4).end(), M2.w("".concat(s3, " failed. error:"), e4), E2(e4);
        });
      } }, { key: "_computeResult", value: function(e3) {
        var t3 = e3.complete, t3 = void 0 === t3 ? 0 : t3, n3 = e3.lastMessageTime, e3 = e3.resultList, e3 = { messageList: d2(void 0 === e3 ? [] : e3), isCompleted: false, nextMessageTime: "" };
        return 1 === t3 ? e3.isCompleted = true : e3.nextMessageTime = n3, e3;
      } }, { key: "_modifyMessageList", value: function(e3, t3) {
        e3 = this.get(11).getLocalConversation(e3);
        if (e3)
          for (var n3 = e3.userProfile.nick, o3 = e3.userProfile.avatar, e3 = this.get(4).getNickAndAvatarByUserID(this.getMyUserID()), i3 = e3.nick, a3 = e3.avatar, s3 = t3.length - 1; 0 <= s3; s3--) {
            var r3 = t3[s3];
            "in" === r3.flow && (r3.nick !== n3 && r3.setNickAndAvatar({ nick: n3 }), r3.avatar !== o3) && r3.setNickAndAvatar({ avatar: o3 }), "out" === r3.flow && (r3.nick !== i3 && r3.setNickAndAvatar({ nick: i3 }), r3.avatar !== a3) && r3.setNickAndAvatar({ avatar: a3 });
          }
      } }, { key: "getRemotePeerReadTime", value: function(a3) {
        var s3, r3 = this, c3 = "".concat(this._n, ".").concat("getRemotePeerReadTime");
        return S2(a3) ? Promise.resolve() : (s3 = new P2("getRemotePeerReadTime"), M2.l("".concat(c3, " userIDList:").concat(a3)), this.req({ P: G2.GET_C2C_PEER_READ_TIME, data: { userIDList: a3 } }).then(function(e3) {
          var t3 = e3.data.peerReadTimeList;
          M2.l("".concat(c3, " ok. peerReadTimeList:").concat(t3));
          for (var n3 = "", o3 = r3.get(11), i3 = 0; i3 < a3.length; i3++)
            n3 += "".concat(a3[i3], "-").concat(t3[i3], " "), 0 < t3[i3] && o3.recordPeerReadTime("".concat(R2.CONV_C2C).concat(a3[i3]), t3[i3]);
          s3.setMessage(n3).end();
        }).catch(function(e3) {
          s3.setError(e3).end(), M2.w("".concat(c3, " failed. error:"), e3);
        }));
      } }, { key: "sendReadReceipt", value: function(e3) {
        var t3, n3 = e3[0].conversationID.replace(R2.CONV_C2C, ""), o3 = new P2("sendReadReceipt"), i3 = (o3.setMessage("peerAccount:".concat(n3)), this.getMyUserID()), e3 = e3.filter(function(e4) {
          return e4.from !== i3 && true === e4.needReadReceipt;
        }).map(function(e4) {
          return { fromAccount: e4.from, toAccount: e4.to, sequence: e4.sequence, random: e4.random, time: e4.time, clientTime: e4.clientTime };
        });
        return 0 === e3.length ? E2({ code: k2.READ_RECEIPT_MSG_LIST_EMPTY }) : (t3 = "".concat(this._n, ".").concat("sendReadReceipt"), M2.l("".concat(t3, ". peerAccount:").concat(n3, " length:").concat(e3.length)), this.req({ P: G2.SEND_C2C_READ_RECEIPT, data: { peerAccount: n3, messageInfoList: e3 } }).then(function(e4) {
          return o3.end(), M2.l("".concat(t3, " ok")), T2();
        }).catch(function(e4) {
          return o3.setError(e4).end(), M2.w("".concat(t3, " failed. error:"), e4), E2(e4);
        }));
      } }, { key: "getReadReceiptList", value: function(e3) {
        var t3 = e3[0].conversationID.replace(R2.CONV_C2C, "");
        return M2.l("".concat(this._n, ".getReadReceiptList peerAccount:").concat(t3, " msgCount:").concat(e3.length)), D2({ messageList: e3 });
      } }, { key: "getMessageExtensions", value: function(e3, t3) {
        return M2.l("".concat(this._n, ".getMessageExtensions startSequence:").concat(t3)), this.req({ P: G2.GET_C2C_MSG_EXT, data: { from: e3.from, to: e3.to, messageKey: this.getMessageKey(e3), startSequence: t3 } });
      } }, { key: "modifyMsgExts", value: function(e3, t3) {
        var n3 = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 1;
        return M2.l("".concat(this._n, ".modifyMsgExts operateType:").concat(n3)), this.req({ P: G2.MODIFY_C2C_MSG_EXT, data: { from: e3.from, to: e3.to, messageKey: this.getMessageKey(e3), extensionList: t3, operateType: n3 } });
      } }, { key: "getMessageKey", value: function(e3) {
        var t3 = e3.clientSequence, n3 = e3.random, e3 = e3.time;
        return "".concat(t3, "_").concat(n3, "_").concat(e3);
      } }, { key: "reset", value: function() {
        M2.l("".concat(this._n, ".reset")), this._msgFromUnreadDBMap.clear(), this._noticeFromUnreadDBList.length = 0;
      } }]), U2 = { A2KEY_AND_TINYID_UPDATED: "_inner".concat(1), CLOUD_CONFIG: "_inner".concat(2), PROFILE_UPDATED: "_inner".concat(3), CONV_SYNC_COMPLETED: "_inner".concat(4), C2C_UNREAD_HANDLE_COMPLETED: "_inner".concat(5) }, Uo = e2(function e3(t3) {
        p2(this, e3), this._convM = t3, this._map = /* @__PURE__ */ new Map(), this._n = "MsgListHandler", this._latestMsgSentByPeerMap = /* @__PURE__ */ new Map(), this._latestMsgSentByMeMap = /* @__PURE__ */ new Map(), this._hoppingMsgMap = /* @__PURE__ */ new Map(), this.TOPIC_MSG_LIMIT = 1e3, this._convM.getIEmitInst().on(U2.CLOUD_CONFIG, this._onCloudConfig, this);
      }, [{ key: "_onCloudConfig", value: function() {
        var e3 = this._convM.getCloudConfig("topic_msg_limit");
        N2(e3) || (this.TOPIC_MSG_LIMIT = Number(e3)), M2.l("".concat(this._n, "._onCloudConfig topicMsgLimit:").concat(this.TOPIC_MSG_LIMIT));
      } }, { key: "onCheckTimer", value: function(e3) {
        if (e3 % 20 == 0 && 0 < this._map.size) {
          var t3, n3 = F2(this._map);
          try {
            for (n3.s(); !(t3 = n3.n()).done; ) {
              var o3 = j2(t3.value, 2), i3 = o3[0], a3 = o3[1];
              i3.includes(it2) && a3.size >= this.TOPIC_MSG_LIMIT && this._convM.clearMemMsg(i3, true);
            }
          } catch (e4) {
            n3.e(e4);
          } finally {
            n3.f();
          }
        }
      } }, { key: "pushIn", value: function(e3) {
        var t3 = 1 < arguments.length && void 0 !== arguments[1] && arguments[1], n3 = e3.conversationID, o3 = true, i3 = (this._map.has(n3) || this._map.set(n3, /* @__PURE__ */ new Map()), this._getUniqueIDOfMsg(e3));
        if (this._map.get(n3).has(i3)) {
          var a3 = this._map.get(n3).get(i3);
          if (!t3 || true === a3.isModified)
            return false;
        }
        return this._map.get(n3).set(i3, e3), this._setLatestMsgSentByPeer(n3, e3), this._setLatestMsgSentByMe(n3, e3), o3;
      } }, { key: "unshift", value: function(e3, t3) {
        var n3;
        if (O2(e3) ? 0 < e3.length && (n3 = e3[0].conversationID, this._unshiftMultipleMsgs(e3, t3)) : (n3 = e3.conversationID, this._unshiftSingleMsg(e3, t3)), n3) {
          var o3 = Array.from(this._map.get(n3).values()), e3 = o3.length;
          if (0 !== e3) {
            for (var i3 = e3 - 1; 0 <= i3; i3--)
              if ("out" === o3[i3].flow) {
                this._setLatestMsgSentByMe(n3, o3[i3]);
                break;
              }
            if (n3.startsWith(R2.CONV_C2C)) {
              for (var a3 = e3 - 1; 0 <= a3; a3--)
                if ("in" === o3[a3].flow) {
                  this._setLatestMsgSentByPeer(n3, o3[a3]);
                  break;
                }
            }
          }
        }
      } }, { key: "_unshiftSingleMsg", value: function(e3, t3) {
        var n3, o3, i3 = e3.conversationID, a3 = this._getUniqueIDOfMsg(e3);
        this._map.has(i3) ? (n3 = this._map.get(i3), o3 = Array.from(n3), n3.has(a3) || (o3.unshift([a3, e3]), this._map.set(i3, new Map(o3)), t3.push(e3))) : (this._map.set(i3, /* @__PURE__ */ new Map()), this._map.get(i3).set(a3, e3), t3.push(e3));
      } }, { key: "_unshiftMultipleMsgs", value: function(e3, t3) {
        for (var n3 = e3.length, o3 = [], i3 = e3[0].conversationID, a3 = this._map.get(i3), s3 = this._map.has(i3) ? Array.from(a3) : [], r3 = 0; r3 < n3; r3++) {
          var c3 = this._getUniqueIDOfMsg(e3[r3]);
          a3 && a3.has(c3) || (o3.push([c3, e3[r3]]), t3.push(e3[r3]));
        }
        this._map.set(i3, new Map(o3.concat(s3)));
      } }, { key: "remove", value: function(e3) {
        var t3 = e3.conversationID, e3 = this._getUniqueIDOfMsg(e3);
        this._map.has(t3) && this._map.get(t3).delete(e3);
      } }, { key: "revoke", value: function(e3, t3, n3) {
        var o3;
        return this._map.has(e3) ? (o3 = this._map.get(e3), this._updateMsgIsRevoked(o3, t3, n3)) : this._hoppingMsgMap.has(e3) ? (o3 = this._hoppingMsgMap.get(e3), this._updateMsgIsRevoked(o3, t3, n3)) : null;
      } }, { key: "_updateMsgIsRevoked", value: function(e3, t3, n3) {
        var o3, i3 = F2(e3);
        try {
          for (i3.s(); !(o3 = i3.n()).done; ) {
            var a3 = j2(o3.value, 2)[1];
            if (a3.sequence === t3 && (N2(n3) || a3.random === n3))
              return a3.isRevoked || (a3.isRevoked = true), a3;
          }
        } catch (e4) {
          i3.e(e4);
        } finally {
          i3.f();
        }
      } }, { key: "removeByConvID", value: function(e3) {
        var t3 = this._map.has(e3);
        M2.l("".concat(this._n, ".removeByConvID convID:").concat(e3, " has:").concat(t3)), t3 && (this._map.delete(e3), this._latestMsgSentByPeerMap.delete(e3), this._latestMsgSentByMeMap.delete(e3));
      } }, { key: "findMessage", value: function(e3) {
        return this._findMsg(e3, this._map) || this._findMsg(e3, this._hoppingMsgMap);
      } }, { key: "_findMsg", value: function(e3, t3) {
        var n3, o3 = null, i3 = F2(t3);
        try {
          for (i3.s(); !(n3 = i3.n()).done; )
            for (var a3 = d2(j2(n3.value, 2)[1].values()), s3 = a3.length, r3 = 0; r3 < s3; r3++)
              if (a3[r3].ID === e3) {
                o3 = a3[r3];
                break;
              }
        } catch (e4) {
          i3.e(e4);
        } finally {
          i3.f();
        }
        return o3;
      } }, { key: "updateMsgIsPeerReadProp", value: function(e3, t3) {
        var n3, o3 = [];
        return this._map.has(e3) ? (n3 = this._map.get(e3), o3 = this._updateMsgIsPeerReadProp(n3, t3)) : this._hoppingMsgMap.has(e3) && (n3 = this._hoppingMsgMap.get(e3), o3 = this._updateMsgIsPeerReadProp(n3, t3)), M2.l("".concat(this._n, ".updateMsgIsPeerReadProp convID:").concat(e3, " peerReadTime:").concat(t3, " count:").concat(o3.length)), o3;
      } }, { key: "_updateMsgIsPeerReadProp", value: function(e3, t3) {
        var n3, o3 = [], i3 = F2(e3);
        try {
          for (i3.s(); !(n3 = i3.n()).done; ) {
            var a3 = j2(n3.value, 2)[1];
            a3.time <= t3 && !a3.isPeerRead && "out" === a3.flow && (a3.isPeerRead = true, o3.push(a3));
          }
        } catch (e4) {
          i3.e(e4);
        } finally {
          i3.f();
        }
        return o3;
      } }, { key: "updateMsgIsModifiedProp", value: function(e3) {
        var t3 = e3.conversationID;
        this._map.has(t3) && (e3 = this._getUniqueIDOfMsg(e3), t3 = this._map.get(t3).get(e3)) && (t3.isModified = true);
      } }, { key: "hasLocalMsgList", value: function(e3) {
        return this._map.has(e3);
      } }, { key: "getLocalMsgList", value: function(e3) {
        return this.hasLocalMsgList(e3) ? d2(this._map.get(e3).values()) : [];
      } }, { key: "getLocalMaxSeq", value: function(e3) {
        return this.hasLocalMsgList(e3) ? (e3 = d2(this._map.get(e3).values()).map(function(e4) {
          return e4.sequence;
        }), Math.max.apply(Math, d2(e3))) : 0;
      } }, { key: "getLocalMaxTime", value: function(e3) {
        return this.hasLocalMsgList(e3) ? (e3 = d2(this._map.get(e3).values()).map(function(e4) {
          return e4.time;
        }), Math.max.apply(Math, d2(e3))) : 0;
      } }, { key: "hasLocalMsg", value: function(e3, t3) {
        for (var n3 = false, o3 = this.getLocalMsgList(e3), i3 = o3.length, a3 = 0; a3 < i3; a3++)
          o3[a3].ID === t3 && (n3 = true);
        return n3;
      } }, { key: "getLocalMsg", value: function(e3, t3) {
        for (var n3 = null, o3 = this.getLocalMsgList(e3), i3 = o3.length, a3 = 0; a3 < i3; a3++)
          if (o3[a3].ID === t3) {
            n3 = o3[a3];
            break;
          }
        return n3;
      } }, { key: "getLocalLastMsg", value: function(e3) {
        for (var t3 = this.getLocalMsgList(e3), n3 = void 0, o3 = t3.length - 1; 0 <= o3; o3--)
          if (t3[o3].status === Pn) {
            n3 = t3[o3];
            break;
          }
        return n3;
      } }, { key: "getLocalSecondLastMsg", value: function(e3) {
        e3 = this.getLocalMsgList(e3);
        return e3[e3.length - 2];
      } }, { key: "getLocalOldestMsg", value: function(e3) {
        return this.getLocalMsgList(e3)[0];
      } }, { key: "_setLatestMsgSentByPeer", value: function(e3, t3) {
        e3.startsWith(R2.CONV_C2C) && "in" === t3.flow && this._latestMsgSentByPeerMap.set(e3, t3);
      } }, { key: "_setLatestMsgSentByMe", value: function(e3, t3) {
        "out" === t3.flow && this._latestMsgSentByMeMap.set(e3, t3);
      } }, { key: "getLatestMsgSentByPeer", value: function(e3) {
        return this._latestMsgSentByPeerMap.get(e3);
      } }, { key: "getLatestMsgSentByMe", value: function(e3) {
        return this._latestMsgSentByMeMap.get(e3);
      } }, { key: "modifyMsgSentByPeer", value: function(e3) {
        var t3 = e3.conversationID, n3 = e3.latestNick, o3 = e3.latestAvatar, e3 = this._map.get(t3);
        if (!S2(e3)) {
          var i3 = Array.from(e3.values()), e3 = i3.length;
          if (0 !== e3) {
            for (var a3 = null, s3 = 0, r3 = false, c3 = e3 - 1; 0 <= c3; c3--)
              "in" === i3[c3].flow && ((a3 = i3[c3]).nick !== n3 && (a3.setNickAndAvatar({ nick: n3 }), r3 = true), a3.avatar !== o3 && (a3.setNickAndAvatar({ avatar: o3 }), r3 = true), r3) && (s3 += 1);
            M2.l("".concat(this._n, ".modifyMsgSentByPeer convID:").concat(t3, " count:").concat(s3));
          }
        }
      } }, { key: "modifyMsgSentByMe", value: function(e3) {
        var t3 = e3.conversationID, n3 = e3.latestNick, o3 = e3.latestAvatar, e3 = this._map.get(t3);
        if (!S2(e3)) {
          var i3 = Array.from(e3.values()), e3 = i3.length;
          if (0 !== e3) {
            for (var a3 = null, s3 = 0, r3 = false, c3 = e3 - 1; 0 <= c3; c3--)
              "out" === i3[c3].flow && ((a3 = i3[c3]).nick !== n3 && (a3.setNickAndAvatar({ nick: n3 }), r3 = true), a3.avatar !== o3 && (a3.setNickAndAvatar({ avatar: o3 }), r3 = true), r3) && (s3 += 1);
            M2.l("".concat(this._n, ".modifyMsgSentByMe convID:").concat(t3, " count:").concat(s3));
          }
        }
      } }, { key: "getTopicConvIDList", value: function(t3) {
        return d2(this._map.keys()).filter(function(e3) {
          return e3.startsWith("".concat(R2.CONV_GROUP).concat(t3));
        });
      } }, { key: "onMsgModified", value: function(e3, t3) {
        var n3, o3, i3, a3;
        return (this._map.has(e3) || this._hoppingMsgMap.has(e3)) && (n3 = "".concat(this._n, ".onMsgModified"), i3 = this._getUniqueIDOfMsg(t3), a3 = !!(o3 = this._getTargetMsg(e3, i3)), M2.l("".concat(n3, " convID:").concat(e3, " uniqueID:").concat(i3, " has:").concat(a3)), a3) ? (e3 = t3.messageVersion, i3 = t3.elements, a3 = t3.cloudCustomData, t3 = t3.checkResult, M2.l("".concat(n3, " localVersion:").concat(o3.version, " remoteVersion:").concat(e3)), o3.version < e3 ? (o3.version = e3, o3._elements = JSON.parse(JSON.stringify(i3)), o3.payload = o3._elements[0].content, o3.type = o3._elements[0].type, o3.cloudCustomData = a3, o3.isModified = true, o3.hasRiskContent = sn(t3), { isUpdated: true, message: o3 }) : { isUpdated: false, message: o3 }) : { isUpdated: false, message: null };
      } }, { key: "_getUniqueIDOfMsg", value: function(e3) {
        var t3 = e3.from, n3 = e3.to, o3 = e3.random, i3 = e3.sequence, e3 = e3.time;
        return "".concat(t3, "-").concat(n3, "-").concat(o3, "-").concat(i3, "-").concat(e3);
      } }, { key: "_getTargetMsg", value: function(e3, t3) {
        if (this._map.has(e3))
          return this._map.get(e3).get(t3);
        var n3 = void 0;
        if (this._hoppingMsgMap.has(e3)) {
          for (var o3 = d2(this._hoppingMsgMap.get(e3).values()), i3 = 0; i3 < o3.length; i3++)
            if (this._getUniqueIDOfMsg(o3[i3]) === t3) {
              n3 = o3[i3];
              break;
            }
        }
        return n3;
      } }, { key: "storeHoppingMsgList", value: function(e3) {
        if (0 !== e3.length) {
          var t3 = e3[0].conversationID, n3 = e3.length;
          this._hoppingMsgMap.has(t3) || this._hoppingMsgMap.set(t3, /* @__PURE__ */ new Map());
          for (var o3 = this._hoppingMsgMap.get(t3), i3 = 0; i3 < n3; i3++) {
            var a3 = e3[i3];
            o3.has(a3.ID) || o3.set(a3.ID, a3);
          }
        }
      } }, { key: "getHoppingMsg", value: function(e3, t3) {
        if (this._hoppingMsgMap.has(e3))
          return this._hoppingMsgMap.get(e3).get(t3);
      } }, { key: "reset", value: function() {
        this._map.clear(), this._latestMsgSentByPeerMap.clear(), this._latestMsgSentByMeMap.clear(), this._hoppingMsgMap.clear();
      } }]);
      function bo(e3) {
        return p2(this, bo), (e3 = i2(this, bo, [e3]))._n = "C2CModule", e3._msgFromUnreadDBMap = /* @__PURE__ */ new Map(), e3._noticeFromUnreadDBList = [], e3;
      }
      function wo(e3) {
        this.mixin(e3);
      }
      wo.mixin = function(e3) {
        e3 = e3.prototype || e3;
        e3._isReady = false, e3.ready = function(e4) {
          if (e4)
            return this._isReady ? void (1 < arguments.length && void 0 !== arguments[1] && arguments[1] ? e4.call(this) : setTimeout(e4, 1)) : (this._readyQueue = this._readyQueue || [], void this._readyQueue.push(e4));
        }, e3.triggerReady = function() {
          var t3 = this;
          this._isReady = true, setTimeout(function() {
            var e4 = t3._readyQueue;
            t3._readyQueue = [], e4 && 0 < e4.length && e4.forEach(function(e5) {
              e5.call(this);
            }, t3);
          }, 1);
        }, e3.resetReady = function() {
          this._isReady = false, this._readyQueue = [];
        }, e3.isReady = function() {
          return this._isReady;
        };
      };
      function Fo(e3, t3, n3) {
        return N2(e3) ? { lastTime: 0, lastSequence: 0, fromAccount: "", messageForShow: "", payload: null, type: "", isRevoked: false, cloudCustomData: "", onlineOnlyFlag: false, nick: "", nameCard: "", version: 0, isPeerRead: false, revoker: null } : n3 && e3.ID || e3 instanceof So ? { lastTime: e3.time || 0, lastSequence: e3.sequence || 0, fromAccount: e3.from || "", messageForShow: Zt2(e3.type, e3.payload, t3), payload: e3.payload || null, type: e3.type || null, isRevoked: e3.isRevoked || false, cloudCustomData: e3.cloudCustomData || "", onlineOnlyFlag: e3._onlineOnlyFlag || false, nick: e3.nick || "", nameCard: e3.nameCard || "", version: e3.version || 0, isPeerRead: e3.isPeerRead || false, revoker: e3.revoker || null } : y2(y2({}, e3), {}, { messageForShow: Zt2(e3.type, e3.payload, t3) });
      }
      function qo(e3, t3) {
        return S2(e3) ? { lastTime: 0, lastSequence: 0, fromAccount: "", payload: null, type: "", messageForShow: "", nick: "", avatar: "", version: 0, cloudCustomData: "", isRevoked: false, revoker: null } : { lastTime: e3.time || 0, lastSequence: e3.sequence || 0, fromAccount: e3.from || "", payload: e3.payload || null, type: e3.type || "", messageForShow: Zt2(e3.type, e3.payload, t3), nick: e3.nick || "", avatar: e3.avatar || "", version: e3.version || 0, cloudCustomData: e3.cloudCustomData || "", isRevoked: e3.isRevoked || false, revoker: e3.revoker || null };
      }
      function xo(e3) {
        var t3 = String(e3).replace(/[=]+$/, ""), n3 = "";
        if (t3.length % 4 == 1)
          return "";
        for (var o3, i3, a3 = 0, s3 = 0; i3 = t3.charAt(s3++); ~i3 && (o3 = a3 % 4 ? 64 * o3 + i3 : i3, a3++ % 4) && (n3 += String.fromCharCode(255 & o3 >> (-2 * a3 & 6))))
          i3 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(i3);
        try {
          return decodeURIComponent(escape(n3));
        } catch (e4) {
          return "";
        }
      }
      var Vo = ["jpg", "jpeg", "gif", "png", "bmp", "image", "webp"], Bo = ["mp4", "quicktime", "mov"], Ho = e2(function e3(t3) {
        var n3 = this;
        p2(this, e3), S2(t3) || (this.userID = t3.userID || "", this.nick = t3.nick || "", this.gender = t3.gender || "", this.birthday = t3.birthday || 0, this.location = t3.location || "", this.selfSignature = t3.selfSignature || "", this.allowType = t3.allowType || R2.ALLOW_TYPE_ALLOW_ANY, this.language = t3.language || 0, this.avatar = t3.avatar || "", this.messageSettings = t3.messageSettings || 0, this.adminForbidType = t3.adminForbidType || R2.FORBID_TYPE_NONE, this.level = t3.level || 0, this.role = t3.role || 0, this.lastUpdatedTime = 0, this.profileCustomField = [], S2(t3.profileCustomField)) || t3.profileCustomField.forEach(function(e4) {
          n3.profileCustomField.push({ key: e4.key, value: e4.value });
        });
      }, [{ key: "validate", value: function(e3) {
        var t3, n3 = true, o3 = "";
        if (S2(e3))
          return { valid: false, tips: "empty options" };
        if (e3.profileCustomField)
          for (var i3 = e3.profileCustomField.length, a3 = null, s3 = 0; s3 < i3; s3++) {
            if (a3 = e3.profileCustomField[s3], !C2(a3.key) || -1 === a3.key.indexOf("Tag_Profile_Custom"))
              return { valid: false, tips: "The prefix of keys of the custom profile key-value pairs (which is profileCustomField) must be Tag_Profile_Custom" };
            if (!C2(a3.value))
              return { valid: false, tips: "The type of values of the custom profile key-value pairs (which is profileCustomField) must be String" };
          }
        for (t3 in e3)
          if (Object.prototype.hasOwnProperty.call(e3, t3)) {
            if ("profileCustomField" === t3)
              continue;
            if (S2(e3[t3]) && !C2(e3[t3]) && !A2(e3[t3])) {
              o3 = "key:" + t3 + ", invalid value:" + e3[t3], n3 = false;
              continue;
            }
            switch (t3) {
              case "nick":
                C2(e3[t3]) || (n3 = !(o3 = "nick must be a string")), 500 < ft2(e3[t3]) && (o3 = "nick name limited: must less than or equal to ".concat(500, " bytes, current size: ").concat(ft2(e3[t3]), " bytes"), n3 = false);
                break;
              case "gender":
                It2(Qe2, e3.gender) || (o3 = "key:gender, invalid value:" + e3.gender, n3 = false);
                break;
              case "birthday":
                A2(e3.birthday) || (n3 = !(o3 = "birthday must be a number"));
                break;
              case "location":
                C2(e3.location) || (n3 = !(o3 = "location must be a string"));
                break;
              case "selfSignature":
                C2(e3.selfSignature) || (n3 = !(o3 = "selfSignature must be a string"));
                break;
              case "allowType":
                It2(et2, e3.allowType) || (o3 = "key:allowType, invalid value:" + e3.allowType, n3 = false);
                break;
              case "language":
                A2(e3.language) || (n3 = !(o3 = "language must be a number"));
                break;
              case "avatar":
                C2(e3.avatar) || (n3 = !(o3 = "avatar must be a string"));
                break;
              case "messageSettings":
                0 !== e3.messageSettings && 1 !== e3.messageSettings && (n3 = !(o3 = "messageSettings must be 0 or 1"));
                break;
              case "adminForbidType":
                It2($e2, e3.adminForbidType) || (o3 = "key:adminForbidType, invalid value:" + e3.adminForbidType, n3 = false);
                break;
              case "level":
                A2(e3.level) || (n3 = !(o3 = "level must be a number"));
                break;
              case "role":
                A2(e3.role) || (n3 = !(o3 = "role must be a number"));
                break;
              default:
                o3 = "unknown key:" + t3 + "  " + e3[t3], n3 = false;
            }
          }
        return { valid: n3, tips: o3 };
      } }]), Ko = e2(function e3(t3) {
        p2(this, e3), this.MAX_LENGTH = t3, this.map = /* @__PURE__ */ new Map();
      }, [{ key: "set", value: function(e3) {
        var t3;
        this.map.size >= this.MAX_LENGTH && (t3 = this.map.entries().next().value[0], this.map.delete(t3)), this.map.set(e3, 1);
      } }, { key: "has", value: function(e3) {
        return this.map.has(e3);
      } }, { key: "delete", value: function(e3) {
        this.has(e3) && this.map.delete(e3);
      } }, { key: "reset", value: function() {
        this.map.clear();
      } }]), Wo = ["groupID", "name", "avatar", "type", "introduction", "notification", "ownerID", "selfInfo", "createTime", "infoSequence", "lastInfoTime", "lastMessage", "nextMessageSeq", "memberNum", "maxMemberNum", "memberList", "joinOption", "groupCustomField", "muteAllMembers", "isSupportTopic", "inviteOption", "_lastRevokedTime"], Yo = e2(function e3(t3) {
        p2(this, e3), this.groupID = "", this.name = "", this.avatar = "", this.type = "", this.introduction = "", this.notification = "", this.ownerID = "", this.createTime = "", this.infoSequence = "", this.lastInfoTime = "", this.selfInfo = { messageRemindType: "", joinTime: "", nameCard: "", role: "", userID: "", memberCustomField: void 0, readedSequence: 0, excludedUnreadSequenceList: void 0 }, this.lastMessage = { lastTime: "", lastSequence: "", fromAccount: "", messageForShow: "" }, this.nextMessageSeq = "", this.memberNum = "", this.memberCount = "", this.maxMemberNum = "", this.maxMemberCount = "", this.joinOption = "", this.inviteOption = "", this.groupCustomField = [], this.muteAllMembers = false, this.isSupportTopic = false, this._lastRevokedTime = 0, this._initGroup(t3);
      }, [{ key: "memberNum", get: function() {
        return this.memberCount;
      }, set: function(e3) {
      } }, { key: "maxMemberNum", get: function() {
        return this.maxMemberCount;
      }, set: function(e3) {
      } }, { key: "_initGroup", value: function(e3) {
        for (var t3 in e3)
          Wo.indexOf(t3) < 0 || ("selfInfo" !== t3 ? ("memberNum" === t3 && (this.memberCount = e3[t3]), "maxMemberNum" === t3 && (this.maxMemberCount = e3[t3]), "isSupportTopic" !== t3 ? this[t3] = e3[t3] : this.isSupportTopic = 1 === e3[t3]) : this.updateSelfInfo(e3[t3]));
      } }, { key: "updateGroup", value: function(e3) {
        var t3 = this, e3 = (e3.appid = void 0, e3.grossTopicNextMsgSeq = void 0, e3.selfInfo && (e3.selfInfo.grossTopicReadSeq = void 0), JSON.parse(JSON.stringify(e3)));
        e3.lastMsgTime && (this.lastMessage.lastTime = e3.lastMsgTime), N2(e3.muteAllMembers) || ("On" === e3.muteAllMembers ? e3.muteAllMembers = true : e3.muteAllMembers = false), e3.groupCustomField && Rt2(this.groupCustomField, e3.groupCustomField), N2(e3.memberNum) || (this.memberCount = e3.memberNum), N2(e3.maxMemberNum) || (this.maxMemberCount = e3.maxMemberNum), N2(e3.isSupportTopic) || (this.isSupportTopic = A2(e3.isSupportTopic) ? 1 === e3.isSupportTopic : e3.isSupportTopic), ht2(this, e3, ["members", "errorCode", "lastMsgTime", "groupCustomField", "memberNum", "maxMemberNum", "isSupportTopic"]), O2(e3.members) && 0 < e3.members.length && e3.members.forEach(function(e4) {
          e4.userID === t3.selfInfo.userID && ht2(t3.selfInfo, e4, ["sequence"]);
        });
      } }, { key: "updateSelfInfo", value: function(e3) {
        e3 = { nameCard: e3.nameCard, joinTime: e3.joinTime, role: e3.role, messageRemindType: e3.messageRemindType, readedSequence: e3.readedSequence, excludedUnreadSequenceList: e3.excludedUnreadSequenceList };
        ht2(this.selfInfo, y2({}, e3), [], ["", null, void 0, 0, NaN]);
      } }, { key: "setSelfNameCard", value: function(e3) {
        this.selfInfo.nameCard = e3;
      } }]), jo = e2(function e3(t3, n3) {
        var o3 = 2 < arguments.length && void 0 !== arguments[2] && arguments[2];
        p2(this, e3), this.conversationID = t3.conversationID || "", this.unreadCount = t3.unreadCount || 0, this.type = t3.type || "", this.lastMessage = Fo(t3.lastMessage, n3, o3), t3.lastMsgTime && (this.lastMessage.lastTime = t3.lastMsgTime), this._isInfoCompleted = false, this.peerReadTime = t3.peerReadTime || 0, this.groupAtInfoList = [], this.remark = t3.remark || "", this.isPinned = t3.isPinned || false, this.messageRemindType = t3.messageRemindType, this.markList = t3.markList || [], this.customData = t3.customData || "", this.conversationGroupList = t3.conversationGroupList || [], this.draftText = t3.draftText || "", this._initProfile(t3), this.subType = this.groupProfile ? this.groupProfile.type : "";
      }, [{ key: "toAccount", get: function() {
        return this.conversationID.startsWith(R2.CONV_C2C) ? this.conversationID.replace(R2.CONV_C2C, "") : this.conversationID.startsWith(R2.CONV_GROUP) ? this.conversationID.replace(R2.CONV_GROUP, "") : "";
      } }, { key: "_initProfile", value: function(t3) {
        var n3 = this;
        Object.keys(t3).forEach(function(e3) {
          switch (e3) {
            case "userProfile":
              n3.userProfile = t3.userProfile;
              break;
            case "groupProfile":
              n3.groupProfile = t3.groupProfile;
          }
        }), N2(this.userProfile) && this.type === R2.CONV_C2C ? this.userProfile = new Ho({ userID: t3.conversationID.replace("C2C", "") }) : N2(this.groupProfile) && this.type === R2.CONV_GROUP && (this.groupProfile = new Yo({ groupID: t3.conversationID.replace("GROUP", "") }));
      } }, { key: "updateUnreadCount", value: function(e3) {
        var t3 = e3.nextUnreadCount, n3 = e3.isFromGetConversations, e3 = e3.isUnreadC2CMessage;
        N2(t3) || (Gt2(this.subType) ? this.unreadCount = 0 : n3 && this.type === R2.CONV_GROUP || n3 && this.type === R2.CONV_TOPIC || e3 && this.type === R2.CONV_C2C ? this.unreadCount = t3 : this.unreadCount = this.unreadCount + t3);
      } }, { key: "updateLastMessage", value: function(e3) {
        this.lastMessage = Fo(e3);
      } }, { key: "updateGroupAtInfoList", value: function(e3) {
        var t3;
        this._isNeedMergeGroupAtInfo(e3) || (-1 !== (t3 = (b2(t3 = e3.groupAtType) || B2(t3) || X2(t3) || H2()).slice(0)).indexOf(R2.CONV_AT_ME) && -1 !== t3.indexOf(R2.CONV_AT_ALL) && (t3 = [R2.CONV_AT_ALL_AT_ME]), t3 = { from: e3.from, groupID: e3.groupID, topicID: e3.topicID, messageSequence: e3.sequence, atTypeArray: t3, __random: e3.__random, __sequence: e3.__sequence }, this.groupAtInfoList.push(t3));
      } }, { key: "_isNeedMergeGroupAtInfo", value: function(t3) {
        var n3, e3 = t3.groupID, o3 = t3.sequence;
        return !!Pt2({ groupID: e3 }) && (n3 = false, this.groupAtInfoList.forEach(function(e4) {
          e4.messageSequence === o3 && (-1 < e4.atTypeArray.indexOf(R2.CONV_AT_ME) && -1 < t3.groupAtType.indexOf(R2.CONV_AT_ALL) && (e4.atTypeArray = [R2.CONV_AT_ALL_AT_ME]), -1 < e4.atTypeArray.indexOf(R2.CONV_AT_ALL) && -1 < t3.groupAtType.indexOf(R2.CONV_AT_ME) && (e4.atTypeArray = [R2.CONV_AT_ALL_AT_ME], e4.__random = t3.__random, e4.__sequence = t3.__sequence), n3 = true);
        }), n3);
      } }, { key: "clearGroupAtInfoList", value: function() {
        this.groupAtInfoList.length = 0;
      } }, { key: "reduceUnreadCount", value: function() {
        return 1 <= this.unreadCount && (--this.unreadCount, true);
      } }, { key: "isLastMessageRevoked", value: function(e3) {
        var t3 = e3.sequence, e3 = e3.time;
        return this.type === R2.CONV_C2C && t3 === this.lastMessage.lastSequence && e3 === this.lastMessage.lastTime || this.type === R2.CONV_GROUP && t3 === this.lastMessage.lastSequence;
      } }, { key: "setLastMessageRevoked", value: function(e3) {
        this.lastMessage.isRevoked = e3;
      } }, { key: "setLastMessageRevoker", value: function(e3) {
        this.lastMessage.revoker = e3;
      } }, { key: "setDraftText", value: function(e3) {
        this.draftText = e3;
      } }]), Jo = q2(q2(q2({}, R2.MSG_REMIND_ACPT_AND_NOTE, 0), R2.MSG_REMIND_DISCARD, 1), R2.MSG_REMIND_ACPT_NOT_NOTE, 2), zo = e2(function e3(t3) {
        p2(this, e3), this._convM = t3, this._n = "MsgRemindHandler";
      }, [{ key: "onAllRcvMsgOptNotify", value: function(e3) {
        e3 = this._handleResult(e3);
        this._convM.emitOEvt(h2.ALL_RECEIVE_MESSAGE_OPT_UPDATED, e3);
      } }, { key: "getC2CMsgRemindType", value: function(t3) {
        var n3 = this, o3 = "".concat(this._n, ".getC2CMsgRemindType");
        return this._convM.req({ P: G2.GET_C2C_PEER_MUTE_NOTIFICATIONS, data: { toAccount: this._convM.getMyUserID(), userIDList: t3 } }).then(function(e3) {
          M2.l("".concat(o3, " ok. userIDList:").concat(t3));
          e3 = e3.data.muteFlagList;
          n3._convM.onC2CMsgRemindTypeFetched(e3);
        }).catch(function(e3) {
          M2.e("".concat(o3, " failed. error:"), e3);
        });
      } }, { key: "set", value: function(e3) {
        return e3.groupID ? this._setGroupMsgRemindType(e3) : O2(e3.userIDList) ? this._setC2CMsgRemindType(e3) : void 0;
      } }, { key: "_setGroupMsgRemindType", value: function(t3) {
        var n3 = this, o3 = "".concat(this._n, ".").concat("_setGroupMsgRemindType"), e3 = t3.groupID, i3 = t3.messageRemindType, a3 = "groupID:".concat(e3, " messageRemindType:").concat(i3), s3 = new P2("_setGroupMsgRemindType"), r3 = (s3.setMessage(a3), this._get(7));
        return r3 ? r3.modifyGroupMemberInfo({ groupID: e3, messageRemindType: i3, userID: this._convM.getMyUserID() }).then(function() {
          s3.end(), M2.l("".concat(o3, " ok. ").concat(a3));
          var e4 = n3.onGroupMsgRemindTypeUpdated(t3);
          return n3._convM.onTotalUnreadCountUpdate(), T2(e4);
        }).catch(function(e4) {
          return s3.setError(e4).end(), M2.e("".concat(o3, " failed. error:"), e4), E2(e4);
        }) : E2({ code: k2.NO_MODULE });
      } }, { key: "onGroupMsgRemindTypeUpdated", value: function(e3) {
        var t3, n3, o3 = e3.groupID, e3 = e3.messageRemindType, i3 = (M2.l("".concat(this._n, ".onGroupMsgRemindTypeUpdated groupID:").concat(o3, " messageRemindType:").concat(e3)), this._get(7).getLocalGroupProfile(o3));
        return i3 && (i3.selfInfo.messageRemindType = e3), Ut2(o3) ? (t3 = Xt2(n3 = o3), (n3 = this._get(10).getLocalTopic(t3, n3)) && n3.updateSelfInfo({ messageRemindType: e3 }) && this._convM.emitOEvt(h2.TOPIC_UPDATED, { groupID: t3, topic: n3 }), { topic: n3 }) : (this._convM.patchMsgRemindType({ ID: o3, isC2CConversation: false, messageRemindType: e3 }) && this._emitConvUpdate(), { group: i3 });
      } }, { key: "_setC2CMsgRemindType", value: function(e3) {
        var i3 = this, a3 = "".concat(this._n, ".").concat("_setC2CMsgRemindType"), t3 = e3.userIDList, s3 = e3.messageRemindType, r3 = t3.slice(0, 30), e3 = Jo[s3] || 0, c3 = "userIDList:".concat(r3, " messageRemindType:").concat(s3), u3 = new P2("_setC2CMsgRemindType");
        return u3.setMessage(c3), this._convM.req({ P: G2.SET_C2C_PEER_MUTE_NOTIFICATIONS, data: { userIDList: r3, muteFlag: e3 } }).then(function(e4) {
          u3.end();
          var e4 = e4.data.errorList, t4 = [], n3 = [], e4 = (O2(e4) && e4.forEach(function(e5) {
            t4.push(e5.userID), n3.push({ userID: e5.userID, code: e5.errorCode });
          }), r3.filter(function(e5) {
            return -1 === t4.indexOf(e5);
          })), o3 = (M2.l("".concat(a3, " ok. ").concat(c3, " successUserIDList:").concat(e4, " failureUserIDList:").concat(JSON.stringify(n3))), 0);
          return e4.forEach(function(e5) {
            i3._convM.patchMsgRemindType({ ID: e5, isC2CConversation: true, messageRemindType: s3 }) && (o3 += 1);
          }), 1 <= o3 && i3._emitConvUpdate(), r3.length = t4.length = 0, i3._convM.onTotalUnreadCountUpdate(), D2({ successUserIDList: e4.map(function(e5) {
            return { userID: e5 };
          }), failureUserIDList: n3 });
        }).catch(function(e4) {
          return u3.setError(e4).end(), M2.e("".concat(a3, " failed. error:"), e4), E2(e4);
        });
      } }, { key: "_get", value: function(e3) {
        return this._convM.get(e3);
      } }, { key: "_emitConvUpdate", value: function() {
        this._convM.emitConvUpdate(true, false);
      } }, { key: "setAllRcvMsgOpt", value: function(e3) {
        var t3 = "".concat(this._n, ".").concat("setAllRcvMsgOpt"), n3 = e3.messageRemindType, n3 = void 0 === n3 ? R2.MSG_REMIND_ACPT_NOT_NOTE : n3, o3 = e3.isRepeated, o3 = void 0 === o3 || o3, i3 = this._calcStartAndEndTime(e3), a3 = i3.startTime, a3 = void 0 === a3 ? 0 : a3, i3 = i3.endTime, i3 = void 0 === i3 ? 0 : i3, e3 = JSON.stringify(e3), s3 = new P2("setAllRcvMsgOpt");
        return s3.setMessage(e3), M2.l("".concat(t3, " options:").concat(e3)), this._convM.req({ P: G2.SET_ALL_RECEIVE_MSG_OPT, data: { messageRemindType: Jo[n3], startTime: a3, endTime: i3, isRepeated: o3 ? 1 : 0 } }).then(function(e4) {
          return s3.end(), M2.l("".concat(t3, " ok.")), T2(e4);
        }).catch(function(e4) {
          return s3.setError(e4).end(), M2.e("".concat(t3, " failed. error:"), e4), E2(e4);
        });
      } }, { key: "_calcStartAndEndTime", value: function(e3) {
        var t3 = e3.startHour, t3 = void 0 === t3 ? 0 : t3, n3 = e3.startMinute, n3 = void 0 === n3 ? 0 : n3, o3 = e3.startSecond, o3 = void 0 === o3 ? 0 : o3, i3 = e3.duration, i3 = void 0 === i3 ? 0 : i3, e3 = e3.isRepeated, e3 = void 0 === e3 || e3, a3 = /* @__PURE__ */ new Date(), s3 = a3.getFullYear(), r3 = a3.getMonth(), a3 = a3.getDate(), s3 = Math.round(new Date(s3, r3, a3, t3, n3, o3).getTime() / 1e3);
        return { startTime: s3, endTime: e3 && 86400 <= i3 ? s3 + 86400 : s3 + i3 };
      } }, { key: "getAllRcvMsgOpt", value: function() {
        var t3 = this, n3 = "".concat(this._n, ".").concat("getAllRcvMsgOpt"), o3 = new P2("getAllRcvMsgOpt");
        return this._convM.req({ P: G2.GET_ALL_RECEIVE_MSG_OPT, data: { toAccount: this._convM.getMyUserID() } }).then(function(e3) {
          e3 = e3.data, o3.setMessage(JSON.stringify(e3)).end(), M2.l("".concat(n3, " ok. data:").concat(JSON.stringify(e3))), e3 = t3._handleResult(e3);
          return T2(e3);
        }).catch(function(e3) {
          return o3.setError(e3).end(), M2.e("".concat(n3, " failed. error:"), e3), E2(e3);
        });
      } }, { key: "_handleResult", value: function(e3) {
        var t3 = e3.messageRemindType, n3 = e3.startTime, o3 = e3.endTime, e3 = e3.isRepeated, i3 = R2.MSG_REMIND_ACPT_AND_NOTE;
        return 1 === t3 && (i3 = R2.MSG_REMIND_DISCARD), { messageRemindType: i3 = 2 === t3 ? R2.MSG_REMIND_ACPT_NOT_NOTE : i3, startTime: n3, endTime: o3, isRepeated: 1 === e3 };
      } }, { key: "reset", value: function() {
        M2.l("".concat(this._n, ".reset"));
      } }]), Xo = e2(function e3(t3) {
        p2(this, e3), this._convM = t3, this._n = "ConvGroupHandler", this._convGroupMap = /* @__PURE__ */ new Map(), this._startIndex = 0, this._pagingStatus = bn;
      }, [{ key: "setConvCustomData", value: function(e3) {
        var i3 = this, a3 = "".concat(this._n, ".").concat("setConvCustomData"), t3 = e3.conversationIDList, s3 = e3.customData, r3 = (M2.l("".concat(a3, " options:"), e3), new P2("setConvCustomData")), n3 = (r3.setMessage(JSON.stringify(e3)), { fromAccount: this._getMyUserID(), itemList: [] }), c3 = [], u3 = [];
        return t3.forEach(function(e4) {
          var t4;
          return i3._hasLocalConv(e4) ? bt2(e4) || wt2(e4) ? (t4 = { operationType: 2, contactItem: void 0, customMark: s3 }, bt2(e4) ? t4.contactItem = { type: 1, toAccount: e4.replace(R2.CONV_C2C, "") } : wt2(e4) && (t4.contactItem = { type: 2, groupID: e4.replace(R2.CONV_GROUP, "") }), void n3.itemList.push(t4)) : (i3._onConvIDInvalid(u3, e4), true) : (i3._onConvNotFound(u3, e4), true);
        }), u3.length === t3.length ? D2({ successConversationIDList: c3, failureConversationIDList: u3 }) : this._convM.req({ P: G2.SET_CONV_CUSTOM_DATA, data: n3 }).then(function(e4) {
          r3.end(), M2.l("".concat(a3, " ok"));
          var t4, n4, o3, e4 = e4.data.resultItem;
          return O2(e4) && (o3 = false, e4.forEach(function(e5) {
            t4 = i3._concatConvID(e5.contactItem), 0 === e5.resultCode ? (c3.push(t4), (n4 = i3._getLocalConv(t4)) && n4.customData !== s3 && (n4.customData = s3, o3 = true)) : u3.push({ conversationID: t4, code: e5.resultCode, message: e5.resultInfo });
          }), true === o3) && i3._emitConvUpdate(), T2({ successConversationIDList: c3, failureConversationIDList: u3 });
        }).catch(function(e4) {
          return r3.setError(e4).end(), M2.e("".concat(a3, " failed. error:"), e4), E2(e4);
        });
      } }, { key: "markConv", value: function(e3) {
        var t3, n3, a3, s3, r3, o3, i3, c3, u3, l3, d3 = this;
        return this._convM.canIUse(g2.CONV_MARK) ? (t3 = "".concat(this._n, ".").concat("markConv"), n3 = e3.conversationIDList, a3 = e3.markType, s3 = e3.enableMark, M2.l("".concat(t3, " options:"), e3), r3 = new P2("markConv"), o3 = void r3.setMessage(JSON.stringify(e3)), i3 = void 0, e3 = this._getFlagBit(a3), true === s3 ? i3 = [e3] : o3 = [e3], c3 = { fromAccount: this._getMyUserID(), itemList: [] }, u3 = [], l3 = [], n3.forEach(function(e4) {
          var t4;
          return d3._hasLocalConv(e4) ? bt2(e4) || wt2(e4) ? (t4 = { operationType: 1, contactItem: void 0, clearMark: o3, setMark: i3 }, bt2(e4) ? t4.contactItem = { type: 1, toAccount: e4.replace(R2.CONV_C2C, "") } : wt2(e4) && (t4.contactItem = { type: 2, groupID: e4.replace(R2.CONV_GROUP, "") }), void c3.itemList.push(t4)) : (d3._onConvIDInvalid(l3, e4), true) : (d3._onConvNotFound(l3, e4), true);
        }), l3.length === n3.length ? D2({ successConversationIDList: u3, failureConversationIDList: l3 }) : this._convM.req({ P: G2.MARK_CONV, data: c3 }).then(function(e4) {
          r3.end(), M2.l("".concat(t3, " ok"));
          var n4, o4, i4, e4 = e4.data.resultItem;
          return O2(e4) && (i4 = false, e4.forEach(function(e5) {
            var t4;
            n4 = d3._concatConvID(e5.contactItem), 0 === e5.resultCode ? (u3.push(n4), (o4 = d3._getLocalConv(n4)) && (t4 = o4.markList.indexOf(a3), true === s3 ? -1 === t4 && (o4.markList.push(a3), i4 = true) : -1 !== t4 && (o4.markList.splice(t4, 1), i4 = true))) : l3.push({ conversationID: n4, code: e5.resultCode, message: e5.resultInfo });
          }), true === i4) && d3._emitConvUpdate(), T2({ successConversationIDList: u3, failureConversationIDList: l3 });
        }).catch(function(e4) {
          return r3.setError(e4).end(), M2.e("".concat(t3, " failed. error:"), e4), E2(e4);
        })) : this._convM.noUse("markConv");
      } }, { key: "getLocalConvGroupList", value: function() {
        var e3 = this;
        return M2.l("".concat(this._n, ".getLocalConvGroupList pagingStatus:").concat(this._pagingStatus)), this._pagingStatus === qn ? this.getRemoteConvGroupList().then(function() {
          return T2(d2(e3._convGroupMap.values()));
        }) : D2(d2(this._convGroupMap.values()));
      } }, { key: "searchConvGroupAndMark", value: function(e3, t3) {
        var n3 = this, o3 = "".concat(this._n, ".searchConvGroupAndMark"), i3 = [];
        return e3.forEach(function(e4) {
          1 === t3 ? i3.push({ type: 1, toAccount: e4 }) : 2 === t3 && i3.push({ type: 2, groupID: e4 });
        }), M2.l("".concat(o3, " type:").concat(t3, " list:"), e3), this._convM.req({ P: G2.SEARCH_CONV_GRP_MARK, data: { fromAccount: this._getMyUserID(), contactItem: i3 } }).then(function(e4) {
          var e4 = e4.data, t4 = e4.contactItem, e4 = e4.groupItem;
          M2.l("".concat(o3, " ok. contactItem:"), t4, "groupItem:", e4), n3._fillConvGroupMap(e4), n3._handleContactItem(t4), n3._emitConvUpdate();
        }).catch(function(e4) {
          M2.w("".concat(o3, " failed. error:"), e4);
        });
      } }, { key: "_fillConvGroupMap", value: function(e3) {
        var n3 = this;
        O2(e3) && e3.forEach(function(e4) {
          var t3 = e4.convGroupID, e4 = e4.groupName;
          n3._convGroupMap.set(t3, e4);
        });
      } }, { key: "_handleContactItem", value: function(e3) {
        var a3, s3 = this;
        O2(e3) && e3.forEach(function(e4) {
          var t3 = [], n3 = e4.standardMark, o3 = e4.customData, i3 = e4.convGroupIDList;
          O2(i3) && i3.forEach(function(e5) {
            s3._convGroupMap.has(e5) && t3.push(s3._convGroupMap.get(e5));
          }), a3 = s3._concatConvID(e4), (a3 = s3._getLocalConv(a3)) && (a3.markList = $t2(n3), a3.customData = o3 || "", a3.conversationGroupList = [].concat(t3));
        });
      } }, { key: "getRemoteConvGroupList", value: function() {
        var i3 = this, a3 = "".concat(this._n, ".getRemoteConvGroupList");
        return this._pagingStatus = wn, this._convM.req({ P: G2.GET_CONV_GRP_LIST, data: { fromAccount: this._getMyUserID(), startIndex: this._startIndex } }).then(function(e3) {
          var e3 = e3.data, t3 = e3.completeFlag, n3 = e3.contactItem, o3 = e3.nextStartIndex, o3 = void 0 === o3 ? 0 : o3, e3 = e3.groupItem;
          if (i3._startIndex = o3, M2.l("".concat(a3, " completeFlag:").concat(t3, " nextStartIndex:").concat(o3, ", groupItem:"), e3, "contactItem:", n3), i3._fillConvGroupMap(e3), i3._handleContactItem(n3), 0 === t3)
            return i3.getRemoteConvGroupList();
          1 === t3 && (i3._pagingStatus = Fn, i3._emitConvUpdate(), i3._emitConvGroupListUpdate());
        }).catch(function(e3) {
          i3._pagingStatus = qn, M2.w("".concat(a3, " failed. error:"), e3);
        });
      } }, { key: "createConvGroup", value: function(e3) {
        var a3, s3, r3, t3, c3, u3, l3 = this;
        return this._convM.canIUse(g2.CONV_GROUP) ? (a3 = "".concat(this._n, ".").concat("createConvGroup"), M2.l("".concat(a3, " options:"), e3), (s3 = new P2("createConvGroup")).setMessage(JSON.stringify(e3)), r3 = e3.groupName, e3 = e3.conversationIDList, t3 = { fromAccount: this._getMyUserID(), itemList: [{ groupName: r3, contactItem: [] }] }, c3 = [], u3 = [], e3.forEach(function(e4) {
          return l3._hasLocalConv(e4) ? bt2(e4) || wt2(e4) ? void (bt2(e4) ? t3.itemList[0].contactItem.push({ type: 1, toAccount: e4.replace(R2.CONV_C2C, "") }) : wt2(e4) && t3.itemList[0].contactItem.push({ type: 2, groupID: e4.replace(R2.CONV_GROUP, "") })) : (l3._onConvIDInvalid(u3, e4), true) : (l3._onConvNotFound(u3, e4), true);
        }), u3.length === e3.length ? D2({ successConversationIDList: c3, failureConversationIDList: u3 }) : this._convM.req({ P: G2.CREATE_CONV_GRP, data: t3 }).then(function(e4) {
          s3.end(), M2.l("".concat(a3, " ok"));
          var t4, n3, o3, e4 = e4.data.groupResultItem[0], i3 = e4.groupItem, e4 = e4.resultItem;
          return m2(i3) && (l3._convGroupMap.set(i3.convGroupID, i3.groupName), l3._emitConvGroupListUpdate()), O2(e4) && (o3 = false, e4.forEach(function(e5) {
            t4 = l3._concatConvID(e5.contactItem), 0 === e5.resultCode ? (c3.push(t4), (n3 = l3._getLocalConv(t4)) && -1 === n3.conversationGroupList.indexOf(r3) && (n3.conversationGroupList.push(r3), o3 = true)) : u3.push({ conversationID: t4, code: e5.resultCode, message: e5.resultInfo });
          }), true === o3) && (l3._emitConvUpdate(), l3._emitConvGroupListUpdate()), T2({ successConversationIDList: c3, failureConversationIDList: u3 });
        }).catch(function(e4) {
          return s3.setError(e4).end(), M2.e("".concat(a3, " failed. error:"), e4), E2(e4);
        })) : this._convM.noUse("createConvGroup");
      } }, { key: "deleteConvGroup", value: function(n3) {
        var o3, i3, a3 = this;
        return this._convM.canIUse(g2.CONV_GROUP) ? (o3 = "".concat(this._n, ".").concat("deleteConvGroup"), M2.l("".concat(o3, " groupName:").concat(n3)), (i3 = new P2("deleteConvGroup")).setMessage(n3), this._convM.req({ P: G2.DEL_CONV_GRP, data: { fromAccount: this._getMyUserID(), groupName: [n3] } }).then(function(e3) {
          i3.end(), M2.l("".concat(o3, " ok"));
          var t3, e3 = e3.data.groupItem;
          O2(e3) && (t3 = false, e3.forEach(function(e4) {
            a3._convGroupMap.has(e4.convGroupID) && (a3._convGroupMap.delete(e4.convGroupID), t3 = true);
          }), true === t3) && a3._emitConvGroupListUpdate(), a3._eraseFromConversationGroupList([n3]);
        }).catch(function(e3) {
          return i3.setError(e3).end(), M2.e("".concat(o3, " failed. error:"), e3), E2(e3);
        })) : this._convM.noUse("deleteConvGroup");
      } }, { key: "renameConvGroup", value: function(e3) {
        var i3, a3, s3, r3, c3 = this;
        return this._convM.canIUse(g2.CONV_GROUP) ? (i3 = "".concat(this._n, ".").concat("renameConvGroup"), M2.l("".concat(i3, " options:"), e3), (a3 = new P2("renameConvGroup")).setMessage(JSON.stringify(e3)), s3 = e3.oldName, r3 = e3.newName, this._convM.req({ P: G2.RENAME_CONV_GRP, data: { fromAccount: this._getMyUserID(), updateType: 1, updateGroup: { updateGroupType: 1, oldName: s3, newName: r3 } } }).then(function(e4) {
          a3.end(), M2.l("".concat(i3, " ok"));
          e4 = e4.data.updateGroupResult.convGroupID;
          c3._convGroupMap.set(e4, r3), c3._emitConvGroupListUpdate();
          var t3, n3, e4 = c3._convM.getLocalConvList(), o3 = false;
          e4.forEach(function(e5) {
            t3 = e5.conversationGroupList, -1 !== (n3 = t3.indexOf(s3)) && (t3.splice(n3, 1, r3), o3 = true);
          }), true === o3 && c3._emitConvUpdate();
        }).catch(function(e4) {
          return a3.setError(e4).end(), M2.e("".concat(i3, " failed. error:"), e4), E2(e4);
        })) : this._convM.noUse("renameConvGroup");
      } }, { key: "addConvsToGroup", value: function(e3) {
        var i3, a3, t3, s3, n3, r3, c3, u3 = this;
        return this._convM.canIUse(g2.CONV_GROUP) ? (i3 = "".concat(this._n, ".").concat("addConvsToGroup"), M2.l("".concat(i3, " options:"), e3), (a3 = new P2("addConvsToGroup")).setMessage(JSON.stringify(e3)), t3 = e3.conversationIDList, s3 = e3.groupName, n3 = { fromAccount: this._getMyUserID(), updateType: 1, updateGroup: { updateGroupType: 2, groupName: s3, updateItem: [] } }, r3 = [], c3 = [], t3.forEach(function(e4) {
          return u3._hasLocalConv(e4) ? bt2(e4) || wt2(e4) ? void (bt2(e4) ? n3.updateGroup.updateItem.push({ operationType: 1, contactItem: { type: 1, toAccount: e4.replace(R2.CONV_C2C, "") } }) : wt2(e4) && n3.updateGroup.updateItem.push({ operationType: 1, contactItem: { type: 2, groupID: e4.replace(R2.CONV_GROUP, "") } })) : (u3._onConvIDInvalid(c3, e4), true) : (u3._onConvNotFound(c3, e4), true);
        }), c3.length === t3.length ? D2({ successConversationIDList: r3, failureConversationIDList: c3 }) : this._convM.req({ P: G2.ADD_CONV_TO_GRP, data: n3 }).then(function(e4) {
          a3.end(), M2.l("".concat(i3, " ok"));
          var t4, n4, o3, e4 = e4.data.updateGroupResult.contactResultItem;
          return O2(e4) && (o3 = false, e4.forEach(function(e5) {
            t4 = u3._concatConvID(e5.contactItem), 0 === e5.resultCode ? (n4 = u3._getLocalConv(t4)) && -1 === n4.conversationGroupList.indexOf(s3) && (n4.conversationGroupList.push(s3), r3.push(t4), o3 = true) : c3.push({ conversationID: t4, code: e5.resultCode, message: e5.resultInfo });
          }), true === o3) && (u3._emitConvUpdate(), u3._emitConvInGroupUpdate(s3)), T2({ successConversationIDList: r3, failureConversationIDList: c3 });
        }).catch(function(e4) {
          return a3.setError(e4).end(), M2.e("".concat(i3, " failed. error:"), e4), E2(e4);
        })) : this._convM.noUse("addConvsToGroup");
      } }, { key: "deleteConvsFromGroup", value: function(e3) {
        var t3, a3, n3, s3, o3, r3, c3, u3 = this, i3 = "deleteConvsFromGroup";
        return this._convM.canIUse(g2.CONV_GROUP) ? (t3 = "".concat(this._n, ".").concat(i3), M2.l("".concat(t3, " options:"), e3), (a3 = new P2(i3)).setMessage(JSON.stringify(e3)), n3 = e3.conversationIDList, s3 = e3.groupName, o3 = { fromAccount: this._getMyUserID(), updateType: 1, updateGroup: { updateGroupType: 2, groupName: s3, updateItem: [] } }, r3 = [], c3 = [], n3.forEach(function(e4) {
          return u3._hasLocalConv(e4) ? bt2(e4) || wt2(e4) ? void (bt2(e4) ? o3.updateGroup.updateItem.push({ operationType: 2, contactItem: { type: 1, toAccount: e4.replace(R2.CONV_C2C, "") } }) : wt2(e4) && o3.updateGroup.updateItem.push({ operationType: 2, contactItem: { type: 2, groupID: e4.replace(R2.CONV_GROUP, "") } })) : (u3._onConvIDInvalid(c3, e4), true) : (u3._onConvNotFound(c3, e4), true);
        }), c3.length === n3.length ? D2({ successConversationIDList: r3, failureConversationIDList: c3 }) : this._convM.req({ P: G2.DEL_CONV_FROM_GRP, data: o3 }).then(function(e4) {
          a3.end(), M2.l("".concat(t3, " ok"));
          var n4, o4, i4, e4 = e4.data.updateGroupResult.contactResultItem;
          return O2(e4) && (i4 = false, e4.forEach(function(e5) {
            var t4;
            n4 = u3._concatConvID(e5.contactItem), 0 === e5.resultCode ? (o4 = u3._getLocalConv(n4)) && -1 !== (t4 = o4.conversationGroupList.indexOf(s3)) && (o4.conversationGroupList.splice(t4, 1), r3.push(n4), i4 = true) : c3.push({ conversationID: n4, code: e5.resultCode, message: e5.resultInfo });
          }), true === i4) && (u3._emitConvUpdate(), u3._emitConvInGroupUpdate(s3)), T2({ successConversationIDList: r3, failureConversationIDList: c3 });
        }).catch(function(e4) {
          return a3.setError(e4).end(), M2.e("".concat(t3, " failed. error:"), e4), E2(e4);
        })) : this._convM.noUse(i3);
      } }, { key: "onConvMarkUpdated", value: function(e3) {
        var i3, a3, s3 = this;
        S2(e3) || (M2.l("".concat(this._n, ".onConvMarkUpdated markItemList:"), e3), a3 = false, e3.forEach(function(e4) {
          var t3 = e4.recentContactItem, n3 = e4.optType, o3 = e4.standardMark, e4 = e4.customMark;
          i3 = s3._concatConvID(t3), (i3 = s3._getLocalConv(i3)) && (1 === n3 ? a3 = s3._diffStandardMark(i3, o3) : 2 === n3 ? a3 = s3._diffCustomMark(i3, e4) : 3 === n3 && (t3 = s3._diffStandardMark(i3, o3), n3 = s3._diffCustomMark(i3, e4), a3 = t3 || n3));
        }), true === a3 && this._emitConvUpdate());
      } }, { key: "_diffStandardMark", value: function(e3, t3) {
        var t3 = $t2(t3), n3 = false;
        return true !== function(e4, t4) {
          if (e4 !== t4) {
            if (!e4 || !t4)
              return false;
            if (e4.length !== t4.length)
              return false;
            for (var n4 = 0, o3 = e4.length; n4 < o3; n4++)
              if (e4[n4] !== t4[n4])
                return false;
          }
          return true;
        }(e3.markList, t3) && (e3.markList = t3, n3 = true), n3;
      } }, { key: "_diffCustomMark", value: function(e3, t3) {
        var n3 = false;
        return e3.customData !== t3 && void 0 !== t3 && (e3.customData = t3, n3 = true), n3;
      } }, { key: "onConvGroupCreated", value: function(e3) {
        var a3 = this, s3 = (M2.l("".concat(this._n, ".onConvGroupCreated resultList:"), e3), false), r3 = false;
        O2(e3) && (e3.forEach(function(e4) {
          var t3 = e4.msgGroupItem, n3 = t3.groupID, o3 = t3.groupName;
          a3._convGroupMap.get(n3) !== o3 && (a3._convGroupMap.set(n3, o3), r3 = true);
          var i3, t3 = e4.msgRecentContactItem;
          O2(t3) && t3.forEach(function(e5) {
            i3 = a3._concatConvID(e5), (i3 = a3._getLocalConv(i3)) && -1 === i3.conversationGroupList.indexOf(o3) && (i3.conversationGroupList.push(o3), s3 = true);
          });
        }), true === s3 && this._emitConvUpdate(), true === r3) && this._emitConvGroupListUpdate();
      } }, { key: "onConvGroupDeleted", value: function(e3) {
        var n3, o3 = this, i3 = (M2.l("".concat(this._n, ".onConvGroupDeleted groupItemList:"), e3), []);
        O2(e3) && (n3 = false, e3.forEach(function(e4) {
          var t3 = e4.groupID, e4 = e4.groupName;
          o3._convGroupMap.has(t3) && (o3._convGroupMap.delete(t3), n3 = true, i3.push(e4));
        }), true === n3) && this._emitConvGroupListUpdate(), this._eraseFromConversationGroupList(i3);
      } }, { key: "_eraseFromConversationGroupList", value: function(t3) {
        S2(t3) || (this._convM.getLocalConvList().forEach(function(e3) {
          e3.conversationGroupList = e3.conversationGroupList.filter(function(e4) {
            return !t3.includes(e4);
          });
        }), this._emitConvUpdate());
      } }, { key: "onConvGroupNameUpdated", value: function(e3) {
        M2.l("".concat(this._n, ".onConvGroupNameUpdated options:"), e3);
        var t3, n3, o3, i3 = e3.groupID, a3 = e3.groupName, s3 = e3.oldGroupName;
        this._convGroupMap.get(i3) !== a3 && (this._convGroupMap.set(i3, a3), this._emitConvGroupListUpdate(), e3 = this._convM.getLocalConvList(), o3 = false, e3.forEach(function(e4) {
          t3 = e4.conversationGroupList, -1 !== (n3 = t3.indexOf(s3)) && (t3.splice(n3, 1, a3), o3 = true);
        }), true === o3) && this._emitConvUpdate();
      } }, { key: "onConvInGroupUpdated", value: function(e3) {
        var n3, o3, i3, a3 = this, s3 = (M2.l("".concat(this._n, ".onConvInGroupUpdated options:"), e3), e3.oldGroupName), e3 = e3.recentContactUpdateGroupItem;
        O2(e3) && (i3 = false, e3.forEach(function(e4) {
          var t3 = e4.contactOptType, e4 = e4.recentContactItem;
          n3 = a3._concatConvID(e4), (n3 = a3._getLocalConv(n3)) && (o3 = n3.conversationGroupList.indexOf(s3), 1 === t3 ? -1 === o3 && (n3.conversationGroupList.push(s3), i3 = true) : 2 === t3 && -1 !== o3 && (n3.conversationGroupList.splice(o3, 1), i3 = true));
        }), true === i3) && (this._emitConvUpdate(), this._emitConvInGroupUpdate(s3));
      } }, { key: "onConvAddedToOrDeletedFromGroup", value: function(e3) {
        var n3, o3, i3 = this, t3 = (M2.l("".concat(this._n, ".onConvAddedToOrDeletedFromGroup options:"), e3), e3.msgRecentContactItem), e3 = e3.msgRecentContactUpdateContactItem, t3 = this._concatConvID(t3), a3 = this._getLocalConv(t3);
        a3 && O2(e3) && (o3 = false, e3.forEach(function(e4) {
          var t4 = e4.groupOptType, e4 = e4.recentContactGroupItem.groupName;
          n3 = a3.conversationGroupList.indexOf(e4), 1 === t4 ? -1 === n3 && (a3.conversationGroupList.push(e4), o3 = true) : 2 === t4 && -1 !== n3 && (a3.conversationGroupList.splice(n3, 1), o3 = true), true === o3 && i3._emitConvInGroupUpdate(e4);
        }), true === o3) && this._emitConvUpdate();
      } }, { key: "onConvGroupListSynced", value: function(e3) {
        O2(e3) && 0 !== e3.length && (M2.l("".concat(this._n, ".onConvGroupListSynced groupItem:"), e3), this._fillConvGroupMap(e3));
      } }, { key: "getConvGroupListByID", value: function(e3) {
        var t3, n3 = this;
        if (!S2(e3))
          return t3 = [], e3.forEach(function(e4) {
            n3._convGroupMap.has(e4) && t3.push(n3._convGroupMap.get(e4));
          }), t3;
      } }, { key: "_onConvNotFound", value: function(e3, t3) {
        e3.push({ conversationID: t3, code: k2.CONV_NOT_FOUND, message: this._convM.getErrMsg(k2.CONV_NOT_FOUND) });
      } }, { key: "_onConvIDInvalid", value: function(e3, t3) {
        e3.push({ conversationID: t3, code: k2.INVALID_CONV_ID, message: this._convM.getErrMsg(k2.INVALID_CONV_ID) });
      } }, { key: "_getFlagBit", value: function(e3) {
        for (var t3 = e3.toString(2), n3 = t3.length, o3 = n3 - 1; 0 <= o3; o3--)
          if ("1" === t3[o3])
            return n3 - o3 - 1;
      } }, { key: "_concatConvID", value: function(e3) {
        var t3, n3 = e3.type, o3 = e3.to, i3 = e3.groupID, e3 = e3.userID;
        return 1 === n3 ? N2(e3) ? N2(o3) || (t3 = "".concat(R2.CONV_C2C).concat(o3)) : t3 = "".concat(R2.CONV_C2C).concat(e3) : 2 === n3 && (t3 = "".concat(R2.CONV_GROUP).concat(i3)), t3;
      } }, { key: "_getMyUserID", value: function() {
        return this._convM.getMyUserID();
      } }, { key: "_getLocalConv", value: function(e3) {
        return this._convM.getLocalConversation(e3);
      } }, { key: "_hasLocalConv", value: function(e3) {
        return this._convM.hasLocalConversation(e3);
      } }, { key: "_emitConvUpdate", value: function() {
        this._convM.emitConvUpdate(true, false);
      } }, { key: "_emitConvGroupListUpdate", value: function() {
        this._convM.emitOEvt(h2.CONVERSATION_GROUP_LIST_UPDATED, d2(this._convGroupMap.values()));
      } }, { key: "_emitConvInGroupUpdate", value: function(t3) {
        var e3 = { groupName: t3, conversationList: [] }, n3 = this._convM.getLocalConvList();
        e3.conversationList = n3.filter(function(e4) {
          return e4.conversationGroupList.includes(t3);
        }), this._convM.emitOEvt(h2.CONVERSATION_IN_GROUP_UPDATED, e3);
      } }, { key: "reset", value: function() {
        M2.l("".concat(this._n, ".reset")), this._convGroupMap.clear(), this._startIndex = 0, this._pagingStatus = bn;
      } }]), Zo = (t2(Li, c2), e2(Li, [{ key: "_initListeners", value: function() {
        var e3 = this.getIEmitInst();
        e3.on(U2.A2KEY_AND_TINYID_UPDATED, this._init, this), e3.on(U2.PROFILE_UPDATED, this._onProfileUpdated, this), e3.on(U2.CLOUD_CONFIG, this._onCloudConfig, this);
      } }, { key: "_init", value: function() {
        var e3 = this, t3 = (M2.l("".concat(this._n, "._init")), this.get(13).getItem("conversationMap")), n3 = this.isIntl(), o3 = this.isUsingChatCore();
        if (t3) {
          for (var i3 = t3.length, a3 = 0; a3 < i3; a3++) {
            var s3 = t3[a3];
            if (s3) {
              if (this._isNonExistentAccount(s3.conversationID))
                continue;
              if (s3.groupProfile && Gt2(s3.groupProfile.type))
                continue;
            }
            this._convMap.set(s3.conversationID, new jo(t3[a3], n3, o3));
          }
          this.emitConvUpdate(true, false);
        }
        this.ready(function() {
          0 < e3._tmpGroupList.length && (e3.updateConvGroupProfile(e3._tmpGroupList), e3._tmpGroupList.length = 0);
        }), this.syncConvList();
      } }, { key: "_isNonExistentAccount", value: function(e3) {
        var t3;
        return "@TLS#ERROR" === (t3 = e3.startsWith(R2.CONV_C2C) ? e3.replace(R2.CONV_C2C, "") : t3) || "@TLS#NOT_FOUND" === t3;
      } }, { key: "onCheckTimer", value: function(e3) {
        this.isLoggedIn() && this._msgListHandler.onCheckTimer(e3);
      } }, { key: "onMessageSent", value: function(e3) {
        this._onSendOrRcvMsg({ conversationOptionsList: e3.conversationOptionsList, isInstantMessage: true });
      } }, { key: "onNewMessage", value: function(e3) {
        this._onSendOrRcvMsg(e3);
      } }, { key: "_onSendOrRcvMsg", value: function(e3) {
        var t3 = this, n3 = e3.conversationOptionsList, o3 = e3.isInstantMessage, o3 = void 0 === o3 || o3, i3 = e3.isUnreadC2CMessage, i3 = void 0 !== i3 && i3, a3 = e3.updateUnreadCount, a3 = void 0 === a3 || a3, s3 = e3.isSyncingEnded, s3 = void 0 !== s3 && s3;
        this._isReady ? 0 !== n3.length ? (true === o3 && this._checkNewConv(n3), this._updateLocalConvList({ conversationOptionsList: n3, isInstantMessage: o3, isUnreadC2CMessage: i3, isFromGetConversations: false, updateUnreadCount: a3 }), o3 || (this._convIDFromUnreadDBMap = new Map([].concat(d2(this._convIDFromUnreadDBMap), d2(n3.map(function(e4) {
          return [e4.conversationID, 1];
        })))), this._diffAndDeleteConv(), s3 && this.emitIEvt(U2.C2C_UNREAD_HANDLE_COMPLETED)), 0 < n3.filter(function(e4) {
          return !t3._isConvNeedShow(e4.conversationID);
        }).length || this.emitConvUpdate()) : s3 && this.emitIEvt(U2.C2C_UNREAD_HANDLE_COMPLETED) : this.ready(function() {
          t3._onSendOrRcvMsg(e3);
        });
      } }, { key: "updateConvGroupProfile", value: function(e3) {
        var n3, o3 = this;
        O2(e3) && 0 === e3.length || (0 !== this._convMap.size ? (n3 = false, e3.forEach(function(e4) {
          var t3 = "".concat(R2.CONV_GROUP).concat(e4.groupID);
          o3._convMap.has(t3) && (n3 = true, (t3 = o3._convMap.get(t3)).groupProfile = JSON.parse(JSON.stringify(e4)), t3.lastMessage.lastSequence < e4.nextMessageSeq && (t3.lastMessage.lastSequence = e4.nextMessageSeq - 1), t3.subType || (t3.subType = e4.type));
        }), n3 && this.emitConvUpdate(true, false)) : this._tmpGroupList = e3);
      } }, { key: "onMessageRevoked", value: function(e3, t3) {
        var n3, o3, i3, a3 = this;
        0 !== e3.length && (n3 = null, o3 = false, i3 = [], e3.forEach(function(e4) {
          (n3 = a3._convMap.get(e4.conversationID)) && (t3 && n3.reduceUnreadCount() && (o3 = n3.type !== R2.CONV_TOPIC), n3.type === R2.CONV_TOPIC ? i3.push(e4) : n3.isLastMessageRevoked({ sequence: e4.sequence, time: e4.time }) && (n3.setLastMessageRevoked(true), n3.setLastMessageRevoker(e4.revoker), o3 = true));
        }), this.get(10).onMessageRevoked(i3), o3) && this.emitConvUpdate(true, false);
      } }, { key: "updateRevokerInfo", value: function(u3) {
        for (var e3 = /* @__PURE__ */ new Set(), t3 = 0; t3 < u3.length; t3++) {
          var n3 = u3[t3].revoker;
          e3.add(n3);
        }
        var o3 = d2(e3), i3 = this.get(4);
        return new Promise(function(c3) {
          i3.getUserProfile({ userIDList: o3 }).then(function(e4) {
            e4 = e4.data;
            if (!O2(e4) || 0 === e4.length)
              return c3(u3);
            var t4, n4 = {}, o4 = F2(e4);
            try {
              for (o4.s(); !(t4 = o4.n()).done; ) {
                var i4 = t4.value, a3 = i4.userID, s3 = i4.nick, r3 = i4.avatar;
                n4[a3] = { nick: s3, avatar: r3 };
              }
            } catch (e5) {
              o4.e(e5);
            } finally {
              o4.f();
            }
            u3.forEach(function(e5) {
              var t5 = e5.revoker;
              n4[t5] && (e5.revokerInfo.nick = n4[t5].nick || "", e5.revokerInfo.avatar = n4[t5].avatar || "");
            }), c3(u3);
          }).catch(function() {
            c3(u3);
          });
        });
      } }, { key: "isLastMessageRevoked", value: function(e3) {
        var t3 = false, n3 = e3.conversationID, o3 = e3.sequence, i3 = e3.time, a3 = this._convMap.get(n3);
        return a3 && (t3 = a3.type === R2.CONV_TOPIC ? this.get(10).isLastMessageRevoked({ topicID: n3.replace(R2.CONV_GROUP, ""), sequence: o3 }) : a3.isLastMessageRevoked({ sequence: o3, time: i3 })), M2.l("".concat(this._n, ".isLastMessageRevoked options:"), e3, "ret:".concat(t3)), t3;
      } }, { key: "onMessageDeleted", value: function(e3) {
        var t3 = this;
        if (0 !== e3.length) {
          var n3 = null;
          e3.forEach(function(e4) {
            (n3 = t3._msgListHandler.getLocalMsg(e4.conversationID, e4.ID)) && (n3.isDeleted = true), e4 !== n3 && (e4.isDeleted = true);
          });
          for (var e3 = e3[0].conversationID, o3 = this._msgListHandler.getLocalMsgList(e3), i3 = {}, a3 = o3.length - 1; 0 <= a3; a3--)
            if (!o3[a3].isDeleted) {
              i3 = o3[a3];
              break;
            }
          var s3, r3 = this._convMap.get(e3);
          r3 && (s3 = false, r3.lastMessage.lastSequence === i3.sequence && r3.lastMessage.lastTime === i3.time || (S2(i3) && (i3 = void 0), r3.updateLastMessage(i3), r3.type !== R2.CONV_TOPIC && (s3 = true), M2.l("".concat(this._n, ".onMessageDeleted. update convID:").concat(e3, " with lastMessage:"), r3.lastMessage)), e3.startsWith(R2.CONV_C2C) && this.updateUnreadCount(e3), s3) && this.emitConvUpdate(true, false);
        }
      } }, { key: "onMessageModified", value: function(e3) {
        var t3 = "".concat(this._n, ".onMessageModified"), n3 = e3.conversationType, o3 = e3.from, i3 = e3.to, a3 = e3.time, s3 = e3.sequence, r3 = e3.elements, c3 = e3.cloudCustomData, u3 = e3.messageVersion, l3 = this.getMyUserID(), d3 = "".concat(n3).concat(i3), l3 = (i3 === l3 && n3 === R2.CONV_C2C && (d3 = "".concat(n3).concat(o3)), this._msgListHandler.onMsgModified(d3, e3)), n3 = l3.isUpdated, l3 = l3.message, p3 = (true === n3 && this.emitOEvt(h2.MESSAGE_MODIFIED, [l3]), this._isTopicConv(d3));
        return null === l3 ? M2.l("".concat(t3, " message is null! options:"), e3) : M2.l("".concat(t3, " isUpdated:").concat(n3, " isTopicMessage:").concat(p3, " from:").concat(o3, " to:").concat(i3, " sequence:").concat(l3.sequence, " time:").concat(l3.time)), p3 ? this.get(10).onMessageModified(e3) : (n3 = this._convMap.get(d3)) && (o3 = n3.lastMessage) && o3.lastTime === a3 && o3.lastSequence === s3 && o3.version !== u3 && (M2.l("".concat(t3, " convID:").concat(d3, " lastMessage updated")), o3.type = r3[0].type, o3.payload = r3[0].content, o3.messageForShow = Zt2(o3.type, o3.payload, this.isIntl()), o3.cloudCustomData = c3, o3.version = u3, this.emitConvUpdate(true, false)), l3;
      } }, { key: "onNewGroupAtTips", value: function(e3) {
        var t3 = this, e3 = e3.dataList, n3 = null;
        e3.forEach(function(e4) {
          e4.groupAtTips ? n3 = e4.groupAtTips : e4.elements ? n3 = y2(y2({}, e4.elements), {}, { sync: true }) : e4.groupAtType && (n3 = y2(y2({}, e4), {}, { sync: true })), n3.__random = e4.random, n3.__sequence = e4.clientSequence, t3._tmpGroupAtTipsList.push(n3);
        }), M2.l("".concat(this._n, ".onNewGroupAtTips isReady:").concat(this._isReady), this._tmpGroupAtTipsList), this._isReady && this._handleGroupAtTipsList();
      } }, { key: "_handleGroupAtTipsList", value: function() {
        var a3, s3 = this;
        0 !== this._tmpGroupAtTipsList.length && (a3 = false, this._tmpGroupAtTipsList.forEach(function(e3) {
          var t3 = e3.groupID, n3 = e3.from, o3 = e3.topicID, o3 = void 0 === o3 ? void 0 : o3, i3 = e3.sync, i3 = void 0 !== i3 && i3;
          n3 !== s3.getMyUserID() && (N2(o3) ? (n3 = s3._convMap.get("".concat(R2.CONV_GROUP).concat(t3))) && (n3.updateGroupAtInfoList(e3), a3 = true) : ((t3 = s3._convMap.get("".concat(R2.CONV_GROUP).concat(o3))) && (t3.updateGroupAtInfoList(e3), s3.get(10).onAtInfoUpdated({ topicID: o3, groupAtInfoList: t3.groupAtInfoList })), S2(t3) && i3 && (s3.updateTopicConversation([{ conversationID: "".concat(R2.CONV_GROUP).concat(o3), type: R2.CONV_TOPIC }]), s3._convMap.get("".concat(R2.CONV_GROUP).concat(o3)).updateGroupAtInfoList(e3))));
        }), a3 && this.emitConvUpdate(true, false), this._tmpGroupAtTipsList.length = 0);
      } }, { key: "_checkNewConv", value: function(e3) {
        var t3 = this, n3 = [], o3 = [];
        e3.forEach(function(e4) {
          t3._convMap.has(e4.conversationID) || (e4.type === R2.CONV_C2C ? n3.push(e4.conversationID.replace(R2.CONV_C2C, "")) : e4.type === R2.CONV_GROUP && o3.push(e4.conversationID.replace(R2.CONV_GROUP, "")));
        }), 0 < n3.length && (this._onNewC2CConv(n3), n3 = null), 0 < o3.length && (this._onNewGroupConv(o3), o3 = null);
      } }, { key: "_onNewC2CConv", value: function(e3) {
        var t3 = this.get(6);
        return Promise.all([t3.getRemotePeerReadTime(e3), this._msgRemindHandler.getC2CMsgRemindType(e3), this._convGroupHandler.searchConvGroupAndMark(e3, 1)]);
      } }, { key: "_onNewGroupConv", value: function(e3) {
        var t3 = this.get(7);
        return t3 ? Promise.all([t3.getMsgRemindType(e3), this._convGroupHandler.searchConvGroupAndMark(e3, 2)]) : Promise.resolve();
      } }, { key: "_setStorageConvList", value: function() {
        var e3 = 0 < arguments.length && void 0 !== arguments[0] && arguments[0], t3 = this.getLocalConvList().filter(function(e4) {
          return e4.type === R2.CONV_C2C || e4.type === R2.CONV_GROUP && e4.lastMessage.type !== R2.MSG_GRP_TIP;
        }).slice(0, 20).map(function(e4) {
          return { conversationID: e4.conversationID, type: e4.type, subType: e4.subType, lastMessage: e4.lastMessage, groupProfile: e4.groupProfile, userProfile: e4.userProfile };
        });
        this.get(13).setItem("conversationMap", t3, e3);
      } }, { key: "emitConvUpdate", value: function() {
        var e3 = !(0 < arguments.length && void 0 !== arguments[0]) || arguments[0], t3 = !(1 < arguments.length && void 0 !== arguments[1]) || arguments[1], n3 = this.getLocalConvList();
        t3 && (t3 = this.get(7)) && t3.updateGroupLastMessage(n3), e3 && (this.get(12).isPartialUpdatedConvs() ? (this._diffConvMap(this._convMapForDiff, this._convMap), 0 < this._partialUpdatedConvMap.size && (this.emitOEvt(h2.CONVERSATION_LIST_UPDATED), this.onTotalUnreadCountUpdate(), this._convMapForDiff.clear(), this._convMapForDiff = gt2(this._convMap, true)), 0 === this._convMapForDiff.size && (this._convMapForDiff = gt2(this._convMap, true))) : (this.emitOEvt(h2.CONVERSATION_LIST_UPDATED), this.onTotalUnreadCountUpdate()));
      } }, { key: "_diffConvMap", value: function(e3, t3) {
        var n3, o3 = F2(t3);
        try {
          for (o3.s(); !(n3 = o3.n()).done; ) {
            var i3 = j2(n3.value, 2), a3 = i3[0], s3 = i3[1];
            e3.has(a3) && JSON.stringify(s3) === e3.get(a3) || this._partialUpdatedConvMap.set(a3, s3);
          }
        } catch (e4) {
          o3.e(e4);
        } finally {
          o3.f();
        }
      } }, { key: "getPartialUpdatedConvs", value: function() {
        var e3 = d2(gt2(this._partialUpdatedConvMap, false).values());
        return this._partialUpdatedConvMap.clear(), e3;
      } }, { key: "getLocalConvList", value: function() {
        var t3 = this;
        return d2(this._convMap.values()).filter(function(e3) {
          return t3._isConvNeedShow(e3.conversationID);
        });
      } }, { key: "getLocalConversation", value: function(e3) {
        return this._convMap.get(e3);
      } }, { key: "hasLocalConversation", value: function(e3) {
        return this._convMap.has(e3);
      } }, { key: "getLocalOldestMessage", value: function(e3) {
        return this._msgListHandler.getLocalOldestMsg(e3);
      } }, { key: "syncConvList", value: function() {
        var o3 = this, e3 = !(0 < arguments.length && void 0 !== arguments[0]) || arguments[0], i3 = "syncConvList", a3 = new P2(i3);
        return this._pagingStatus === bn && this._convMap.clear(), this._pagingGetConvList(e3).then(function(e4) {
          var t3 = on(o3._pagingGetCostList), n3 = nn(o3._pagingGetCostList), n3 = (o3._pagingGetCostList.length = 0, o3._pagingStatus = Fn, o3._diffAndDeleteConv(), o3.emitConvUpdate(true, false), o3._setStorageConvList(), o3._handleC2CPeerReadTime(), o3.emitIEvt(U2.CONV_SYNC_COMPLETED), "count:".concat(o3._convMap.size, " sum:").concat(n3, " avg:").concat(t3));
          return M2.l("".concat(o3._n, ".").concat(i3, ". ").concat(n3)), a3.setMessage(n3).end(), e4;
        }).catch(function(e4) {
          return o3._pagingStatus = qn, a3.setMessage(o3._pagingTs).setError(e4).end(), E2(e4);
        });
      } }, { key: "_diffAndDeleteConv", value: function() {
        var n3, o3 = this;
        this._isSyncCompleted() && (n3 = [], this._convMap.forEach(function(e3, t3) {
          !o3._pagingConvIDMap.has(t3) && o3._convIDFromUnreadDBMap.has(t3) && (o3._convMap.delete(t3), n3.push(t3));
        }), M2.l("".concat(this._n, "._diffAndDeleteConv list:").concat(n3)), n3 = null);
      } }, { key: "_pagingGetConvList", value: function() {
        var r3 = this, e3 = !(0 < arguments.length && void 0 !== arguments[0]) || arguments[0], c3 = "".concat(this._n, "._pagingGetConvList"), u3 = (M2.l("".concat(c3, " incrementalPullFlag:").concat(e3, " ts:").concat(this._pagingTs, " startIdx:").concat(this._pagingStartIdx) + " pinnedTs:".concat(this._pagingPinnedTs, " pinnedStartIdx:").concat(this._pagingPinnedStartIdx)), Date.now());
        return this._pagingStatus = wn, this.req({ P: G2.PAGING_GET_CONV_LIST, data: { fromAccount: this.getMyUserID(), timeStamp: e3 ? this._pagingTs : 0, startIndex: e3 ? this._pagingStartIdx : 0, pinnedTimeStamp: e3 ? this._pagingPinnedTs : 0, pinnedStartIndex: e3 ? this._pagingPinnedStartIdx : 0, orderType: 1 } }).then(function(e4) {
          var e4 = e4.data, t3 = e4.completeFlag, n3 = e4.conversations, n3 = void 0 === n3 ? [] : n3, o3 = e4.timeStamp, i3 = e4.startIndex, a3 = e4.pinnedTimeStamp, s3 = e4.pinnedStartIndex, e4 = e4.groupItem;
          if (r3._pagingGetCostList.push(an(u3, false)), M2.l("".concat(c3, " ok. completeFlag:").concat(t3, " count:").concat(n3.length, " cost:").concat(an(u3))), r3._convGroupHandler.onConvGroupListSynced(e4), 0 < n3.length && (e4 = r3._getConvOptions(n3), r3._pagingConvIDMap = new Map([].concat(d2(r3._pagingConvIDMap), d2(e4.map(function(e5) {
            return [e5.conversationID, 1];
          })))), r3._updateLocalConvList({ conversationOptionsList: e4, isFromGetConversations: true, updateUnreadCount: true }), r3.isLoggedIn()) && r3.emitConvUpdate(), !r3._isReady) {
            if (!r3.isLoggedIn())
              return D2();
            r3.triggerReady();
          }
          return r3._pagingTs = o3, r3._pagingStartIdx = i3, r3._pagingPinnedTs = a3, r3._pagingPinnedStartIdx = s3, 1 !== t3 ? r3._pagingGetConvList() : (r3._handleGroupAtTipsList(), r3._convGroupHandler.getRemoteConvGroupList(), D2());
        }).catch(function(e4) {
          throw !r3.isLoggedIn() || r3._isReady || (M2.w("".concat(c3, " failed. error:"), e4), r3.triggerReady()), e4;
        });
      } }, { key: "_updateLocalConvList", value: function(e3) {
        var t3 = e3.isFromGetConversations, n3 = Date.now(), e3 = this._getTmpConvListMapping(e3).newConvList;
        this._convMap = new Map(this._sortConvList(d2(this._convMap))), t3 || this._updateUserOrGroupProfile(e3), M2.l("".concat(this._n, "._updateLocalConvList cost:").concat(an(n3)));
      } }, { key: "_getTmpConvListMapping", value: function(e3) {
        for (var t3 = e3.conversationOptionsList, n3 = e3.isFromGetConversations, o3 = e3.isInstantMessage, i3 = e3.isUnreadC2CMessage, a3 = void 0 !== i3 && i3, s3 = e3.updateUnreadCount, r3 = [], c3 = [], u3 = this.get(7), l3 = this.get(8), d3 = this.isIntl(), p3 = this.isUsingChatCore(), _3 = 0, h3 = t3.length; _3 < h3; _3++) {
          var g3 = new jo(t3[_3], d3, p3), f3 = g3.conversationID, m3 = g3.type;
          if (!this._isNonExistentAccount(f3)) {
            if (this._convMap.has(f3)) {
              var v3 = this._convMap.get(f3);
              if (n3 && m3 !== R2.CONV_TOPIC) {
                this._convMap.set(f3, g3), m3 === R2.CONV_C2C ? g3.unreadCount = v3.unreadCount : m3 === R2.CONV_GROUP && (g3.groupProfile = JSON.parse(JSON.stringify(v3.groupProfile)));
                continue;
              }
              var I3 = ["unreadCount", "allowType", "adminForbidType", "payload"], M3 = (false === o3 && I3.push("lastMessage"), "boolean" == typeof o3 && I3.push("isPinned"), t3[_3].lastMessage), y3 = !N2(M3);
              y3 || t3[_3].type === R2.CONV_TOPIC || this._onLastMsgNotExist(t3[_3]), N2(o3) && y3 && null === v3.lastMessage.payload && (v3.lastMessage.payload = M3.payload), S2(v3.lastMessage.revoker) || (v3.lastMessage.revoker = null), ht2(v3, g3, I3, [null, void 0, "", 0, NaN]), true === s3 && v3.updateUnreadCount({ nextUnreadCount: g3.unreadCount, isFromGetConversations: n3, isUnreadC2CMessage: a3 }), o3 && y3 && (M3.payload && (v3.lastMessage.payload = M3.payload), v3.type === R2.CONV_GROUP) && (v3.lastMessage.nameCard = M3.nameCard, v3.lastMessage.nick = M3.nick), y3 && v3.lastMessage.cloudCustomData !== M3.cloudCustomData && (v3.lastMessage.cloudCustomData = M3.cloudCustomData || "");
            } else
              m3 === R2.CONV_GROUP && u3 ? (I3 = g3.groupProfile.groupID, (y3 = u3.getLocalGroupProfile(I3)) && (g3.groupProfile = y3, true === s3) && g3.updateUnreadCount({ nextUnreadCount: 0 })) : m3 === R2.CONV_C2C && (v3 = f3.replace(R2.CONV_C2C, ""), l3) && l3.isMyFriend(v3) && (g3.remark = l3.getFriendRemark(v3)), r3.push(g3), this._convMap.set(f3, g3);
            this._convMap.get(f3).type === R2.CONV_TOPIC && c3.push(this._convMap.get(f3));
          }
        }
        for (var C3 = this.get(10), T3 = 0, D3 = c3.length; T3 < D3; T3++) {
          var E3 = c3[T3], L3 = E3.conversationID, E3 = E3.groupAtInfoList;
          S2(E3) || C3.onAtInfoUpdated({ topicID: L3.replace(R2.CONV_GROUP, ""), groupAtInfoList: E3 });
        }
        return { newConvList: r3 };
      } }, { key: "_onLastMsgNotExist", value: function(e3) {
        new P2("lastMsgNotExist").setMessage(JSON.stringify(e3)).end();
      } }, { key: "_sortConvList", value: function(e3) {
        var t3 = [], n3 = [], o3 = [], i3 = [];
        return e3.forEach(function(e4) {
          (true === e4[1].isPinned ? S2(e4[1].lastMessage.lastTime) ? n3 : t3 : S2(e4[1].lastMessage.lastTime) ? i3 : o3).push(e4);
        }), t3.sort(function(e4, t4) {
          return t4[1].lastMessage.lastTime - e4[1].lastMessage.lastTime;
        }).concat(n3).concat(o3.sort(function(e4, t4) {
          return t4[1].lastMessage.lastTime - e4[1].lastMessage.lastTime;
        })).concat(i3);
      } }, { key: "_sortConvListAndEmitEvent", value: function() {
        this._convMap = new Map(this._sortConvList(d2(this._convMap))), this.emitConvUpdate(true, false);
      } }, { key: "_updateUserOrGroupProfile", value: function(e3) {
        var n3, o3, t3, i3, a3 = this;
        0 !== e3.length && (n3 = [], o3 = [], t3 = this.get(4), i3 = this.get(7), e3.forEach(function(e4) {
          var t4;
          e4.type === R2.CONV_C2C ? n3.push(e4.toAccount) : e4.type === R2.CONV_GROUP && (t4 = e4.toAccount, i3.hasLocalGroup(t4) ? e4.groupProfile = i3.getLocalGroupProfile(t4) : o3.push(t4));
        }), M2.l("".concat(this._n, "._updateUserOrGroupProfile userIDList:").concat(n3, " groupIDList:").concat(o3)), 0 < n3.length && t3.getUserProfile({ userIDList: n3 }).then(function(e4) {
          e4 = e4.data;
          O2(e4) ? e4.forEach(function(e5) {
            a3._doUpdateUserProfile("".concat(R2.CONV_C2C).concat(e5.userID), e5);
          }) : a3._doUpdateUserProfile("".concat(R2.CONV_C2C).concat(e4.userID), e4);
        }), 0 < o3.length) && i3.getGroupProfileAdvance({ groupIDList: o3, responseFilter: { groupBaseInfoFilter: ["Type", "Name", "FaceUrl"] } }).then(function(e4) {
          var e4 = e4.data.successGroupList, n4 = false;
          e4.forEach(function(e5) {
            var t4 = "".concat(R2.CONV_GROUP).concat(e5.groupID);
            a3._convMap.has(t4) && (t4 = a3._convMap.get(t4), ht2(t4.groupProfile, e5, [], [null, void 0, "", 0, NaN]), !t4.subType && e5.type && (t4.subType = e5.type), n4 = true);
          }), n4 && a3.emitConvUpdate();
        });
      } }, { key: "_doUpdateUserProfile", value: function(e3, t3) {
        this.hasLocalConversation(e3) && (this.getLocalConversation(e3).userProfile = t3, this.emitConvUpdate());
      } }, { key: "_getConvOptions", value: function(e3) {
        var n3 = this, o3 = [], e3 = e3.filter(function(e4) {
          var t3 = e4.type, e4 = e4.userID;
          return 1 === t3 && !n3._isNonExistentAccount(e4) || 2 === t3;
        }), i3 = this.getMyUserID(), e3 = e3.map(function(e4) {
          var t3;
          return N2(e4.lastMsg) && (e4.lastMsg = { elements: [] }), 1 === e4.type ? (t3 = { userID: e4.userID, nick: e4.peerNick, avatar: e4.peerAvatar }, o3.push(t3), { conversationID: "".concat(R2.CONV_C2C).concat(e4.userID), type: R2.CONV_C2C, lastMessage: { lastTime: e4.time, lastSequence: e4.sequence, fromAccount: e4.lastC2CMsgFromAccount, type: e4.lastMsg.elements[0] ? e4.lastMsg.elements[0].type : null, payload: e4.lastMsg.elements[0] ? n3._amendLayersOverLimitProp(e4.lastMsg.elements[0].content, e4.lastMsg.elements[0].type) : null, cloudCustomData: e4.lastMsg.cloudCustomData || "", isRevoked: 8 === e4.lastMessageFlag, onlineOnlyFlag: false, nick: "", nameCard: "", version: 0, isPeerRead: e4.lastC2CMsgFromAccount === i3 && e4.time <= e4.c2cPeerReadTime, revoker: e4.lastMsg.revokerInfo ? e4.lastMsg.revokerInfo.revoker : null }, unreadCount: 0, userProfile: new Ho(t3), peerReadTime: e4.c2cPeerReadTime, isPinned: 1 === e4.isPinned, customData: e4.customMark || "", markList: $t2(e4.standardMark), conversationGroupList: n3._convGroupHandler.getConvGroupListByID(e4.contactGroupId), remark: e4.friendRemark || "", messageRemindType: n3._transMsgRemindType(e4.messageRemindType) }) : { conversationID: "".concat(R2.CONV_GROUP).concat(e4.groupID), type: R2.CONV_GROUP, lastMessage: y2(y2({ lastTime: e4.time, lastSequence: e4.sequence, fromAccount: e4.msgGroupFromAccount }, n3._patchTypeAndPayload(e4)), {}, { cloudCustomData: e4.lastMsg.cloudCustomData || "", isRevoked: 2 === e4.lastMessageFlag, onlineOnlyFlag: false, nick: e4.senderNick || "", nameCard: e4.senderNameCard || "", revoker: e4.lastMsg.revokerInfo ? e4.lastMsg.revokerInfo.revoker : null }), groupProfile: new Yo({ groupID: e4.groupID, name: e4.groupNick, avatar: e4.groupImage, type: e4.groupType, nextMessageSeq: e4.nextMessageSeq }), unreadCount: n3._computeGroupUnreadCount(e4), peerReadTime: 0, isPinned: 1 === e4.isPinned, version: 0, customData: e4.customMark || "", markList: $t2(e4.standardMark), conversationGroupList: n3._convGroupHandler.getConvGroupListByID(e4.contactGroupId), messageRemindType: n3._transMsgRemindType(e4.messageRemindType) };
        });
        return 0 < o3.length && this.get(4).onConvProfileUpdated(o3), e3;
      } }, { key: "_transMsgRemindType", value: function(e3) {
        var t3 = "";
        return 0 === e3 ? t3 = R2.MSG_REMIND_ACPT_AND_NOTE : 1 === e3 ? t3 = R2.MSG_REMIND_DISCARD : 2 === e3 ? t3 = R2.MSG_REMIND_ACPT_NOT_NOTE : 3 === e3 && (t3 = R2.NOT_RECEIVE_OFFLINE_PUSH_EXCEPT_AT), t3;
      } }, { key: "_computeGroupUnreadCount", value: function(e3) {
        var t3 = e3.unreadCount, e3 = e3.noUnreadCount, t3 = (void 0 === t3 ? 0 : t3) - (void 0 === e3 ? 0 : e3);
        return 0 < t3 ? t3 : 0;
      } }, { key: "_patchTypeAndPayload", value: function(e3) {
        var e3 = e3.lastMsg, t3 = e3.event, n3 = e3.elements, n3 = void 0 === n3 ? [] : n3, e3 = e3.groupTips, e3 = void 0 === e3 ? {} : e3;
        return N2(void 0 === t3 ? void 0 : t3) || S2(e3) ? { type: n3[0] ? n3[0].type : null, payload: n3[0] ? this._amendLayersOverLimitProp(n3[0].content, n3[0].type) : null } : ((t3 = new So(e3)).setElement({ type: R2.MSG_GRP_TIP, content: y2(y2({}, e3.elements), {}, { groupProfile: e3.groupProfile }) }), n3 = JSON.parse(JSON.stringify(t3.payload)), t3 = null, { type: R2.MSG_GRP_TIP, payload: n3 });
      } }, { key: "_amendLayersOverLimitProp", value: function(e3, t3) {
        var n3 = this.getFileDownloadProxy(), o3 = this.getDownloadFileAuthKey(), i3 = this.get(17).getFileDNList(), a3 = e3.layersOverLimit, s3 = null;
        return t3 === R2.MSG_IMAGE && (s3 = new _o(e3, n3, o3, i3)), t3 === R2.MSG_VIDEO && (s3 = new Co(e3, n3, o3, i3)), t3 === R2.MSG_SOUND && (s3 = new go(e3, n3, o3, i3)), t3 === R2.MSG_FILE && ((s3 = new Mo(e3, n3, o3, i3)).content.url = void 0), 0 === a3 ? e3.layersOverLimit = false : 1 === a3 && (e3.layersOverLimit = true), s3 && Object.assign(e3, s3.content), e3;
      } }, { key: "getLocalMessageList", value: function(e3) {
        return this._msgListHandler.getLocalMsgList(e3);
      } }, { key: "deleteLocalMessage", value: function(e3) {
        e3 instanceof So && this._msgListHandler.remove(e3);
      } }, { key: "onConvDeleted", value: function(e3) {
        O2(e3) && (e3 = e3.map(function(e4) {
          var t3 = e4.type, n3 = e4.userID, e4 = e4.groupID;
          return 1 === t3 ? "".concat(R2.CONV_C2C).concat(n3) : 2 === t3 ? "".concat(R2.CONV_GROUP).concat(e4) : void 0;
        }), M2.l("".concat(this._n, ".onConvDeleted convIDList:").concat(e3)), this.deleteLocalConvList(e3));
      } }, { key: "onConvPinnedStatus", value: function(e3, i3) {
        var a3, s3 = this;
        O2(e3) && (a3 = false, e3.forEach(function(e4) {
          var t3, n3 = e4.type, o3 = e4.userID, e4 = e4.groupID;
          1 === n3 ? t3 = s3.getLocalConversation("".concat(R2.CONV_C2C).concat(o3)) : 2 === n3 && (t3 = s3.getLocalConversation("".concat(R2.CONV_GROUP).concat(e4))), t3 && (M2.l("".concat(s3._n, ".onConvPinnedStatus convID:").concat(t3.conversationID, " localPinned:").concat(t3.isPinned, " remotePinned:").concat(i3)), i3 ? t3.isPinned || (t3.isPinned = true, a3 = true) : t3.isPinned && (t3.isPinned = false, a3 = true));
        }), a3) && this._sortConvListAndEmitEvent();
      } }, { key: "getMessageList", value: function(e3) {
        var r3 = this, c3 = e3.conversationID, t3 = e3.nextReqMessageID, e3 = e3.count, u3 = "".concat(this._n, ".getMessageList"), n3 = this.getLocalConversation(c3), o3 = "";
        if (n3 && n3.groupProfile && (o3 = n3.groupProfile.type), Gt2(o3))
          return M2.l("".concat(u3, " not available in ").concat(o3, ". convID:").concat(c3)), D2({ messageList: [], nextReqMessageID: "", isCompleted: true });
        (N2(e3) || 15 < e3) && (e3 = 15), t3 || this._isMeInCommunity(c3) || this.clearMemMsg(c3);
        var l3 = this._computeRemainingCount({ conversationID: c3, nextReqMessageID: t3 }), n3 = this._completedMap.has(c3);
        if (M2.l("".concat(u3, " convID:").concat(c3, " isEverCleared:").concat(this._isEverCleared(c3), " nextReqMessageID:").concat(t3) + " remainingCount:".concat(l3, " count:").concat(e3, " isCompleted:").concat(n3)), this._needGetHistory({ conversationID: c3, remainingCount: l3, count: e3 }))
          return this.getHistoryMessages({ conversationID: c3, nextReqMessageID: t3, count: 20 }).then(function(e4) {
            var t4 = e4.nextReqID, n4 = e4.storedMessageList, o4 = e4.assembledMessageList, e4 = e4.isPullingCompleted, i3 = r3._completedMap.has(c3), a3 = n4, s3 = (0 < l3 && (a3 = r3._msgListHandler.getLocalMsgList(c3).slice(0, n4.length + l3)), { nextReqMessageID: void 0, messageList: void 0, isCompleted: void 0 }), n4 = (r3._isEverCleared(c3) ? (s3.nextReqMessageID = t4, s3.messageList = o4, s3.isCompleted = e4) : (s3.nextReqMessageID = i3 ? "" : t4, s3.messageList = a3, s3.isCompleted = i3), s3.messageList.filter(function(e5) {
              return e5.isRevoked;
            }) || []), o4 = s3.messageList.map(function(e5) {
              return e5.sequence;
            });
            return M2.l("".concat(u3, " ret.nextReqMessageID:").concat(s3.nextReqMessageID, " ret.isCompleted:").concat(s3.isCompleted, " sequenceList:"), o4), O2(n4) && 0 !== n4.length ? r3.updateRevokerInfo(n4).then(function(e5) {
              return e5.forEach(function(t5) {
                var n5 = t5.revokerInfo;
                s3.messageList = s3.messageList.map(function(e6) {
                  return e6.ID === t5.ID && n5 && (e6.revokeReason = n5.reason || "", e6.revokerInfo = { userID: n5.revoker || e6.revoker, nick: n5.nick, avatar: n5.avatar }), e6;
                });
              }), T2(s3);
            }) : T2(s3);
          });
        this.modifyMessageList(c3);
        o3 = this._getMsgListFromMem({ conversationID: c3, nextReqMessageID: t3, count: e3 });
        return D2(o3);
      } }, { key: "_isEverCleared", value: function(e3) {
        return this._everClearedMap.has(e3);
      } }, { key: "_getMsgListFromMem", value: function(e3) {
        var t3 = e3.conversationID, n3 = e3.nextReqMessageID, e3 = e3.count, o3 = "".concat(this._n, "._getMsgListFromMem"), i3 = this._msgListHandler.getLocalMsgList(t3), a3 = i3.length, s3 = bt2(t3), r3 = 0, c3 = { isCompleted: false, nextReqMessageID: "", messageList: [] }, e3 = (n3 ? (r3 = s3 ? i3.findIndex(function(e4) {
          return e4.ID === n3;
        }) : i3.findIndex(function(e4) {
          return e4.sequence + "" === n3;
        })) > e3 ? (c3.messageList = i3.slice(r3 - e3, r3), c3.nextReqMessageID = s3 ? i3[r3 - e3].ID : i3[r3 - e3].sequence + "") : (c3.messageList = i3.slice(0, r3), c3.isCompleted = true) : e3 < a3 ? (c3.messageList = i3.slice(r3 = a3 - e3, a3), c3.nextReqMessageID = s3 ? i3[r3].ID : i3[r3].sequence + "") : (c3.messageList = i3.slice(0, a3), c3.isCompleted = true), c3.messageList.map(function(e4) {
          return e4.sequence;
        }));
        return M2.l("".concat(o3, " convID:").concat(t3) + " ret.nextReqMessageID:".concat(c3.nextReqMessageID, " ret.isCompleted:").concat(c3.isCompleted, " sequenceList:").concat(e3)), c3;
      } }, { key: "getMessageListHopping", value: function(e3) {
        var t3, n3, o3 = e3.conversationID, i3 = e3.sequence, a3 = e3.time, s3 = e3.count, e3 = e3.direction, e3 = void 0 === e3 ? 0 : e3;
        return (N2(s3) || 15 < s3) && (s3 = 15), o3.startsWith(R2.CONV_C2C) ? (t3 = this.get(6), n3 = o3.replace(R2.CONV_C2C, ""), t3.getRoamingMessagesHopping({ peerAccount: n3, time: a3, count: s3, direction: e3 })) : o3.startsWith(R2.CONV_GROUP) ? (t3 = this.get(7), n3 = o3.replace(R2.CONV_GROUP, ""), t3.getRoamingMessagesHopping({ groupID: n3, sequence: i3, count: s3, direction: e3 })) : void 0;
      } }, { key: "_computeRemainingCount", value: function(e3) {
        var t3, n3 = e3.conversationID, o3 = e3.nextReqMessageID, e3 = this._msgListHandler.getLocalMsgList(n3), i3 = e3.length;
        return M2.l("".concat(this._n, "._computeRemainingCount convID:").concat(n3, " nextReqMessageID:").concat(o3, " length:").concat(i3)), o3 ? (t3 = 0, bt2(n3) ? t3 = e3.findIndex(function(e4) {
          return e4.ID === o3;
        }) : wt2(n3) && (t3 = -1 !== o3.indexOf("-") ? e3.findIndex(function(e4) {
          return e4.ID === o3;
        }) : e3.findIndex(function(e4) {
          return e4.sequence + "" === o3;
        })), -1 === t3 ? 0 : t3) : i3;
      } }, { key: "_needGetHistory", value: function(e3) {
        var t3 = e3.conversationID, n3 = e3.remainingCount, e3 = e3.count, o3 = this.getLocalConversation(t3), i3 = "";
        return o3 && o3.groupProfile && (i3 = o3.groupProfile.type), !(Ft2(t3) || Gt2(i3) || !this._isEverCleared(t3) && (o3 = n3 <= e3 && !this._completedMap.has(t3), M2.l("".concat(this._n, "._needGetHistory convID:").concat(t3, " ret:").concat(o3)), !o3));
      } }, { key: "_isTopicConv", value: function(e3) {
        e3 = e3.replace(R2.CONV_GROUP, "");
        return Ut2(e3);
      } }, { key: "getHistoryMessages", value: function(e3) {
        var t3, n3, o3, i3, a3, s3, r3 = e3.conversationID, c3 = e3.count, e3 = e3.nextReqMessageID;
        return r3 === R2.CONV_SYSTEM ? D2() : (c3 = 20 < c3 ? 20 : 15, t3 = null, bt2(r3) ? (s3 = 0, n3 = "", o3 = false, a3 = this._roamingMsgKeyAndTimeMap.has(r3), e3 && (o3 = true, a3 ? (s3 = this._roamingMsgKeyAndTimeMap.get(r3).lastMessageTime, n3 = this._roamingMsgKeyAndTimeMap.get(r3).messageKey) : (i3 = this._msgListHandler.findMessage(e3)) && (s3 = i3.time, M2.l("".concat(this._n, ".getHistoryMessages convID:").concat(r3, " isRelayInfoExisted:").concat(a3, " lastMessageTime:").concat(s3)))), (t3 = this.get(6)).getRoamingMessage({ conversationID: r3, peerAccount: r3.replace(R2.CONV_C2C, ""), count: c3, lastMessageTime: o3 ? s3 : 0, messageKey: o3 ? n3 : "" })) : wt2(r3) ? (t3 = this.get(7)) ? (i3 = r3.replace(R2.CONV_GROUP, ""), a3 = null, this._convMap.has(r3) && !Ut2(i3) && (a3 = this._convMap.get(r3).lastMessage), s3 = 0, e3 ? s3 = Number(e3) : a3 && (s3 = a3.lastSequence), t3.getRoamingMessage({ conversationID: r3, groupID: i3, count: c3, sequence: s3 })) : E2({ code: k2.NO_MODULE }) : D2());
      } }, { key: "patchConvLastMessage", value: function(e3) {
        var t3, n3, o3 = 1 < arguments.length && void 0 !== arguments[1] && arguments[1], i3 = this.getLocalConversation(e3);
        i3 && (t3 = (n3 = i3.lastMessage).messageForShow, n3 = n3.payload, S2(t3) || S2(n3) || o3) && 0 !== (t3 = this._msgListHandler.getLocalMsgList(e3)).length && (n3 = t3[t3.length - 1], M2.l("".concat(this._n, ".patchConvLastMessage bForceUpdate:").concat(o3, " convID:").concat(e3, " payload:"), n3.payload), i3.updateLastMessage(n3));
      } }, { key: "onRoamingMessage", value: function() {
        for (var e3, t3, n3 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : [], o3 = 1 < arguments.length ? arguments[1] : void 0, i3 = !(2 < arguments.length && void 0 !== arguments[2]) || arguments[2], a3 = 3 < arguments.length ? arguments[3] : void 0, s3 = o3.startsWith(R2.CONV_C2C) ? R2.CONV_C2C : R2.CONV_GROUP, r3 = null, c3 = [], o3 = [], u3 = 0, l3 = n3.length, d3 = s3 === R2.CONV_GROUP, p3 = this.getFileDownloadProxy(), _3 = this.getDownloadFileAuthKey(), h3 = O2(a3), g3 = this.get(17).getFileDNList(), f3 = function() {
          d3 ? --u3 : ++u3;
        }, m3 = function() {
          return d3 ? l3 <= u3 : u3 < l3;
        }, u3 = d3 ? n3.length - 1 : 0, l3 = d3 ? 0 : n3.length; m3(); f3())
          1 !== n3[u3].isPlaceMessage && ((r3 = new So(n3[u3])).to = n3[u3].to, s3 !== R2.CONV_GROUP || N2(n3[u3].topicID) || (r3.to = n3[u3].topicID), r3.isSystemMessage = !!n3[u3].isSystemMessage, r3.conversationType = s3, e3 = 4 === n3[u3].event ? { type: R2.MSG_GRP_TIP, content: y2(y2({}, n3[u3].elements), {}, { groupProfile: n3[u3].groupProfile }) } : n3[u3].elements, d3 || r3.setNickAndAvatar({ nick: n3[u3].nick, avatar: n3[u3].avatar }), S2(e3) ? ((t3 = new P2("emptyMessageBody")).setMessage("from:".concat(r3.from, " to:").concat(r3.to, " sequence:").concat(r3.sequence, " event:").concat(n3[u3].event)), t3.setLevel("warning").end()) : (r3.setElement(e3, p3, _3, g3), r3.reInitialize(this.getMyUserID()), c3.push(r3), h3 && a3.push(r3)));
        return f3 = m3 = null, i3 ? (this._msgListHandler.unshift(c3, o3), c3 = null, o3) : c3;
      } }, { key: "findMessage", value: function(e3) {
        return this._msgListHandler.findMessage(e3);
      } }, { key: "_isMeInCommunity", value: function(e3) {
        var t3 = true;
        return this._isTopicConv(e3) && (e3 = Xt2(e3.replace(R2.CONV_GROUP, "")), this.get(7).hasLocalGroup(e3) || (t3 = false, M2.l("".concat(this._n, "._isMeInCommunity groupID:").concat(e3, " ret:").concat(t3)))), t3;
      } }, { key: "deleteTopicRoamingInfo", value: function(e3) {
        var t3 = this;
        Pt2({ groupID: e3 }) && this._msgListHandler.getTopicConvIDList(e3).forEach(function(e4) {
          t3.clearMemMsg(e4);
        });
      } }, { key: "deleteGroupRoamingInfo", value: function(e3) {
        e3 = "".concat(R2.CONV_GROUP).concat(e3);
        0 < this._msgListHandler.getLocalMsgList(e3).length && this.clearMemMsg(e3);
      } }, { key: "setMessageRead", value: function(e3) {
        var t3 = e3.conversationID, n3 = this.getLocalConversation(t3), e3 = "".concat(this._n, ".setMessageRead");
        if (M2.l("".concat(e3, " convID:").concat(t3, " unreadCount:").concat(n3 ? n3.unreadCount : 0)), !n3)
          return D2();
        if (n3.type !== R2.CONV_GROUP && n3.type !== R2.CONV_TOPIC || S2(n3.groupAtInfoList) || this.deleteGroupAtTips(t3), 0 === n3.unreadCount)
          return D2();
        var o3 = this._msgListHandler.getLocalLastMsg(t3), i3 = n3.lastMessage.lastTime, a3 = this._msgListHandler.getLocalMaxTime(t3), a3 = (i3 < a3 && (M2.l("".concat(e3, " update lastMessageTime from ").concat(i3, " to ").concat(a3)), i3 = a3), this._msgListHandler.getLocalMaxSeq(t3)), s3 = n3.lastMessage.lastSequence, r3 = (s3 < a3 && (M2.l("".concat(e3, " update lastMessageSeq from ").concat(s3, " to ").concat(a3)), s3 = a3), n3.type === R2.CONV_TOPIC && N2(o3) && (e3 = this.get(10), o3 = Xt2(a3 = t3.replace(R2.CONV_GROUP, "")), e3 = e3.getLocalTopic(o3, a3)) && (s3 = e3.nextMessageSeq - 1), null);
        switch (n3.type) {
          case R2.CONV_C2C:
            return (r3 = this.get(6)) ? r3.setMessageRead({ conversationID: t3, lastMessageTime: i3 }) : E2({ code: k2.NO_MODULE });
          case R2.CONV_GROUP:
          case R2.CONV_TOPIC:
            return (r3 = this.get(7)) ? r3.setMessageRead({ conversationID: t3, lastMessageSeq: s3 }) : E2({ code: k2.NO_MODULE });
          case R2.CONV_SYSTEM:
            return n3.unreadCount = 0, this.emitConvUpdate(true, false), D2();
          default:
            return D2();
        }
      } }, { key: "setAllMessageRead", value: function() {
        var t3, n3 = this, o3 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {}, e3 = "setAllMessageRead", i3 = "".concat(this._n, ".").concat(e3), a3 = (o3.scope || (o3.scope = R2.READ_ALL_MSG), M2.l("".concat(i3, " options:"), o3), this._createSetAllMessageReadPack(o3));
        return 0 === a3.readAllC2CMessage && 0 === a3.groupMessageReadInfoList.length ? D2() : (t3 = new P2(e3), this.req({ P: G2.SET_ALL_MSG_READ, data: a3 }).then(function(e4) {
          e4 = e4.data, e4 = n3._handleAllMsgRead(e4);
          return t3.setMessage("scope:".concat(o3.scope, " failureGroups:").concat(JSON.stringify(e4))).end(), D2();
        }).catch(function(e4) {
          return t3.setError(e4).end(), M2.w("".concat(i3, " failed. error:"), e4), E2({ code: e4 && e4.code ? e4.code : k2.MSG_UNREAD_ALL_FAIL, message: e4 && e4.message ? e4.message : void 0 });
        }));
      } }, { key: "setConvCustomData", value: function(e3) {
        return this._convGroupHandler.setConvCustomData(e3);
      } }, { key: "markConv", value: function(e3) {
        return this._convGroupHandler.markConv(e3);
      } }, { key: "getConvGroupList", value: function() {
        return this._convGroupHandler.getLocalConvGroupList();
      } }, { key: "createConvGroup", value: function(e3) {
        return this._convGroupHandler.createConvGroup(e3);
      } }, { key: "deleteConvGroup", value: function(e3) {
        return this._convGroupHandler.deleteConvGroup(e3);
      } }, { key: "renameConvGroup", value: function(e3) {
        return this._convGroupHandler.renameConvGroup(e3);
      } }, { key: "addConvsToGroup", value: function(e3) {
        return this._convGroupHandler.addConvsToGroup(e3);
      } }, { key: "deleteConvsFromGroup", value: function(e3) {
        return this._convGroupHandler.deleteConvsFromGroup(e3);
      } }, { key: "onConvMarkUpdated", value: function(e3) {
        this._convGroupHandler.onConvMarkUpdated(e3);
      } }, { key: "onConvGroupCreated", value: function(e3) {
        this._convGroupHandler.onConvGroupCreated(e3);
      } }, { key: "onConvGroupDeleted", value: function(e3) {
        this._convGroupHandler.onConvGroupDeleted(e3);
      } }, { key: "onConvGroupNameUpdated", value: function(e3) {
        this._convGroupHandler.onConvGroupNameUpdated(e3);
      } }, { key: "onConvInGroupUpdated", value: function(e3) {
        this._convGroupHandler.onConvInGroupUpdated(e3);
      } }, { key: "onConvAddedToOrDeletedFromGroup", value: function(e3) {
        this._convGroupHandler.onConvAddedToOrDeletedFromGroup(e3);
      } }, { key: "_getConvLastMessageSeq", value: function(e3) {
        var t3 = this._msgListHandler.getLocalLastMsg(e3.conversationID), e3 = e3.lastMessage.lastSequence;
        return e3 = t3 && e3 < t3.sequence ? t3.sequence : e3;
      } }, { key: "_getConvLastMessageTime", value: function(e3) {
        var t3 = this._msgListHandler.getLocalLastMsg(e3.conversationID), e3 = e3.lastMessage.lastTime;
        return e3 = t3 && e3 < t3.time ? t3.time : e3;
      } }, { key: "_createSetAllMessageReadPack", value: function(e3) {
        var t3, n3 = { readAllC2CMessage: 0, groupMessageReadInfoList: [] }, o3 = e3.scope, i3 = F2(this._convMap);
        try {
          for (i3.s(); !(t3 = i3.n()).done; ) {
            var a3, s3 = j2(t3.value, 2)[1];
            if (0 < s3.unreadCount)
              if (s3.type === R2.CONV_C2C && 0 === n3.readAllC2CMessage) {
                if (o3 === R2.READ_ALL_MSG)
                  n3.readAllC2CMessage = 1;
                else if (o3 === R2.READ_ALL_C2C_MSG) {
                  n3.readAllC2CMessage = 1;
                  break;
                }
              } else
                s3.type !== R2.CONV_GROUP || o3 !== R2.READ_ALL_GROUP_MSG && o3 !== R2.READ_ALL_MSG || (a3 = this._getConvLastMessageSeq(s3), n3.groupMessageReadInfoList.push({ groupID: s3.groupProfile.groupID, messageSequence: a3 }));
          }
        } catch (e4) {
          i3.e(e4);
        } finally {
          i3.f();
        }
        return n3;
      } }, { key: "onPushedAllMessageRead", value: function(e3) {
        this._handleAllMsgRead(e3);
      } }, { key: "_handleAllMsgRead", value: function(e3) {
        var t3 = e3.groupMessageReadInfoList, e3 = e3.readAllC2CMessage, t3 = this._parseGroupReadInfo(t3);
        return 1 <= this._updateAllConvUnreadCount({ readAllC2CMessage: e3 }) && this.emitConvUpdate(true, false), t3;
      } }, { key: "_parseGroupReadInfo", value: function(e3) {
        var t3 = [];
        if (e3 && e3.length)
          for (var n3 = 0, o3 = e3.length; n3 < o3; n3++) {
            var i3 = e3[n3], a3 = i3.groupID, s3 = i3.sequence, r3 = i3.retCode, i3 = i3.lastMessageSeq;
            N2(r3) ? this._remoteGroupReadSeqMap.set(a3, i3) : (this._remoteGroupReadSeqMap.set(a3, s3), 0 !== r3 && t3.push("".concat(a3, "-").concat(s3, "-").concat(r3)));
          }
        return t3;
      } }, { key: "_updateAllConvUnreadCount", value: function(e3) {
        var t3, n3 = e3.readAllC2CMessage, o3 = 0, i3 = F2(this._convMap);
        try {
          for (i3.s(); !(t3 = i3.n()).done; ) {
            var a3, s3, r3, c3, u3 = j2(t3.value, 2), l3 = u3[0], d3 = u3[1];
            1 <= d3.unreadCount && (1 === n3 && d3.type === R2.CONV_C2C ? (a3 = this._getConvLastMessageTime(d3), this.updateIsReadAfterReadReport({ conversationID: l3, lastMessageTime: a3 })) : d3.type === R2.CONV_GROUP && (s3 = l3.replace(R2.CONV_GROUP, ""), this._remoteGroupReadSeqMap.has(s3)) && (r3 = this._remoteGroupReadSeqMap.get(s3), c3 = this._getConvLastMessageSeq(d3), this.updateIsReadAfterReadReport({ conversationID: l3, remoteReadSequence: r3 }), r3 <= c3) && this._remoteGroupReadSeqMap.delete(s3), this.updateUnreadCount(l3, false)) && (o3 += 1);
          }
        } catch (e4) {
          i3.e(e4);
        } finally {
          i3.f();
        }
        return o3;
      } }, { key: "isRemoteRead", value: function(e3) {
        var t3, n3 = e3.conversationID, e3 = e3.sequence, o3 = n3.replace(R2.CONV_GROUP, ""), i3 = false;
        return this._remoteGroupReadSeqMap.has(o3) && (e3 <= (t3 = this._remoteGroupReadSeqMap.get(o3)) && (i3 = true, M2.l("".concat(this._n, ".isRemoteRead convID:").concat(n3, " msgSeq:").concat(e3, " remoteReadSeq:").concat(t3))), t3 + 10 <= e3) && this._remoteGroupReadSeqMap.delete(o3), i3;
      } }, { key: "updateIsReadAfterReadReport", value: function(e3) {
        var t3 = e3.conversationID, n3 = e3.lastMessageSeq, o3 = e3.lastMessageTime, i3 = this._msgListHandler.getLocalMsgList(t3);
        if (0 !== i3.length) {
          for (var a3, s3 = i3.length - 1; 0 <= s3; s3--)
            if (a3 = i3[s3], !(o3 && a3.time > o3 || n3 && a3.sequence > n3)) {
              if ("in" === a3.flow && a3.isRead)
                break;
              a3.setIsRead(true);
            }
        }
      } }, { key: "updateUnreadCount", value: function(e3) {
        var t3, n3 = !(1 < arguments.length && void 0 !== arguments[1]) || arguments[1], o3 = false, i3 = this.getLocalConversation(e3), a3 = this._msgListHandler.getLocalMsgList(e3);
        if (i3)
          return (t3 = i3.unreadCount) !== (a3 = a3.filter(function(e4) {
            return !e4.isRead && !e4._onlineOnlyFlag && !e4.isDeleted;
          }).length) && (i3.unreadCount = a3, o3 = true, M2.l("".concat(this._n, ".updateUnreadCount from ").concat(t3, " to ").concat(a3, ", convID:").concat(e3)), true === n3) && this.emitConvUpdate(true, false), o3 && i3.type === R2.CONV_TOPIC && (t3 = i3.unreadCount, a3 = this.get(10), n3 = e3.replace(R2.CONV_GROUP, ""), a3.onUnreadCountUpdatedFromConv(n3, t3)), o3;
      } }, { key: "clearGroupAtInfoList", value: function(e3) {
        var t3, n3 = !(1 < arguments.length && void 0 !== arguments[1]) || arguments[1], o3 = this.getLocalConversation(e3);
        o3 && 0 < o3.groupAtInfoList.length && (o3.clearGroupAtInfoList(), M2.l("".concat(this._n, ".clearGroupAtInfoList convID:").concat(e3)), o3.type === R2.CONV_TOPIC && (o3 = o3.groupAtInfoList, t3 = this.get(10), e3 = e3.replace(R2.CONV_GROUP, ""), t3.onAtInfoUpdated({ topicID: e3, groupAtInfoList: o3 })), true === n3) && this.emitConvUpdate(true, false);
      } }, { key: "updateReadReceiptInfo", value: function(e3) {
        var a3, s3, o3, r3 = this, t3 = e3.userID, i3 = void 0 === t3 ? void 0 : t3, t3 = e3.groupID, c3 = void 0 === t3 ? void 0 : t3, t3 = e3.readReceiptList, e3 = e3.timestamp, u3 = void 0 === e3 ? 0 : e3;
        S2(t3) || (a3 = [], N2(i3) ? N2(c3) || (s3 = "".concat(R2.CONV_GROUP).concat(c3), t3.forEach(function(e4) {
          var t4 = e4.tinyID, n3 = e4.clientTime, o4 = e4.random, i4 = e4.readCount, e4 = e4.unreadCount, t4 = "".concat(t4, "-").concat(n3, "-").concat(o4), n3 = r3._msgListHandler.getLocalMsg(s3, t4) || r3._msgListHandler.getHoppingMsg(s3, t4), o4 = { groupID: c3, messageID: t4, readCount: 0, unreadCount: 0 };
          n3 && (A2(i4) && (n3.readReceiptInfo.readCount = i4, o4.readCount = i4), A2(e4) && (n3.readReceiptInfo.unreadCount = e4, o4.unreadCount = e4), a3.push(o4));
        })) : (o3 = "".concat(R2.CONV_C2C).concat(i3), t3.forEach(function(e4) {
          var t4 = e4.tinyID, n3 = e4.clientTime, e4 = e4.random, t4 = "".concat(t4, "-").concat(n3, "-").concat(e4), n3 = r3._msgListHandler.getLocalMsg(o3, t4) || r3._msgListHandler.getHoppingMsg(o3, t4);
          n3 && !n3.readReceiptInfo.isPeerRead && (n3.readReceiptInfo.isPeerRead = true, n3.readReceiptInfo.timestamp = u3, a3.push({ userID: i3, messageID: t4, isPeerRead: true, timestamp: u3 }));
        })), 0 < a3.length && this.emitOEvt(h2.MESSAGE_READ_RECEIPT_RECEIVED, a3));
      } }, { key: "updateIsRead", value: function(e3) {
        var t3 = this.getLocalConversation(e3), n3 = this.getLocalMessageList(e3);
        if (t3 && 0 !== n3.length && !Ft2(t3.type)) {
          for (var o3 = [], i3 = 0, a3 = n3.length; i3 < a3; i3++)
            "in" !== n3[i3].flow ? "out" !== n3[i3].flow || n3[i3].isRead || n3[i3].setIsRead(true) : o3.push(n3[i3]);
          var s3 = 0;
          s3 = t3.type === R2.CONV_C2C ? (e3 = o3.slice(-t3.unreadCount).filter(function(e4) {
            return e4.isRevoked;
          }).length, o3.length - t3.unreadCount - e3) : o3.length - t3.unreadCount;
          for (var r3 = 0; r3 < s3 && !o3[r3].isRead; r3++)
            o3[r3].setIsRead(true);
        }
      } }, { key: "deleteGroupAtTips", value: function(e3) {
        var t3, n3, o3, i3 = this, a3 = "".concat(this._n, ".deleteGroupAtTips"), s3 = (M2.l("".concat(a3)), this._convMap.get(e3));
        return !s3 || 0 === (t3 = s3.groupAtInfoList).length ? Promise.resolve() : (s3 = void 0, e3.startsWith(R2.CONV_GROUP) && (s3 = e3.replace(R2.CONV_GROUP, "")), n3 = d2(t3), (Pt2({ groupID: s3 }) || Ut2(s3)) && 0 === (n3 = t3.filter(function(e4) {
          return !e4.atTypeArray.includes(R2.CONV_AT_ALL);
        })).length ? (this.clearGroupAtInfoList(e3, false), Promise.resolve()) : (o3 = this.getMyUserID(), this.req({ P: G2.DEL_GROUP_AT_TIPS, data: { messageListToDelete: n3.map(function(e4) {
          return { from: e4.from, to: o3, messageSeq: e4.__sequence, messageRandom: e4.__random, groupID: N2(e4.topicID) ? e4.groupID : e4.topicID };
        }) } }).then(function() {
          return M2.l("".concat(a3, " ok. count:").concat(t3.length)), i3.clearGroupAtInfoList(e3, false), Promise.resolve();
        }).catch(function(e4) {
          return M2.e("".concat(a3, " failed. error:"), e4), E2(e4);
        })));
      } }, { key: "appendToMessageList", value: function(e3) {
        return this._msgListHandler.pushIn(e3);
      } }, { key: "setMessageRandom", value: function(e3) {
        this._sll.set(e3.random);
      } }, { key: "deleteMessageRandom", value: function(e3) {
        this._sll.delete(e3.random);
      } }, { key: "pushIntoMessageList", value: function(e3, t3, n3) {
        return !(!this._msgListHandler.pushIn(t3, n3) || this._sll.has(t3.random) && !n3 || (e3.push(t3), 0));
      } }, { key: "revoke", value: function(e3, t3, n3) {
        return this._msgListHandler.revoke(e3, t3, n3);
      } }, { key: "getPeerReadTime", value: function(e3) {
        return this._peerReadTimeMap.get(e3);
      } }, { key: "recordPeerReadTime", value: function(e3, t3) {
        (!this._peerReadTimeMap.has(e3) || this._peerReadTimeMap.get(e3) < t3) && this._peerReadTimeMap.set(e3, t3);
      } }, { key: "updateMsgIsPeerReadProp", value: function(e3, t3) {
        var n3;
        e3.startsWith(R2.CONV_C2C) && 0 < t3 && (0 < (n3 = this._msgListHandler.updateMsgIsPeerReadProp(e3, t3)).length && this.emitOEvt(h2.MESSAGE_READ_BY_PEER, n3), this._convMap.has(e3)) && !S2(n3 = this._convMap.get(e3).lastMessage) && n3.fromAccount === this.getMyUserID() && n3.lastTime <= t3 && !n3.isPeerRead && (n3.isPeerRead = true, this.emitConvUpdate(true, false));
      } }, { key: "updateMsgIsModifiedProp", value: function(e3) {
        this._msgListHandler.updateMsgIsModifiedProp(e3);
      } }, { key: "setCompleted", value: function(e3) {
        M2.l("".concat(this._n, ".setCompleted convID:").concat(e3)), this._completedMap.set(e3, true);
      } }, { key: "updateRoamingMsgKeyAndTime", value: function(e3, t3, n3) {
        this._roamingMsgKeyAndTimeMap.set(e3, { messageKey: t3, lastMessageTime: n3 });
      } }, { key: "getConvList", value: function(t3) {
        var n3, o3 = this, i3 = "".concat(this._n, ".").concat("getConvList"), e3 = "pagingStatus:".concat(this._pagingStatus, ", local conversation count:").concat(this._convMap.size, ", options:").concat(JSON.stringify(t3));
        return M2.l("".concat(i3, ". ").concat(e3)), this._pagingStatus === qn ? ((n3 = new P2("getConvList")).setMessage(e3), this.syncConvList().then(function() {
          n3.end();
          var e4 = o3._getConvList(t3);
          return T2({ conversationList: e4, isSyncCompleted: o3._isSyncCompleted() });
        }).catch(function(e4) {
          return n3.setError(e4).end(), M2.e("".concat(i3, " failed. error:"), e4), E2(e4);
        })) : (e3 = this._getConvList(t3), M2.l("".concat(i3, ". returned conversation count:").concat(e3.length)), D2({ conversationList: e3, isSyncCompleted: this._isSyncCompleted() }));
      } }, { key: "_getConvList", value: function(t3) {
        var n3, o3, i3, a3, s3, r3 = this;
        return N2(t3) ? this.getLocalConvList() : O2(t3) ? 0 === t3.length ? [] : this.getLocalConvList().filter(function(e3) {
          return t3.includes(e3.conversationID);
        }) : m2(t3) ? (n3 = t3.type, o3 = t3.markType, i3 = t3.groupName, a3 = t3.hasUnreadCount, s3 = t3.hasGroupAtInfo, this.getLocalConvList().filter(function(e3) {
          return r3._filterType(e3, n3) && r3._filterMarkType(e3, o3) && r3._filterGroupName(e3, i3) && r3._filterUnreadCount(e3, a3) && r3._filterGroupAtInfo(e3, s3);
        })) : [];
      } }, { key: "_filterType", value: function(e3, t3) {
        return t3 !== R2.CONV_C2C && t3 !== R2.CONV_GROUP || e3.type === t3;
      } }, { key: "_filterGroupName", value: function(e3, t3) {
        return !C2(t3) || ("" === t3 ? 0 === e3.conversationGroupList.length : e3.conversationGroupList.includes(t3));
      } }, { key: "_filterMarkType", value: function(e3, t3) {
        return !A2(t3) || (0 === t3 ? 0 === e3.markList.length : e3.markList.includes(t3));
      } }, { key: "_filterUnreadCount", value: function(e3, t3) {
        var n3 = true;
        return true === t3 ? n3 = 1 <= e3.unreadCount : false === t3 && (n3 = 0 === e3.unreadCount), n3;
      } }, { key: "_filterGroupAtInfo", value: function(e3, t3) {
        var n3 = true;
        return true === t3 ? n3 = 1 <= e3.groupAtInfoList.length : false === t3 && (n3 = 0 === e3.groupAtInfoList.length), n3;
      } }, { key: "_handleC2CPeerReadTime", value: function() {
        var e3, t3 = F2(this._convMap);
        try {
          for (t3.s(); !(e3 = t3.n()).done; ) {
            var n3 = j2(e3.value, 2), o3 = n3[0], i3 = n3[1];
            i3.type === R2.CONV_C2C && this.recordPeerReadTime(o3, i3.peerReadTime);
          }
        } catch (e4) {
          t3.e(e4);
        } finally {
          t3.f();
        }
      } }, { key: "_isPagingGetGroupListCompleted", value: function() {
        var e3 = this.get(7);
        return !e3 || e3.isPagingGetCompleted();
      } }, { key: "_getLocalGroupCount", value: function() {
        var e3 = this.get(7);
        return e3 ? e3.getLocalGroupList().length : 0;
      } }, { key: "_hasLocalGroup", value: function(e3) {
        var t3 = this.get(7);
        return !!t3 && t3.hasLocalGroup(e3.replace(R2.CONV_GROUP, ""));
      } }, { key: "getConversationProfile", value: function(o3) {
        var i3, a3 = this, s3 = false;
        if (this._convMap.has(o3) ? i3 = this._convMap.get(o3) : (i3 = new jo({ conversationID: o3, type: bt2(o3) ? R2.CONV_C2C : R2.CONV_GROUP }, this.isIntl(), this.isUsingChatCore()), s3 = true), i3._isInfoCompleted || i3.type === R2.CONV_SYSTEM)
          return D2({ conversation: i3 });
        if (wt2(o3)) {
          if (!this.get(7))
            return E2({ code: k2.NO_MODULE });
          if (!this._hasLocalGroup(o3))
            return D2({ conversation: i3 });
        }
        var r3 = "".concat(this._n, ".").concat("getConversationProfile"), c3 = new P2("getConversationProfile");
        return M2.l("".concat(r3, ". convID:").concat(o3, " remark:").concat(i3.remark, " lastMessage:"), i3.lastMessage), this._getUserOrGroupProfile(i3).then(function(e3) {
          c3.setMessage("convID:".concat(o3, " unreadCount:").concat(e3.data.conversation.unreadCount)).end();
          var t3, n3 = a3.get(8);
          if (n3 && i3.type === R2.CONV_C2C && (t3 = o3.replace(R2.CONV_C2C, ""), n3.isMyFriend(t3)) && (n3 = n3.getFriendRemark(t3), i3.remark !== n3) && (i3.remark = n3, M2.l("".concat(r3, ". convID:").concat(o3, " patch remark:").concat(i3.remark))), M2.l("".concat(r3, " ok. isNewConv:").concat(s3, " convID:").concat(o3)), s3) {
            if (i3.type === R2.CONV_C2C)
              return a3._onNewC2CConv([o3.replace(R2.CONV_C2C, "")]).then(function() {
                return D2({ conversation: i3 });
              });
            if (i3.type === R2.CONV_GROUP)
              return a3._onNewGroupConv([o3.replace(R2.CONV_GROUP, "")]).then(function() {
                return D2({ conversation: i3 });
              });
          }
          return e3;
        }).catch(function(e3) {
          return c3.setError(e3).setMessage("convID:".concat(o3)).end(), M2.e("".concat(r3, " failed. error:"), e3), E2(e3);
        });
      } }, { key: "_getUserOrGroupProfile", value: function(t3) {
        var n3 = this;
        return t3.type === R2.CONV_C2C ? this.get(4).getUserProfile({ userIDList: [t3.toAccount] }).then(function(e3) {
          e3 = e3.data;
          return 0 === e3.length ? E2({ code: k2.USER_OR_GRP_NOT_FOUND }) : (t3.userProfile = e3[0], t3._isInfoCompleted = true, n3._insertConvAfterTopmost(t3), D2({ conversation: t3 }));
        }) : this.get(7).getGroupProfile({ groupID: t3.toAccount }).then(function(e3) {
          return t3.groupProfile = e3.data.group, t3._isInfoCompleted = true, n3._insertConvAfterTopmost(t3), D2({ conversation: t3 });
        });
      } }, { key: "_insertConvAfterTopmost", value: function(e3) {
        var t3, n3;
        e3 instanceof jo && !this._convMap.has(e3.conversationID) && (n3 = (t3 = d2(this._convMap)).findIndex(function(e4) {
          return false === e4[1].isPinned;
        }), t3.splice(n3, 0, [e3.conversationID, e3]), this._convMap = new Map(t3), this._setStorageConvList(), this.emitConvUpdate(true, false));
      } }, { key: "_onProfileUpdated", value: function(e3) {
        var n3 = this;
        e3.data.forEach(function(e4) {
          var t3 = e4.userID;
          t3 === n3.getMyUserID() ? n3._onMyProfileModified({ latestNick: e4.nick, latestAvatar: e4.avatar }) : (t3 = n3._convMap.get("".concat(R2.CONV_C2C).concat(t3))) && (t3.userProfile = e4);
        });
      } }, { key: "_onCloudConfig", value: function(e3) {
        "0" === this.getCloudConfig("pull_on_invite") && (this._bPullOnInvite = false), M2.l("".concat(this._n, "._onCloudConfig bPullOnInvite:").concat(this._bPullOnInvite));
      } }, { key: "disableMsgPullOnInvite", value: function() {
        this._bPullOnInvite = false;
      } }, { key: "_isSyncCompleted", value: function() {
        return this._pagingStatus === Fn;
      } }, { key: "_errorLog", value: function(e3, t3, n3, o3) {
        var i3 = new Error("Params validate failed."), a3 = "".concat(this.getErrMsg("API_REFER")).concat(e3);
        throw M2.w("[".concat(e3, "] | ").concat(t3, " | ").concat(this.getErrMsg(n3, o3), ", ").concat(a3)), M2.e("[".concat(e3, "] Invalid ").concat(t3, ": type check failed for ").concat(t3, ".")), i3;
      } }, { key: "_isValidConvID", value: function(e3) {
        return bt2(e3) || wt2(e3) || Ft2(e3);
      } }, { key: "deleteConversation", value: function(e3) {
        var t3 = this, n3 = "deleteConversation";
        return C2(e3) || ut2(e3) || this._errorLog(n3, "options", "StringOrObjectRequiredLog"), C2(e3) ? (this._isValidConvID(e3) || this._errorLog(n3, "options", "InvalidConversationID", e3), M2.l("".concat(this._n, ".").concat(n3, " convID:").concat(e3)), this.deleteConvList({ conversationIDList: [e3], flag: 1 })) : (O2(e3.conversationIDList) || this._errorLog(n3, "conversationIDList", "ArrayRequiredLog"), 0 === e3.conversationIDList.length && this._errorLog(n3, "conversationIDList", "NonEmptyArrayLog"), e3.conversationIDList.forEach(function(e4) {
          t3._isValidConvID(e4) || t3._errorLog(n3, "conversationIDList", "InvalidConversationID", e4);
        }), "clearHistoryMessage" in e3 && "boolean" != typeof e3.clearHistoryMessage && this._errorLog(n3, "clearHistoryMessage", "BooleanRequiredLog"), 100 < e3.conversationIDList.length && (e3.conversationIDList = e3.conversationIDList.slice(0, 100)), this.deleteConvList(e3));
      } }, { key: "deleteConvList", value: function(e3) {
        var t3 = e3.conversationIDList, t3 = void 0 === t3 ? [] : t3, n3 = e3.clearHistoryMessage, n3 = void 0 === n3 || n3, e3 = e3.flag, o3 = void 0 === e3 ? 0 : e3, i3 = "".concat(this._n, ".").concat("deleteConvList"), e3 = "convIDList:".concat(t3, " clearHistoryMessage:").concat(n3), a3 = (M2.l("".concat(i3, " ").concat(e3)), new P2("deleteConvList"));
        return a3.setMessage(e3), Promise.all([this.rmLocalOnlyConvList(t3), this.rmLocalAndRemoteConvList(t3, n3)]).then(function(e4) {
          a3.end();
          e4 = [].concat(d2(e4[0]), d2(e4[1]));
          return 0 === e4.length ? E2(new L2({ code: k2.CONV_NOT_FOUND })) : (M2.l("".concat(i3, " ok")), D2(1 === o3 ? { conversationID: e4[0] } : { conversationIDList: e4 }));
        }).catch(function(e4) {
          return a3.setError(e4).end(), M2.e("".concat(i3, " failed. error:"), e4), E2(e4);
        });
      } }, { key: "rmLocalOnlyConvList", value: function(e3) {
        var n3 = this;
        return e3.filter(function(e4) {
          var t3;
          return !!n3._convMap.has(e4) && ((t3 = n3.getLocalConversation(e4).type) !== R2.CONV_GROUP || n3._hasLocalGroup(e4) ? t3 === R2.CONV_SYSTEM && (n3.get(7).deleteGroupSystemNotice({ messageList: n3._msgListHandler.getLocalMsgList(e4) }), n3.deleteLocalConv(e4), true) : (n3.deleteLocalConv(e4), true));
        });
      } }, { key: "rmLocalAndRemoteConvList", value: function(e3, t3) {
        var n3 = this, o3 = { fromAccount: this.getMyUserID(), conversationList: [], clearHistoryMessage: t3 ? 1 : 0 };
        return e3.forEach(function(e4) {
          var t4;
          n3._convMap.has(e4) && ((t4 = n3.getLocalConversation(e4).type) === R2.CONV_C2C ? o3.conversationList.push({ toAccount: e4.replace(t4, ""), type: 1 }) : t4 === R2.CONV_GROUP && n3._hasLocalGroup(e4) && o3.conversationList.push({ toGroupID: e4.replace(t4, ""), type: 2 }));
        }), 0 === o3.conversationList.length ? [] : this.req({ P: G2.DEL_CONV, data: o3 }).then(function(e4) {
          var t4 = [];
          return 0 < e4.data.resultList.length && e4.data.resultList.map(function(e5) {
            0 === e5.code && (e5 = 1 === e5.type ? "".concat(R2.CONV_C2C).concat(e5.to) : "".concat(R2.CONV_GROUP).concat(e5.groupID), t4.push(e5));
          }), n3.deleteLocalConvList(t4), t4;
        });
      } }, { key: "setConvDraft", value: function(e3) {
        var t3 = e3.conversationID, e3 = e3.draftText, n3 = "".concat(this._n, ".").concat("setConvDraft");
        return M2.l("".concat(n3, " convID:").concat(t3, " draftText:").concat(e3)), this._convMap.has(t3) ? ((n3 = this._convMap.get(t3)).setDraftText(e3), this.emitConvUpdate(), D2({ code: 0, conversation: n3 })) : E2({ code: k2.CONV_NOT_FOUND });
      } }, { key: "clearHistoryMessage", value: function(t3) {
        var n3 = this, e3 = { fromAccount: this.getMyUserID(), toAccount: void 0, type: void 0, toGroupID: void 0 };
        if (!this._convMap.has(t3))
          return E2({ code: k2.CONV_NOT_FOUND });
        var o3 = this._convMap.get(t3).type;
        if (o3 === R2.CONV_C2C)
          e3.type = 1, e3.toAccount = t3.replace(R2.CONV_C2C, "");
        else {
          if (o3 !== R2.CONV_GROUP)
            return o3 === R2.CONV_SYSTEM ? (this.get(7).deleteGroupSystemNotice({ messageList: this._msgListHandler.getLocalMsgList(t3) }), D2({ conversationID: t3 })) : E2({ code: k2.CONV_UN_RECORDED_TYPE });
          e3.type = 2, e3.toGroupID = t3.replace(R2.CONV_GROUP, "");
        }
        var i3 = "".concat(this._n, ".").concat("clearHistoryMessage"), a3 = new P2("clearHistoryMessage");
        return a3.setMessage("convID:".concat(t3)), M2.l("".concat(i3, ". convID:").concat(t3)), this.setMessageRead({ conversationID: t3 }).then(function() {
          return n3.req({ P: G2.CLEAR_HISTORY_MSG, data: e3 });
        }).then(function() {
          a3.end(), M2.l("".concat(i3, " ok")), n3.clearMemMsg(t3);
          var e4 = n3.getLocalConversation(t3);
          return e4 && (e4.updateLastMessage(), n3._sortConvListAndEmitEvent()), D2({ conversationID: t3 });
        }).catch(function(e4) {
          return a3.setError(e4).end(), M2.e("".concat(i3, " failed. error:"), e4), E2(e4);
        });
      } }, { key: "pinConversation", value: function(e3) {
        var t3, n3, o3, i3 = this, a3 = e3.conversationID, s3 = e3.isPinned, r3 = this.getLocalConversation(a3);
        return r3 && r3.isPinned === s3 ? D2({ conversationID: a3 }) : Ft2(a3) ? (r3 && (r3.isPinned = s3), this._sortConvListAndEmitEvent(), D2({ conversationID: a3 })) : (e3 = null, bt2(a3) ? e3 = { type: 1, toAccount: a3.replace(R2.CONV_C2C, "") } : wt2(a3) && (e3 = { type: 2, groupID: a3.replace(R2.CONV_GROUP, "") }), null === e3 ? E2({ code: k2.INVALID_CONV_ID }) : (t3 = "".concat(this._n, ".").concat("pinConversation"), n3 = "convID:".concat(a3, " isPinned:").concat(s3), (o3 = new P2("pinConversation")).setMessage(n3), M2.l("".concat(t3, ". ").concat(n3)), this.req({ P: G2.PIN_CONV, data: { fromAccount: this.getMyUserID(), operationType: true === s3 ? 1 : 2, itemList: [e3] } }).then(function() {
          return o3.end(), M2.l("".concat(t3, " ok")), r3 ? r3.isPinned !== s3 && (r3.isPinned = s3) : i3._convMap.set(a3, new jo({ conversationID: a3, type: bt2(a3) ? R2.CONV_C2C : R2.CONV_GROUP, isPinned: s3 }, i3.isIntl(), i3.isUsingChatCore())), i3._sortConvListAndEmitEvent(), T2({ conversationID: a3 });
        }).catch(function(e4) {
          return o3.setError(e4).end(), M2.e("".concat(t3, " failed. error:"), e4), E2(e4);
        })));
      } }, { key: "setMessageRemindType", value: function(e3) {
        return this._msgRemindHandler.set(e3);
      } }, { key: "patchMsgRemindType", value: function(e3) {
        var t3 = e3.ID, n3 = e3.isC2CConversation, o3 = e3.messageRemindType, i3 = false, n3 = this.getLocalConversation("".concat(n3 ? R2.CONV_C2C : R2.CONV_GROUP).concat(t3));
        return n3 && n3.messageRemindType !== o3 && (n3.messageRemindType = o3, i3 = true), M2.l("".concat(this._n, ".patchMsgRemindType options:"), e3, "ret:".concat(i3)), i3;
      } }, { key: "onC2CMsgRemindTypeFetched", value: function(e3) {
        var n3, o3 = this;
        O2(e3) && 0 < e3.length && (n3 = 0, e3.forEach(function(e4) {
          var t3 = e4.userID, e4 = e4.muteFlag, e4 = o3._transMsgRemindType(e4);
          true === o3.patchMsgRemindType({ ID: t3, isC2CConversation: true, messageRemindType: e4 }) && (n3 += 1);
        }), M2.l("".concat(this._n, ".onC2CMsgRemindTypeFetched updateCount:").concat(n3)), 1 <= n3) && this.emitConvUpdate(true, false);
      } }, { key: "onC2CMsgRemindTypeSynced", value: function(e3) {
        var n3 = this, o3 = "".concat(this._n, ".onC2CMsgRemindTypeSynced");
        e3.dataList.forEach(function(e4) {
          var t3;
          S2(e4.muteNotificationsSync) || (t3 = (e4 = e4.muteNotificationsSync).to, e4 = e4.muteFlag, e4 = n3._transMsgRemindType(e4), n3.patchMsgRemindType({ ID: t3, isC2CConversation: !(t3 = 0), messageRemindType: e4 }) && (t3 += 1), M2.l("".concat(o3, " updateCount:").concat(t3)), 1 <= t3 && n3.emitConvUpdate(true, false));
        });
      } }, { key: "onGroupMsgRemindTypeUpdated", value: function(e3) {
        this._msgRemindHandler.onGroupMsgRemindTypeUpdated(e3);
      } }, { key: "deleteLocalConv", value: function(e3) {
        var t3 = !(1 < arguments.length && void 0 !== arguments[1]) || arguments[1], n3 = this._convMap.has(e3);
        M2.l("".concat(this._n, ".deleteLocalConv convID:").concat(e3, " has:").concat(n3)), n3 && (this._convMap.delete(e3), this._convMapForDiff.delete(e3), this.clearMemMsg(e3), this._setStorageConvList(true), t3) && (n3 = !this._isTopicConv(e3), this.emitConvUpdate(n3, false));
      } }, { key: "pullMsgOnInvite", value: function(e3) {
        var t3, n3, o3, i3, a3, s3 = this.get(7);
        s3 && (t3 = "".concat(this._n, ".pullMsgOnInvite"), M2.l("".concat(t3, " flag:").concat(this._bPullOnInvite)), this._bPullOnInvite) && (a3 = this.getLocalLastMessage(e3), n3 = this.getLocalSecondLastMessage(e3), i3 = o3 = 1, a3 && (o3 = a3.sequence), n3 && (i3 = n3.sequence), a3 = s3.getGroupRemoteLastSeq(e3.replace(R2.CONV_GROUP, "")), M2.l("".concat(t3, " convID:").concat(e3, " localLastSeq:").concat(o3, " localSecondLastSeq:").concat(i3, " remoteLastSeq:").concat(a3)), this.clearMemMsg(e3), 1 < o3 - i3 ? this._recursiveGetMsgList([], e3, false, o3, i3) : 1 < a3 - o3 && this._recursiveGetMsgList([], e3, true, a3, o3));
      } }, { key: "_recursiveGetMsgList", value: function(i3, a3, s3, r3, c3, e3) {
        var u3 = this;
        this.getMessageList({ conversationID: a3, nextReqMessageID: e3 }).then(function(e4) {
          var e4 = e4.data, t3 = e4.messageList, n3 = e4.isCompleted, e4 = e4.nextReqMessageID, o3 = t3.filter(function(e5) {
            return s3 ? e5.sequence > c3 && e5.sequence <= r3 : e5.sequence > c3 && e5.sequence < r3;
          });
          i3.unshift.apply(i3, d2(o3)), !n3 && 0 < t3.length && t3[0].sequence > c3 && i3.length < 60 ? u3._recursiveGetMsgList(i3, a3, s3, r3, c3, e4) : u3._emitMsgReceived(a3, i3);
        });
      } }, { key: "_emitMsgReceived", value: function(e3, t3) {
        var n3, o3, i3 = this;
        0 < t3.length && (t3 = t3.filter(function(t4, e4, n4) {
          return e4 === n4.findIndex(function(e5) {
            return e5.sequence === t4.sequence;
          });
        }), n3 = this.hasLocalConversation(e3), o3 = t3.map(function(e4) {
          return e4.sequence;
        }), M2.l("".concat(this._n, "._emitMsgReceived convID:").concat(e3, " has:").concat(n3, " count:").concat(o3.length, " sequenceList:"), o3), this.emitOEvt(h2.MESSAGE_RECEIVED, t3), n3 ? this.patchConvLastMessage(e3, true) : this.getConversationProfile(e3).then(function() {
          i3.patchConvLastMessage(e3, true);
        }));
      } }, { key: "deleteLocalConvList", value: function(e3) {
        var t3 = this, n3 = false;
        e3.forEach(function(e4) {
          t3._convMap.has(e4) && (t3.deleteLocalConv(e4, false), n3 = true);
        }), M2.l("".concat(this._n, ".deleteLocalConvList convID:").concat(e3, " isConvIDExisted:").concat(n3)), n3 && this.emitConvUpdate(true, false);
      } }, { key: "isMessageSentByCurrentInstance", value: function(e3) {
        return !(!this._msgListHandler.hasLocalMsg(e3.conversationID, e3.ID) && !this._sll.has(e3.random));
      } }, { key: "modifyMessageList", value: function(e3) {
        var t3, n3;
        e3.startsWith(R2.CONV_C2C) && this._convMap.has(e3) && (n3 = this._convMap.get(e3), t3 = Date.now(), this._msgListHandler.modifyMsgSentByPeer({ conversationID: e3, latestNick: n3.userProfile.nick, latestAvatar: n3.userProfile.avatar }), n3 = this.get(4).getNickAndAvatarByUserID(this.getMyUserID()), this._msgListHandler.modifyMsgSentByMe({ conversationID: e3, latestNick: n3.nick, latestAvatar: n3.avatar }), M2.l("".concat(this._n, ".modifyMessageList convID:").concat(e3, " cost:").concat(an(t3))));
      } }, { key: "updateUserProfileSpecifiedKey", value: function(e3) {
        M2.l("".concat(this._n, ".updateUserProfileSpecifiedKey options:"), e3);
        var t3 = e3.conversationID, n3 = e3.nick, e3 = e3.avatar;
        this._convMap.has(t3) && (t3 = this._convMap.get(t3).userProfile, C2(n3) && t3.nick !== n3 && (t3.nick = n3), C2(e3) && t3.avatar !== e3 && (t3.avatar = e3), this.emitConvUpdate(true, false));
      } }, { key: "_onMyProfileModified", value: function(t3) {
        var n3 = this, e3 = this.getLocalConvList(), o3 = Date.now();
        e3.forEach(function(e4) {
          n3.modifyMessageSentByMe(y2({ conversationID: e4.conversationID }, t3));
        }), M2.l("".concat(this._n, "._onMyProfileModified. modify all messages sent by me, cost:").concat(an(o3)));
      } }, { key: "modifyMessageSentByMe", value: function(e3) {
        this._msgListHandler.modifyMsgSentByMe(e3);
      } }, { key: "getLatestMessageSentByMe", value: function(e3) {
        return this._msgListHandler.getLatestMsgSentByMe(e3);
      } }, { key: "modifyMessageSentByPeer", value: function(e3) {
        this._msgListHandler.modifyMsgSentByPeer(e3);
      } }, { key: "getLatestMessageSentByPeer", value: function(e3) {
        return this._msgListHandler.getLatestMsgSentByPeer(e3);
      } }, { key: "pushIntoNoticeResult", value: function(e3, t3) {
        return !(!this._msgListHandler.pushIn(t3) || this._sll.has(t3.random) || (e3.push(t3), 0));
      } }, { key: "getLocalLastMessage", value: function(e3) {
        return this._msgListHandler.getLocalLastMsg(e3);
      } }, { key: "getLocalSecondLastMessage", value: function(e3) {
        return this._msgListHandler.getLocalSecondLastMsg(e3);
      } }, { key: "checkAndPatchRemark", value: function() {
        var e3, n3, o3 = this.get(8);
        0 !== this._convMap.size && o3 && 0 !== (e3 = d2(this._convMap.values()).filter(function(e4) {
          return e4.type === R2.CONV_C2C;
        })).length && (n3 = 0, e3.forEach(function(e4) {
          var t3 = e4.conversationID.replace(R2.CONV_C2C, "");
          o3.isMyFriend(t3) && (t3 = o3.getFriendRemark(t3), e4.remark !== t3) && (e4.remark = t3, n3 += 1);
        }), M2.l("".concat(this._n, ".checkAndPatchRemark. c2cConvCount:").concat(e3.length, " patchedCount:").concat(n3)), 0 < n3) && this.emitConvUpdate(true, false);
      } }, { key: "updateTopicConversation", value: function(e3) {
        this._updateLocalConvList({ conversationOptionsList: e3, isFromGetConversations: true, updateUnreadCount: true });
      } }, { key: "sendReadReceipt", value: function(e3) {
        var t3 = e3[0], n3 = null;
        return t3.conversationType === R2.CONV_C2C ? n3 = this._m.get(6) : t3.conversationType === R2.CONV_GROUP && (n3 = this._m.get(7)), n3 ? n3.sendReadReceipt(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "getReadReceiptList", value: function(e3) {
        var t3 = e3[0], n3 = null;
        return t3.conversationType === R2.CONV_C2C ? n3 = this._m.get(6) : t3.conversationType === R2.CONV_GROUP && (n3 = this._m.get(7)), n3 ? n3.getReadReceiptList(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "getLastMessageTime", value: function(e3) {
        e3 = this.getLocalConversation(e3);
        return e3 ? e3.lastMessage.lastTime : 0;
      } }, { key: "getTotalUnreadCount", value: function() {
        var e3 = this.getLocalConvList(), t3 = 0;
        return e3.forEach(function(e4) {
          e4.type === R2.CONV_SYSTEM || "" !== e4.messageRemindType && e4.messageRemindType !== R2.MSG_REMIND_ACPT_AND_NOTE || (t3 += e4.unreadCount);
        }), t3;
      } }, { key: "onTotalUnreadCountUpdate", value: function() {
        var e3 = this.getTotalUnreadCount();
        this._convTotalUnreadCount !== e3 && (M2.l("".concat(this._n, ".onTotalUnreadCountUpdate from ").concat(this._convTotalUnreadCount, " to ").concat(e3)), this._convTotalUnreadCount = e3, this.emitOEvt(h2.TOTAL_UNREAD_MESSAGE_COUNT_UPDATED));
      } }, { key: "_isConvNeedShow", value: function(e3) {
        var t3, n3, e3 = this.getLocalConversation(e3);
        return !(!N2(e3) && (t3 = e3.type === R2.CONV_TOPIC, n3 = e3.type === R2.CONV_GROUP && e3.groupProfile.type === R2.GRP_ROOM, e3 = e3.type === R2.CONV_GROUP && e3.groupProfile.type === R2.GRP_LIVE, t3 || n3 || e3));
      } }, { key: "setAllRcvMsgOpt", value: function(e3) {
        return this._msgRemindHandler.setAllRcvMsgOpt(e3);
      } }, { key: "getAllRcvMsgOpt", value: function() {
        return this._msgRemindHandler.getAllRcvMsgOpt();
      } }, { key: "onAllRcvMsgOptNotify", value: function(e3) {
        this._msgRemindHandler.onAllRcvMsgOptNotify(e3);
      } }, { key: "clearUnreadCount", value: function(e3) {
        e3 = this.getLocalConversation(e3);
        e3 && 0 < e3.unreadCount && (e3.unreadCount = 0, this.emitConvUpdate(true, false));
      } }, { key: "storeHoppingMessageList", value: function(e3) {
        this._msgListHandler.storeHoppingMsgList(e3);
      } }, { key: "clearMemMsg", value: function(e3) {
        var t3 = 1 < arguments.length && void 0 !== arguments[1] && arguments[1];
        M2.l("".concat(this._n, ".clearMemMsg convID:").concat(e3, " isOverLimit:").concat(t3)), this._msgListHandler.removeByConvID(e3), this._completedMap.delete(e3), this._roamingMsgKeyAndTimeMap.delete(e3), this._everClearedMap.set(e3, 1);
      } }, { key: "reset", value: function() {
        M2.l("".concat(this._n, ".reset")), this._setStorageConvList(true), this._pagingStatus = bn, this._msgListHandler.reset(), this._msgRemindHandler.reset(), this._roamingMsgKeyAndTimeMap.clear(), this._sll.reset(), this._peerReadTimeMap.clear(), this._completedMap.clear(), this._convMap.clear(), this._pagingTs = 0, this._pagingStartIdx = 0, this._pagingPinnedTs = 0, this._pagingPinnedStartIdx = 0, this._remoteGroupReadSeqMap.clear(), this._convTotalUnreadCount = 0, this._pagingGetCostList.length = 0, this._pagingConvIDMap.clear(), this._convIDFromUnreadDBMap.clear(), this._pagingGetCostList.length = 0, this._convMapForDiff.clear(), this._partialUpdatedConvMap.clear(), this._everClearedMap.clear(), this._bPullOnInvite = true, this._convGroupHandler.reset(), this.resetReady();
      } }])), Qo = e2(function e3(t3) {
        p2(this, e3), this._grpM = t3, this._n = "GroupTipsHandler", this._cachedGroupTipsMap = /* @__PURE__ */ new Map(), this._checkCountMap = /* @__PURE__ */ new Map(), this.MAX_CHECK_COUNT = 4;
      }, [{ key: "onCheckTimer", value: function(e3) {
        e3 % 1 == 0 && 0 < this._cachedGroupTipsMap.size && this._check();
      } }, { key: "_check", value: function() {
        var i3 = this;
        this._cachedGroupTipsMap.forEach(function(e3, t3) {
          var n3 = i3._checkCountMap.get(t3), o3 = i3._grpM.hasLocalGroup(t3);
          M2.l("".concat(i3._n, "._check groupID:").concat(t3, " hasLocalGroup:").concat(o3, " checkCount:").concat(n3)), o3 ? (i3._notifyCachedGroupTips(t3), i3._checkCountMap.delete(t3), i3._grpM.deleteUnjoinedAVChatRoom(t3)) : n3 >= i3.MAX_CHECK_COUNT ? (i3._deleteCachedGroupTips(t3), i3._checkCountMap.delete(t3)) : i3._checkCountMap.set(t3, ++n3);
        });
      } }, { key: "onNewGroupTips", value: function(e3) {
        M2.l("".concat(this._n, ".onNewGroupTips options:").concat(JSON.stringify(e3.dataList)));
        var e3 = this._assembly(e3), t3 = e3.eventDataList, n3 = e3.result, e3 = e3.AVChatRoomMessageList;
        0 < e3.length && this._grpM.onAVChatRoomMessage(e3), 0 < n3.length && (this._grpM.emitOEvt(h2.MESSAGE_RECEIVED, n3), this._handleTips(n3)), 0 < t3.length && (this._grpM.updateNextMessageSeq(t3), this._grpM.get(11).onNewMessage({ conversationOptionsList: t3, isInstantMessage: true }));
      } }, { key: "_assembly", value: function(e3) {
        for (var t3 = e3.event, n3 = e3.dataList, o3 = null, i3 = [], a3 = [], s3 = {}, r3 = [], c3 = 0, u3 = n3.length; c3 < u3; c3++) {
          var l3 = yt2(n3[c3]);
          if (6 === t3) {
            if (this._grpM.isGroupAttributesUpdatedNotice(l3))
              continue;
            if (this._grpM.isGroupCountersNotice(l3))
              continue;
          }
          var d3 = l3.groupProfile, p3 = d3.groupID, _3 = d3.communityType, _3 = void 0 === _3 ? 0 : _3, h3 = d3.topicID, h3 = void 0 === h3 ? void 0 : h3, g3 = d3.invisible, d3 = d3.groupType, d3 = void 0 === d3 ? void 0 : d3, f3 = void 0, m3 = this._grpM.isMessageFromTopic(_3, h3), v3 = (m3 && (f3 = R2.CONV_TOPIC, l3.to = h3), this._grpM.hasLocalGroup(p3));
          if (v3 || !this._grpM.isUnjoinedAVChatRoom(p3))
            if (v3 || m3)
              if (this._grpM.isMessageFromOrToAVChatroom(p3))
                l3.event = t3, r3.push(l3);
              else if (l3.currentUser = this._grpM.getMyUserID(), l3.conversationType = R2.CONV_GROUP, (o3 = new So(l3)).setElement({ type: R2.MSG_GRP_TIP, content: y2(y2({}, l3.elements), {}, { groupProfile: l3.groupProfile }) }), o3.isSystemMessage = false, 1 !== g3) {
                var v3 = this._grpM.get(11), m3 = o3, g3 = m3.conversationID, m3 = m3.sequence;
                if (6 === t3)
                  o3._onlineOnlyFlag = true, a3.push(o3);
                else if (!v3.pushIntoNoticeResult(a3, o3))
                  continue;
                this._grpM.isMessageFromCommunityOfTopic(_3, h3) || 6 === t3 && v3.getLocalConversation(g3) || (6 !== t3 && this._qualityStat(o3), _3 = v3.isRemoteRead({ conversationID: g3, sequence: m3 }), N2(s3[g3]) ? (h3 = 0, "in" !== o3.flow || o3._isExcludedFromUnreadCount || o3._onlineOnlyFlag || _3 || (h3 = 1), s3[g3] = i3.push({ conversationID: g3, unreadCount: h3, type: N2(f3) ? o3.conversationType : f3, subType: o3.conversationSubType, lastMessage: o3._isExcludedFromLastMessage ? "" : o3 }) - 1) : (i3[v3 = s3[g3]].type = o3.conversationType, i3[v3].subType = o3.conversationSubType, i3[v3].lastMessage = o3._isExcludedFromLastMessage ? "" : o3, "in" !== o3.flow || o3._isExcludedFromUnreadCount || o3._onlineOnlyFlag || _3 || i3[v3].unreadCount++));
              } else
                this._qualityStat(o3);
            else
              this._cacheAndCompare({ groupID: p3, event: t3, item: l3, groupType: d3 });
        }
        return { eventDataList: i3, result: a3, AVChatRoomMessageList: r3 };
      } }, { key: "_qualityStat", value: function(e3) {
        this._grpM.get(26).addMessageSequence({ key: Qn, message: e3 });
      } }, { key: "_handleTips", value: function(e3) {
        var t3 = this;
        e3.forEach(function(e4) {
          switch (e4.payload.operationType) {
            case 1:
              t3._onNewMemberComeIn(e4);
              break;
            case 2:
              t3._onMemberQuit(e4);
              break;
            case 3:
              t3._onMemberKickedOut(e4);
              break;
            case 4:
              t3._onMemberSetAdmin(e4);
              break;
            case 5:
              t3._onMemberCancelledAdmin(e4);
              break;
            case 6:
              t3._onGroupProfileModified(e4);
              break;
            case 7:
              t3._onMemberInfoModified(e4);
              break;
            case 8:
              t3._onTopicProfileUpdated(e4);
              break;
            default:
              M2.w("".concat(t3._n, "._handleTips unknown operationType:").concat(e4.payload.operationType));
          }
        });
      } }, { key: "_onNewMemberComeIn", value: function(e3) {
        var e3 = e3.payload, t3 = e3.memberNum, e3 = e3.groupProfile.groupID, e3 = this._grpM.getLocalGroupProfile(e3);
        e3 && A2(t3) && e3.memberCount !== t3 && (e3.memberCount = t3, this._updateConvGroupProfile(e3));
      } }, { key: "_onMemberQuit", value: function(e3) {
        var t3 = e3.payload, n3 = t3.memberNum, t3 = t3.groupProfile.groupID, o3 = this._grpM.getLocalGroupProfile(t3);
        o3 && A2(n3) && o3.memberCount !== n3 && (o3.memberCount = n3, this._updateConvGroupProfile(o3)), this._grpM.getGroupMemberHandler().deleteLocalGroupMembers(t3, e3.payload.userIDList);
      } }, { key: "_onMemberKickedOut", value: function(e3) {
        var t3 = e3.payload, n3 = t3.memberNum, t3 = t3.groupProfile.groupID, o3 = this._grpM.getLocalGroupProfile(t3);
        o3 && A2(n3) && o3.memberCount !== n3 && (o3.memberCount = n3, this._updateConvGroupProfile(o3)), this._grpM.getGroupMemberHandler().deleteLocalGroupMembers(t3, e3.payload.userIDList);
      } }, { key: "_updateConvGroupProfile", value: function(e3) {
        this._grpM.get(11).updateConvGroupProfile([e3]);
      } }, { key: "_onMemberSetAdmin", value: function(e3) {
        var t3 = e3.payload.groupProfile.groupID, e3 = e3.payload.userIDList, n3 = this._grpM.getGroupMemberHandler();
        e3.forEach(function(e4) {
          e4 = n3.getLocalGroupMemberInfo(t3, e4);
          e4 && e4.updateRole(R2.GRP_MBR_ROLE_ADMIN);
        });
      } }, { key: "_onMemberCancelledAdmin", value: function(e3) {
        var t3 = e3.payload.groupProfile.groupID, e3 = e3.payload.userIDList, n3 = this._grpM.getGroupMemberHandler();
        e3.forEach(function(e4) {
          e4 = n3.getLocalGroupMemberInfo(t3, e4);
          e4 && e4.updateRole(R2.GRP_MBR_ROLE_MEMBER);
        });
      } }, { key: "_onGroupProfileModified", value: function(e3) {
        var t3 = this, e3 = e3.payload, n3 = e3.newGroupProfile, o3 = e3.groupProfile, i3 = e3.operatorInfo, e3 = o3.groupID, a3 = this._grpM.getLocalGroupProfile(e3), o3 = (Object.keys(n3).forEach(function(e4) {
          switch (e4) {
            case "ownerID":
              t3._ownerChanged(a3, n3);
              break;
            case "groupName":
              a3.name = n3[e4];
              break;
            default:
              a3[e4] = n3[e4];
          }
        }), N2(i3) || Object.keys(i3).forEach(function(e4) {
          var t4;
          "nameCard" === e4 ? a3.updateSelfInfo({ nameCard: i3[e4] }) : "role" === e4 && (t4 = "", 400 === i3[e4] ? t4 = R2.GRP_MBR_ROLE_OWNER : 300 === i3[e4] ? t4 = R2.GRP_MBR_ROLE_ADMIN : 200 === i3[e4] && (t4 = R2.GRP_MBR_ROLE_MEMBER), a3.updateSelfInfo({ role: t4 }));
        }), !a3.isSupportTopic);
        this._grpM.emitGroupListUpdate(true, o3);
      } }, { key: "_ownerChanged", value: function(e3, t3) {
        var e3 = e3.groupID, n3 = this._grpM.getLocalGroupProfile(e3), o3 = this._grpM.getMyUserID();
        o3 === t3.ownerID && (n3.updateGroup({ selfInfo: { role: R2.GRP_MBR_ROLE_OWNER } }), n3 = (t3 = this._grpM.getGroupMemberHandler()).getLocalGroupMemberInfo(e3, o3), o3 = this._grpM.getLocalGroupProfile(e3).ownerID, t3 = t3.getLocalGroupMemberInfo(e3, o3), n3 && n3.updateRole(R2.GRP_MBR_ROLE_OWNER), t3) && t3.updateRole(R2.GRP_MBR_ROLE_MEMBER);
      } }, { key: "_onMemberInfoModified", value: function(e3) {
        var t3 = e3.to, n3 = e3.payload, o3 = n3.groupProfile, n3 = n3.memberList, i3 = o3.groupID, a3 = (Ut2(t3) && this._updateTopicMuteTime(e3), this._grpM.getGroupMemberHandler());
        n3.forEach(function(e4) {
          var t4 = a3.getLocalGroupMemberInfo(i3, e4.userID);
          t4 && A2(e4.muteTime) && t4.updateMuteUntil(e4.muteTime);
        });
      } }, { key: "_updateTopicMuteTime", value: function(e3) {
        var t3 = e3.to, e3 = e3.payload, n3 = e3.groupProfile, e3 = e3.memberList, o3 = void 0 === e3 ? [] : e3, e3 = this._grpM.get(10), n3 = n3.groupID, i3 = e3.getLocalTopic(n3, t3);
        if (i3) {
          for (var a3 = false, s3 = 0; s3 < o3.length; s3++) {
            var r3 = o3[s3];
            if (r3.userID === this._grpM.getMyUserID() && 0 <= r3.muteTime) {
              i3.updateSelfInfo({ muteTime: r3.muteTime }), a3 = true;
              break;
            }
          }
          a3 && this._grpM.emitOEvt(h2.TOPIC_UPDATED, { groupID: n3, topic: i3 });
        }
      } }, { key: "_onTopicProfileUpdated", value: function(e3) {
        var t3 = e3.payload, n3 = t3.groupProfile.groupID, t3 = t3.newTopicInfo;
        this._grpM.get(10).onTopicProfileUpdated(y2({ groupID: n3, topicID: e3.to }, t3));
      } }, { key: "_cacheGroupTips", value: function(e3, t3) {
        this._cachedGroupTipsMap.has(e3) || this._cachedGroupTipsMap.set(e3, []), this._cachedGroupTipsMap.get(e3).push(t3);
      } }, { key: "_deleteCachedGroupTips", value: function(e3) {
        this._cachedGroupTipsMap.has(e3) && this._cachedGroupTipsMap.delete(e3);
      } }, { key: "_notifyCachedGroupTips", value: function(e3, t3) {
        var n3 = this, o3 = this._cachedGroupTipsMap.get(e3) || [];
        M2.l("".concat(this._n, "._notifyCachedGroupTips groupID:").concat(e3, " groupType:").concat(t3, " count:").concat(o3.length)), o3.forEach(function(e4) {
          n3.onNewGroupTips(e4);
        }), this._deleteCachedGroupTips(e3);
      } }, { key: "_cacheAndCompare", value: function(e3) {
        var t3 = e3.groupID, n3 = e3.event, o3 = e3.item, e3 = e3.groupType, n3 = (M2.l("".concat(this._n, "._cacheAndCompare groupID:").concat(t3, " groupType:").concat(e3)), this._cacheGroupTips(t3, { event: n3, dataList: [o3] }), { groupID: t3, type: e3 });
        e3 === R2.GRP_AVCHATROOM ? this._grpM.hasLocalGroup(t3) ? this._notifyCachedGroupTips(t3, e3) : this._grpM.setUnjoinedAVChatRoom(t3) : (this._grpM.updateGroupMap([n3]), this._notifyCachedGroupTips(t3, e3)), this._checkCountMap.has(t3) || this._checkCountMap.set(t3, 0);
      } }, { key: "reset", value: function() {
        this._cachedGroupTipsMap.clear(), this._checkCountMap.clear();
      } }]), $o = e2(function e3(t3) {
        p2(this, e3), this._grpM = t3, this._n = "CommonGroupHandler", this.tempConversationList = null, this._cachedGroupMessageMap = /* @__PURE__ */ new Map(), this._checkCountMap = /* @__PURE__ */ new Map(), this.MAX_CHECK_COUNT = 4, this.PAGING_GRP_COUNT_LIMIT = 200, this._pagingStatus = bn, this._pagingGetCostList = [], t3.getIEmitInst().on(U2.A2KEY_AND_TINYID_UPDATED, this.syncGroupList, this);
      }, [{ key: "onCheckTimer", value: function(e3) {
        e3 % 1 == 0 && 0 < this._cachedGroupMessageMap.size && this._check();
      } }, { key: "_check", value: function() {
        var i3 = this;
        this._cachedGroupMessageMap.forEach(function(e3, t3) {
          var n3 = i3._checkCountMap.get(t3), o3 = i3._grpM.hasLocalGroup(t3);
          M2.l("".concat(i3._n, "._check groupID:").concat(t3, " hasLocalGroup:").concat(o3, " checkCount:").concat(n3)), o3 ? (i3._notifyCachedGroupMessage(t3), i3._checkCountMap.delete(t3), i3._grpM.deleteUnjoinedAVChatRoom(t3)) : n3 >= i3.MAX_CHECK_COUNT ? (i3._deleteCachedGroupMessage(t3), i3._checkCountMap.delete(t3)) : i3._checkCountMap.set(t3, ++n3);
        });
      } }, { key: "updateLastMsg", value: function(e3) {
        var t3 = "".concat(this._n, ".updateLastMsg");
        if (0 !== this._grpM.getGroupMap().size) {
          for (var n3, o3, i3, a3, s3 = false, r3 = e3.length, c3 = 0; c3 < r3; c3++)
            (n3 = e3[c3]).type === R2.CONV_GROUP && 0 !== n3.lastMessage.lastSequence && null !== n3.lastMessage.payload && (o3 = n3.conversationID.split(/^GROUP/)[1], o3 = this._grpM.getLocalGroupProfile(o3)) && (i3 = o3.lastMessage, a3 = n3.lastMessage, JSON.stringify(i3) !== JSON.stringify(a3)) && (o3.lastMessage = y2({}, n3.lastMessage), s3 = true);
          M2.l("".concat(t3, " convCount:").concat(r3, " groupCount:").concat(this._grpM.getLocalGroupList().length, " isUpdated:").concat(s3)), s3 && (this._grpM.sortLocalGroupList(), this._grpM.emitGroupListUpdate(true, false));
        } else
          this.tempConversationList = e3;
      } }, { key: "onNewMessage", value: function(e3) {
        var t3 = this._assembly(e3), n3 = t3.conversationOptionsList, o3 = t3.messageList, t3 = t3.AVChatRoomMessageList, t3 = (0 < t3.length && this._grpM.onAVChatRoomMessage(t3), At2(o3)), t3 = (0 < t3.length && this._grpM.emitOEvt(h2.MESSAGE_MODIFIED, t3), 0 < n3.length && (this._grpM.get(11).onNewMessage({ conversationOptionsList: n3, isInstantMessage: false !== e3.isInstantMessage, updateUnreadCount: false !== e3.updateUnreadCount }), this._grpM.updateNextMessageSeq(n3)), Nt2(o3));
        0 < t3.length && this._grpM.emitOEvt(h2.MESSAGE_RECEIVED, t3), o3.length = 0;
      } }, { key: "_assembly", value: function(e3) {
        var t3 = e3.dataList, n3 = e3.event, o3 = e3.isInstantMessage, i3 = null, a3 = [], s3 = [], r3 = [], c3 = {}, u3 = this._grpM.getFileDownloadProxy(), l3 = this._grpM.getDownloadFileAuthKey(), d3 = this._grpM.get(17).getFileDNList(), p3 = t3.length;
        1 < p3 && t3.sort(function(e4, t4) {
          return e4.sequence - t4.sequence;
        });
        for (var _3 = this._grpM.get(11), h3 = this._grpM.get(4), g3 = 0; g3 < p3; g3++) {
          var f3, m3 = yt2(t3[g3]), v3 = m3.groupProfile, I3 = v3.groupID, M3 = v3.communityType, M3 = void 0 === M3 ? 0 : M3, y3 = v3.topicID, y3 = void 0 === y3 ? void 0 : y3, C3 = v3.invisible, v3 = v3.groupType, v3 = void 0 === v3 ? void 0 : v3, T3 = void 0, D3 = this._grpM.isMessageFromTopic(M3, y3), E3 = (D3 && (T3 = R2.CONV_TOPIC, m3.to = y3), this._grpM.hasLocalGroup(I3));
          !E3 && this._grpM.isUnjoinedAVChatRoom(I3) || (E3 || D3 ? this._grpM.isMessageFromOrToAVChatroom(I3) ? (m3.event = n3, r3.push(m3)) : (m3.currentUser = this._grpM.getMyUserID(), m3.conversationType = R2.CONV_GROUP, m3.isSystemMessage = !!m3.isSystemMessage, (i3 = new So(m3)).setElement(m3.elements, u3, l3, d3), 1 !== C3 ? (E3 = 1 === t3[g3].isModified, _3.isMessageSentByCurrentInstance(i3) ? i3.isModified = E3 : E3 = false, 1 === m3.onlineOnlyFlag ? (i3._onlineOnlyFlag = true, _3.isMessageSentByCurrentInstance(i3) || s3.push(i3)) : this._grpM.isMessageFromCommunityOfTopic(M3, y3) ? s3.push(i3) : (i3.from === this._grpM.getMyUserID() && (D3 = _3.getLatestMessageSentByMe(i3.conversationID)) && (C3 = D3.nick, M3 = D3.avatar, C3 === i3.nick && M3 === i3.avatar || (_3.modifyMessageSentByMe({ conversationID: f3, latestNick: i3.nick, latestAvatar: i3.avatar }), h3.mockOnNickAvatarModified(i3.nick, i3.avatar))), _3.pushIntoMessageList(s3, i3, E3) && (this._qualityStat(o3, i3), f3 = (y3 = i3).conversationID, D3 = y3.sequence, C3 = _3.isRemoteRead({ conversationID: f3, sequence: D3 }), N2(c3[f3]) ? (M3 = 0, "in" !== i3.flow || i3._isExcludedFromUnreadCount || C3 || (M3 = 1), c3[f3] = a3.push({ conversationID: f3, unreadCount: M3, type: N2(T3) ? i3.conversationType : T3, subType: i3.conversationSubType, lastMessage: i3._isExcludedFromLastMessage ? "" : i3 }) - 1) : (a3[E3 = c3[f3]].type = N2(T3) ? i3.conversationType : T3, a3[E3].subType = i3.conversationSubType, a3[E3].lastMessage = i3._isExcludedFromLastMessage ? "" : i3, "in" !== i3.flow || i3._isExcludedFromUnreadCount || C3 || a3[E3].unreadCount++)))) : this._qualityStat(o3, i3)) : this._cacheAndCompare({ groupID: I3, event: n3, item: m3, groupType: v3 }));
        }
        return { conversationOptionsList: a3, messageList: s3, AVChatRoomMessageList: r3 };
      } }, { key: "_qualityStat", value: function(e3, t3) {
        var n3 = this._grpM.get(26);
        n3.addMessageSequence({ key: Qn, message: t3 }), e3 && 0 < t3.clientTime && n3.addMessageDelay(t3.clientTime);
      } }, { key: "onMsgRevoked", value: function(e3, t3) {
        var n3 = this, u3 = this._grpM.get(11), l3 = [], d3 = [];
        e3.dataList.forEach(function(e4) {
          var t4 = e4.elements.revokedInfos, s3 = e4.revokerInfo, r3 = e4.groupProfile, c3 = false;
          r3 && (c3 = Pt2({ groupID: r3.groupID }) || !S2(r3.topicID)), N2(t4) || t4.forEach(function(e5) {
            var t5, n4 = S2(e5.topicID) ? "GROUP".concat(e5.groupID) : "GROUP".concat(e5.topicID), o3 = u3.getLocalConversation(n4), i3 = e5.revokerInfo && e5.revokerInfo.revoker || s3 && s3.revoker, a3 = s3 && s3.reason || "";
            o3 && Gt2(o3.type) ? t5 = { conversationID: n4, sequence: e5.sequence, ID: "".concat(e5.tinyID, "-").concat(e5.clientTime, "-").concat(e5.random) } : (o3 = u3.revoke(n4, e5.sequence, e5.random)) ? t5 = o3 : (t5 = { conversationID: n4, sequence: e5.sequence }, e5.tinyID && e5.clientTime && e5.random && (t5.ID = "".concat(e5.tinyID, "-").concat(e5.clientTime, "-").concat(e5.random)), e5.time && (t5.time = e5.time)), t5 && (t5.revoker = i3, t5.revokeReason = a3, t5.revokerInfo = { userID: i3, nick: "", avatar: "" }, (c3 ? (t5.revokerInfo.nick = r3.nick, t5.revokerInfo.avatar = r3.avatar, l3) : d3).push(t5));
          });
        }), 0 === d3.length && 0 === l3.length || (u3.onMessageRevoked([].concat(l3, d3), t3), 0 < l3.length && this._grpM.emitOEvt(h2.MESSAGE_REVOKED, l3), 0 < d3.length && u3.updateRevokerInfo(d3).then(function(e4) {
          n3._grpM.emitOEvt(h2.MESSAGE_REVOKED, e4);
        }));
      } }, { key: "_groupListTreeShaking", value: function(e3) {
        for (var n3 = new Map(d2(this._grpM.getGroupMap())), t3 = 0, o3 = e3.length; t3 < o3; t3++)
          n3.delete(e3[t3].groupID);
        this._grpM.hasJoinedAVChatRoom() && this._grpM.getJoinedAVChatRoom().forEach(function(e4) {
          n3.delete(e4);
        }), this._grpM.getGroupMap().forEach(function(e4, t4) {
          e4.isSupportTopic && n3.delete(t4);
        });
        for (var i3 = d2(n3.keys()), a3 = 0, s3 = i3.length; a3 < s3; a3++)
          this._grpM.deleteGroup(i3[a3]);
      } }, { key: "syncGroupList", value: function() {
        var o3, i3, a3 = this, e3 = 0 < arguments.length && void 0 !== arguments[0] && arguments[0], t3 = (this._pagingStatus === bn && this._grpM.clearGroupMap(), d2(re2)), n3 = this.PAGING_GRP_COUNT_LIMIT, s3 = [];
        return true === e3 ? this._pagingGetGroupListWithTopic({ limit: n3, offset: 0, groupBaseInfoFilter: t3, groupList: s3 }) : (e3 = "syncGroupList", o3 = "".concat(this._n, ".").concat(e3), i3 = new P2(e3), this._pagingGetGroupList({ limit: n3, offset: 0, groupBaseInfoFilter: t3, groupList: s3 }).then(function() {
          var e4 = on(a3._pagingGetCostList), t4 = nn(a3._pagingGetCostList), n4 = (a3._pagingGetCostList.length = 0, a3._pagingStatus = Fn, a3._groupListTreeShaking(s3), a3._grpM.updateGroupMap(s3), a3._grpM.getLocalGroupList().length), n4 = "count:".concat(n4, " sum:").concat(t4, " avg:").concat(e4);
          return M2.l("".concat(o3, " ok. ").concat(n4)), i3.setMessage(n4).end(), a3.tempConversationList && (a3.updateLastMsg(a3.tempConversationList), a3.tempConversationList = null), a3._grpM.emitGroupListUpdate(true, true), T2({ groupList: a3._grpM.getLocalGroupList() });
        }).catch(function(e4) {
          return a3._pagingStatus = qn, i3.setError(e4).end(), M2.e("".concat(o3, " failed. error:"), e4), E2(e4);
        }));
      } }, { key: "getGroupList", value: function() {
        var e3, t3 = this, n3 = "".concat(this._n, ".").concat("getGroupList");
        return M2.l("".concat(n3, " pagingStatus:").concat(this._pagingStatus)), this._pagingStatus === qn || this._pagingStatus === bn ? this.syncGroupList().then(function() {
          var e4 = t3._grpM.getLocalGroupList();
          return T2({ groupList: e4, isSyncCompleted: t3.isPagingGetCompleted() });
        }).catch(function(e4) {
          return M2.e("".concat(n3, " failed. error:"), e4), E2(e4);
        }) : (e3 = this._grpM.getLocalGroupList(), M2.l("".concat(n3, ". returned group count:").concat(e3.length)), D2({ groupList: e3, isSyncCompleted: this.isPagingGetCompleted() }));
      } }, { key: "isPagingGetCompleted", value: function() {
        return this._pagingStatus === Fn;
      } }, { key: "_pagingGetGroupList", value: function(e3) {
        var o3 = this, i3 = "".concat(this._n, ".").concat("_pagingGetGroupList"), t3 = e3.isCommunityRelay, a3 = void 0 !== t3 && t3, s3 = e3.limit, r3 = e3.offset, c3 = e3.groupBaseInfoFilter, u3 = e3.groupList, t3 = void 0, l3 = (a3 && (t3 = R2.GRP_COMMUNITY, c3.push("AtInfoList")), Date.now());
        return this._grpM.req({ P: G2.GET_GRP_LIST, data: { type: t3, memberAccount: this._grpM.getMyUserID(), limit: s3, offset: r3, responseFilter: { groupBaseInfoFilter: c3, selfInfoFilter: ["Role", "JoinTime", "MsgFlag", "MsgSeq"] } } }).then(function(e4) {
          var e4 = e4.data, t4 = e4.groups, t4 = void 0 === t4 ? [] : t4, e4 = e4.totalCount, t4 = (u3.push.apply(u3, d2(t4)), o3._handleGroupAtInfoWithoutTopic(a3, t4), r3 + s3), n3 = !(t4 < e4), e4 = "offset:".concat(r3, " limit:").concat(s3, " total:").concat(e4, " isCompleted:").concat(n3, " ") + "current:".concat(u3.length, " isCommunityRelay:").concat(a3);
          return o3._pagingGetCostList.push(an(l3, false)), M2.l("".concat(i3, " ok. ").concat(e4, " cost:").concat(an(l3))), a3 || n3 ? !a3 && n3 ? (M2.l("".concat(i3, " start to get community list")), r3 = 0, o3._pagingGetGroupList({ limit: s3, offset: r3, groupBaseInfoFilter: c3, groupList: u3, isCommunityRelay: true })) : a3 && !n3 ? (r3 = t4, o3._pagingGetGroupList({ limit: s3, offset: r3, groupBaseInfoFilter: c3, groupList: u3, isCommunityRelay: true })) : T2({ groupList: u3 }) : (r3 = t4, o3._pagingGetGroupList({ limit: s3, offset: r3, groupBaseInfoFilter: c3, groupList: u3 }));
        }).catch(function(e4) {
          return 10018 === e4.code ? (M2.w("".concat(o3.logPrefix, " response size exceeds the limit, request count:").concat(s3)), s3 = 50, o3._pagingGetGroupList({ limit: s3, offset: r3, groupBaseInfoFilter: c3, groupList: u3, isCommunityRelay: a3 })) : a3 ? (11e3 === e4.code && M2.l("".concat(i3, " ok. community unavailable")), D2({ groupList: u3 })) : E2(e4);
        });
      } }, { key: "_pagingGetGroupListWithTopic", value: function(e3) {
        var o3 = this, i3 = "".concat(this._n, "._pagingGetGroupListWithTopic"), a3 = e3.limit, s3 = e3.offset, r3 = e3.groupBaseInfoFilter, c3 = e3.groupList, u3 = Date.now();
        return this._grpM.req({ P: G2.GET_GRP_LIST, data: { type: R2.GRP_COMMUNITY, memberAccount: this._grpM.getMyUserID(), limit: a3, offset: s3, responseFilter: { groupBaseInfoFilter: r3, selfInfoFilter: d2(ce2) }, isSupportTopic: 1, needAppDefineData: 1 } }).then(function(e4) {
          var e4 = e4.data, t3 = e4.groups, e4 = e4.totalCount, t3 = (c3.push.apply(c3, d2(void 0 === t3 ? [] : t3)), s3 + a3), n3 = !(t3 < e4);
          if (M2.l("".concat(i3, " ok. offset:").concat(s3, " limit:").concat(a3, " totalCount:").concat(e4, " isCompleted:").concat(n3, " currentCount:").concat(c3.length, " cost:").concat(an(u3))), !n3)
            return s3 = t3, o3._pagingGetGroupListWithTopic({ limit: a3, offset: s3, groupBaseInfoFilter: r3, groupList: c3 });
          o3._grpM.updateGroupMap(c3), o3._grpM.emitGroupListUpdate(true, false);
          e4 = o3._grpM.getLocalGroupList().filter(function(e5) {
            return true === e5.isSupportTopic;
          });
          return T2({ groupList: e4 });
        }).catch(function(e4) {
          return 10018 === e4.code ? (M2.w("".concat(o3.logPrefix, " response size exceeds the limit, request count:").concat(a3)), a3 = 50, o3._pagingGetGroupListWithTopic({ limit: a3, offset: s3, groupBaseInfoFilter: r3, groupList: c3 })) : E2(e4);
        });
      } }, { key: "_cacheGroupMessage", value: function(e3, t3) {
        this._cachedGroupMessageMap.has(e3) || this._cachedGroupMessageMap.set(e3, []), this._cachedGroupMessageMap.get(e3).push(t3);
      } }, { key: "_deleteCachedGroupMessage", value: function(e3) {
        this._cachedGroupMessageMap.has(e3) && this._cachedGroupMessageMap.delete(e3);
      } }, { key: "_notifyCachedGroupMessage", value: function(e3, t3) {
        var n3 = this, o3 = this._cachedGroupMessageMap.get(e3) || [];
        M2.l("".concat(this._n, "._notifyCachedGroupMessage groupID:").concat(e3, " groupType:").concat(t3, " count:").concat(o3.length)), o3.forEach(function(e4) {
          n3.onNewMessage(e4);
        }), this._deleteCachedGroupMessage(e3);
      } }, { key: "_cacheAndCompare", value: function(e3) {
        var t3 = e3.groupID, n3 = e3.event, o3 = e3.item, e3 = e3.groupType, n3 = (M2.l("".concat(this._n, "._cacheAndCompare groupID:").concat(t3, " groupType:").concat(e3)), this._cacheGroupMessage(t3, { event: n3, dataList: [o3] }), { groupID: t3, type: e3 });
        e3 === R2.GRP_AVCHATROOM ? this._grpM.hasLocalGroup(t3) ? this._notifyCachedGroupMessage(t3, e3) : this._grpM.setUnjoinedAVChatRoom(t3) : (this._grpM.updateGroupMap([n3]), this._notifyCachedGroupMessage(t3, e3)), this._checkCountMap.has(t3) || this._checkCountMap.set(t3, 0);
      } }, { key: "_handleGroupAtInfoWithoutTopic", value: function(e3, t3) {
        var o3 = this;
        e3 && 0 !== t3.length && t3.forEach(function(e4) {
          var t4 = e4.groupID, e4 = e4.groupAtInfoList, n3 = [];
          N2(e4) || (e4.forEach(function(e5) {
            n3.push(y2(y2({}, e5), {}, { groupID: t4 }));
          }), o3._grpM.get(11).onNewGroupAtTips({ dataList: n3 }));
        });
      } }, { key: "setPagingGroupCount", value: function(e3) {
        N2(e3) || (this.PAGING_GRP_COUNT_LIMIT = parseInt(e3, 10));
      } }, { key: "reset", value: function() {
        this.PAGING_GRP_COUNT_LIMIT = 200, this._cachedGroupMessageMap.clear(), this._checkCountMap.clear(), this._pagingStatus = bn, this._pagingGetCostList = [];
      } }]), ei = e2(function e3(t3) {
        p2(this, e3), this._grpM = t3, this._n = "GroupAttributesHandler", this._groupAttributesMap = /* @__PURE__ */ new Map(), this._groupAttributesCopy = {}, this.CACHE_EXPIRE_TIME = 3e4, this._grpM.getIEmitInst().on(U2.CLOUD_CONFIG, this._onCloudConfig, this);
      }, [{ key: "_onCloudConfig", value: function() {
        var e3 = this._grpM.getCloudConfig("grp_attr_cache_time");
        N2(e3) || (this.CACHE_EXPIRE_TIME = Number(e3));
      } }, { key: "updateLocalMainSequenceOnReconnected", value: function() {
        this._groupAttributesMap.forEach(function(e3) {
          e3.localMainSequence = 0;
        });
      } }, { key: "isGroupAttributesUpdatedNotice", value: function(e3) {
        var t3 = e3.to, e3 = e3.elements.newGroupProfile, n3 = !N2(e3) && !S2(e3.groupAttributeOption);
        return n3 && this._onGroupAttributesUpdated({ groupID: t3, groupAttributeOption: e3.groupAttributeOption }), n3;
      } }, { key: "_onGroupAttributesUpdated", value: function(e3) {
        var t3, n3 = this, o3 = e3.groupID, e3 = e3.groupAttributeOption, i3 = e3.mainSequence, a3 = e3.isWithChangedAttributeInfo, s3 = e3.groupAttributeList, s3 = void 0 === s3 ? [] : s3, e3 = e3.operationType;
        M2.l("".concat(this._n, ".onGroupAttributesUpdated. ") + "groupID:".concat(o3, " isWithChangedAttributeInfo:").concat(a3, " operationType:").concat(e3)), N2(e3) || (this._groupAttributesCopy = this._getCachedAttributes({ groupID: o3 }), 0 != (t3 = i3 - this._getLocalGroupAttributes(o3).localMainSequence) && (1 === a3 && 1 == t3 ? (this._refreshCachedGroupAttributes({ groupID: o3, remoteMainSequence: i3, groupAttributeList: s3, operationType: e3 }), this._emitGroupAttributesUpdated(o3)) : this._hasLocalGroupAttributes(o3) && (a3 = this._getLocalGroupAttributes(o3).avChatRoomKey, this._getGroupAttributes({ groupID: o3, avChatRoomKey: a3 }).then(function() {
          n3._emitGroupAttributesUpdated(o3);
        }))));
      } }, { key: "initGroupAttributesCache", value: function(e3) {
        var t3 = e3.groupID, e3 = e3.avChatRoomKey, e3 = void 0 === e3 ? void 0 : e3;
        this._groupAttributesMap.set(t3, { lastUpdateTime: 0, localMainSequence: 0, remoteMainSequence: 0, attributes: /* @__PURE__ */ new Map(), avChatRoomKey: e3 }), M2.l("".concat(this._n, ".initGroupAttributesCache groupID:").concat(t3, " avChatRoomKey:").concat(e3));
      } }, { key: "initGroupAttributes", value: function(e3) {
        var n3 = this, o3 = e3.groupID, i3 = e3.groupAttributes, e3 = this._getLocalGroupAttributes(o3), t3 = e3.remoteMainSequence, e3 = e3.avChatRoomKey, a3 = new P2("initGroupAttributes");
        return a3.setMessage("groupID:".concat(o3, " avChatRoomKey:").concat(e3, " mainSequence:").concat(t3)), this._grpM.req({ P: G2.SET_GRP_ATTR, data: { groupID: o3, avChatRoomKey: e3, mainSequence: t3, groupAttributeList: this._transformGroupAttributes(i3) } }).then(function(e4) {
          M2.l("".concat(n3._n, ".").concat("initGroupAttributes", " ok. groupID:").concat(o3));
          var e4 = e4.data, t4 = e4.mainSequence, e4 = d2(e4.groupAttributeList);
          return e4.forEach(function(e5) {
            e5.value = i3[e5.key];
          }), n3._groupAttributesCopy = n3._getCachedAttributes({ groupID: o3 }), n3._refreshCachedGroupAttributes({ groupID: o3, remoteMainSequence: t4, groupAttributeList: e4, operationType: 1 }), n3._emitGroupAttributesUpdated(o3), a3.end(), T2({ groupAttributes: i3 });
        }).catch(function(e4) {
          return a3.setError(e4).end(), E2(e4);
        });
      } }, { key: "setGroupAttributes", value: function(e3) {
        var n3 = this, o3 = "".concat(this._n, ".").concat("setGroupAttributes"), i3 = e3.groupID, a3 = e3.groupAttributes, e3 = this._getLocalGroupAttributes(i3), t3 = e3.remoteMainSequence, s3 = e3.avChatRoomKey, r3 = e3.attributes, e3 = this._transformGroupAttributes(a3), c3 = (e3.forEach(function(e4) {
          var t4 = e4.key;
          e4.sequence = 0, r3.has(t4) && (e4.sequence = r3.get(t4).sequence);
        }), new P2("setGroupAttributes"));
        return c3.setMessage("groupID:".concat(i3, " groupAttributes:").concat(JSON.stringify(a3))), M2.l("".concat(o3, ". groupID:").concat(i3, " mainSequence:").concat(t3)), this._grpM.req({ P: G2.MODIFY_GRP_ATTR, data: { groupID: i3, avChatRoomKey: s3, mainSequence: t3, groupAttributeList: e3 } }).then(function(e4) {
          M2.l("".concat(o3, " ok."));
          var e4 = e4.data, t4 = e4.mainSequence, e4 = d2(e4.groupAttributeList);
          return e4.forEach(function(e5) {
            e5.value = a3[e5.key];
          }), n3._groupAttributesCopy = n3._getCachedAttributes({ groupID: i3 }), n3._refreshCachedGroupAttributes({ groupID: i3, remoteMainSequence: t4, groupAttributeList: e4, operationType: 2 }), n3._emitGroupAttributesUpdated(i3), c3.end(), T2({ groupAttributes: a3 });
        }).catch(function(e4) {
          return c3.setError(e4).end(), E2(e4);
        });
      } }, { key: "deleteGroupAttributes", value: function(e3) {
        var t3 = this, n3 = e3.groupID, e3 = e3.keyList, e3 = void 0 === e3 ? [] : e3, o3 = this._getLocalGroupAttributes(n3), i3 = o3.remoteMainSequence, a3 = o3.avChatRoomKey, s3 = o3.attributes, r3 = d2(s3.keys()), o3 = G2.CLEAR_GRP_ATTR, c3 = 3, a3 = { groupID: n3, avChatRoomKey: a3, mainSequence: i3 }, u3 = [], l3 = (0 < e3.length && (r3 = [], o3 = G2.DEL_GRP_ATTR, c3 = 4, e3.forEach(function(e4) {
          var t4 = 0;
          s3.has(e4) && (t4 = s3.get(e4).sequence, r3.push(e4)), u3.push({ key: e4, sequence: t4 });
        }), a3.groupAttributeList = u3), new P2("deleteGroupAttributes"));
        return l3.setMessage("groupID:".concat(n3, " mainSequence:").concat(i3, " keyList:").concat(e3, " proto:").concat(o3)), this._grpM.req({ P: o3, data: a3 }).then(function(e4) {
          M2.l("".concat(t3._n, ".").concat("deleteGroupAttributes", " ok. groupID:").concat(n3));
          e4 = e4.data.mainSequence;
          return t3._groupAttributesCopy = t3._getCachedAttributes({ groupID: n3 }), t3._refreshCachedGroupAttributes({ groupID: n3, remoteMainSequence: e4, groupAttributeList: u3, operationType: c3 }), t3._emitGroupAttributesUpdated(n3), l3.end(), T2({ keyList: r3 });
        }).catch(function(e4) {
          return l3.setError(e4).end(), E2(e4);
        });
      } }, { key: "getGroupAttributes", value: function(t3) {
        var n3 = this, o3 = "".concat(this._n, ".").concat("getGroupAttributes"), i3 = t3.groupID, e3 = this._getLocalGroupAttributes(i3), a3 = e3.avChatRoomKey, s3 = e3.lastUpdateTime, r3 = e3.localMainSequence, e3 = e3.remoteMainSequence, c3 = new P2("getGroupAttributes");
        if (c3.setMessage("groupID:".concat(i3, " localMainSequence:").concat(r3, " remoteMainSequence:").concat(e3, " keyList:").concat(t3.keyList)), Date.now() - s3 >= this.CACHE_EXPIRE_TIME || r3 < e3)
          return this._getGroupAttributes({ groupID: i3, avChatRoomKey: a3 }).then(function(e4) {
            c3.setMoreMessage("get attributes from remote. count:".concat(e4.length)).end(), M2.l("".concat(o3, " from remote. groupID:").concat(i3));
            e4 = n3._getCachedAttributes(t3);
            return T2({ groupAttributes: e4 });
          }).catch(function(e4) {
            return c3.setError(e4).end(), E2(e4);
          });
        c3.setMoreMessage("get attributes from cache").end(), M2.l("".concat(o3, " from cache. groupID:").concat(i3));
        s3 = this._getCachedAttributes(t3);
        return D2({ groupAttributes: s3 });
      } }, { key: "_getGroupAttributes", value: function(o3) {
        var i3 = this, e3 = 0;
        return N2(o3.avChatRoomKey) || (e3 = 1), this._grpM.req({ P: G2.GET_GRP_ATTR, data: y2(y2({}, o3), {}, { groupType: e3 }) }).then(function(e4) {
          M2.l("".concat(i3._n, "._getGroupAttributes ok. groupID:").concat(o3.groupID));
          var e4 = e4.data, t3 = e4.mainSequence, e4 = e4.groupAttributeList, n3 = d2(e4);
          return N2(t3) || i3._refreshCachedGroupAttributes({ groupID: o3.groupID, remoteMainSequence: t3, groupAttributeList: n3, operationType: 5 }), e4;
        }).catch(function(e4) {
          return E2(e4);
        });
      } }, { key: "_refreshCachedGroupAttributes", value: function(e3) {
        var t3 = e3.groupID, n3 = e3.remoteMainSequence, o3 = e3.groupAttributeList, e3 = e3.operationType;
        if (this._hasLocalGroupAttributes(t3)) {
          var i3 = this._getLocalGroupAttributes(t3), a3 = i3.localMainSequence;
          if (5 === e3 || n3 - a3 == 1)
            i3.remoteMainSequence = n3, i3.localMainSequence = n3, i3.lastUpdateTime = Date.now(), this._updateCachedAttributes({ groupAttributes: i3, groupAttributeList: o3, operationType: e3 });
          else {
            if (a3 === n3)
              return;
            i3.remoteMainSequence = n3;
          }
          this._groupAttributesMap.set(t3, i3);
          o3 = "operationType:".concat(e3, " localMainSequence:").concat(a3, " remoteMainSequence:").concat(n3);
          M2.l("".concat(this._n, "._refreshCachedGroupAttributes. ").concat(o3));
        }
      } }, { key: "_getCachedAttributes", value: function(e3) {
        var t3 = e3.groupID, e3 = e3.keyList, e3 = void 0 === e3 ? [] : e3, n3 = {};
        if (this._hasLocalGroupAttributes(t3)) {
          var o3 = this._getLocalGroupAttributes(t3).attributes;
          if (0 < e3.length)
            e3.forEach(function(e4) {
              o3.has(e4) && (n3[e4] = o3.get(e4).value);
            });
          else {
            var i3, a3 = F2(o3.keys());
            try {
              for (a3.s(); !(i3 = a3.n()).done; ) {
                var s3 = i3.value;
                n3[s3] = o3.get(s3).value;
              }
            } catch (e4) {
              a3.e(e4);
            } finally {
              a3.f();
            }
          }
        }
        return n3;
      } }, { key: "_updateCachedAttributes", value: function(e3) {
        var o3 = e3.groupAttributes, t3 = e3.groupAttributeList, e3 = e3.operationType;
        3 !== e3 ? 4 !== e3 ? (1 === e3 && o3.attributes.clear(), t3.forEach(function(e4) {
          var t4 = e4.key, n3 = e4.value, e4 = e4.sequence;
          o3.attributes.set(t4, { value: n3, sequence: e4 });
        })) : t3.forEach(function(e4) {
          o3.attributes.delete(e4.key);
        }) : o3.attributes.clear();
      } }, { key: "_hasLocalGroupAttributes", value: function(e3) {
        return this._groupAttributesMap.has(e3);
      } }, { key: "_getLocalGroupAttributes", value: function(e3) {
        return this._hasLocalGroupAttributes(e3) || this.initGroupAttributesCache({ groupID: e3 }), this._groupAttributesMap.get(e3);
      } }, { key: "_transformGroupAttributes", value: function(t3) {
        var n3 = [];
        return Object.keys(t3).forEach(function(e3) {
          n3.push({ key: e3, value: t3[e3] });
        }), n3;
      } }, { key: "_emitGroupAttributesUpdated", value: function(e3) {
        var t3 = this._getCachedAttributes({ groupID: e3 }), n3 = this._computeAttrChangedInfo(t3), o3 = n3.updatedKeyList, n3 = n3.deletedKeyList;
        M2.l("".concat(this._n, "._emitGroupAttributesUpdated update:").concat(o3.length, ", delete:").concat(n3.length)), 0 === o3.length && 0 === n3.length || this._grpM.emitOEvt(h2.GROUP_ATTRIBUTES_UPDATED, { groupID: e3, groupAttributes: t3, updatedKeyList: o3, deletedKeyList: n3 });
      } }, { key: "_computeAttrChangedInfo", value: function(t3) {
        var n3 = this, o3 = [], i3 = [];
        return Object.keys(t3).forEach(function(e3) {
          t3[e3] !== n3._groupAttributesCopy[e3] && o3.push(e3);
        }), Object.keys(this._groupAttributesCopy).forEach(function(e3) {
          N2(t3[e3]) && i3.push(e3);
        }), this._groupAttributesCopy = {}, { updatedKeyList: o3, deletedKeyList: i3 };
      } }, { key: "deleteLocalGroupAttributes", value: function(e3) {
        this._hasLocalGroupAttributes(e3) && this._groupAttributesMap.delete(e3);
      } }, { key: "reset", value: function() {
        this._groupAttributesMap.clear(), this._groupAttributesCopy = {}, this.CACHE_EXPIRE_TIME = 3e4;
      } }]), ti = e2(function e3(t3) {
        p2(this, e3), this._grpM = t3, this._n = "GroupCountersHandler", this._groupCountersMap = /* @__PURE__ */ new Map(), this.EXPIRE_TIME = 3e4, this._grpM.getIEmitInst().on(U2.CLOUD_CONFIG, this._onCloudConfig, this);
      }, [{ key: "_onCloudConfig", value: function() {
        var e3 = this._grpM.getCloudConfig("grp_counter_expire_time");
        N2(e3) || (this.EXPIRE_TIME = Number(e3));
      } }, { key: "isGroupCountersNotice", value: function(e3) {
        var t3 = e3.to, e3 = e3.elements.groupCounterInfo, n3 = false;
        return S2(e3) || (this._onGroupCountersUpdated({ groupID: t3, groupCounterInfo: e3 }), n3 = true), n3;
      } }, { key: "_onGroupCountersUpdated", value: function(e3) {
        var o3 = this, i3 = e3.groupID;
        e3.groupCounterInfo.forEach(function(e4) {
          var t3 = e4.type, n3 = e4.groupCounterSeq, e4 = e4.counterList, e4 = void 0 === e4 ? [] : e4;
          0 !== t3 && 2 !== t3 || (o3._updateLocalGroupCounters({ groupID: i3, groupCounterSeq: n3, counterList: e4 }), e4.forEach(function(e5) {
            o3._grpM.emitOEvt(h2.GROUP_COUNTER_UPDATED, { groupID: i3, key: e5.key, value: e5.value });
          })), 1 === t3 && o3._deleteLocalGroupCounters({ groupID: i3, groupCounterSeq: n3, counterList: e4 });
        }), M2.l("".concat(this._n, "._onGroupCountersUpdated groupID:").concat(i3));
      } }, { key: "initGroupCountersCache", value: function(e3) {
        var t3 = e3.groupID, e3 = e3.avChatRoomKey;
        this._groupCountersMap.set(t3, { lastUpdateTime: 0, groupCounterSeq: 0, counters: /* @__PURE__ */ new Map(), avChatRoomKey: e3 }), M2.l("".concat(this._n, ".initGroupCountersCache groupID:").concat(t3, " avChatRoomKey:").concat(e3));
      } }, { key: "setGroupCounters", value: function(e3) {
        var t3, n3, o3, i3, a3;
        return this._grpM.canIUse(g2.GRP_COUNTER) ? (t3 = "".concat(this._n, ".").concat("setGroupCounters"), n3 = e3.groupID, e3 = e3.counters, e3 = this._convertObjectToList(e3), o3 = this._getLocalGroupCounters(n3).avChatRoomKey, i3 = "groupID:".concat(n3, " count:").concat(e3.length), (a3 = new P2("setGroupCounters")).setMessage("".concat(i3)), M2.l("".concat(t3, ". ").concat(i3)), this._updateGroupCounters({ groupID: n3, counterList: e3, avChatRoomKey: o3, mode: "Set" }).then(function(e4) {
          return a3.end(), M2.l("".concat(t3, " ok.")), T2({ counters: e4 });
        }).catch(function(e4) {
          return a3.setError(e4).end(), M2.e("".concat(t3, " failed. error:"), e4), E2(e4);
        })) : this._grpM.noUse("setGroupCounters");
      } }, { key: "increaseGroupCounter", value: function(e3) {
        var t3, n3, o3, i3, a3, s3, r3 = "increaseGroupCounter";
        return this._grpM.canIUse(g2.GRP_COUNTER) ? (t3 = "".concat(this._n, ".").concat(r3), n3 = e3.groupID, o3 = e3.key, e3 = e3.value, i3 = this._getLocalGroupCounters(n3).avChatRoomKey, a3 = "groupID:".concat(n3, " key:").concat(o3, " value:").concat(e3), (s3 = new P2(r3)).setMessage("".concat(a3)), M2.l("".concat(t3, ". ").concat(a3)), this._updateGroupCounters({ groupID: n3, counterList: [{ key: o3, value: e3 }], avChatRoomKey: i3, mode: "Increase" }).then(function(e4) {
          return s3.end(), M2.l("".concat(t3, " ok.")), T2({ counters: e4 });
        }).catch(function(e4) {
          return s3.setError(e4).end(), M2.e("".concat(t3, " failed. error:"), e4), E2(e4);
        })) : this._grpM.noUse(r3);
      } }, { key: "decreaseGroupCounter", value: function(e3) {
        var t3, n3, o3, i3, a3, s3, r3 = "decreaseGroupCounter";
        return this._grpM.canIUse(g2.GRP_COUNTER) ? (t3 = "".concat(this._n, ".").concat(r3), n3 = e3.groupID, o3 = e3.key, e3 = e3.value, i3 = this._getLocalGroupCounters(n3).avChatRoomKey, a3 = "groupID:".concat(n3, " key:").concat(o3, " value:").concat(e3), (s3 = new P2(r3)).setMessage("".concat(a3)), M2.l("".concat(t3, ". ").concat(a3)), this._updateGroupCounters({ groupID: n3, counterList: [{ key: o3, value: e3 }], avChatRoomKey: i3, mode: "Decrease" }).then(function(e4) {
          return s3.end(), M2.l("".concat(t3, " ok.")), T2({ counters: e4 });
        }).catch(function(e4) {
          return s3.setError(e4).end(), M2.e("".concat(t3, " failed. error:"), e4), E2(e4);
        })) : this._grpM.noUse(r3);
      } }, { key: "getGroupCounters", value: function(e3) {
        var t3 = this;
        if (!this._grpM.canIUse(g2.GRP_COUNTER))
          return this._grpM.noUse("getGroupCounters");
        var n3 = "".concat(this._n, ".").concat("getGroupCounters"), o3 = e3.groupID, e3 = e3.keyList, i3 = void 0 === e3 ? [] : e3, e3 = this._getLocalGroupCounters(o3), a3 = e3.avChatRoomKey, e3 = e3.lastUpdateTime, s3 = new P2("getGroupCounters");
        if (s3.setMessage("groupID:".concat(o3)), Date.now() - e3 >= this.EXPIRE_TIME)
          return this._getRemoteGroupCounters({ groupID: o3, avChatRoomKey: a3 }).then(function(e4) {
            s3.setMoreMessage("from remote. count:".concat(e4.length)).end(), M2.l("".concat(n3, " from remote. groupID:").concat(o3));
            e4 = t3._getLocalCounters(o3, i3);
            return T2({ counters: e4 });
          }).catch(function(e4) {
            return s3.setError(e4).end(), E2(e4);
          });
        s3.setMoreMessage("from cache").end(), M2.l("".concat(n3, " from cache. groupID:").concat(o3));
        e3 = this._getLocalCounters(o3, i3);
        return D2({ counters: e3 });
      } }, { key: "_getRemoteGroupCounters", value: function(n3) {
        var o3 = this;
        return this._grpM.req({ P: G2.GET_GRP_COUNTER, data: y2({}, n3) }).then(function(e3) {
          var e3 = e3.data, t3 = e3.counterList, t3 = void 0 === t3 ? [] : t3, e3 = e3.groupCounterSeq;
          return o3._updateLocalGroupCounters({ groupID: n3.groupID, counterList: t3, groupCounterSeq: e3 }), M2.l("".concat(o3._n, "._getRemoteGroupCounters ok. groupID:").concat(n3.groupID)), t3;
        }).catch(function(e3) {
          return E2(e3);
        });
      } }, { key: "_convertObjectToList", value: function(t3) {
        var n3 = [];
        return Object.keys(t3).forEach(function(e3) {
          n3.push({ key: e3, value: t3[e3] });
        }), n3;
      } }, { key: "_updateGroupCounters", value: function(e3) {
        var t3 = "".concat(this._n, "._updateGroupCounters"), n3 = e3.groupID, o3 = e3.avChatRoomKey, i3 = e3.mode;
        return M2.l("".concat(t3, ". groupID:").concat(n3, " avChatRoomKey:").concat(o3, " mode:").concat(i3)), this._grpM.req({ P: G2.UPDATE_GRP_COUNTER, data: y2({}, e3) }).then(function(e4) {
          M2.l("".concat(t3, " ok."));
          var e4 = e4.data.counterList, n4 = {};
          return (void 0 === e4 ? [] : e4).forEach(function(e5) {
            var t4 = e5.key, e5 = e5.value;
            n4[t4] = e5;
          }), n4;
        }).catch(function(e4) {
          return E2(e4);
        });
      } }, { key: "_hasLocalGroupCounters", value: function(e3) {
        return this._groupCountersMap.has(e3);
      } }, { key: "_getLocalGroupCounters", value: function(e3) {
        return this._hasLocalGroupCounters(e3) || this.initGroupCountersCache({ groupID: e3 }), this._groupCountersMap.get(e3);
      } }, { key: "_updateLocalGroupCounters", value: function(e3) {
        var n3, t3, o3, i3 = e3.groupID, a3 = e3.counterList, a3 = void 0 === a3 ? [] : a3, e3 = e3.groupCounterSeq;
        this._hasLocalGroupCounters(i3) && (o3 = this._getLocalGroupCounters(i3), n3 = o3.counters, t3 = o3.avChatRoomKey, o3 = o3.groupCounterSeq, 0 < e3 && e3 < o3 || (a3.forEach(function(e4) {
          var t4 = e4.key, e4 = e4.value;
          n3.set(t4, e4);
        }), this._groupCountersMap.set(i3, { lastUpdateTime: Date.now(), groupCounterSeq: e3, counters: n3, avChatRoomKey: t3 })));
      } }, { key: "_deleteLocalGroupCounters", value: function(e3) {
        var t3, n3, o3 = e3.groupID, i3 = e3.counterList, i3 = void 0 === i3 ? [] : i3, e3 = e3.groupCounterSeq;
        this._hasLocalGroupCounters(o3) && (n3 = this._getLocalGroupCounters(o3), t3 = n3.counters, n3 = n3.avChatRoomKey, i3.forEach(function(e4) {
          t3.delete(e4.key);
        }), this._groupCountersMap.set(o3, { lastUpdateTime: Date.now(), groupCounterSeq: e3, counters: t3, avChatRoomKey: n3 }));
      } }, { key: "_getLocalCounters", value: function(e3, t3) {
        var n3 = {};
        if (this._hasLocalGroupCounters(e3)) {
          var o3 = this._getLocalGroupCounters(e3).counters;
          if (0 < t3.length)
            t3.forEach(function(e4) {
              o3.has(e4) && (n3[e4] = o3.get(e4));
            });
          else {
            var i3, a3 = F2(o3.keys());
            try {
              for (a3.s(); !(i3 = a3.n()).done; ) {
                var s3 = i3.value;
                n3[s3] = o3.get(s3);
              }
            } catch (e4) {
              a3.e(e4);
            } finally {
              a3.f();
            }
          }
        }
        return n3;
      } }, { key: "reset", value: function() {
        this._groupCountersMap.clear(), this.EXPIRE_TIME = 3e4;
      } }]), ni = e2(function e3(t3) {
        p2(this, e3);
        var n3 = t3.manager, o3 = t3.groupID, i3 = t3.onInit, a3 = t3.onSuccess, t3 = t3.onFail;
        this._n = "Polling", this._manager = n3, this._grpM = n3._grpM, this._onInit = i3, this._onSuccess = a3, this._onFail = t3, this._groupID = o3, this._timeoutID = -1, this._isRunning = false, this._proto = G2.AV_POLLING;
      }, [{ key: "start", value: function() {
        var e3 = this._grpM.isLoggedIn();
        e3 || (this._proto = G2.AV_NOAUTH_POLLING), M2.l("".concat(this._n, ".start pollingInterval:").concat(this._manager.getPollingInterval(), " isLoggedIn:").concat(e3)), this._isRunning = true, this._request();
      } }, { key: "isRunning", value: function() {
        return this._isRunning;
      } }, { key: "_request", value: function() {
        var t3 = this, e3 = this._onInit(this._groupID);
        this._grpM.req({ P: this._proto, data: e3 }).then(function(e4) {
          t3._onSuccess(t3._groupID, e4), t3.isRunning() && (-1 < t3._timeoutID && clearTimeout(t3._timeoutID), t3._timeoutID = setTimeout(t3._request.bind(t3), t3._manager.getPollingInterval()));
        }).catch(function(e4) {
          t3._onFail(t3._groupID, e4), t3.isRunning() && (-1 < t3._timeoutID && clearTimeout(t3._timeoutID), t3._timeoutID = setTimeout(t3._request.bind(t3), t3._manager.MAX_POLLING_INTERVAL));
        });
      } }, { key: "stop", value: function() {
        M2.l("".concat(this._n, ".stop")), -1 < this._timeoutID && (clearTimeout(this._timeoutID), this._timeoutID = -1), this._isRunning = false;
      } }, { key: "getPollingTimerID", value: function() {
        return this._timeoutID;
      } }]), oi = { 3: true, 4: true, 5: true, 6: true, 17: true, 20: true, 21: true, 100: true }, ii = e2(function e3(t3) {
        p2(this, e3), this._grpM = t3, this._n = "AVChatRoomHandler", this._joinedGroupMap = /* @__PURE__ */ new Map(), this._pollingRequestInfoMap = /* @__PURE__ */ new Map(), this._pollingInstanceMap = /* @__PURE__ */ new Map(), this._seqSll = new Ko(200), this._IDSll = new Ko(100), this._reportMessageStackedCount = 0, this._onlineMemberCountMap = /* @__PURE__ */ new Map(), this.DEFAULT_EXPIRE_TIME = 60, this.DEFAULT_POLLING_INTERVAL = 300, this.MAX_POLLING_INTERVAL = 2e3, this._pollingInterval = this.DEFAULT_POLLING_INTERVAL, this.DEFAULT_POLLING_NO_MESSAGE_COUNT = 20, this.DEFAULT_POLLING_INTERVAL_PLUS = 2e3, this._pollingNoMessageCount = 0, this._startBroadcastSeq = 1, this._broadcastMessageIDMap = /* @__PURE__ */ new Map(), this.DEFAULT_POLLING_SIMPLIFIED_MSG = 0;
      }, [{ key: "hasJoinedAVChatRoom", value: function() {
        var e3 = [];
        return 0 < (e3 = 0 < this._joinedGroupMap.size ? d2(this._joinedGroupMap.values()).filter(function(e4) {
          return e4.type === R2.GRP_AVCHATROOM;
        }) : e3).length;
      } }, { key: "getJoinedLiveList", value: function() {
        var e3 = [];
        return e3 = 0 < this._joinedGroupMap.size ? d2(this._joinedGroupMap.values()).filter(function(e4) {
          return e4.type === R2.GRP_LIVE;
        }) : e3;
      } }, { key: "checkJoinedAVChatRoomByID", value: function(e3) {
        return this._joinedGroupMap.has(e3);
      } }, { key: "getJoinedAVChatRoom", value: function() {
        return 0 < this._joinedGroupMap.size ? d2(this._joinedGroupMap.keys()) : [];
      } }, { key: "_updatedata", value: function(e3) {
        var t3 = this._pollingRequestInfoMap.get(e3);
        return e3 === d2(this._pollingInstanceMap.keys())[0] ? y2(y2({}, t3), {}, { startBroadcastSeq: this._startBroadcastSeq, simplifiedMessage: this.DEFAULT_POLLING_SIMPLIFIED_MSG }) : y2(y2({}, t3), {}, { simplifiedMessage: this.DEFAULT_POLLING_SIMPLIFIED_MSG });
      } }, { key: "_handleSuccess", value: function(e3, t3) {
        var n3, o3 = t3.data, i3 = o3.key, a3 = o3.nextSeq, s3 = o3.rspMsgList, r3 = o3.errorCode, c3 = o3.nextBroadcastSeq, o3 = o3.broadcastMessageList;
        0 !== r3 ? (r3 = this._pollingRequestInfoMap.get(e3), n3 = new P2("longPollingAVError"), r3 = r3 ? "".concat(r3.key, "-").concat(r3.startSeq) : "requestInfo is undefined", n3.setMessage("".concat(e3, "-").concat(r3, "-").concat(t3.errorInfo)).setCode(t3.errorCode).end(true)) : this.checkJoinedAVChatRoomByID(e3) && (C2(i3) && A2(a3) && this._pollingRequestInfoMap.set(e3, { key: i3, startSeq: a3 }), A2(c3) && c3 > this._startBroadcastSeq && (this._startBroadcastSeq = c3), O2(s3) && 0 < s3.length ? (s3.forEach(function(e4) {
          e4.to = e4.groupID;
        }), this.onMessage(s3, e3)) : (this._pollingNoMessageCount += 1, this._pollingNoMessageCount === this.DEFAULT_POLLING_NO_MESSAGE_COUNT && (this._pollingInterval = this.DEFAULT_POLLING_INTERVAL + this.DEFAULT_POLLING_INTERVAL_PLUS)), this._onBroadcastMessage(o3));
      } }, { key: "_handleFailure", value: function(e3, t3) {
      } }, { key: "onMessage", value: function(e3, t3) {
        if (O2(e3) && 0 !== e3.length) {
          var n3 = "".concat(this._n, ".onMessage"), o3 = (t3 && (n3 += " groupID:".concat(t3)), 0 !== this._pollingNoMessageCount && (this._pollingNoMessageCount = 0, this._pollingInterval = this.DEFAULT_POLLING_INTERVAL), null), i3 = [], a3 = this._get(11), s3 = this._get(26), r3 = e3.length, c3 = (1 < r3 && e3.sort(function(e4, t4) {
            return e4.sequence - t4.sequence;
          }), this._get(12).isUnlimitedAVChatRoom()), u3 = false;
          M2.getLevel() <= 0 && (t3 = e3.map(function(e4) {
            return e4.sequence;
          }), M2.l("".concat(n3, " count:").concat(t3.length, " sequenceList:").concat(t3)), t3.length = 0);
          for (var l3 = 0; l3 < r3; l3++) {
            var d3 = this.restoreMessageFromSimplified(e3[l3]);
            if (oi[d3.event]) {
              if (6 === d3.event) {
                if (this._grpM.isGroupAttributesUpdatedNotice(d3))
                  continue;
                if (this._grpM.isGroupCountersNotice(d3))
                  continue;
              }
              if (20 !== d3.event)
                if (21 !== d3.event)
                  if (100 !== d3.event) {
                    var o3 = this.packMessage(d3, d3.event), p3 = 1 === d3.isModified, u3 = 1 === d3.isHistoryMessage;
                    if (!c3) {
                      if (this._seqSll.has(o3.sequence))
                        continue;
                      this._seqSll.set(o3.sequence);
                    }
                    var _3 = this._IDSll.has(o3.ID);
                    _3 ? M2.w("".concat(n3, " ID:").concat(o3.ID, " has:").concat(_3)) : (this._IDSll.set(o3.ID), _3 = false, !u3 && this._isMessageSentByCurrentInstance(o3) ? p3 && (_3 = true, o3.isModified = p3, a3.updateMsgIsModifiedProp(o3)) : _3 = true, _3 && (o3.conversationType === R2.CONV_SYSTEM && 5 === o3.payload.operationType && this._onGroupDismissed(o3.payload.groupProfile.groupID), u3 || o3.conversationType === R2.CONV_SYSTEM || (p3 = o3.conversationID.replace(R2.CONV_GROUP, ""), this._pollingInstanceMap.has(p3) ? this._grpM.isLoggedIn() && s3.addMessageSequence({ key: eo, message: o3 }) : (o3.type !== R2.MSG_GRP_TIP && 0 < o3.clientTime && s3.addMessageDelay(o3.clientTime), s3.addMessageSequence({ key: $n, message: o3 }))), i3.push(o3)));
                  } else
                    this.onRoomCustomData(d3);
                else
                  this._get(34).onMessageReactionNotify({ event: 21, dataList: d3.elements.messageReactionNotifyList });
              else
                this.handleMessageRevokedNotice(d3);
            } else
              M2.w("".concat(n3, ". unknown event:").concat(d3.event));
          }
          0 !== i3.length && (0 < (t3 = At2(i3)).length && this._grpM.emitOEvt(h2.MESSAGE_MODIFIED, t3), u3 || 0 < (t3 = this.packConversationOption(i3)).length && a3.onNewMessage({ conversationOptionsList: t3, isInstantMessage: true }), this._checkMessageStacked(i3), 0 < (t3 = Nt2(i3)).length && this._grpM.emitOEvt(h2.MESSAGE_RECEIVED, t3), i3.length = 0);
        }
      } }, { key: "handleMessageRevokedNotice", value: function(e3) {
        var t3 = this, i3 = e3.groupID, n3 = e3.elements.revokeMsgList, a3 = e3.revokerInfo, s3 = [];
        n3.forEach(function(e4) {
          var t4 = e4.tinyID, n4 = e4.clientTime, o3 = e4.random, e4 = e4.sequence, t4 = { conversationID: "".concat(R2.CONV_GROUP).concat(i3), ID: "".concat(t4, "-").concat(n4, "-").concat(o3), revoker: a3.revoker, revokeReason: a3.reason || "", revokerInfo: { userID: a3.revoker, nick: "", avatar: "" }, sequence: e4 };
          s3.push(t4);
        }), 0 !== s3.length && this._get(11).updateRevokerInfo(s3).then(function(e4) {
          t3._grpM.emitOEvt(h2.MESSAGE_REVOKED, e4);
        });
      } }, { key: "isBroadcastOrNormal", value: function(e3) {
        return 3 === e3 || 17 === e3;
      } }, { key: "isGroupTip", value: function(e3) {
        return 4 === e3 || 6 === e3;
      } }, { key: "isGroupSystemNotice", value: function(e3) {
        return 5 === e3;
      } }, { key: "restoreGroupTipElements", value: function() {
        var e3 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {}, t3 = e3.operatorInfo, t3 = void 0 === t3 ? {} : t3, n3 = e3.operatorID, o3 = e3.userIDList, o3 = void 0 === o3 ? [] : o3, i3 = e3.operationType, i3 = (A2(e3.groupJoinType) || 1 !== i3 && 2 !== i3 || (e3.groupJoinType = 2 === i3 ? 0 : 1), t3.userID), a3 = t3.avatar, t3 = t3.nick, n3 = (e3.operatorInfo = { userID: void 0 === i3 ? n3 : i3, avatar: void 0 === a3 ? "" : a3, nick: void 0 === t3 ? "" : t3 }, o3.map(function(e4) {
          return { userID: e4 };
        }));
        return e3.memberInfoList = e3.memberInfoList || n3, e3;
      } }, { key: "restoreMessageFromSimplified", value: function(n3) {
        var e3, t3, o3, i3 = n3.event;
        return this.isBroadcastOrNormal(i3) && (n3.cloudCustomData = n3.cloudCustomData || "", n3.elements = n3.elements.map(function(e4) {
          var t4;
          return e4.type === R2.MSG_CUSTOM && (t4 = e4.content, e4.content = y2({ data: "", description: "", extension: "" }, void 0 === t4 ? {} : t4)), e4;
        })), (this.isGroupTip(i3) || this.isGroupSystemNotice(i3)) && (n3.from = n3.from || "@TIM#SYSTEM"), this.isGroupTip(i3) && (n3.elements = this.restoreGroupTipElements(n3.elements), t3 = (o3 = void 0 === (o3 = n3.elements) ? {} : o3).operationType, e3 = o3.operatorInfo, 1 === t3) && (t3 = [{ userID: (void 0 === e3 ? {} : e3).userID }], o3.memberInfoList = o3.memberInfoList || t3), this.isGroupSystemNotice(i3) && (o3 = (e3 = n3.elements).memberInfoList, t3 = e3.operatorInfo, n3.elements.memberInfoList = y2({ userID: n3.elements.operatorID, avatar: "", nick: "" }, o3 = o3 || (void 0 === t3 ? {} : t3)), n3.elements = y2({ authentication: "", remarkInfo: "", messageKey: 1e3 * n3.time }, n3.elements), i3 = Object.keys(n3.elements).filter(function(e4) {
          return "operatorInfo" !== e4;
        }).reduce(function(e4, t4) {
          return y2(y2({}, e4), {}, q2({}, t4, n3.elements[t4]));
        }, {}), n3.elements = i3), n3;
      } }, { key: "_onGroupDismissed", value: function(e3) {
        M2.l("".concat(this._n, "._onGroupDismissed groupID:").concat(e3)), this._grpM.deleteLocalGroupAndConversation(e3), this.reset(e3);
      } }, { key: "_checkMessageStacked", value: function(e3) {
        var t3 = "MessageStacked", e3 = e3.length;
        100 <= e3 && (this._grpM.warn(t3, e3), this._reportMessageStackedCount < 5) && (new P2(t3).setMessage("count:".concat(e3, " groupID:").concat(d2(this._joinedGroupMap.keys()))).setLevel("warning").end(), this._reportMessageStackedCount += 1);
      } }, { key: "_isMessageSentByCurrentInstance", value: function(e3) {
        return !!this._get(11).isMessageSentByCurrentInstance(e3);
      } }, { key: "packMessage", value: function(e3, t3) {
        e3.currentUser = this._grpM.getMyUserID(), e3.conversationType = 5 === t3 ? R2.CONV_SYSTEM : R2.CONV_GROUP, e3.isSystemMessage = !!e3.isSystemMessage;
        var n3 = new So(e3), e3 = this.packElements(e3, t3), t3 = this._grpM.getFileDownloadProxy(), o3 = this._grpM.getDownloadFileAuthKey(), i3 = this._get(17).getFileDNList();
        return n3.setElement(e3, t3, o3, i3), n3;
      } }, { key: "packElements", value: function(e3, t3) {
        return 4 === t3 || 6 === t3 ? (this._updateMemberCountByGroupTips(e3), { type: R2.MSG_GRP_TIP, content: y2(y2({}, e3.elements), {}, { groupProfile: e3.groupProfile }) }) : 5 === t3 ? { type: R2.MSG_GRP_SYS_NOTICE, content: y2(y2({}, e3.elements), {}, { groupProfile: y2(y2({}, e3.groupProfile), {}, { groupID: e3.groupID }) }) } : e3.elements;
      } }, { key: "packConversationOption", value: function(e3) {
        for (var t3 = /* @__PURE__ */ new Map(), n3 = 0; n3 < e3.length; n3++) {
          var o3, i3 = e3[n3], a3 = i3.conversationID;
          t3.has(a3) ? "in" === ((o3 = t3.get(a3)).lastMessage = i3).flow && o3.unreadCount++ : t3.set(a3, { conversationID: i3.conversationID, unreadCount: "out" === i3.flow ? 0 : 1, type: i3.conversationType, subType: i3.conversationSubType, lastMessage: i3 });
        }
        return d2(t3.values());
      } }, { key: "_updateMemberCountByGroupTips", value: function(e3) {
        var t3, n3, o3, i3 = e3.groupProfile.groupID, e3 = e3.elements.onlineMemberInfo, e3 = void 0 === e3 ? void 0 : e3;
        S2(e3) || (t3 = void 0 === (t3 = e3.onlineMemberNum) ? 0 : t3, e3 = void 0 === (e3 = e3.expireTime) ? this.DEFAULT_EXPIRE_TIME : e3, n3 = this._onlineMemberCountMap.get(i3) || {}, o3 = Date.now(), S2(n3) ? Object.assign(n3, { lastReqTime: 0, lastSyncTime: 0, latestUpdateTime: o3, memberCount: t3, expireTime: e3 }) : (n3.latestUpdateTime = o3, n3.memberCount = t3), this._onlineMemberCountMap.set(i3, n3));
      } }, { key: "_onBroadcastMessage", value: function(e3) {
        if (!S2(e3)) {
          for (var t3 = [], n3 = e3.length, o3 = null, i3 = 0; i3 < n3; i3++) {
            var a3 = this.restoreMessageFromSimplified(e3[i3]);
            oi[a3.event] ? ((o3 = this.packMessage(a3, a3.event)).isBroadcastMessage = true, this._broadcastMessageIDMap.has(o3.ID) || (t3.push(o3), this._broadcastMessageIDMap.set(o3.ID, 1))) : M2.w("".concat(this._n, "._onBroadcastMessage unknown event:").concat(a3.event));
          }
          0 < t3.length && this._grpM.emitOEvt(h2.MESSAGE_RECEIVED, t3);
        }
      } }, { key: "start", value: function(e3) {
        var t3;
        this._pollingInstanceMap.has(e3) ? (t3 = this._pollingInstanceMap.get(e3)).isRunning() || t3.start() : ((t3 = new ni({ manager: this, groupID: e3, onInit: this._updatedata.bind(this), onSuccess: this._handleSuccess.bind(this), onFail: this._handleFailure.bind(this) })).start(), this._pollingInstanceMap.set(e3, t3), M2.l("".concat(this._n, ".start groupID:").concat(e3)));
      } }, { key: "handleJoinResult", value: function(o3) {
        var i3 = this;
        return this._preCheck(o3.group).then(function() {
          var e3 = o3.longPollingKey, t3 = o3.group, n3 = t3.groupID;
          return i3._joinedGroupMap.set(n3, t3), i3._grpM.updateGroupMap([t3]), i3._grpM.deleteUnjoinedAVChatRoom(n3), i3._grpM.emitGroupListUpdate(true, false), N2(e3) ? D2({ status: nt2, group: t3 }) : Promise.resolve();
        });
      } }, { key: "startRunLoop", value: function(i3) {
        var a3 = this;
        return this.handleJoinResult(i3).then(function() {
          var e3 = i3.longPollingKey, t3 = i3.group, n3 = i3.startSeq, o3 = t3.groupID;
          return a3._pollingRequestInfoMap.set(o3, { key: e3, startSeq: void 0 === n3 ? 0 : n3 }), a3.start(o3), a3._grpM.isLoggedIn() ? D2({ status: nt2, group: t3 }) : D2({ status: nt2 });
        });
      } }, { key: "_preCheck", value: function(e3) {
        if (!this._get(12).isUnlimitedAVChatRoom() && this.hasJoinedAVChatRoom() && e3.type !== R2.GRP_LIVE) {
          var e3 = j2(this._joinedGroupMap.entries().next().value, 2), t3 = e3[0], e3 = e3[1];
          if (this._grpM.isLoggedIn() && e3.selfInfo.role !== R2.GRP_MBR_ROLE_OWNER && e3.ownerID !== this._grpM.getMyUserID())
            return this._grpM.quitGroup(t3);
          this._grpM.deleteLocalGroupAndConversation(t3), this.reset(t3);
        }
        return Promise.resolve();
      } }, { key: "joinWithoutAuth", value: function(e3) {
        var n3 = this, o3 = e3.groupID, i3 = "".concat(this._n, ".").concat("joinWithoutAuth"), a3 = new P2("joinWithoutAuth");
        return this._grpM.req({ P: G2.APPLY_JOIN_GRP_NOAUTH, data: e3 }).then(function(e4) {
          e4 = e4.data.longPollingKey;
          if (a3.setMessage("groupID:".concat(o3, " longPollingKey:").concat(e4)).end(true), N2(e4))
            return E2({ code: k2.CANNOT_JOIN_NON_AV_WITHOUT_LOGIN });
          M2.l("".concat(i3, " ok. groupID:").concat(o3)), n3._get(11).setCompleted("".concat(R2.CONV_GROUP).concat(o3));
          var t3 = new Yo({ groupID: o3 });
          return n3.startRunLoop({ group: t3, longPollingKey: e4 }), T2({ status: nt2 });
        }).catch(function(e4) {
          return M2.e("".concat(i3, " failed. groupID:").concat(o3, " error:"), e4), a3.setError(e4).setMessage("groupID:".concat(o3)).end(true), E2(e4);
        }).finally(function() {
          n3._grpM.get(14).reportAtOnce();
        });
      } }, { key: "getGroupOnlineMemberCount", value: function(e3) {
        var t3 = this._onlineMemberCountMap.get(e3) || {}, n3 = Date.now();
        return S2(t3) || n3 - t3.lastSyncTime > 1e3 * t3.expireTime && 1e4 < n3 - t3.latestUpdateTime && 3e3 < n3 - t3.lastReqTime ? (t3.lastReqTime = n3, this._onlineMemberCountMap.set(e3, t3), this._getGroupOnlineMemberCount(e3).then(function(e4) {
          return T2({ memberCount: e4.memberCount });
        }).catch(function(e4) {
          return E2(e4);
        })) : D2({ memberCount: t3.memberCount });
      } }, { key: "_getGroupOnlineMemberCount", value: function(i3) {
        var a3 = this, s3 = "".concat(this._n, ".").concat("_getGroupOnlineMemberCount"), t3 = new P2("_getGroupOnlineMemberCount");
        return this._grpM.requestOnlineCount(i3).then(function(e3) {
          var t4 = a3._onlineMemberCountMap.get(i3) || {}, e3 = e3.data, n3 = e3.memberCount, n3 = void 0 === n3 ? 0 : n3, e3 = e3.expireTime, e3 = void 0 === e3 ? a3.DEFAULT_EXPIRE_TIME : e3, o3 = (M2.l("".concat(s3, " ok. groupID:").concat(i3, " memberCount:").concat(n3, " expireTime:").concat(e3)), Date.now());
          return S2(t4) && (t4.lastReqTime = o3), a3._onlineMemberCountMap.set(i3, Object.assign(t4, { lastSyncTime: o3, latestUpdateTime: o3, memberCount: n3, expireTime: e3 })), { memberCount: n3 };
        }).catch(function(e3) {
          return M2.w("".concat(s3, " failed. error:"), e3), t3.setCode(e3.code).setMessage("groupID:".concat(i3, " error:").concat(JSON.stringify(e3))).end(), Promise.reject(e3);
        });
      } }, { key: "_get", value: function(e3) {
        return this._grpM.get(e3);
      } }, { key: "setPollingInterval", value: function(e3) {
        N2(e3) || (A2(e3) ? this._pollingInterval = this.DEFAULT_POLLING_INTERVAL = e3 : this._pollingInterval = this.DEFAULT_POLLING_INTERVAL = parseInt(e3, 10));
      } }, { key: "setPollingIntervalPlus", value: function(e3) {
        N2(e3) || (A2(e3) ? this.DEFAULT_POLLING_INTERVAL_PLUS = e3 : this.DEFAULT_POLLING_INTERVAL_PLUS = parseInt(e3, 10));
      } }, { key: "setPollingNoMessageCount", value: function(e3) {
        N2(e3) || (A2(e3) ? this.DEFAULT_POLLING_NO_MESSAGE_COUNT = e3 : this.DEFAULT_POLLING_NO_MESSAGE_COUNT = parseInt(e3, 10));
      } }, { key: "setPollingSimplifiedMessage", value: function(e3) {
        N2(e3) || "0" !== e3 && "1" !== e3 || (this.DEFAULT_POLLING_SIMPLIFIED_MSG = parseInt(e3, 10));
      } }, { key: "getPollingInterval", value: function() {
        return this._pollingInterval;
      } }, { key: "onAVChatRoomMemberBanned", value: function(e3) {
        e3 = e3.payload.groupProfile.groupID;
        M2.l("".concat(this._n, ".onAVChatRoomMemberBanned groupID:").concat(e3)), this._grpM.deleteLocalGroupAndConversation(e3), this.reset(e3);
      } }, { key: "restartPolling", value: function() {
        M2.l("".concat(this._n, ".restartPolling count:").concat(this._pollingInstanceMap.size));
        var e3, t3 = F2(this._pollingInstanceMap.values());
        try {
          for (t3.s(); !(e3 = t3.n()).done; ) {
            var n3 = e3.value;
            n3.stop(), n3.start();
          }
        } catch (e4) {
          t3.e(e4);
        } finally {
          t3.f();
        }
      } }, { key: "getPollingTimerID", value: function(e3) {
        var t3;
        return this._pollingInstanceMap.has(e3) ? (t3 = this._pollingInstanceMap.get(e3).getPollingTimerID(), M2.l("".concat(this._n, ".getPollingTimerID groupID:").concat(e3, " timerID:").concat(t3)), t3) : -1;
      } }, { key: "hasPollingInstance", value: function(e3) {
        return this._pollingInstanceMap.has(e3);
      } }, { key: "onRoomCustomData", value: function(e3) {
        var t3 = e3.groupID, n3 = e3.sequence, o3 = e3.time, e3 = e3.elements, e3 = e3 && e3.content;
        this._get(30).onRoomCustomDataReceived(e3), M2.l("".concat(this._n, ".onRoomCustomData groupID:").concat(t3, " sequence:").concat(n3, " time:").concat(o3, " data:").concat(e3));
      } }, { key: "reset", value: function(e3) {
        if (e3) {
          M2.l("".concat(this._n, ".reset groupID:").concat(e3));
          var t3 = this._pollingInstanceMap.get(e3);
          t3 && t3.stop(), this._pollingInstanceMap.delete(e3), this._joinedGroupMap.delete(e3), this._pollingRequestInfoMap.delete(e3), this._onlineMemberCountMap.delete(e3);
        } else {
          M2.l("".concat(this._n, ".reset all"));
          var n3, o3 = F2(this._pollingInstanceMap.values());
          try {
            for (o3.s(); !(n3 = o3.n()).done; )
              n3.value.stop();
          } catch (e4) {
            o3.e(e4);
          } finally {
            o3.f();
          }
          this._pollingInstanceMap.clear(), this._joinedGroupMap.clear(), this._pollingRequestInfoMap.clear(), this._onlineMemberCountMap.clear(), this._broadcastMessageIDMap.clear();
        }
        this._seqSll.reset(), this._IDSll.reset(), this._reportMessageStackedCount = 0, this._pollingInterval = this.DEFAULT_POLLING_INTERVAL = 300, this.DEFAULT_POLLING_NO_MESSAGE_COUNT = 20, this.DEFAULT_POLLING_INTERVAL_PLUS = 2e3, this._pollingNoMessageCount = 0;
      } }]), ai = e2(function e3(t3) {
        p2(this, e3), this.userID = "", this.avatar = "", this.nick = "", this.role = "", this.joinTime = "", this.lastSendMsgTime = "", this.nameCard = "", this.muteUntil = 0, this.memberCustomField = [], this.isOnline = false, this.updateMember(t3);
      }, [{ key: "updateMember", value: function(e3) {
        N2(e3.onlineStatus) || (this.isOnline = "Online" === e3.onlineStatus);
        var t3 = [null, void 0, "", 0, NaN];
        e3.memberCustomField && Rt2(this.memberCustomField, e3.memberCustomField), ht2(this, e3, ["memberCustomField", "marks", "onlineStatus"], t3);
      } }, { key: "updateRole", value: function(e3) {
        ["Owner", "Admin", "Member"].indexOf(e3) < 0 || (this.role = e3);
      } }, { key: "updateMuteUntil", value: function(e3) {
        N2(e3) || (this.muteUntil = Math.floor((Date.now() + 1e3 * e3) / 1e3));
      } }, { key: "updateNameCard", value: function(e3) {
        N2(e3) || (this.nameCard = e3);
      } }, { key: "updateMemberCustomField", value: function(e3) {
        e3 && Rt2(this.memberCustomField, e3);
      } }]), si = e2(function e3(t3) {
        p2(this, e3), this._grpM = t3, this._n = "GroupMemberHandler", this.groupMemberListMap = /* @__PURE__ */ new Map(), this.DEFAULT_MEMBER_INFO_FILTER = ["Role", "JoinTime", "NameCard", "ShutUpUntil", "OnlineStatus"], this._grpM.getIEmitInst().on(U2.PROFILE_UPDATED, this._onProfileUpdated, this);
      }, [{ key: "_onProfileUpdated", value: function(e3) {
        for (var n3 = this, o3 = e3.data, i3 = 0; i3 < o3.length; i3++)
          !function() {
            var t3 = o3[i3];
            n3.groupMemberListMap.forEach(function(e4) {
              e4.has(t3.userID) && e4.get(t3.userID).updateMember({ nick: t3.nick, avatar: t3.avatar });
            });
          }();
      } }, { key: "deleteGroupMemberList", value: function(e3) {
        this.groupMemberListMap.delete(e3);
      } }, { key: "getGroupMemberList", value: function(e3) {
        var t3, o3 = this, i3 = e3.groupID, n3 = e3.role, n3 = void 0 === n3 ? void 0 : n3, a3 = e3.offset, s3 = void 0 === a3 ? 0 : a3, a3 = e3.count, r3 = void 0 === a3 ? 15 : a3, a3 = e3.filter, e3 = void 0 === a3 ? void 0 : a3, c3 = "".concat(this._n, ".").concat("getGroupMemberList"), a3 = this._grpM.hasLocalGroup(i3);
        if (M2.l("".concat(c3, " groupID:").concat(i3, " role:").concat(n3, " offset:").concat(s3, " count:").concat(r3, " hasLocalGroup:").concat(a3)), !a3)
          return D2({ memberList: [], offset: 0 });
        if (this._grpM.getLocalGroupProfile(i3).type === R2.GRP_AVCHATROOM) {
          if (this._grpM.canIUse(g2.AV_MBR_LIST))
            return this._getAVChatRoomMemberList({ groupID: i3, offset: s3, filter: e3 });
          this._grpM.warn("LiveOnlineMember");
        }
        n3 !== R2.GRP_MBR_ROLE_ADMIN && n3 !== R2.GRP_MBR_ROLE_OWNER && n3 !== R2.GRP_MBR_ROLE_MEMBER || (t3 = n3);
        var u3 = new P2("getGroupMemberList"), l3 = 0, a3 = { groupID: i3, limit: 100 < r3 ? 100 : r3, memberRoleFilter: t3 ? [t3] : void 0, memberInfoFilter: this.DEFAULT_MEMBER_INFO_FILTER }, d3 = (Pt2({ groupID: i3 }) ? a3.next = "".concat(s3) : l3 = (a3.offset = s3) + r3, []);
        return this._grpM.req({ P: G2.GET_GRP_MBR_LIST, data: a3 }).then(function(e4) {
          var e4 = e4.data, t4 = e4.members, n4 = e4.memberNum, e4 = e4.next, e4 = void 0 === e4 ? void 0 : e4;
          return N2(e4) || (l3 = S2(e4) ? 0 : e4), O2(t4) && 0 !== t4.length ? (o3._grpM.hasLocalGroup(i3) && (o3._grpM.getLocalGroupProfile(i3).memberNum = n4), d3 = o3._updateLocalGroupMemberMap(i3, t4), o3._grpM.get(4).getUserProfile({ userIDList: t4.map(function(e5) {
            return e5.userID;
          }), tagList: [f2.NICK, f2.AVATAR] })) : (l3 = 0, Promise.resolve([]));
        }).then(function(e4) {
          var e4 = e4.data;
          return O2(e4) && 0 !== e4.length ? (e4 = e4.map(function(e5) {
            return { userID: e5.userID, nick: e5.nick, avatar: e5.avatar };
          }), o3._updateLocalGroupMemberMap(i3, e4), d3.length < r3 && (l3 = 0), u3.setMessage("groupID:".concat(i3, " offset:").concat(s3, " count:").concat(r3)).end(), M2.l("".concat(c3, " ok.")), T2({ memberList: d3, offset: l3 })) : D2({ memberList: [], offset: l3 });
        }).catch(function(e4) {
          return u3.setError(e4).end(), M2.e("".concat(c3, " failed. error:"), e4), E2(e4);
        });
      } }, { key: "_getAVChatRoomMemberList", value: function(e3) {
        var n3 = this, o3 = e3.groupID, t3 = e3.offset, e3 = e3.filter, i3 = "".concat(this._n, ".").concat("_getAVChatRoomMemberList"), a3 = new P2("_getAVChatRoomMemberList");
        return a3.setMessage("groupID:".concat(o3, " offset:").concat(t3, " filter:").concat(e3)), this._grpM.req({ P: G2.GET_AV_MBR_LIST, data: { groupID: o3, offset: t3, filter: e3 } }).then(function(e4) {
          var e4 = e4.data, t4 = e4.memberList, t4 = void 0 === t4 ? [] : t4, e4 = e4.offset, e4 = void 0 === e4 ? 0 : e4, t4 = (a3.end(), M2.l("".concat(i3, " ok. member count:").concat(t4.length, ", next request timestamp:").concat(e4)), t4.map(function(e5) {
            return y2(y2({}, e5), {}, { onlineStatus: "Online" });
          })), t4 = n3._updateLocalGroupMemberMap(o3, t4);
          return T2({ memberList: t4, offset: e4 });
        }).catch(function(e4) {
          return a3.setError(e4).end(), M2.e("".concat(i3, " failed. error:"), e4), E2(e4);
        });
      } }, { key: "getGroupMemberProfile", value: function(e3) {
        var t3, n3 = this, o3 = "getGroupMemberProfile", i3 = "".concat(this._n, ".").concat(o3), a3 = "groupID:".concat(e3.groupID), s3 = (5 < e3.userIDList.length ? a3 += " userIDList.length:".concat(e3.userIDList.length) : a3 += " userIDList:".concat(e3.userIDList), M2.l("".concat(i3, " ").concat(a3)), 50 < e3.userIDList.length && (e3.userIDList = e3.userIDList.slice(0, 50)), e3.groupID), r3 = e3.userIDList, i3 = this._grpM.getLocalGroupProfile(s3);
        return i3 && Gt2(i3.type) ? E2({ code: i3 = k2.OPERATION_NOT_SUPPORTED_IN_AV, message: this._grpM.getErrMsg(i3, o3) }) : ((t3 = new P2(o3)).setMessage(a3), this._getGroupMemberProfileAdvance(y2(y2({}, e3), {}, { userIDList: r3 })).then(function(e4) {
          e4 = e4.data.members;
          return O2(e4) && 0 !== e4.length ? (n3._updateLocalGroupMemberMap(s3, e4), n3._grpM.get(4).getUserProfile({ userIDList: e4.map(function(e5) {
            return e5.userID;
          }), tagList: [f2.NICK, f2.AVATAR] })) : D2([]);
        }).then(function(e4) {
          e4 = e4.data.map(function(e5) {
            return { userID: e5.userID, nick: e5.nick, avatar: e5.avatar };
          }), n3._updateLocalGroupMemberMap(s3, e4), e4 = r3.filter(function(e5) {
            return n3.hasLocalGroupMember(s3, e5);
          }).map(function(e5) {
            return n3.getLocalGroupMemberInfo(s3, e5);
          });
          return t3.end(), T2({ memberList: e4 });
        }));
      } }, { key: "addGroupMember", value: function(a3) {
        var s3 = this, r3 = "".concat(this._n, ".").concat("addGroupMember"), e3 = a3.groupID, c3 = this._grpM.getLocalGroupProfile(e3), t3 = c3.type, u3 = new P2("addGroupMember");
        return u3.setMessage("groupID:".concat(e3, " groupType:").concat(t3)), Gt2(t3) ? (t3 = new L2({ code: k2.CANNOT_ADD_MEMBER_IN_AV }), u3.setError(t3).end(), E2(t3)) : (a3.userIDList = a3.userIDList.map(function(e4) {
          return { userID: e4 };
        }), M2.l("".concat(r3, " groupID:").concat(e3)), this._grpM.req({ P: G2.ADD_GRP_MBR, data: a3 }).then(function(e4) {
          var e4 = e4.data.members, t4 = (M2.l("".concat(r3, " ok")), e4.filter(function(e5) {
            return 1 === e5.result;
          }).map(function(e5) {
            return e5.userID;
          })), n3 = e4.filter(function(e5) {
            return 0 === e5.result;
          }).map(function(e5) {
            return e5.userID;
          }), o3 = e4.filter(function(e5) {
            return 2 === e5.result;
          }).map(function(e5) {
            return e5.userID;
          }), e4 = e4.filter(function(e5) {
            return 4 === e5.result;
          }).map(function(e5) {
            return e5.userID;
          }), i3 = "groupID:".concat(a3.groupID, ", ") + "successUserIDList:".concat(t4, ", ") + "failureUserIDList:".concat(n3, ", ") + "existedUserIDList:".concat(o3, ", ") + "overLimitUserIDList:".concat(e4);
          return u3.setMoreMessage(i3).end(), 0 === t4.length ? T2({ successUserIDList: t4, failureUserIDList: n3, existedUserIDList: o3, overLimitUserIDList: e4 }) : (s3._updateConvGroupProfile(c3), T2({ successUserIDList: t4, failureUserIDList: n3, existedUserIDList: o3, overLimitUserIDList: e4, group: c3 }));
        }).catch(function(e4) {
          return u3.setError(e4).end(), M2.e("".concat(r3, " failed. error:"), e4), E2(e4);
        }));
      } }, { key: "deleteGroupMember", value: function(e3) {
        var t3, n3, o3 = this, i3 = "".concat(this._n, ".").concat("deleteGroupMember"), a3 = e3.groupID, s3 = e3.userIDList, r3 = this._grpM.getLocalGroupProfile(a3);
        return N2(r3) ? E2({ code: k2.CANNOT_FIND_GRP }) : Gt2(r3.type) ? this._grpM.canIUse(g2.AV_BAN_MBR) ? this._banAVChatRoomMember(e3) : this._grpM.noUse("deleteGroupMember") : (t3 = "groupID:".concat(a3, " ").concat(5 < s3.length ? "userIDList.length:".concat(s3.length) : "userIDList:".concat(s3)), M2.l("".concat(i3, " groupID:").concat(a3, " userIDList:"), s3), (n3 = new P2("deleteGroupMember")).setMessage(t3), this._grpM.req({ P: G2.DEL_GRP_MBR, data: e3 }).then(function() {
          return n3.end(), M2.l("".concat(i3, " ok")), o3._updateConvGroupProfile(r3), o3.deleteLocalGroupMembers(a3, s3), T2({ group: r3, userIDList: s3 });
        }).catch(function(e4) {
          return n3.setError(e4).end(), M2.e("".concat(i3, " failed. error:"), e4), E2(e4);
        }));
      } }, { key: "_updateConvGroupProfile", value: function(e3) {
        this._grpM.get(11).updateConvGroupProfile([e3]);
      } }, { key: "_banAVChatRoomMember", value: function(e3) {
        var t3 = this, n3 = "".concat(this._n, ".").concat("_banAVChatRoomMember"), o3 = e3.groupID, i3 = e3.userIDList, a3 = "groupID:".concat(o3, " ").concat(5 < i3.length ? "userIDList.length:".concat(i3.length) : "userIDList:".concat(i3)), s3 = new P2("_banAVChatRoomMember"), r3 = (s3.setMessage(a3), M2.l("".concat(n3, " groupID:").concat(o3, " userIDList:"), i3), this._grpM.getLocalGroupProfile(o3));
        return N2(e3.duration) || 0 === e3.duration ? E2({ code: k2.BAN_DURATION_INVALID }) : this._grpM.req({ P: G2.BAN_AV_MBR, data: e3 }).then(function() {
          return s3.end(), M2.l("".concat(n3, " ok")), t3.deleteLocalGroupMembers(o3, i3), T2({ group: r3, userIDList: i3 });
        }).catch(function(e4) {
          return s3.setError(e4).end(), M2.e("".concat(n3, " failed. error:"), e4), E2(e4);
        });
      } }, { key: "setGroupMemberMuteTime", value: function(e3) {
        var t3, n3, o3 = this, i3 = e3.groupID, a3 = e3.userID, e3 = e3.muteTime, s3 = "".concat(this._n, ".").concat("setGroupMemberMuteTime");
        return a3 === this._grpM.getMyUserID() ? E2({ code: k2.CANNOT_MUTE_SELF }) : (t3 = "groupID:".concat(i3, " userID:").concat(a3, " muteTime:").concat(e3), M2.l("".concat(s3, " ").concat(t3)), (n3 = new P2("setGroupMemberMuteTime")).setMessage(t3), this.modifyGroupMemberInfo({ groupID: i3, userID: a3, muteTime: e3 }).then(function(e4) {
          n3.end(), M2.l("".concat(s3, " ok"));
          var t4 = o3._grpM.getLocalGroupProfile(i3);
          return T2({ group: t4, member: e4 });
        }).catch(function(e4) {
          return n3.setError(e4).end(), M2.e("".concat(s3, " failed. error:"), e4), E2(e4);
        }));
      } }, { key: "setGroupMemberRole", value: function(e3) {
        var t3, n3, o3 = "".concat(this._n, ".").concat("setGroupMemberRole"), i3 = e3.groupID, a3 = e3.userID, e3 = e3.role, s3 = "groupID:".concat(i3, " userID:").concat(a3, " role:").concat(e3), r3 = this._grpM.getLocalGroupProfile(i3);
        return r3 && r3.selfInfo.role !== R2.GRP_MBR_ROLE_OWNER ? E2({ code: k2.NOT_OWNER }) : (t3 = [R2.GRP_MBR_ROLE_ADMIN, R2.GRP_MBR_ROLE_MEMBER], Pt2({ groupID: i3 }) && t3.push(R2.GRP_MBR_ROLE_CUSTOM), t3.indexOf(e3) < 0 ? E2({ code: k2.INVALID_MEMBER_ROLE }) : a3 === this._grpM.getMyUserID() ? E2({ code: k2.CANNOT_SET_SELF_MEMBER_ROLE }) : ((n3 = new P2("setGroupMemberRole")).setMessage(s3), M2.l("".concat(o3, " ").concat(s3)), this.modifyGroupMemberInfo({ groupID: i3, userID: a3, role: e3 }).then(function(e4) {
          return n3.end(), M2.l("".concat(o3, " ok")), T2({ group: r3, member: e4 });
        }).catch(function(e4) {
          return n3.setError(e4).end(), M2.e("".concat(o3, " failed. error:"), e4), E2(e4);
        })));
      } }, { key: "_filterProfanity", value: function(e3, t3) {
        var n3, o3 = this._grpM.get(29);
        return !o3 || (n3 = (o3 = o3.filterText(t3[e3], "group_member_profile")).isAllowedToSend, o3 = o3.modifiedText, true === n3 && (t3[e3] = o3, true));
      } }, { key: "setGroupMemberNameCard", value: function(e3) {
        var n3, o3, i3, t3, a3, s3 = this, r3 = "setGroupMemberNameCard", c3 = "".concat(this._n, ".").concat(r3);
        return e3.nameCard && false === this._filterProfanity("nameCard", e3) ? E2({ code: k2.PROFANITY_FOUND }) : (n3 = e3.groupID, t3 = e3.userID, o3 = void 0 === t3 ? this._grpM.getMyUserID() : t3, i3 = e3.nameCard, t3 = "groupID:".concat(n3, " userID:").concat(o3, " nameCard:").concat(i3), M2.l("".concat(c3, " ").concat(t3)), (e3 = this._grpM.getLocalGroupProfile(n3)) && Gt2(e3.type) ? E2({ code: e3 = k2.OPERATION_NOT_SUPPORTED_IN_AV, message: this._grpM.getErrMsg(e3, r3) }) : ((a3 = new P2(r3)).setMessage(t3), this.modifyGroupMemberInfo({ groupID: n3, userID: o3, nameCard: i3 }).then(function(e4) {
          M2.l("".concat(c3, " ok")), a3.end();
          var t4 = s3._grpM.getLocalGroupProfile(n3);
          return o3 === s3._grpM.getMyUserID() && t4 && t4.setSelfNameCard(i3), T2({ group: t4, member: e4 });
        }).catch(function(e4) {
          return a3.setError(e4).end(), M2.e("".concat(c3, " failed. error:"), e4), E2(e4);
        })));
      } }, { key: "setGroupMemberCustomField", value: function(e3) {
        var n3, o3 = this, t3 = "setGroupMemberCustomField", i3 = "".concat(this._n, ".").concat(t3), a3 = e3.groupID, s3 = e3.userID, s3 = void 0 === s3 ? this._grpM.getMyUserID() : s3, e3 = e3.memberCustomField, r3 = "groupID:".concat(a3, " userID:").concat(s3, " memberCustomField:").concat(JSON.stringify(e3)), c3 = (M2.l("".concat(i3, " ").concat(r3)), this._grpM.getLocalGroupProfile(a3));
        return c3 && Gt2(c3.type) ? E2({ code: c3 = k2.OPERATION_NOT_SUPPORTED_IN_AV, message: this._grpM.getErrMsg(c3, t3) }) : ((n3 = new P2(t3)).setMessage(r3), this.modifyGroupMemberInfo({ groupID: a3, userID: s3, memberCustomField: e3 }).then(function(e4) {
          n3.end(), M2.l("".concat(i3, " ok"));
          var t4 = o3._grpM.getLocalGroupProfile(a3);
          return T2({ group: t4, member: e4 });
        }).catch(function(e4) {
          return n3.setError(e4).end(), M2.e("".concat(i3, " failed. error:"), e4), E2(e4);
        }));
      } }, { key: "modifyGroupMemberInfo", value: function(t3) {
        var n3 = this, o3 = t3.groupID, i3 = t3.userID, e3 = void 0;
        return Ut2(o3) && (o3 = Xt2(e3 = o3)), this._grpM.req({ P: G2.MODIFY_GRP_MBR_INFO, data: y2(y2({}, t3), {}, { groupID: o3, topicID: e3 }) }).then(function() {
          var e4;
          return n3.hasLocalGroupMember(o3, i3) ? (e4 = n3.getLocalGroupMemberInfo(o3, i3), N2(t3.muteTime) || e4.updateMuteUntil(t3.muteTime), N2(t3.role) || e4.updateRole(t3.role), N2(t3.nameCard) || e4.updateNameCard(t3.nameCard), N2(t3.memberCustomField) || e4.updateMemberCustomField(t3.memberCustomField), e4) : (e4 = n3._grpM.getLocalGroupProfile(o3)) && !Gt2(e4.type) ? n3.getGroupMemberProfile({ groupID: o3, userIDList: [i3] }).then(function(e5) {
            return j2(e5.data.memberList, 1)[0];
          }) : void 0;
        });
      } }, { key: "markGroupMemberList", value: function(e3) {
        var o3 = "".concat(this._n, ".").concat("markGroupMemberList"), t3 = e3.groupID, n3 = e3.markType, i3 = e3.enableMark, e3 = e3.userIDList, a3 = void 0 === e3 ? [] : e3, e3 = "groupID:".concat(t3, " markType:").concat(n3, " enableMark:").concat(i3, " userIDList count:").concat(a3.length), s3 = (M2.l("".concat(o3, " ").concat(e3)), 2), r3 = [], i3 = (true === i3 && (s3 = 1), d2(a3)), c3 = (500 < a3.length && (i3 = a3.slice(0, 500), M2.w("".concat(o3, " ").concat(tn(500)))), i3.forEach(function(e4) {
          r3.push({ userID: e4, markType: [n3] });
        }), i3 = null, new P2("markGroupMemberList"));
        return c3.setMessage(e3), this._grpM.req({ P: G2.MARK_AV_MBR_INFO, data: { groupID: t3, operationType: s3, memberList: r3 } }).then(function(e4) {
          var e4 = e4.data.memberList, e4 = void 0 === e4 ? [] : e4, t4 = [], n4 = [], e4 = (e4.length === a3.length ? t4.push.apply(t4, d2(a3)) : (e4.forEach(function(e5) {
            t4.push(e5.userID);
          }), a3.forEach(function(e5) {
            t4.includes(e5) || n4.push(e5);
          })), "success count:".concat(t4.length, " fail count:").concat(n4.length));
          return c3.setMessage(e4).end(), M2.l("".concat(o3, " ok. ").concat(e4)), T2({ successUserIDList: t4, failureUserIDList: n4 });
        }).catch(function(e4) {
          return c3.setError(e4).end(), M2.e("".concat(o3, " failed. error:"), e4), E2(e4);
        });
      } }, { key: "_getGroupMemberProfileAdvance", value: function(e3) {
        return this._grpM.req({ P: G2.GET_GRP_MBR_PROFILE, data: y2(y2({}, e3), {}, { memberInfoFilter: e3.memberInfoFilter || this.DEFAULT_MEMBER_INFO_FILTER }) });
      } }, { key: "_updateLocalGroupMemberMap", value: function(t3, e3) {
        var n3 = this;
        return O2(e3) && 0 !== e3.length ? e3.map(function(e4) {
          return n3.hasLocalGroupMember(t3, e4.userID) ? n3.getLocalGroupMemberInfo(t3, e4.userID).updateMember(e4) : n3.setLocalGroupMember(t3, new ai(e4)), n3.getLocalGroupMemberInfo(t3, e4.userID);
        }) : [];
      } }, { key: "deleteLocalGroupMembers", value: function(e3, t3) {
        var n3 = this.groupMemberListMap.get(e3);
        n3 && t3.forEach(function(e4) {
          n3.delete(e4);
        });
      } }, { key: "getLocalGroupMemberInfo", value: function(e3, t3) {
        return this.groupMemberListMap.has(e3) ? this.groupMemberListMap.get(e3).get(t3) : null;
      } }, { key: "setLocalGroupMember", value: function(e3, t3) {
        this.groupMemberListMap.has(e3) ? this.groupMemberListMap.get(e3).set(t3.userID, t3) : (t3 = (/* @__PURE__ */ new Map()).set(t3.userID, t3), this.groupMemberListMap.set(e3, t3));
      } }, { key: "getLocalGroupMemberList", value: function(e3) {
        return this.groupMemberListMap.get(e3);
      } }, { key: "hasLocalGroupMember", value: function(e3, t3) {
        return this.groupMemberListMap.has(e3) && this.groupMemberListMap.get(e3).has(t3);
      } }, { key: "hasLocalGroupMemberMap", value: function(e3) {
        return this.groupMemberListMap.has(e3);
      } }, { key: "reset", value: function() {
        this.groupMemberListMap.clear();
      } }]), ri = [17, 18, 20], ci = e2(function e3(t3) {
        p2(this, e3), this._grpM = t3, this._n = "GroupSystemNoticeHandler", this.pendencyMap = /* @__PURE__ */ new Map();
      }, [{ key: "onNewGroupSystemNotice", value: function(e3) {
        var t3 = e3.dataList, n3 = e3.isSyncingEnded, e3 = e3.isInstantMessage, t3 = (M2.d("".concat(this._n, ".onReceiveSystemNotice count:").concat(t3.length)), this._assembly({ notifiesList: t3, isInstantMessage: e3 })), o3 = t3.eventDataList, t3 = t3.result;
        0 < o3.length && (this._grpM.get(11).onNewMessage({ conversationOptionsList: o3, isInstantMessage: e3 }), this._onReceivedGroupSystemNotice({ result: t3, isInstantMessage: e3 })), e3 ? 0 < t3.length && this._grpM.emitOEvt(h2.MESSAGE_RECEIVED, t3) : true === n3 && this._clearGroupSystemNotice();
      } }, { key: "_assembly", value: function(e3) {
        for (var t3 = e3.notifiesList, n3 = e3.isInstantMessage, o3 = null, i3 = t3.length, a3 = 0, s3 = [], r3 = { conversationID: R2.CONV_SYSTEM, unreadCount: 0, type: R2.CONV_SYSTEM, subType: null, lastMessage: null }, a3 = 0; a3 < i3; a3++) {
          var c3 = t3[a3], u3 = c3.groupProfile, l3 = u3.communityType, u3 = u3.topicID, u3 = void 0 === u3 ? void 0 : u3, d3 = c3.elements, p3 = d3.topicIDList, p3 = void 0 === p3 ? void 0 : p3, d3 = d3.operationType;
          if (!(2 !== (void 0 === l3 ? 0 : l3) || S2(u3) && S2(p3))) {
            if (ri.includes(d3)) {
              this._handleTopicSystemNotice(c3);
              continue;
            }
            S2(u3) || (c3.to = u3);
          }
          15 !== c3.elements.operationType && (c3.currentUser = this._grpM.getMyUserID(), c3.conversationType = R2.CONV_SYSTEM, c3.conversationID = R2.CONV_SYSTEM, (o3 = new So(c3)).setElement({ type: R2.MSG_GRP_SYS_NOTICE, content: y2(y2({}, c3.elements), {}, { groupProfile: y2({}, c3.groupProfile) }) }), o3.isSystemMessage = true, (1 === o3.sequence && 1 === o3.random || 2 === o3.sequence && 2 === o3.random) && (o3.sequence = mt2(), o3.random = mt2(), o3.generateMessageID(), M2.l("".concat(this._n, "._assembly regenerate ID:").concat(o3.ID))), this._grpM.get(11).pushIntoNoticeResult(s3, o3)) && (n3 ? r3.unreadCount++ : o3.setIsRead(true), r3.subType = o3.conversationSubType);
        }
        return r3.lastMessage = s3[s3.length - 1], { eventDataList: 0 < s3.length ? [r3] : [], result: s3 };
      } }, { key: "_clearGroupSystemNotice", value: function() {
        var a3 = this;
        this._getPendencyList().then(function(e3) {
          e3.forEach(function(e4) {
            a3.pendencyMap.set("".concat(e4.from, "_").concat(e4.groupID, "_").concat(e4.to), e4);
          });
          var e3 = a3._grpM.get(11).getLocalMessageList(R2.CONV_SYSTEM), i3 = [];
          e3.forEach(function(e4) {
            var t3 = e4.payload, n3 = t3.operatorID, o3 = t3.operationType, t3 = t3.groupProfile;
            1 === o3 && (o3 = "".concat(n3, "_").concat(t3.groupID, "_").concat(t3.to), n3 = a3.pendencyMap.get(o3)) && A2(n3.handled) && 0 !== n3.handled && i3.push(e4);
          }), a3.deleteGroupSystemNotice({ messageList: i3 });
        });
      } }, { key: "deleteGroupSystemNotice", value: function(e3) {
        var n3 = this, o3 = "".concat(this._n, ".deleteGroupSystemNotice");
        return O2(e3.messageList) && 0 !== e3.messageList.length ? (M2.l("".concat(o3, " ") + e3.messageList.map(function(e4) {
          return e4.ID;
        })), this._grpM.req({ P: G2.DEL_GRP_SYSTEM_NOTICE, data: { messageListToDelete: e3.messageList.map(function(e4) {
          return { from: R2.CONV_SYSTEM, messageSeq: e4.clientSequence, messageRandom: e4.random };
        }) } }).then(function() {
          M2.l("".concat(o3, " ok"));
          var t3 = n3._grpM.get(11);
          return e3.messageList.forEach(function(e4) {
            t3.deleteLocalMessage(e4);
          }), T2();
        }).catch(function(e4) {
          return M2.e("".concat(o3, " error:"), e4), E2(e4);
        })) : D2();
      } }, { key: "_getPendencyList", value: function() {
        var n3 = this, e3 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {}, t3 = e3.type, o3 = e3.startTime, e3 = e3.limit;
        return this._grpM.req({ P: G2.GET_GRP_PENDENCY, data: { type: void 0 === t3 ? void 0 : t3, startTime: void 0 === o3 ? 0 : o3, limit: void 0 === e3 ? 20 : e3, handleAccount: this._grpM.getMyUserID() } }).then(function(e4) {
          var t4 = e4.data.pendencyList;
          return 0 !== e4.data.nextStartTime ? n3._getPendencyList({ startTime: e4.data.nextStartTime }).then(function(e5) {
            return [].concat(d2(t4), d2(e5));
          }) : t4;
        });
      } }, { key: "getGroupApplicationList", value: function() {
        var n3 = this;
        return this._getPendencyList().then(function(t3) {
          return n3._getPendencyList({ type: R2.GRP_COMMUNITY }).then(function(e3) {
            return t3.push.apply(t3, d2(e3)), n3._handlePendencyResult(t3);
          }).catch(function(e3) {
            return n3._handlePendencyResult(t3);
          });
        });
      } }, { key: "_handlePendencyResult", value: function(e3) {
        var t3 = this, n3 = [];
        return e3.forEach(function(e4) {
          t3.pendencyMap.set("".concat(e4.from, "_").concat(e4.groupID, "_").concat(e4.to), e4), 0 === e4.handled && n3.push({ applicant: e4.from, applicantNick: e4.fromUserNickName, groupName: e4.groupName, groupID: e4.groupID, authentication: e4.authentication, messageKey: e4.time, applicationType: e4.applicationType, userID: e4.userID, note: e4.note });
        }), D2({ applicationList: n3 });
      } }, { key: "_onReceivedGroupSystemNotice", value: function(e3) {
        var t3 = this, n3 = e3.result;
        e3.isInstantMessage && n3.forEach(function(e4) {
          switch (e4.payload.operationType) {
            case 1:
              break;
            case 2:
              t3._onApplyJoinGroup(e4);
              break;
            case 3:
              break;
            case 4:
              t3._onMemberKicked(e4);
              break;
            case 5:
              t3._onGroupDismissed(e4);
              break;
            case 6:
              break;
            case 7:
              t3._onInviteGroup(e4);
              break;
            case 8:
              t3._onQuitGroup(e4);
              break;
            case 9:
              t3._onSetManager(e4);
              break;
            case 10:
              t3._onDeleteManager(e4);
              break;
            case 11:
            case 12:
            case 15:
              break;
            case 20:
              t3._onMessageRemindTypeSynced(e4);
              break;
            case 21:
              t3._grpM.onAVChatRoomMemberBanned(e4);
          }
        });
      } }, { key: "_onApplyJoinGroup", value: function(e3) {
        var t3 = this, e3 = e3.payload.groupProfile, n3 = e3.groupID, e3 = e3.groupType, o3 = this._grpM.hasLocalGroup(n3);
        M2.l("".concat(this._n, "._onApplyJoinGroup groupID:").concat(n3, " groupType:").concat(e3, " hasGroup:").concat(o3)), o3 || Gt2(e3) || this._grpM.getGroupProfile({ groupID: n3 }).then(function(e4) {
          var e4 = e4.data.group;
          e4 && (t3._grpM.updateGroupMap([e4]), e4 = !e4.isSupportTopic, t3._grpM.emitGroupListUpdate(true, e4));
        });
      } }, { key: "_onMemberKicked", value: function(e3) {
        e3 = e3.payload.groupProfile.groupID;
        this._grpM.hasLocalGroup(e3) && this._grpM.deleteLocalGroupAndConversation(e3);
      } }, { key: "_onGroupDismissed", value: function(e3) {
        var e3 = e3.payload.groupProfile.groupID, t3 = (this._grpM.hasLocalGroup(e3) && this._grpM.deleteLocalGroupAndConversation(e3), this._grpM._AVChatRoomHandler);
        t3 && t3.checkJoinedAVChatRoomByID(e3) && t3.reset(e3);
      } }, { key: "_onInviteGroup", value: function(e3) {
        var t3 = this, n3 = e3.payload.groupProfile.groupID, e3 = this._grpM.hasLocalGroup(n3);
        M2.l("".concat(this._n, "._onInviteGroup groupID:").concat(n3, " hasGroup:").concat(e3)), this._grpM.getGroupProfile({ groupID: n3 }).then(function() {
          t3._grpM.emitGroupListUpdate(), t3._grpM.get(11).pullMsgOnInvite("".concat(R2.CONV_GROUP).concat(n3));
        });
      } }, { key: "_onQuitGroup", value: function(e3) {
        var e3 = e3.payload.groupProfile, t3 = e3.groupID, e3 = e3.groupType, n3 = this._grpM.hasLocalGroup(t3);
        M2.l("".concat(this._n, "._onQuitGroup groupID:").concat(t3, " groupType:").concat(e3, " hasGroup:").concat(n3)), n3 && this._grpM.deleteLocalGroupAndConversation(t3);
      } }, { key: "_onSetManager", value: function(e3) {
        var e3 = e3.payload.groupProfile, t3 = e3.to, e3 = e3.groupID, e3 = this._grpM.getGroupMemberHandler().getLocalGroupMemberInfo(e3, t3);
        e3 && e3.updateRole(R2.GRP_MBR_ROLE_ADMIN);
      } }, { key: "_onDeleteManager", value: function(e3) {
        var e3 = e3.payload.groupProfile, t3 = e3.to, e3 = e3.groupID, e3 = this._grpM.getGroupMemberHandler().getLocalGroupMemberInfo(e3, t3);
        e3 && e3.updateRole(R2.GRP_MBR_ROLE_MEMBER);
      } }, { key: "_onMessageRemindTypeSynced", value: function(e3) {
        var t3 = e3.payload.groupProfile.groupID, e3 = e3.payload.messageRemindType;
        this._grpM.get(11).onGroupMsgRemindTypeUpdated({ groupID: t3, messageRemindType: e3 });
      } }, { key: "_handleTopicSystemNotice", value: function(e3) {
        var t3 = e3.groupProfile, n3 = t3.groupID, t3 = t3.topicID, e3 = e3.elements, o3 = e3.operationType, i3 = e3.topicIDList, e3 = e3.messageRemindType, a3 = this._grpM.get(10);
        17 === o3 ? a3.onTopicCreated({ groupID: n3, topicID: t3 }) : 18 === o3 ? a3.onTopicDeleted({ groupID: n3, topicIDList: i3 }) : 20 === o3 && a3.onMessageRemindTypeUpdated({ groupID: n3, topicID: t3, messageRemindType: e3 });
      } }, { key: "reset", value: function() {
        this.pendencyMap.clear();
      } }]), ui = ["relayFlag"], li = (t2(Ei, c2), e2(Ei, [{ key: "_onCloudConfig", value: function() {
        var e3 = this.getCloudConfig("polling_interval"), t3 = this.getCloudConfig("polling_interval_plus"), n3 = this.getCloudConfig("polling_no_msg_count"), o3 = this.getCloudConfig("polling_simplified_msg"), i3 = this.getCloudConfig("paging_grp_count");
        M2.l("".concat(this._n, "._onCloudConfig pollingInterval:").concat(e3) + " pollingIntervalPlus:".concat(t3, " pollingNoMessageCount:").concat(n3) + " pollingSimplifiedMessage:".concat(o3, " pagingGroupCount:").concat(i3)), this._AVChatRoomHandler.setPollingInterval(e3), this._AVChatRoomHandler.setPollingIntervalPlus(t3), this._AVChatRoomHandler.setPollingNoMessageCount(n3), this._AVChatRoomHandler.setPollingSimplifiedMessage(o3), this._commonGroupHandler.setPagingGroupCount(i3);
      } }, { key: "onCheckTimer", value: function(e3) {
        this.isLoggedIn() && (this._commonGroupHandler.onCheckTimer(e3), this._groupTipsHandler.onCheckTimer(e3));
      } }, { key: "guardForAVChatRoom", value: function(t3) {
        var n3, o3 = this;
        return t3.conversationType !== R2.CONV_GROUP || (n3 = Ut2(t3.to) ? Xt2(t3.to) : t3.to, this.hasLocalGroup(n3)) ? D2() : this.getGroupProfile({ groupID: n3 }).then(function(e3) {
          var e3 = e3.data.group.type;
          return M2.l("".concat(o3._n, ".guardForAVChatRoom. groupID:").concat(n3, " type:").concat(e3)), e3 === R2.GRP_AVCHATROOM ? E2(new L2({ code: e3 = k2.MSG_SEND_FAIL_NOT_IN_AV, message: o3.getErrMsg(e3, t3.from, n3), data: { message: t3 } })) : D2();
        });
      } }, { key: "checkJoinedAVChatRoomByID", value: function(e3) {
        return this._AVChatRoomHandler.checkJoinedAVChatRoomByID(e3);
      } }, { key: "onNewMessage", value: function(e3) {
        this._commonGroupHandler.onNewMessage(e3);
      } }, { key: "updateNextMessageSeq", value: function(e3) {
        var n3, o3 = this;
        O2(e3) && (n3 = this.get(10), e3.forEach(function(e4) {
          var t3 = e4.conversationID.replace(R2.CONV_GROUP, "");
          Ut2(t3) && n3.updateUnreadCountAndLastMsg(t3, e4.lastMessage), o3.groupMap.has(t3) && (o3.groupMap.get(t3).nextMessageSeq = e4.lastMessage.sequence + 1);
        }));
      } }, { key: "onNewGroupTips", value: function(e3) {
        this._groupTipsHandler.onNewGroupTips(e3);
      } }, { key: "onMsgRevoked", value: function(e3) {
        this._commonGroupHandler.onMsgRevoked(e3, !(1 < arguments.length && void 0 !== arguments[1]) || arguments[1]);
      } }, { key: "onNewGroupSystemNotice", value: function(e3) {
        this._groupSystemNoticeHandler.onNewGroupSystemNotice(e3);
      } }, { key: "onMsgReadNotice", value: function(e3) {
        var a3 = this;
        e3.dataList.forEach(function(e4) {
          var i3, e4 = e4.elements.groupMessageReadNotice;
          N2(e4) || (i3 = a3.get(11), e4.forEach(function(e5) {
            var t3 = e5.groupID, n3 = e5.topicID, n3 = void 0 === n3 ? void 0 : n3, e5 = e5.lastMessageSeq, t3 = (M2.l("".concat(a3._n, ".onMsgReadNotice groupID:").concat(t3, " lastMessageSeq:").concat(e5)), "".concat(R2.CONV_GROUP).concat(t3)), o3 = true;
            S2(n3) || (t3 = "".concat(R2.CONV_GROUP).concat(n3), o3 = false), i3.updateIsReadAfterReadReport({ conversationID: t3, lastMessageSeq: e5 }), i3.updateUnreadCount(t3, o3), i3.clearGroupAtInfoList(t3, o3);
          }));
        });
      } }, { key: "onReadReceiptList", value: function(e3) {
        var o3 = this;
        M2.l("".concat(this._n, ".onReadReceiptList options:"), e3), e3.dataList.forEach(function(e4) {
          var t3 = e4.groupProfile, e4 = e4.elements, t3 = t3.groupID, n3 = o3.get(11), e4 = e4.readReceiptList;
          n3.updateReadReceiptInfo({ groupID: t3, readReceiptList: e4 });
        });
      } }, { key: "onMsgModified", value: function(e3) {
        M2.l("".concat(this._n, ".onMsgModified options:"), e3);
        var t3 = this.get(11);
        e3.dataList.forEach(function(e4) {
          t3.onMessageModified(y2(y2({}, e4), {}, { conversationType: R2.CONV_GROUP, to: e4.topicID || e4.groupID }));
        });
      } }, { key: "deleteGroupSystemNotice", value: function(e3) {
        this._groupSystemNoticeHandler.deleteGroupSystemNotice(e3);
      } }, { key: "initGroupMap", value: function(e3) {
        this.groupMap.set(e3.groupID, new Yo(e3));
      } }, { key: "clearGroupMap", value: function() {
        this.groupMap.clear();
      } }, { key: "deleteGroup", value: function(e3) {
        this.groupMap.delete(e3);
      } }, { key: "updateGroupMap", value: function(e3) {
        var t3, n3 = this, o3 = this.get(11);
        e3.forEach(function(e4) {
          t3 = e4.groupID, n3.groupMap.has(t3) ? n3.groupMap.get(t3).updateGroup(e4) : (n3.groupMap.set(t3, new Yo(e4)), o3.deleteGroupRoamingInfo(t3));
        });
        var i3, a3 = this.getMyUserID(), s3 = F2(this.groupMap);
        try {
          for (s3.s(); !(i3 = s3.n()).done; ) {
            var r3 = j2(i3.value, 2)[1];
            r3.selfInfo.userID = a3, "Owner" === r3.selfInfo.role && (r3.ownerID = a3);
          }
        } catch (e4) {
          s3.e(e4);
        } finally {
          s3.f();
        }
      } }, { key: "getGroupMap", value: function() {
        return this.groupMap;
      } }, { key: "getLocalGroupList", value: function() {
        return d2(this.groupMap.values()).filter(function(e3) {
          return e3.type !== R2.GRP_ROOM && e3.type !== R2.GRP_LIVE;
        });
      } }, { key: "getLocalGroupProfile", value: function(e3) {
        return this.groupMap.get(e3);
      } }, { key: "sortLocalGroupList", value: function() {
        var e3 = d2(this.groupMap).filter(function(e4) {
          e4 = j2(e4, 2);
          return e4[0], !S2(e4[1].lastMessage);
        });
        e3.sort(function(e4, t3) {
          return t3[1].lastMessage.lastTime - e4[1].lastMessage.lastTime;
        }), this.groupMap = new Map(d2(e3));
      } }, { key: "updateGroupLastMessage", value: function(e3) {
        this._commonGroupHandler.updateLastMsg(e3);
      } }, { key: "emitGroupListUpdate", value: function() {
        var e3 = !(0 < arguments.length && void 0 !== arguments[0]) || arguments[0], t3 = !(1 < arguments.length && void 0 !== arguments[1]) || arguments[1], n3 = this.getLocalGroupList();
        e3 && this.emitOEvt(h2.GROUP_LIST_UPDATED), t3 && (e3 = JSON.parse(JSON.stringify(n3)), this.get(11).updateConvGroupProfile(e3));
      } }, { key: "getMyNameCardByGroupID", value: function(e3) {
        e3 = this.getLocalGroupProfile(e3);
        return e3 ? e3.selfInfo.nameCard : "";
      } }, { key: "isPagingGetCompleted", value: function() {
        return this._commonGroupHandler.isPagingGetCompleted();
      } }, { key: "getMsgRemindType", value: function(e3) {
        var n3 = this;
        return !O2(e3) || 0 === e3.length || 0 === (e3 = e3.filter(function(e4) {
          return !Gt2(n3.getLocalGroupProfile(e4).type);
        })).length ? Promise.resolve() : (M2.l("".concat(this._n, ".getMsgRemindType groupIDList:").concat(e3)), this.getGroupProfileAdvance({ groupIDList: e3, responseFilter: { memberInfoFilter: ["MsgFlag"] } }).then(function(e4) {
          var e4 = e4.data.successGroupList, t3 = n3.get(11);
          e4.forEach(function(e5) {
            t3.onGroupMsgRemindTypeUpdated({ groupID: e5.groupID, messageRemindType: O2(e5.members) ? e5.members[0].messageRemindType : "" });
          });
        }));
      } }, { key: "getGroupList", value: function() {
        return this._commonGroupHandler.getGroupList();
      } }, { key: "syncCommunityWithTopic", value: function() {
        return this._commonGroupHandler.syncGroupList(true);
      } }, { key: "getGroupProfile", value: function(t3) {
        var n3 = this, o3 = "".concat(this._n, ".").concat("getGroupProfile"), i3 = new P2("getGroupProfile"), a3 = t3.groupID, e3 = t3.groupCustomFieldFilter, e3 = (M2.l("".concat(o3, " groupID:").concat(a3)), { groupIDList: [a3], responseFilter: { groupBaseInfoFilter: d2(re2), groupCustomFieldFilter: e3, memberInfoFilter: [].concat(d2(ce2), ["NameCard"]) } });
        return this.getGroupProfileAdvance(e3).then(function(e4) {
          var e4 = e4.data, t4 = e4.successGroupList, e4 = e4.failureGroupList;
          return M2.l("".concat(o3, " ok")), 0 < e4.length ? E2(e4[0]) : ((e4 = Gt2(t4[0].type) && !n3.hasLocalGroup(a3) ? new Yo(t4[0]) : (n3.updateGroupMap(t4), n3.getLocalGroupProfile(a3))).isSupportTopic || n3.get(11).updateConvGroupProfile([e4]), i3.setMessage("groupID:".concat(a3, " type:").concat(e4.type, " muteAllMembers:").concat(e4.muteAllMembers, " ownerID:").concat(e4.ownerID)).end(), T2({ group: e4 }));
        }).catch(function(e4) {
          return i3.setError(e4).setMessage("groupID:".concat(t3.groupID)).end(), M2.e("".concat(o3, " failed. error:"), e4), E2(e4);
        });
      } }, { key: "getGroupProfileAdvance", value: function(e3) {
        var t3, n3 = "".concat(this._n, ".getGroupProfileAdvance"), o3 = e3.groupIDList, i3 = (O2(o3) && 50 < o3.length && (this.warn("GetGroupProfileLimit"), o3.length = 50), []), a3 = [], o3 = (o3.forEach(function(e4) {
          (Pt2({ groupID: e4 }) ? a3 : i3).push(e4);
        }), []);
        return 0 < i3.length && (t3 = this._getGroupProfileAdvance(y2(y2({}, e3), {}, { groupIDList: i3 })), o3.push(t3)), 0 < a3.length && (t3 = this._getGroupProfileAdvance(y2(y2({}, e3), {}, { groupIDList: a3, relayFlag: 0 < i3.length })), o3.push(t3)), Promise.all(o3).then(function(e4) {
          var t4 = [], n4 = [];
          return e4.forEach(function(e5) {
            t4.push.apply(t4, d2(e5.successGroupList)), n4.push.apply(n4, d2(e5.failureGroupList));
          }), T2({ successGroupList: t4, failureGroupList: n4 });
        }).catch(function(e4) {
          return M2.e("".concat(n3, " failed. error:"), e4), E2(e4);
        });
      } }, { key: "_getGroupProfileAdvance", value: function(t3) {
        var n3 = this, e3 = t3.relayFlag, o3 = void 0 !== e3 && e3, i3 = W2(t3, ui);
        return this.req({ P: G2.GET_GRP_PROFILE, data: i3 }).then(function(e4) {
          M2.l("".concat(n3._n, "._getGroupProfileAdvance ok. options:"), i3);
          e4 = e4.data.groups;
          return { successGroupList: e4.filter(function(e5) {
            return N2(e5.errorCode) || 0 === e5.errorCode;
          }), failureGroupList: e4.filter(function(e5) {
            return e5.errorCode && 0 !== e5.errorCode;
          }).map(function(e5) {
            return new L2({ code: e5.errorCode, message: e5.errorInfo, data: { groupID: e5.groupID } });
          }) };
        }).catch(function(e4) {
          return o3 && Pt2({ groupID: t3.groupIDList[0] }) ? { successGroupList: [], failureGroupList: [] } : E2(e4);
        });
      } }, { key: "createGroup", value: function(s3) {
        var r3 = this, e3 = [R2.GRP_PUBLIC, R2.GRP_WORK, R2.GRP_MEETING, R2.GRP_AVCHATROOM, R2.GRP_COMMUNITY], c3 = "".concat(this._n, ".").concat("createGroup"), t3 = s3.type, n3 = s3.groupID;
        if (s3.name && false === this._filterProfanity("name", s3))
          return E2({ code: k2.PROFANITY_FOUND });
        if (s3.introduction && false === this._filterProfanity("introduction", s3))
          return E2({ code: k2.PROFANITY_FOUND });
        if (s3.notification && false === this._filterProfanity("notification", s3))
          return E2({ code: k2.PROFANITY_FOUND });
        if (!e3.includes(t3))
          return E2({ code: k2.ILLEGAL_GRP_TYPE });
        if (!Pt2({ type: t3 })) {
          if (!S2(n3) && Pt2({ groupID: n3 }))
            return E2({ code: k2.ILLEGAL_GRP_ID });
          s3.isSupportTopic = void 0;
        }
        if (Gt2(t3) && !N2(s3.memberList) && 0 < s3.memberList.length && (s3.memberList = void 0), this._canIUseJoinOption(t3) || N2(s3.joinOption) || (s3.joinOption = void 0), Pt2({ type: t3 })) {
          if (!S2(n3) && !Pt2({ groupID: n3 }))
            return E2({ code: k2.ILLEGAL_GRP_ID });
          s3.isSupportTopic = true === s3.isSupportTopic ? 1 : 0;
        }
        var u3 = new P2("createGroup"), l3 = (M2.l("".concat(c3, " options:"), s3), null), d3 = [];
        return this.req({ P: G2.CREATE_GRP, data: y2(y2({}, s3), {}, { ownerID: this.getMyUserID(), webPushFlag: 1 }) }).then(function(e4) {
          var t4, n4, o3, e4 = e4.data, i3 = e4.groupID, e4 = e4.overLimitUserIDList, a3 = void 0 === e4 ? [] : e4, e4 = (l3 = i3, d3 = a3, "groupType:".concat(s3.type, " groupID:").concat(i3, " overLimitUserIDList:").concat(a3));
          return u3.setMessage(e4).end(), M2.l("".concat(c3, " ok. ").concat(e4)), s3.type === R2.GRP_AVCHATROOM || s3.type === R2.GRP_COMMUNITY && 1 === s3.isSupportTopic || (S2(s3.memberList) || S2(a3) || (s3.memberList = s3.memberList.filter(function(e5) {
            return -1 === a3.indexOf(e5.userID);
          })), r3.updateGroupMap([y2(y2({}, s3), {}, { groupID: i3 })]), e4 = r3.get(2), o3 = "", t4 = 0, s3.type === R2.GRP_COMMUNITY ? (o3 = r3.isIntl() ? "Create Community" : "创建社群", t4 = 1) : o3 = r3.isIntl() ? "Create Group" : "创建群组", n4 = r3.get(4).getMyNick(), o3 = e4.createCustomMessage({ to: i3, conversationType: R2.CONV_GROUP, payload: { data: JSON.stringify({ businessID: "group_create", content: o3, cmd: t4, opUser: n4 || r3.getMyUserID(), version: 4 }) } }), e4.sendMessageInstance(o3), r3.emitGroupListUpdate()), r3.getGroupProfile({ groupID: i3 });
        }).then(function(e4) {
          var e4 = e4.data.group, t4 = e4.selfInfo, n4 = t4.nameCard, t4 = t4.joinTime;
          return e4.updateSelfInfo({ nameCard: n4, joinTime: t4, messageRemindType: R2.MSG_REMIND_ACPT_AND_NOTE, role: R2.GRP_MBR_ROLE_OWNER }), T2({ group: e4, overLimitUserIDList: d3 });
        }).catch(function(e4) {
          var t4;
          return u3.setMessage("groupType:".concat(s3.type)).setError(e4).end(), 10010 === e4.code || 10007 === e4.code ? (r3._silentlyGetGroupProfile(e4.code, l3), r3.updateGroupMap([y2(y2({}, s3), {}, { groupID: l3 })]), (t4 = r3.getLocalGroupProfile(l3)).selfInfo.role = R2.GRP_MBR_ROLE_OWNER, T2({ group: t4, overLimitUserIDList: d3 })) : (M2.e("".concat(c3, " failed. error:"), e4), E2(e4));
        });
      } }, { key: "dismissGroup", value: function(e3) {
        var t3 = this, n3 = "".concat(this._n, ".").concat("dismissGroup"), o3 = "groupID:".concat(e3), i3 = new P2("dismissGroup");
        return i3.setMessage(o3), M2.l("".concat(n3, " ").concat(o3)), this.req({ P: G2.DISMISS_GRP, data: { groupID: e3 } }).then(function() {
          return i3.end(), M2.l("".concat(n3, " ok")), t3.deleteLocalGroupAndConversation(e3), t3.checkJoinedAVChatRoomByID(e3) && t3._AVChatRoomHandler.reset(e3), t3._groupAttributesHandler.deleteLocalGroupAttributes(e3), T2({ groupID: e3 });
        }).catch(function(e4) {
          return i3.setError(e4).end(), M2.e("".concat(n3, " failed. error:"), e4), E2(e4);
        });
      } }, { key: "updateGroupProfile", value: function(e3) {
        var t3, n3, o3 = this, i3 = "".concat(this._n, ".").concat("updateGroupProfile");
        return this.hasLocalGroup(e3.groupID) && (t3 = this.getLocalGroupProfile(e3.groupID).type, this._canIUseJoinOption(t3) || N2(e3.joinOption) || (M2.w("".concat(i3, " joinOption is unavailable for Work/Meeting/AVChatRoom")), e3.joinOption = void 0)), N2(e3.muteAllMembers) || (e3.muteAllMembers ? e3.muteAllMembers = "On" : e3.muteAllMembers = "Off"), e3.name && false === this._filterProfanity("name", e3) || e3.introduction && false === this._filterProfanity("introduction", e3) || e3.notification && false === this._filterProfanity("notification", e3) ? E2({ code: k2.PROFANITY_FOUND }) : ((n3 = new P2("updateGroupProfile")).setMessage(JSON.stringify(e3)), M2.l("".concat(i3, " groupID:").concat(e3.groupID)), this.req({ P: G2.UPDATE_GRP_PROFILE, data: e3 }).then(function() {
          return n3.end(), M2.l("".concat(i3, " ok")), o3.hasLocalGroup(e3.groupID) && o3.groupMap.get(e3.groupID).updateGroup(e3), T2({ group: o3.groupMap.get(e3.groupID) });
        }).catch(function(e4) {
          return n3.setError(e4).end(), M2.l("".concat(i3, " failed. error:"), e4), E2(e4);
        }));
      } }, { key: "_filterProfanity", value: function(e3, t3) {
        var n3, o3 = this.get(29);
        return !o3 || (n3 = (o3 = o3.filterText(t3[e3], se2)).isAllowedToSend, o3 = o3.modifiedText, true === n3 && (t3[e3] = o3, true));
      } }, { key: "joinGroup", value: function(t3) {
        var n3, o3 = this, i3 = t3.groupID, a3 = "".concat(this._n, ".joinGroup");
        return this.deleteUnjoinedAVChatRoom(i3), this.hasLocalGroup(i3) ? this.isLoggedIn() ? (n3 = new P2("applyJoinGroup"), this.getGroupProfile({ groupID: i3 }).then(function() {
          return n3.setMessage("groupID:".concat(i3, " joinedStatus:").concat(R2.JOIN_STATUS_ALREADY_IN_GROUP)).end(), D2({ status: R2.JOIN_STATUS_ALREADY_IN_GROUP });
        }).catch(function(e3) {
          return n3.setMessage("groupID:".concat(i3, " unjoined")).end(), M2.w("".concat(a3, " ").concat(i3, " was unjoined, now join!")), o3.groupMap.delete(i3), o3.applyJoinGroup(t3);
        })) : D2({ status: R2.JOIN_STATUS_ALREADY_IN_GROUP }) : (M2.l("".concat(a3, " groupID:").concat(i3)), this.isLoggedIn() ? this.applyJoinGroup(t3) : this._AVChatRoomHandler.joinWithoutAuth(t3));
      } }, { key: "applyJoinGroup", value: function(e3) {
        var c3, u3, l3 = this, d3 = "".concat(this._n, ".").concat("applyJoinGroup"), p3 = e3.groupID;
        return S2(e3.applyMessage) || false !== this._filterProfanity("applyMessage", e3) ? (c3 = new P2("applyJoinGroup"), e3 = y2({}, e3), (u3 = this.canIUse(g2.AV_HISTORY_MSG)) && (e3.historyMessageFlag = 1), this.get(11).deleteTopicRoamingInfo(p3), this.req({ P: G2.APPLY_JOIN_GRP, data: e3 }).then(function(e4) {
          var e4 = e4.data, t3 = e4.joinedStatus, n3 = e4.longPollingKey, o3 = e4.startSeq, i3 = e4.avChatRoomFlag, a3 = e4.avChatRoomKey, s3 = e4.messageList, e4 = "groupID:".concat(p3, " joinedStatus:").concat(t3, " longPollingKey:").concat(n3, " startSeq:").concat(o3) + " avChatRoomFlag:".concat(i3, " canGetAVChatRoomHistoryMsg:").concat(u3, ",") + " historyMsgCount:".concat(S2(s3) ? 0 : s3.length);
          switch (c3.setMessage(e4).end(), M2.l("".concat(d3, " ok. ").concat(e4)), t3) {
            case ot2:
              return T2({ status: ot2 });
            case nt2:
              return l3.getGroupProfile({ groupID: p3 }).then(function(e5) {
                e5 = e5.data.group;
                return l3._handleJoinResult({ group: e5, avChatRoomFlag: i3, longPollingKey: n3, startSeq: o3, avChatRoomKey: a3, messageList: s3 });
              }).catch(function(e5) {
                var t4;
                return 10010 === e5.code || 10007 === e5.code ? (l3._silentlyGetGroupProfile(e5.code, p3), t4 = new Yo({ groupID: p3 }), l3.updateGroupMap([t4]), l3._handleJoinResult({ group: t4, avChatRoomFlag: i3, longPollingKey: n3, startSeq: o3, avChatRoomKey: a3, messageList: s3 })) : (M2.e("".concat(d3, " failed. error:"), e5), E2(e5));
              });
            default:
              var r3 = new L2({ code: k2.JOIN_GRP_FAIL });
              return M2.e("".concat(d3, " failed. error:"), r3), E2(r3);
          }
        }).catch(function(e4) {
          return c3.setMessage("groupID:".concat(p3)).setError(e4).end(), M2.e("".concat(d3, " failed. error:"), e4), E2(e4);
        })) : E2({ code: k2.PROFANITY_FOUND });
      } }, { key: "_handleJoinResult", value: function(e3) {
        var t3 = this, n3 = e3.group, o3 = e3.avChatRoomFlag, i3 = e3.longPollingKey, a3 = e3.startSeq, s3 = e3.avChatRoomKey, r3 = e3.messageList, c3 = n3.groupID;
        return 1 === o3 ? (this.get(11).setCompleted("".concat(R2.CONV_GROUP).concat(c3)), this._groupAttributesHandler.initGroupAttributesCache({ groupID: c3, avChatRoomKey: s3 }), this._groupCountersHandler.initGroupCountersCache({ groupID: c3, avChatRoomKey: s3 }), (e3 = N2(i3) ? this._AVChatRoomHandler.handleJoinResult({ group: n3 }) : this._AVChatRoomHandler.startRunLoop({ group: n3, longPollingKey: i3, startSeq: a3 })).then(function() {
          t3._onAVChatRoomHistoryMessage(r3, c3);
        }), e3) : (this.emitGroupListUpdate(true, false), T2({ status: nt2, group: n3 }));
      } }, { key: "quitGroup", value: function(e3) {
        var t3, n3 = this, o3 = "".concat(this._n, ".").concat("quitGroup"), i3 = "groupID:".concat(e3), a3 = (M2.l("".concat(o3, " ").concat(i3)), this.checkJoinedAVChatRoomByID(e3));
        return a3 || this.hasLocalGroup(e3) ? a3 && !this.isLoggedIn() ? (M2.l("".concat(o3, " anonymously ok. ").concat(i3)), this.deleteLocalGroupAndConversation(e3), this._AVChatRoomHandler.reset(e3), D2({ groupID: e3 })) : ((t3 = new P2("quitGroup")).setMessage(i3), this.req({ P: G2.QUIT_GRP, data: { groupID: e3 } }).then(function() {
          return t3.end(), M2.l("".concat(o3, " ok")), n3.deleteLocalGroupAndConversation(e3), a3 && n3._AVChatRoomHandler.reset(e3), n3._groupAttributesHandler.deleteLocalGroupAttributes(e3), T2({ groupID: e3 });
        }).catch(function(e4) {
          return t3.setError(e4).end(), M2.e("".concat(o3, " failed. error:"), e4), E2(e4);
        })) : E2({ code: k2.MEMBER_NOT_IN_GRP });
      } }, { key: "searchGroupByID", value: function(e3) {
        var t3 = "".concat(this._n, ".").concat("searchGroupByID"), n3 = { groupIDList: [e3] }, o3 = new P2("searchGroupByID");
        return o3.setMessage("groupID:".concat(e3)), M2.l("".concat(t3, " groupID:").concat(e3)), this.req({ P: G2.SEARCH_GRP, data: n3 }).then(function(e4) {
          e4 = e4.data.groupProfile;
          if (0 !== e4[0].errorCode)
            throw new L2({ code: e4[0].errorCode, message: e4[0].errorInfo });
          return o3.end(), M2.l("".concat(t3, " ok")), T2({ group: new Yo(e4[0]) });
        }).catch(function(e4) {
          return o3.setError(e4).end(), M2.w("".concat(t3, " failed. error:"), e4), E2(e4);
        });
      } }, { key: "changeGroupOwner", value: function(i3) {
        var a3, s3 = this, r3 = "".concat(this._n, ".").concat("changeGroupOwner");
        return this.hasLocalGroup(i3.groupID) && this.getLocalGroupProfile(i3.groupID).type === R2.GRP_AVCHATROOM ? E2({ code: k2.CANNOT_CHANGE_OWNER_IN_AV }) : i3.newOwnerID === this.getMyUserID() ? E2({ code: k2.CANNOT_CHANGE_OWNER_TO_SELF }) : ((a3 = new P2("changeGroupOwner")).setMessage("groupID:".concat(i3.groupID, " newOwnerID:").concat(i3.newOwnerID)), M2.l("".concat(r3, " groupID:").concat(i3.groupID)), this.req({ P: G2.CHANGE_GRP_OWNER, data: i3 }).then(function() {
          a3.end(), M2.l("".concat(r3, " ok"));
          var e3, t3 = i3.groupID, n3 = i3.newOwnerID, o3 = (s3.groupMap.get(t3).ownerID = n3, s3._groupMemberHandler.getLocalGroupMemberList(t3));
          return o3 instanceof Map && (e3 = o3.get(s3.getMyUserID()), N2(e3) || (e3.updateRole("Member"), s3.groupMap.get(t3).selfInfo.role = "Member"), e3 = o3.get(n3), N2(e3) || e3.updateRole("Owner")), s3.emitGroupListUpdate(true, false), T2({ group: s3.groupMap.get(t3) });
        }).catch(function(e3) {
          return a3.setError(e3).end(), M2.e("".concat(r3, " failed. error:"), e3), E2(e3);
        }));
      } }, { key: "getGroupApplicationList", value: function() {
        return this._groupSystemNoticeHandler.getGroupApplicationList();
      } }, { key: "handleGroupApplication", value: function(e3) {
        var t3, n3, o3, i3, a3, s3 = this, r3 = "".concat(this._n, ".").concat("handleGroupApplication"), c3 = e3.handleAction, u3 = e3.handleMessage, l3 = e3.message, d3 = e3.application, p3 = (l3 ? (t3 = l3.payload.operatorID, n3 = l3.payload.groupProfile.groupID, o3 = l3.payload.authentication, i3 = l3.payload.messageKey) : d3 && (t3 = d3.applicant, n3 = d3.groupID, o3 = d3.authentication, i3 = d3.messageKey), G2.HANDLE_GRP_APPLICATION), _3 = (d3 && 2 === d3.applicationType && (p3 = G2.HANDLE_INVITE_JOIN_GRP, a3 = d3.userID), new P2("handleGroupApplication"));
        return _3.setMessage("groupID:".concat(n3)), M2.l("".concat(r3, " groupID:").concat(n3)), this.req({ P: p3, data: { handleAction: c3, handleMessage: u3, applicant: t3, invitee: a3, groupID: n3, authentication: o3, messageKey: i3 } }).then(function() {
          return _3.end(), M2.l("".concat(r3, " ok")), l3 && s3._groupSystemNoticeHandler.deleteGroupSystemNotice({ messageList: [e3.message] }), T2({ group: s3.getLocalGroupProfile(n3) });
        }).catch(function(e4) {
          return _3.setError(e4).end(), M2.e("".concat(r3, " failed. error"), e4), E2(e4);
        });
      } }, { key: "handleGroupInvitation", value: function(e3) {
        var t3 = this, n3 = "".concat(this._n, ".").concat("handleGroupInvitation"), o3 = e3.message.payload, i3 = o3.groupProfile.groupID, a3 = o3.authentication, s3 = o3.messageKey, o3 = o3.operatorID, r3 = e3.handleAction, c3 = new P2("handleGroupInvitation");
        return c3.setMessage("groupID:".concat(i3, " inviter:").concat(o3, " handleAction:").concat(r3)), M2.l("".concat(n3, " groupID:").concat(i3, " inviter:").concat(o3, " handleAction:").concat(r3)), this.req({ P: G2.HANDLE_GRP_INVITATION, data: y2(y2({}, e3), {}, { inviter: o3, groupID: i3, authentication: a3, messageKey: s3 }) }).then(function() {
          return c3.end(), M2.l("".concat(n3, " ok")), t3._groupSystemNoticeHandler.deleteGroupSystemNotice({ messageList: [e3.message] }), T2({ group: t3.getLocalGroupProfile(i3) });
        }).catch(function(e4) {
          return c3.setError(e4).end(), M2.e("".concat(n3, " failed. error"), e4), E2(e4);
        });
      } }, { key: "getGroupOnlineMemberCount", value: function(t3) {
        var n3 = this, o3 = "".concat(this._n, ".getGroupOnlineMemberCount"), e3 = this._AVChatRoomHandler.checkJoinedAVChatRoomByID(t3), i3 = this.hasLocalGroup(t3);
        if (M2.l("".concat(o3, " groupID:").concat(t3, " isAVChatRoom:").concat(e3, " has:").concat(i3)), e3)
          return this._AVChatRoomHandler.getGroupOnlineMemberCount(t3);
        if (!i3)
          return D2({ memberCount: 0 });
        e3 = Date.now();
        if (this._onlineMemberCountMap.has(t3)) {
          i3 = this._onlineMemberCountMap.get(t3);
          if (e3 - i3.lastReqTime <= 6e4)
            return D2({ memberCount: i3.memberCount });
          i3.lastReqTime = e3;
        }
        return this.requestOnlineCount(t3).then(function(e4) {
          e4 = e4.data.memberCount, e4 = void 0 === e4 ? 0 : e4;
          return n3._onlineMemberCountMap.set(t3, { lastReqTime: Date.now(), memberCount: e4 }), M2.l("".concat(o3, " ok. groupID:").concat(t3, " memberCount:").concat(e4)), D2({ memberCount: e4 });
        }).catch(function(e4) {
          return M2.w("".concat(o3, " failed. error:"), e4), Promise.reject(e4);
        });
      } }, { key: "requestOnlineCount", value: function(e3) {
        return this.req({ P: G2.GET_ONLINE_MBR_NUM, data: { groupID: e3 } });
      } }, { key: "hasLocalGroup", value: function(e3) {
        return this.groupMap.has(e3);
      } }, { key: "deleteLocalGroupAndConversation", value: function(e3) {
        var t3 = this.checkJoinedAVChatRoomByID(e3), n3 = (M2.l("".concat(this._n, ".deleteLocalGroupAndConversation groupID:").concat(e3, " isJoinedAVChatRoom:").concat(t3)), this.get(11)), o3 = "".concat(R2.CONV_GROUP).concat(e3);
        t3 && (this.stopMessageLongPolling({ groupID: e3 }), n3.deleteLocalConv(o3)), Pt2({ groupID: e3 }) && (t3 = this.getLocalGroupProfile(e3)) && true === t3.isSupportTopic && this.get(10).deleteTopicListInCommunity(e3), n3.clearUnreadCount(o3), n3.setCompleted(o3), this._deleteLocalGroup(e3), this._onlineMemberCountMap.delete(e3), this.emitGroupListUpdate(true, false);
      } }, { key: "_deleteLocalGroup", value: function(e3) {
        this.groupMap.delete(e3), this._groupMemberHandler.deleteGroupMemberList(e3);
      } }, { key: "sendMessage", value: function(e3, t3) {
        return O2(e3._receiverList) && 0 < e3._receiverList.length && !this.canIUse(g2.MSG_TO_SPECIFIED_GRP_MBR) ? this.noUse("Targeted Group Message") : (e3 = this.createGroupMessagePack(e3, t3), this.req(e3));
      } }, { key: "createGroupMessagePack", value: function(e3, t3) {
        var n3 = null, o3 = (t3 && t3.offlinePushInfo && (n3 = t3.offlinePushInfo), ""), i3 = (C2(e3.cloudCustomData) && 0 < e3.cloudCustomData.length && (o3 = e3.cloudCustomData), []), a3 = (m2(t3) && m2(t3.messageControlInfo) && (a3 = (r3 = t3.messageControlInfo).excludedFromUnreadCount, s3 = r3.excludedFromLastMessage, r3 = r3.excludedFromContentModeration, true === a3 && i3.push("NoUnread"), true === s3 && i3.push("NoLastMsg"), true === r3) && i3.push("NoMsgCheck"), void 0), s3 = (O2(e3._receiverList) && 0 < e3._receiverList.length && (a3 = e3._receiverList, 50 < e3._receiverList.length) && (a3 = e3._receiverList.slice(0, 50), this.warn("ReceiverListLimit")), this.isOnlineMessage(e3, t3) ? 1 : 0), r3 = JSON.parse(JSON.stringify(e3.getElements())), c3 = this.get(17).getFileDNList(), u3 = e3.getGroupAtInfoList(), r3 = { fromAccount: this.getMyUserID(), groupID: e3.to, msgBody: uo(e3.type, r3, c3), cloudCustomData: o3, random: e3.random, priority: e3.priority, clientSequence: e3.clientSequence, groupAtInfo: e3.type !== R2.MSG_TEXT || S2(u3) ? void 0 : u3, onlineOnlyFlag: s3, clientTime: e3.clientTime, offlinePushInfo: Go(n3), messageControlInfo: 0 == s3 ? i3 : void 0, needReadReceipt: true !== e3.needReadReceipt || this.isMessageFromOrToAVChatroom(e3.to) ? 0 : 1, receiverList: a3, isSupportExtension: true === e3.isSupportExtension ? 1 : 0, isRelayMessage: true === e3._relayFlag ? 1 : 0, cmConfigID: e3._cmConfigID, forbidCallbackControl: Ot2(t3) };
        return Ut2(e3.to) && (r3.groupID = Xt2(e3.to), r3.topicID = e3.to), { P: G2.SEND_GRP_MSG, data: r3 };
      } }, { key: "revokeMessage", value: function(e3) {
        var t3 = { groupID: e3.to, msgSeqList: [{ msgSeq: e3.sequence }] };
        return Ut2(e3.to) && (t3.groupID = Xt2(e3.to), t3.topicID = e3.to), this.req({ P: G2.REVOKE_GRP_MSG, data: t3 });
      } }, { key: "deleteMessage", value: function(e3) {
        var t3 = e3.to, e3 = e3.keyList, e3 = (M2.l("".concat(this._n, ".deleteMessage groupID:").concat(t3, " count:").concat(e3.length)), { groupID: t3, deleter: this.getMyUserID(), keyList: e3 });
        return Ut2(t3) && (e3.groupID = Xt2(t3), e3.topicID = t3), this.req({ P: G2.DEL_GRP_MSG, data: e3 });
      } }, { key: "modifyRemoteMessage", value: function(e3) {
        var t3 = e3.to, n3 = e3.sequence, o3 = e3.payload, i3 = e3.type, a3 = e3.version, a3 = void 0 === a3 ? 0 : a3, s3 = e3.cloudCustomData, e3 = e3._elements, r3 = t3, c3 = void 0, t3 = (Ut2(t3) && (r3 = Xt2(t3), c3 = t3), void 0);
        return Qt2(i3) && (1 < e3.length && e3.splice(0, 1, { type: i3, content: o3 }), t3 = e3), this.req({ P: G2.MODIFY_GRP_MSG, data: { groupID: r3, topicID: c3, sequence: n3, version: a3, elements: t3, cloudCustomData: s3 } });
      } }, { key: "getRoamingMessage", value: function(e3) {
        var r3 = this, c3 = "".concat(this._n, ".").concat("getRoamingMessage"), u3 = e3.conversationID, l3 = e3.groupID, e3 = e3.sequence, d3 = new P2("getRoamingMessage"), p3 = 0, _3 = void 0;
        return Ut2(l3) && (l3 = Xt2(_3 = l3)), this._computeLastSequence({ groupID: l3, topicID: _3, sequence: e3 }).then(function(e4) {
          return p3 = e4, M2.l("".concat(c3, " groupID:").concat(l3, " startSequence:").concat(p3)), r3.req({ P: G2.GET_GRP_ROAMING_MSG, data: { groupID: l3, count: 21, sequence: p3, topicID: _3 } });
        }).then(function(e4) {
          var t3 = e4.data, n3 = t3.messageList, o3 = t3.complete, t3 = t3.invisibleSequenceList, t3 = void 0 === t3 ? [] : t3, e4 = e4.data.nextSequence, e4 = void 0 === e4 ? 0 : e4, i3 = (N2(n3) ? M2.l("".concat(c3, " ok. complete:").concat(o3, " nextSequence:").concat(e4, " but messageList is undefined!")) : M2.l("".concat(c3, " ok. complete:").concat(o3, " nextSequence:").concat(e4, " count:").concat(n3.length)), d3.setMessage("groupID:".concat(l3, " topicID:").concat(_3, " startSequence:").concat(p3, " complete:").concat(o3, " nextSequence:").concat(e4)).end(), r3.get(11)), a3 = [], s3 = [], n3 = (S2(n3) || (a3 = i3.onRoamingMessage(n3, u3, true, s3), i3.updateIsRead(u3), i3.patchConvLastMessage(u3)), 2 === o3 || e4 < 1);
          return n3 && (i3.setCompleted(u3), e4 = ""), M2.l("".concat(c3, " isPullingCompleted:").concat(n3, " nextReqID:").concat(e4, " storedMsgCount:").concat(a3.length) + " invisibleSeqCount:".concat(t3.length)), { nextReqID: e4 + "", storedMessageList: a3, assembledMessageList: s3, isPullingCompleted: n3 };
        }).catch(function(e4) {
          return d3.setError(e4).setMessage("groupID:".concat(l3, " topicID:").concat(_3, " startSequence:").concat(p3)).end(), M2.w("".concat(c3, " failed. error:"), e4), E2(e4);
        });
      } }, { key: "_getGroupIDOfMessage", value: function(e3) {
        return e3.conversationID.replace(R2.CONV_GROUP, "");
      } }, { key: "getReadReceiptList", value: function(n3) {
        var t3, o3 = "".concat(this._n, ".").concat("getReadReceiptList"), e3 = this._getGroupIDOfMessage(n3[0]), i3 = this.getMyUserID(), a3 = n3.filter(function(e4) {
          return e4.from === i3 && true === e4.needReadReceipt;
        }).map(function(e4) {
          return { sequence: e4.sequence };
        });
        return M2.l("".concat(o3, " groupID:").concat(e3, " sequenceList:").concat(JSON.stringify(a3))), 0 === a3.length ? D2({ messageList: n3 }) : ((t3 = new P2("getReadReceiptList")).setMessage("groupID:".concat(e3)), this.req({ P: G2.GET_READ_RECEIPT, data: { groupID: e3, sequenceList: a3 } }).then(function(e4) {
          t3.end(), M2.l("".concat(o3, " ok"));
          e4 = e4.data.readReceiptList;
          return O2(e4) && e4.forEach(function(t4) {
            n3.forEach(function(e5) {
              0 === t4.code && t4.sequence === e5.sequence && (e5.readReceiptInfo.readCount = t4.readCount, e5.readReceiptInfo.unreadCount = t4.unreadCount);
            });
          }), T2({ messageList: n3 });
        }).catch(function(e4) {
          return t3.setError(e4).end(), M2.w("".concat(o3, " failed. error:"), e4), E2(e4);
        }));
      } }, { key: "sendReadReceipt", value: function(e3) {
        var t3 = "".concat(this._n, ".").concat("sendReadReceipt"), n3 = this._getGroupIDOfMessage(e3[0]), o3 = new P2("sendReadReceipt"), i3 = (o3.setMessage("groupID:".concat(n3)), this.getMyUserID()), e3 = e3.filter(function(e4) {
          return e4.from !== i3 && true === e4.needReadReceipt;
        }).map(function(e4) {
          return { sequence: e4.sequence };
        });
        return 0 === e3.length ? E2({ code: k2.READ_RECEIPT_MSG_LIST_EMPTY }) : (M2.l("".concat(t3, ". sequenceList:").concat(JSON.stringify(e3))), this.req({ P: G2.SEND_READ_RECEIPT, data: { groupID: n3, sequenceList: e3 } }).then(function(e4) {
          return o3.end(), M2.l("".concat(t3, " ok")), T2();
        }).catch(function(e4) {
          return o3.setError(e4).end(), M2.w("".concat(t3, " failed. error:"), e4), E2(e4);
        }));
      } }, { key: "getReadReceiptDetail", value: function(e3) {
        var i3 = this, t3 = e3.message, n3 = e3.filter, o3 = e3.cursor, e3 = e3.count, a3 = this._getGroupIDOfMessage(t3), s3 = t3.ID, t3 = t3.sequence, r3 = "".concat(this._n, ".").concat("getReadReceiptDetail"), c3 = this._receiptDetailCompleteMap.get(s3) || false, u3 = 0 !== n3 && 1 !== n3 ? 0 : n3, n3 = C2(o3) ? o3 : "", o3 = !A2(e3) || e3 <= 0 || 100 <= e3 ? 100 : e3, e3 = "groupID:".concat(a3, " sequence:").concat(t3, " cursor:").concat(n3, " filter:").concat(u3, " completeFlag:").concat(c3), l3 = (M2.l("".concat(r3, " ").concat(e3)), { cursor: "", isCompleted: false, messageID: s3, unreadUserIDList: [], readUserIDList: [] }), d3 = new P2("getReadReceiptDetail");
        return d3.setMessage(e3), this.req({ P: G2.GET_READ_RECEIPT_DETAIL, data: { groupID: a3, sequence: t3, flag: u3, cursor: n3, count: o3 } }).then(function(e4) {
          d3.end();
          var e4 = e4.data, t4 = e4.cursor, n4 = e4.isCompleted, o4 = e4.unreadUserIDList, e4 = e4.readUserIDList;
          return l3.cursor = t4, 1 === n4 && (l3.isCompleted = true, i3._receiptDetailCompleteMap.set(s3, true)), 0 === u3 ? l3.readUserIDList = e4.map(function(e5) {
            return e5.userID;
          }) : 1 === u3 && (l3.unreadUserIDList = o4.map(function(e5) {
            return e5.userID;
          })), M2.l("".concat(r3, " ok")), T2(l3);
        }).catch(function(e4) {
          return d3.setError(e4).end(), M2.w("".concat(r3, " failed. error:"), e4), E2(e4);
        });
      } }, { key: "getGroupReceiptsByUsers", value: function(e3) {
        var t3 = "".concat(this._n, ".").concat("getGroupReceiptsByUsers"), n3 = e3.groupID, e3 = e3.dataList, e3 = void 0 === e3 ? [] : e3, o3 = "groupID:".concat(n3, " dataList length:").concat(e3.length);
        return M2.l("".concat(t3, " ").concat(o3)), 0 === e3.length && M2.w("".concat(t3, " dataList is empty.")), this.req({ P: G2.GET_GRP_RECEIPTS_BY_USERS, data: { groupID: n3, dataList: e3 } }).then(function(e4) {
          e4 = e4.data.dataList, e4 = void 0 === e4 ? [] : e4;
          return M2.l("".concat(t3, " ok.")), T2({ dataList: e4 });
        }).catch(function(e4) {
          return M2.w("".concat(t3, " failed. error:"), e4), E2(e4);
        });
      } }, { key: "getRoamingMessagesHopping", value: function(c3) {
        var u3 = this, l3 = "".concat(this._n, ".").concat("getRoamingMessagesHopping"), t3 = c3.groupID, n3 = c3.count, d3 = c3.sequence, p3 = c3.direction, o3 = void 0;
        return N2(d3) && 1 === p3 ? D2({ messageList: [], isCompleted: true, nextMessageSeq: "" }) : (Ut2(t3) && (t3 = Xt2(o3 = t3)), this._computeReqSeqHopping({ groupID: t3, topicID: o3, sequence: d3 }).then(function(e3) {
          N2(d3) || 1 !== p3 || (e3 = d3 + n3 - 1);
          var s3 = "".concat(o3 ? "topicID:".concat(o3) : "groupID:".concat(t3), " sequence:").concat(d3, " reqSeq:").concat(e3, " direction:").concat(p3), r3 = (M2.l("".concat(l3, " ").concat(s3)), new P2("getRoamingMessagesHopping"));
          return u3.req({ P: G2.GET_GRP_ROAMING_MSG, data: { groupID: t3, topicID: o3, count: n3, sequence: e3 } }).then(function(e4) {
            var e4 = e4.data, t4 = e4.messageList, t4 = void 0 === t4 ? [] : t4, n4 = e4.complete, o4 = e4.nextSequence, o4 = void 0 === o4 ? 0 : o4, e4 = e4.invisibleSequenceList, e4 = void 0 === e4 ? [] : e4, i3 = "complete:".concat(n4, " nextSequence:").concat(o4, " remoteMsgCount:").concat(t4.length, " invisibleSequenceList:").concat(e4), i3 = (r3.setMessage("".concat(s3, " ").concat(i3)).end(), M2.l("".concat(l3, " ok. ").concat(i3)), "".concat(R2.CONV_GROUP).concat(c3.groupID)), a3 = u3.get(11), i3 = a3.onRoamingMessage(t4, i3, false), t4 = u3._computeResult({ groupID: c3.groupID, direction: p3, sequence: d3, remoteMessageList: t4, processedMessageList: i3, complete: n4, nextSequence: o4, invisibleSequenceList: e4 });
            return a3.storeHoppingMessageList(t4.messageList), T2(t4);
          }).catch(function(e4) {
            return r3.setError(e4).setMessage("groupID:".concat(t3, " sequence:").concat(d3, " count:").concat(n3)).end(), M2.w("".concat(l3, " failed. error:"), e4), E2(e4);
          });
        }));
      } }, { key: "_computeReqSeqHopping", value: function(e3) {
        var n3 = this, o3 = e3.groupID, t3 = e3.topicID, t3 = void 0 === t3 ? void 0 : t3, e3 = e3.sequence, e3 = void 0 === e3 ? void 0 : e3;
        return 0 < e3 ? Promise.resolve(e3) : N2(t3) ? this.getGroupProfileAdvance({ groupIDList: [o3], responseFilter: { groupBaseInfoFilter: ["NextMsgSeq"] } }).then(function(e4) {
          var e4 = e4.data.successGroupList, t4 = 0;
          return S2(e4) || (t4 = e4[0].nextMessageSeq - 1), M2.l("".concat(n3._n, "._computeReqSeqHopping groupID:").concat(o3, " lastSequence:").concat(t4, " from remote")), t4;
        }).catch(function(e4) {
          return E2(e4);
        }) : Promise.resolve(0);
      } }, { key: "_computeResult", value: function(e3) {
        var t3 = { messageList: [], isCompleted: false, nextMessageSeq: "" }, n3 = e3.groupID, o3 = e3.direction, i3 = e3.sequence, a3 = e3.remoteMessageList, a3 = void 0 === a3 ? [] : a3, s3 = e3.processedMessageList, s3 = void 0 === s3 ? [] : s3, r3 = e3.complete, c3 = e3.nextSequence, e3 = e3.invisibleSequenceList;
        if (0 === o3)
          return t3.nextMessageSeq = c3, (2 === r3 || c3 < 1) && (t3.isCompleted = true, t3.nextMessageSeq = ""), t3.messageList = s3, t3;
        if (1 === o3) {
          if (S2(a3)) {
            if (S2(e3))
              return t3.isCompleted = true, t3.nextMessageSeq = "", t3;
            t3.nextMessageSeq = e3[0] + 1;
          } else {
            r3 = a3[0].sequence, c3 = e3[0] || 0;
            t3.nextMessageSeq = c3 < r3 ? r3 + 1 : c3 + 1;
          }
          return s3.forEach(function(e4) {
            e4.sequence >= i3 && t3.messageList.push(e4);
          }), (Pt2({ groupID: n3 }) || Ut2(n3)) && 0 === t3.messageList.length && a3[0].sequence < i3 && (t3.isCompleted = true, t3.nextMessageSeq = ""), t3;
        }
      } }, { key: "setMessageRead", value: function(e3) {
        var o3 = this, i3 = e3.conversationID, a3 = e3.lastMessageSeq, s3 = "".concat(this._n, ".").concat("setMessageRead"), e3 = "convID:".concat(i3, " lastMessageSeq:").concat(a3), r3 = (M2.l("".concat(s3, " ").concat(e3)), A2(a3) || this.warn("DoNotModifyLastSeq"), new P2("setMessageRead")), c3 = (r3.setMessage(e3), i3.replace(R2.CONV_GROUP, "")), u3 = void 0;
        return Ut2(c3) && (c3 = Xt2(u3 = c3)), this.req({ P: G2.SET_GRP_MSG_READ, data: { groupID: c3, topicID: u3, messageReadSeq: a3 } }).then(function() {
          r3.end(), M2.l("".concat(s3, " ok"));
          var e4, t3 = o3.get(11), n3 = (t3.updateIsReadAfterReadReport({ conversationID: i3, lastMessageSeq: a3 }), true);
          return !N2(u3) && (n3 = false, e4 = o3.get(10).getLocalTopic(c3, u3)) && e4.updateSelfInfo({ readedSequence: a3 }), t3.updateUnreadCount(i3, n3), T2();
        }).catch(function(e4) {
          return r3.setError(e4).end(), M2.l("".concat(s3, " failed. error:"), e4), E2(e4);
        });
      } }, { key: "_computeLastSequence", value: function(e3) {
        var t3 = e3.groupID, n3 = e3.topicID, n3 = void 0 === n3 ? void 0 : n3, e3 = e3.sequence;
        return 0 < e3 ? Promise.resolve(e3) : N2(n3) ? this.getGroupLastSequence(t3) : Promise.resolve(0);
      } }, { key: "getGroupLastSequence", value: function(e3) {
        var t3 = "".concat(this._n, ".").concat("getGroupLastSequence"), n3 = new P2("getGroupLastSequence"), o3 = 0, i3 = "", a3 = "groupID:".concat(e3);
        if (this.hasLocalGroup(e3)) {
          var s3 = this.getLocalGroupProfile(e3), r3 = s3.lastMessage;
          if (0 < r3.lastSequence && false === r3.onlineOnlyFlag)
            return o3 = r3.lastSequence, i3 = "".concat(a3, ", ").concat(o3, " from group.lastMessage.lastSequence"), M2.l("".concat(t3, " ").concat(i3)), n3.setMessage(i3).end(), Promise.resolve(o3);
          if (1 < s3.nextMessageSeq)
            return o3 = s3.nextMessageSeq - 1, i3 = "".concat(a3, ", ").concat(o3, " from group.nextMessageSeq"), M2.l("".concat(t3, " ").concat(i3)), n3.setMessage(i3).end(), Promise.resolve(o3);
        }
        r3 = this.get(11).getLocalConversation("GROUP".concat(e3));
        return r3 && r3.lastMessage.lastSequence && false === r3.lastMessage.onlineOnlyFlag ? (o3 = r3.lastMessage.lastSequence, i3 = "".concat(a3, ", ").concat(o3, " from conversation.lastMessage.lastSequence"), M2.l("".concat(t3, " ").concat(i3)), n3.setMessage(i3).end(), Promise.resolve(o3)) : this.getGroupProfileAdvance({ groupIDList: [e3], responseFilter: { groupBaseInfoFilter: ["NextMsgSeq"] } }).then(function(e4) {
          e4 = e4.data.successGroupList;
          return S2(e4) ? M2.w("".concat(t3, " ").concat(a3, ", empty successGroupList")) : (o3 = e4[0].nextMessageSeq - 1, i3 = "".concat(a3, ", ").concat(o3, " from remote"), M2.l("".concat(t3, " ").concat(i3))), n3.setMessage(i3).end(), o3;
        }).catch(function(e4) {
          return n3.setError(e4).setMessage(a3).end(), M2.w("".concat(t3, " failed. error:"), e4), E2(e4);
        });
      } }, { key: "isMessageFromOrToAVChatroom", value: function(e3) {
        return this._AVChatRoomHandler.checkJoinedAVChatRoomByID(e3);
      } }, { key: "hasJoinedAVChatRoom", value: function() {
        return this._AVChatRoomHandler.hasJoinedAVChatRoom();
      } }, { key: "getJoinedAVChatRoom", value: function() {
        return this._AVChatRoomHandler.getJoinedAVChatRoom();
      } }, { key: "getGroupRemoteLastSeq", value: function(e3) {
        e3 = this.getLocalGroupProfile(e3);
        return e3 ? e3.nextMessageSeq - 1 : 1;
      } }, { key: "isOnlineMessage", value: function(e3, t3) {
        return !(!this._canIUseOnlineOnlyFlag(e3) || !t3 || true !== t3.onlineUserOnly);
      } }, { key: "_canIUseOnlineOnlyFlag", value: function(e3) {
        var t3 = this.getJoinedAVChatRoom();
        return !t3 || !t3.includes(e3.to) || e3.conversationType !== R2.CONV_GROUP;
      } }, { key: "_onAVChatRoomHistoryMessage", value: function(e3, t3) {
        var n3;
        S2(e3) || (M2.l("".concat(this._n, "._onAVChatRoomHistoryMessage groupID:").concat(t3, " count:").concat(e3.length)), n3 = [], e3.forEach(function(e4) {
          n3.push(y2(y2({}, e4), {}, { isHistoryMessage: 1 }));
        }), this.onAVChatRoomMessage(n3, t3));
      } }, { key: "onAVChatRoomMessage", value: function(e3) {
        this._AVChatRoomHandler.onMessage(e3, 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : "");
      } }, { key: "onAVChatRoomMemberBanned", value: function(e3) {
        this._AVChatRoomHandler.onAVChatRoomMemberBanned(e3);
      } }, { key: "setUnjoinedAVChatRoom", value: function(e3) {
        this._unjoinedAVChatRoomList.set(e3, 1);
      } }, { key: "deleteUnjoinedAVChatRoom", value: function(e3) {
        this._unjoinedAVChatRoomList.has(e3) && this._unjoinedAVChatRoomList.delete(e3);
      } }, { key: "isUnjoinedAVChatRoom", value: function(e3) {
        return this._unjoinedAVChatRoomList.has(e3);
      } }, { key: "isGroupAttributesUpdatedNotice", value: function(e3) {
        return this._groupAttributesHandler.isGroupAttributesUpdatedNotice(e3);
      } }, { key: "updateLocalMainSequenceOnReconnected", value: function() {
        this._groupAttributesHandler.updateLocalMainSequenceOnReconnected();
      } }, { key: "initGroupAttributes", value: function(e3) {
        return this._groupAttributesHandler.initGroupAttributes(e3);
      } }, { key: "setGroupAttributes", value: function(e3) {
        return this._groupAttributesHandler.setGroupAttributes(e3);
      } }, { key: "deleteGroupAttributes", value: function(e3) {
        return this._groupAttributesHandler.deleteGroupAttributes(e3);
      } }, { key: "getGroupAttributes", value: function(e3) {
        return this._groupAttributesHandler.getGroupAttributes(e3);
      } }, { key: "isMessageFromTopic", value: function(e3, t3) {
        return 2 === e3 && !S2(t3);
      } }, { key: "isMessageFromCommunityOfTopic", value: function(e3, t3) {
        return 2 === e3 && S2(t3);
      } }, { key: "getMessageExtensions", value: function(e3, t3) {
        return M2.l("".concat(this._n, ".getMessageExtensions startSequence:").concat(t3)), this.req({ P: G2.GET_GRP_MSG_EXT, data: { groupID: e3.to, messageSequence: e3.sequence, startSequence: t3 } });
      } }, { key: "modifyMsgExts", value: function(e3, t3) {
        var n3 = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 1;
        return M2.l("".concat(this._n, ".modifyMsgExts operateType:").concat(n3)), this.req({ P: G2.MODIFY_GRP_MSG_EXT, data: { groupID: e3.to, messageSequence: e3.sequence, extensionList: t3, operateType: n3 } });
      } }, { key: "_genNotifyReqList", value: function(e3) {
        for (var t3, n3, o3, i3, a3 = [], s3 = 0, r3 = e3.length; s3 < r3; s3++)
          t3 = e3[s3], i3 = this.getLocalGroupProfile(t3).type, n3 = this._getGroupLastRevokedTime(t3), o3 = 1e3 * Ye2(), i3 = { notifyType: 1, limit: 20, type: Pt2({ type: i3, groupID: t3 }) ? R2.GRP_COMMUNITY : void 0, groupID: t3, beginTime: n3, endTime: o3 }, a3.push(i3);
        return a3;
      } }, { key: "getNotice", value: function(e3) {
        var r3 = this, t3 = "".concat(this._n, ".getNotice"), e3 = e3.filter(function(e4) {
          var t4;
          return !!r3.hasLocalGroup(e4) && (t4 = (e4 = r3.getLocalGroupProfile(e4)).type, e4 = e4.isSupportTopic, !Gt2(t4)) && !e4;
        });
        0 !== e3.length && (M2.l("".concat(t3, " list:").concat(e3)), this.req({ P: G2.GET_GRP_NOTIFY, data: { notifyReqList: this._genNotifyReqList(e3) } }).then(function(e4) {
          var i3, a3, e4 = e4.data.notifyRspList, s3 = [];
          O2(e4) && (i3 = { dataList: [] }, a3 = "".concat(t3, " ok."), e4.forEach(function(e5) {
            var t4 = e5.nextRevokedTime, n3 = e5.groupID, o3 = e5.notifyList;
            a3 += " groupID:".concat(n3, " nextRevokedTime:").concat(t4, " count:").concat(o3.length, "\n"), i3.dataList.push({ elements: { revokedInfos: r3._genRevokedInfos(e5) } }), 0 !== t4 ? (r3._setGroupLastRevokedTime(n3, t4), s3.push(n3)) : r3._setGroupLastRevokedTime(n3, 1e3 * Ye2());
          }), M2.l(a3), r3.onMsgRevoked(i3, false)), 0 < s3.length && r3.getNotice(s3);
        }).catch(function(e4) {
          M2.e("".concat(t3, " failed. error:"), e4);
        }));
      } }, { key: "_genRevokedInfos", value: function(e3) {
        var t3 = e3.notifyList, n3 = e3.groupID, o3 = [];
        return O2(t3) && t3.forEach(function(e4) {
          o3.push({ groupID: n3, sequence: e4.sequence, random: e4.random, revokerInfo: y2({}, e4.revokerInfo) });
        }), o3;
      } }, { key: "_getGroupLastRevokedTime", value: function(e3) {
        return this.hasLocalGroup(e3) ? this.getLocalGroupProfile(e3)._lastRevokedTime : 0;
      } }, { key: "_setGroupLastRevokedTime", value: function(e3, t3) {
        this.hasLocalGroup(e3) && (this.getLocalGroupProfile(e3)._lastRevokedTime = t3);
      } }, { key: "isGroupCountersNotice", value: function(e3) {
        return this._groupCountersHandler.isGroupCountersNotice(e3);
      } }, { key: "setGroupCounters", value: function(e3) {
        return this._groupCountersHandler.setGroupCounters(e3);
      } }, { key: "increaseGroupCounter", value: function(e3) {
        return this._groupCountersHandler.increaseGroupCounter(e3);
      } }, { key: "decreaseGroupCounter", value: function(e3) {
        return this._groupCountersHandler.decreaseGroupCounter(e3);
      } }, { key: "getGroupCounters", value: function(e3) {
        return this._groupCountersHandler.getGroupCounters(e3);
      } }, { key: "getGroupMemberHandler", value: function() {
        return this._groupMemberHandler;
      } }, { key: "getGroupMemberList", value: function(e3) {
        return this._groupMemberHandler.getGroupMemberList(e3);
      } }, { key: "getGroupMemberProfile", value: function(e3) {
        return this._groupMemberHandler.getGroupMemberProfile(e3);
      } }, { key: "addGroupMember", value: function(e3) {
        return this._groupMemberHandler.addGroupMember(e3);
      } }, { key: "deleteGroupMember", value: function(e3) {
        return this._groupMemberHandler.deleteGroupMember(e3);
      } }, { key: "setGroupMemberMuteTime", value: function(e3) {
        return this._groupMemberHandler.setGroupMemberMuteTime(e3);
      } }, { key: "setGroupMemberRole", value: function(e3) {
        return this._groupMemberHandler.setGroupMemberRole(e3);
      } }, { key: "setGroupMemberNameCard", value: function(e3) {
        return this._groupMemberHandler.setGroupMemberNameCard(e3);
      } }, { key: "setGroupMemberCustomField", value: function(e3) {
        return this._groupMemberHandler.setGroupMemberCustomField(e3);
      } }, { key: "markGroupMemberList", value: function(e3) {
        return this._groupMemberHandler.markGroupMemberList(e3);
      } }, { key: "modifyGroupMemberInfo", value: function(e3) {
        return this._groupMemberHandler.modifyGroupMemberInfo(e3);
      } }, { key: "restartPolling", value: function() {
        this._AVChatRoomHandler.restartPolling();
      } }, { key: "getPollingTimerID", value: function(e3) {
        var t3;
        return e3 && (t3 = this.getLocalGroupProfile(e3)) && Gt2(t3.type) ? this._AVChatRoomHandler.getPollingTimerID(e3) : -1;
      } }, { key: "_canIUseJoinOption", value: function(e3) {
        return e3 === R2.GRP_PUBLIC || Pt2({ type: e3 });
      } }, { key: "_silentlyGetGroupProfile", value: function(e3, t3) {
        var n3 = setTimeout(this.getGroupProfile.bind(this, { groupID: t3 }), 3e3);
        this._timeoutIDs.push(n3), M2.l("".concat(this._n, "._silentlyGetGroupProfile errorCode:").concat(e3, " groupID:").concat(t3, " timeoutIDs:").concat(this._timeoutIDs));
      } }, { key: "_clearTimeoutIDs", value: function() {
        this._timeoutIDs.forEach(function(e3) {
          e3 && clearTimeout(e3);
        }), this._timeoutIDs = [];
      } }, { key: "startMessageLongPolling", value: function(e3) {
        var t3, n3 = e3.groupID, o3 = e3.longPollingKey, e3 = e3.longPollingSequence, e3 = void 0 === e3 ? 1 : e3, i3 = this.get(12).isUnlimitedAVChatRoom();
        if (!S2(o3))
          return this._AVChatRoomHandler.hasPollingInstance(n3) && this.stopMessageLongPolling({ groupID: n3 }), t3 = this._AVChatRoomHandler.getJoinedLiveList(), !i3 && 0 < t3.length && this.stopMessageLongPolling({ groupID: t3[0] }), i3 = new Yo({ groupID: n3, type: R2.GRP_LIVE }), M2.l("".concat(this._n, ".startMessageLongPolling groupID:").concat(n3, " longPollingKey:").concat(o3, " longPollingSequence:").concat(e3)), this._AVChatRoomHandler.startRunLoop({ group: i3, longPollingKey: o3, startSeq: e3 });
        formatAppLog("warn", "at node_modules/@tencentcloud/chat/index.js:1", "".concat(this._n, ".startMessageLongPolling longPollingKey is empty."));
      } }, { key: "stopMessageLongPolling", value: function(e3) {
        var e3 = e3.groupID, t3 = this.get(11);
        return this._AVChatRoomHandler.reset(e3), this._deleteLocalGroup(e3), t3.deleteLocalConv("".concat(R2.CONV_GROUP).concat(e3)), M2.l("".concat(this._n, ".stopMessageLongPolling ok, groupID:").concat(e3)), D2({ groupID: e3 });
      } }, { key: "reset", value: function() {
        this.groupMap.clear(), this._unjoinedAVChatRoomList.clear(), this._receiptDetailCompleteMap.clear(), this._onlineMemberCountMap.clear(), this._commonGroupHandler.reset(), this._groupSystemNoticeHandler.reset(), this._groupTipsHandler.reset(), this._groupAttributesHandler.reset(), this._groupCountersHandler.reset(), this._AVChatRoomHandler.reset(), this._groupMemberHandler.reset(), this._clearTimeoutIDs();
      } }])), di = ["topicID", "topicName", "avatar", "introduction", "notification", "unreadCount", "muteAllMembers", "customData", "groupAtInfoList", "nextMessageSeq", "selfInfo"], pi = e2(function e3(t3, n3) {
        p2(this, e3), this.topicID = "", this.topicName = "", this.avatar = "", this.introduction = "", this.notification = "", this.unreadCount = 0, this.muteAllMembers = false, this.customData = "", this.groupAtInfoList = [], this.nextMessageSeq = 0, this.lastMessage = qo(t3.lastMessage, n3), this.selfInfo = { muteTime: 0, readedSequence: 0, messageRemindType: "", excludedUnreadSequenceList: void 0 }, this._initTopic(t3);
      }, [{ key: "_initTopic", value: function(e3) {
        for (var t3 in e3)
          di.indexOf(t3) < 0 || ("selfInfo" === t3 ? this.updateSelfInfo(e3[t3]) : this[t3] = "muteAllMembers" === t3 ? 1 === e3[t3] : e3[t3]);
      } }, { key: "updateUnreadCount", value: function() {
        this.unreadCount = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 0;
      } }, { key: "updateNextMessageSeq", value: function(e3) {
        this.nextMessageSeq = e3;
      } }, { key: "updateLastMessage", value: function(e3) {
        this.lastMessage = qo(e3);
      } }, { key: "updateGroupAtInfoList", value: function(e3) {
        this.groupAtInfoList = JSON.parse(JSON.stringify(e3));
      } }, { key: "updateTopic", value: function(e3) {
        N2(e3.selfInfo) || this.updateSelfInfo(e3.selfInfo), N2(e3.muteAllMembers) || (this.muteAllMembers = 1 === e3.muteAllMembers), ht2(this, e3, ["groupID", "lastMessageTime", "selfInfo", "muteAllMembers", "lastMsg"]);
      } }, { key: "updateSelfInfo", value: function(e3) {
        return 0 === ht2(this.selfInfo, e3, [], [""]);
      } }, { key: "reduceUnreadCount", value: function() {
        return 1 <= this.unreadCount && (--this.unreadCount, true);
      } }, { key: "isLastMessageRevoked", value: function(e3) {
        return e3.sequence === this.lastMessage.lastSequence;
      } }, { key: "setLastMessageRevoked", value: function(e3) {
        this.lastMessage.isRevoked = e3;
      } }, { key: "setLastMessageRevoker", value: function(e3) {
        this.lastMessage.revoker = e3;
      } }]), _i = (t2(Di, c2), e2(Di, [{ key: "_onCloudConfig", value: function() {
        var e3 = this.getCloudConfig("topic_cache_time"), t3 = this.getCloudConfig("topic_last_active_time");
        N2(e3) || (this.TOPIC_CACHE_TIME = Number(e3)), N2(t3) || (this.TOPIC_LAST_ACTIVE_TIME = Number(t3));
      } }, { key: "onTopicCreated", value: function(e3) {
        var t3 = e3.groupID;
        this.resetGetTopicTime(t3), this.emitOEvt(h2.TOPIC_CREATED, e3);
      } }, { key: "onTopicDeleted", value: function(e3) {
        var t3 = this, n3 = e3.groupID, o3 = e3.topicIDList;
        (void 0 === o3 ? [] : o3).forEach(function(e4) {
          t3._deleteLocalTopic(n3, e4);
        }), this.emitOEvt(h2.TOPIC_DELETED, e3);
      } }, { key: "onTopicProfileUpdated", value: function(e3) {
        var t3 = e3.groupID, n3 = e3.topicID, n3 = this.getLocalTopic(t3, n3);
        n3 && (n3.updateTopic(e3), this.emitOEvt(h2.TOPIC_UPDATED, { groupID: t3, topic: n3 }));
      } }, { key: "onTopicLatestMsg", value: function(e3) {
        var t3, n3, e3 = e3 || {}, o3 = e3.topicLatestMessage, e3 = e3.excludedUnreadSequenceList;
        S2(o3) || (t3 = o3.groupProfile.topicID, o3.conversationType = R2.CONV_GROUP, o3.to = t3, (n3 = new So(o3)).setElement(o3.elements), this.updateUnreadCountAndLastMsg(t3, n3, e3));
      } }, { key: "onMessageRemindTypeUpdated", value: function(e3) {
        var t3, n3 = e3.groupID, o3 = e3.topicID, e3 = e3.messageRemindType, i3 = this.getLocalTopic(n3, o3);
        i3 && ((t3 = i3.updateSelfInfo({ messageRemindType: e3 })) && this.emitOEvt(h2.TOPIC_UPDATED, { groupID: n3, topic: i3 }), M2.l("".concat(this._n, ".onMessageRemindTypeUpdated topicID:").concat(o3, " messageRemindType:").concat(e3, " isUpdated:").concat(t3)));
      } }, { key: "onAtInfoUpdated", value: function(e3) {
        var t3 = e3.topicID, e3 = e3.groupAtInfoList, n3 = Xt2(t3), t3 = this.getLocalTopic(n3, t3);
        t3 && !N2(e3) && (t3.updateGroupAtInfoList(e3), this.emitOEvt(h2.TOPIC_UPDATED, { groupID: n3, topic: t3 }));
      } }, { key: "onUnreadCountUpdatedFromConv", value: function(e3) {
        var t3 = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0, n3 = Xt2(e3), e3 = this.getLocalTopic(n3, e3);
        e3 && e3.unreadCount !== t3 && (e3.updateUnreadCount(t3), 0 === t3 && e3.updateSelfInfo({ readedSequence: e3.lastMessage.lastSequence }), this.emitOEvt(h2.TOPIC_UPDATED, { groupID: n3, topic: e3 }));
      } }, { key: "onMessageSent", value: function(e3) {
        var t3, n3, o3 = e3.groupID, i3 = e3.topicID, e3 = e3.lastMessage, i3 = this.getLocalTopic(o3, i3);
        i3 && (n3 = (t3 = void 0 === (t3 = e3.sequence) ? 0 : t3) + 1) > i3.nextMessageSeq && (i3.updateNextMessageSeq(n3), i3.updateLastMessage(e3), i3.updateSelfInfo({ readedSequence: t3 }), i3.updateUnreadCount(0), this.emitOEvt(h2.TOPIC_UPDATED, { groupID: o3, topic: i3 }));
      } }, { key: "onMessageModified", value: function(e3) {
        var t3, n3 = e3.to, o3 = e3.time, i3 = e3.sequence, a3 = e3.elements, s3 = e3.cloudCustomData, r3 = e3.messageVersion, c3 = Xt2(n3), u3 = this.getLocalTopic(c3, n3);
        u3 && (t3 = u3.lastMessage, M2.d("".concat(this._n, ".onMessageModified topicID:").concat(n3, " lastMessage:"), JSON.stringify(t3), "options:", JSON.stringify(e3)), t3) && (null === t3.payload || t3.lastTime === o3 && t3.lastSequence === i3 && t3.version !== r3) && (t3.type = a3[0].type, t3.payload = a3[0].content, t3.messageForShow = Zt2(t3.type, t3.payload, this.isIntl()), t3.cloudCustomData = s3, t3.version = r3, t3.lastSequence = i3, t3.lastTime = o3, this.emitOEvt(h2.TOPIC_UPDATED, { groupID: c3, topic: u3 }));
      } }, { key: "onMessageRevoked", value: function(e3) {
        var n3, o3, i3, a3 = this;
        0 !== e3.length && (o3 = n3 = null, i3 = false, e3.forEach(function(e4) {
          var t3 = e4.to;
          o3 = Xt2(t3), (n3 = a3.getLocalTopic(o3, t3)) && (n3.reduceUnreadCount() && (i3 = true), n3.isLastMessageRevoked(e4) && (n3.setLastMessageRevoked(true), n3.setLastMessageRevoker(e4.revoker), i3 = true), (t3 = n3.selfInfo.excludedUnreadSequenceList || []).push(e4.sequence), n3.updateSelfInfo({ excludedUnreadSequenceList: t3 }));
        }), i3) && this.emitOEvt(h2.TOPIC_UPDATED, { groupID: o3, topic: n3 });
      } }, { key: "isLastMessageRevoked", value: function(e3) {
        var t3 = e3.topicID, e3 = e3.sequence, n3 = Xt2(t3), n3 = this.getLocalTopic(n3, t3), t3 = false;
        return t3 = n3 ? n3.isLastMessageRevoked({ sequence: e3 }) : t3;
      } }, { key: "updateUnreadCountAndLastMsg", value: function(e3, t3, n3) {
        var o3, i3 = Xt2(e3), a3 = this.getLocalTopic(i3, e3);
        a3 && (o3 = a3.selfInfo.excludedUnreadSequenceList || [], N2(n3) || (o3 = n3), t3._isExcludedFromUnreadCount && o3.push(t3.sequence), a3.updateSelfInfo({ excludedUnreadSequenceList: o3 }), M2.l("".concat(this._n, ".updateUnreadCountAndLastMsg seq:").concat(t3.sequence, " lastSeq:").concat(a3.lastMessage.lastSequence)), t3.sequence > a3.lastMessage.lastSequence) && (a3.updateLastMessage(t3), n3 = t3.sequence + 1, a3.updateNextMessageSeq(n3), o3 = this._computeUnreadCount(a3), a3.updateUnreadCount(o3), (t3 = this.get(11).getLocalConversation("".concat(R2.CONV_GROUP).concat(e3))) && t3.updateUnreadCount({ nextUnreadCount: o3, isFromGetConversations: true }), this.emitOEvt(h2.TOPIC_UPDATED, { groupID: i3, topic: a3 }));
      } }, { key: "getJoinedCommunityList", value: function() {
        return this.get(7).syncCommunityWithTopic();
      } }, { key: "createTopicInCommunity", value: function(t3) {
        var n3, o3 = this, i3 = "".concat(this._n, ".").concat("createTopicInCommunity"), e3 = t3.topicID;
        return N2(e3) || Ut2(e3) ? t3.topicName && false === this._filterProfanity("topicName", t3) || t3.introduction && false === this._filterProfanity("introduction", t3) || t3.notification && false === this._filterProfanity("notification", t3) ? E2({ code: k2.PROFANITY_FOUND }) : (n3 = new P2("createTopicInCommunity"), this.req({ P: G2.CREATE_TOPIC, data: y2({}, t3) }).then(function(e4) {
          e4 = e4.data.topicID;
          return n3.setMessage("topicID:".concat(e4)).end(), M2.l("".concat(i3, " ok. topicID:").concat(e4)), o3._updateTopicMap([y2(y2({}, t3), {}, { topicID: e4 })]), T2({ topicID: e4 });
        }).catch(function(e4) {
          return n3.setError(e4).end(), M2.e("".concat(i3, " failed. error:"), e4), E2(e4);
        })) : E2({ code: k2.ILLEGAL_TOPIC_ID });
      } }, { key: "deleteTopicFromCommunity", value: function(e3) {
        var t3 = this, n3 = "".concat(this._n, ".").concat("deleteTopicFromCommunity"), a3 = e3.groupID, e3 = e3.topicIDList, e3 = void 0 === e3 ? [] : e3, s3 = new P2("deleteTopicFromCommunity");
        return s3.setMessage("groupID:".concat(a3, " topicIDList:").concat(e3)), this.req({ P: G2.DEL_TOPIC, data: { groupID: a3, topicIDList: e3 } }).then(function(e4) {
          var e4 = e4.data.resultList, o3 = [], i3 = [], e4 = ((void 0 === e4 ? [] : e4).forEach(function(e5) {
            var t4 = e5.topicID, n4 = e5.errorCode, e5 = e5.errorInfo;
            0 === n4 ? o3.push({ topicID: t4 }) : i3.push({ topicID: t4, code: n4, message: e5 });
          }), "success count:".concat(o3.length, ", fail count:").concat(i3.length));
          return s3.setMoreMessage(e4).end(), M2.l("".concat(n3, " ok. ").concat(e4)), o3.forEach(function(e5) {
            t3._deleteLocalTopic(a3, e5.topicID);
          }), T2({ successTopicList: o3, failureTopicList: i3 });
        }).catch(function(e4) {
          return s3.setError(e4).end(), M2.e("".concat(n3, " failed. error:"), e4), E2(e4);
        });
      } }, { key: "updateTopicProfile", value: function(e3) {
        var t3, n3 = this, o3 = "".concat(this._n, ".").concat("updateTopicProfile");
        return M2.l("".concat(o3, " options:"), e3), e3.topicName && false === this._filterProfanity("topicName", e3) || e3.introduction && false === this._filterProfanity("introduction", e3) || e3.notification && false === this._filterProfanity("notification", e3) ? E2({ code: k2.PROFANITY_FOUND }) : ((t3 = new P2("updateTopicProfile")).setMessage("groupID:".concat(e3.groupID, " topicID:").concat(e3.topicID)), N2(e3.muteAllMembers) || (e3.muteAllMembers = true === e3.muteAllMembers ? "On" : "Off"), this.req({ P: G2.UPDATE_TOPIC_PROFILE, data: y2({}, e3) }).then(function() {
          return t3.end(), M2.l("".concat(o3, " ok")), n3._updateTopicMap([e3]), T2({ topic: n3.getLocalTopic(e3.groupID, e3.topicID) });
        }).catch(function(e4) {
          return t3.setError(e4).end(), M2.e("".concat(o3, " failed. error:"), e4), E2(e4);
        }));
      } }, { key: "getTopicList", value: function(e3) {
        var t3 = this, n3 = "".concat(this._n, ".").concat("getTopicList"), o3 = e3.groupID, e3 = e3.topicIDList, e3 = void 0 === e3 ? [] : e3, i3 = 0 === e3.length, c3 = new P2("getTopicList");
        if (c3.setMessage("groupID:".concat(o3)), this._getTopicTimeMap.has(o3)) {
          var a3 = this._getTopicTimeMap.get(o3), s3 = a3.isGetAll, a3 = a3.time;
          if ((s3 || !s3 && !i3) && Date.now() - a3 < 1e3 * this.TOPIC_CACHE_TIME) {
            s3 = this._getLocalTopicList(o3, e3);
            if (i3 || s3.length === e3.length)
              return c3.setMoreMessage("from cache, topic count:".concat(s3.length)).end(), M2.l("".concat(n3, " groupID:").concat(o3, " from cache, topic count:").concat(s3.length)), D2({ successTopicList: s3, failureTopicList: [] });
          }
        }
        return this.req({ P: G2.GET_TOPIC_LIST, data: { groupID: o3, topicIDList: e3 } }).then(function(e4) {
          var e4 = e4.data.topicInfoList, a4 = [], s4 = [], r3 = [], e4 = ((void 0 === e4 ? [] : e4).forEach(function(e5) {
            var t4 = e5.topic, n4 = e5.selfInfo, o4 = e5.errorCode, e5 = e5.errorInfo, i4 = t4.topicID;
            0 === o4 ? (a4.push(y2(y2({}, t4), {}, { selfInfo: n4 })), s4.push(i4)) : r3.push({ topicID: i4, code: o4, message: e5 });
          }), t3._updateTopicMap(a4), t3._handleTopicAtInfo(a4), "success count:".concat(s4.length, ", fail count:").concat(r3.length)), e4 = (c3.setMoreMessage(e4).end(), M2.l("".concat(n3, " groupID:").concat(o3, " from remote, ").concat(e4)), []);
          return S2(s4) || (t3._getTopicTimeMap.set(o3, { time: Date.now(), isGetAll: i3 }), e4 = t3._getLocalTopicList(o3, s4)), T2({ successTopicList: e4, failureTopicList: r3 });
        }).catch(function(e4) {
          return c3.setError(e4).end(), M2.e("".concat(n3, " failed. error:"), e4), E2(e4);
        });
      } }, { key: "hasLocalTopic", value: function(e3, t3) {
        return !!this._topicMap.has(e3) && this._topicMap.get(e3).has(t3);
      } }, { key: "getLocalTopic", value: function(e3, t3) {
        var n3 = null;
        return n3 = this._topicMap.has(e3) ? this._topicMap.get(e3).get(t3) : n3;
      } }, { key: "_getLocalTopicList", value: function(e3) {
        var t3 = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : [], e3 = this._topicMap.get(e3), n3 = [];
        return e3 && (n3 = d2(e3.values())), 0 === t3.length ? n3 : n3.filter(function(e4) {
          return t3.includes(e4.topicID);
        });
      } }, { key: "_deleteLocalTopic", value: function(e3, t3) {
        this._topicMap.has(e3) && this._topicMap.get(e3).has(t3) && (this._topicMap.get(e3).delete(t3), M2.l("".concat(this._n, "._deleteLocalTopic groupID:").concat(e3, " topicID:").concat(t3)));
      } }, { key: "_updateTopicMap", value: function(e3) {
        var i3 = this, a3 = [];
        e3.forEach(function(e4) {
          var t3 = e4.groupID, n3 = e4.topicID, o3 = null, e4 = (i3._topicMap.has(t3) || i3._topicMap.set(t3, /* @__PURE__ */ new Map()), i3._topicMap.get(t3).has(n3) ? (o3 = i3._topicMap.get(t3).get(n3)).updateTopic(e4) : (i3._getTopicLastMessage(e4), o3 = new pi(e4, i3.isIntl()), i3._topicMap.get(t3).set(n3, o3)), i3._computeUnreadCount(o3));
          o3.updateUnreadCount(e4), a3.push({ conversationID: "".concat(R2.CONV_GROUP).concat(n3), type: R2.CONV_TOPIC, unreadCount: e4 });
        }), 0 < a3.length && this.get(11).updateTopicConversation(a3);
      } }, { key: "resetGetTopicTime", value: function(e3) {
        var t3 = this;
        N2(e3) ? d2(this._getTopicTimeMap.keys()).forEach(function(e4) {
          t3._getTopicTimeMap.set(e4, 0);
        }) : this._getTopicTimeMap.set(e3, 0);
      } }, { key: "getTopicListOnReconnected", value: function() {
        var o3 = this, e3 = d2(this._topicMap.keys()), i3 = [], a3 = this.get(11);
        e3.forEach(function(e4) {
          var n3 = [], t3 = o3._getLocalTopicList(e4);
          a3.deleteTopicRoamingInfo(e4), t3.forEach(function(e5) {
            var t4 = e5.lastMessage.lastTime, t4 = void 0 === t4 ? 0 : t4;
            Date.now() - 1e3 * t4 < 1e3 * o3.TOPIC_LAST_ACTIVE_TIME && n3.push(e5.topicID);
          }), 0 < n3.length && i3.push({ groupID: e4, topicIDList: n3 });
        }), M2.l("".concat(this._n, ".getTopicListOnReconnected. active community count:").concat(i3.length)), this._relayGetTopicList(i3);
      } }, { key: "_relayGetTopicList", value: function(t3) {
        var e3, n3, o3, i3 = this;
        0 !== t3.length && (n3 = 5 < (e3 = t3.shift()).topicIDList.length ? "topicIDList.length:".concat(e3.topicIDList.length) : "topicIDList:".concat(e3.topicIDList), (o3 = new P2("relayGetTopicList")).setMessage(n3), M2.l("".concat(this._n, "._relayGetTopicList. ").concat(n3)), this.getTopicList(e3).then(function() {
          o3.end(), i3._relayGetTopicList(t3);
        }).catch(function(e4) {
          o3.setError(e4).end(), i3._relayGetTopicList(t3);
        }));
      } }, { key: "_handleTopicAtInfo", value: function(e3) {
        var i3 = this;
        0 !== e3.length && e3.forEach(function(e4) {
          var t3 = e4.groupID, n3 = e4.topicID, e4 = e4.groupAtInfoList, o3 = [];
          N2(e4) || (e4.forEach(function(e5) {
            o3.push(y2(y2({}, e5), {}, { groupID: t3, topicID: n3 }));
          }), i3.get(11).onNewGroupAtTips({ dataList: o3 }));
        });
      } }, { key: "_getTopicLastMessage", value: function(e3) {
        var t3;
        N2(e3.lastMsg) || (t3 = { time: e3.lastMsg.time, sequence: e3.lastMsg.sequence, from: e3.lastMsg.from, payload: e3.lastMsg.elements[0] ? e3.lastMsg.elements[0].content : null, type: e3.lastMsg.elements[0] ? e3.lastMsg.elements[0].type : "", nick: e3.lastMsg.nick, avatar: e3.lastMsg.avatar, version: e3.lastMsg.messageVersion, cloudCustomData: e3.lastMsg.cloudCustomData, isRevoked: 2 === e3.lastMsg.isPlaceMessage, revoker: S2(e3.lastMsg.revokerInfo) ? null : e3.lastMsg.revokerInfo.revoker }, e3.lastMessage = t3);
      } }, { key: "deleteTopicListInCommunity", value: function(t3) {
        var n3 = this, e3 = this._getLocalTopicList(t3), o3 = this.get(11);
        e3.forEach(function(e4) {
          e4 = e4.topicID;
          n3._deleteLocalTopic(t3, e4), n3._getTopicTimeMap.delete(t3), o3.deleteLocalConv("".concat(R2.CONV_GROUP).concat(e4));
        });
      } }, { key: "_computeUnreadCount", value: function(t3) {
        var n3, e3 = t3.selfInfo, o3 = e3.excludedUnreadSequenceList, i3 = e3.readedSequence, e3 = t3.nextMessageSeq - t3.selfInfo.readedSequence - 1;
        return O2(o3) && (n3 = 0, o3.forEach(function(e4) {
          i3 < e4 && e4 <= t3.nextMessageSeq - 1 && (n3 += 1);
        }), 1 <= n3) && (e3 -= n3), e3 < 0 ? 0 : e3;
      } }, { key: "_filterProfanity", value: function(e3, t3) {
        var n3, o3 = this.get(29);
        return !o3 || (n3 = (o3 = o3.filterText(t3[e3], se2)).isAllowedToSend, o3 = o3.modifiedText, true === n3 && (t3[e3] = o3, true));
      } }, { key: "getMessageExtensions", value: function(e3, t3) {
        M2.l("".concat(this._n, ".getMessageExtensions startSequence:").concat(t3));
        var n3 = Xt2(e3.to);
        return this.req({ P: G2.GET_GRP_MSG_EXT, data: { groupID: n3, topicID: e3.to, messageSequence: e3.sequence, startSequence: t3 } });
      } }, { key: "modifyMsgExts", value: function(e3, t3) {
        var n3 = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 1, o3 = (M2.l("".concat(this._n, ".modifyMsgExts operateType:").concat(n3)), Xt2(e3.to));
        return this.req({ P: G2.MODIFY_GRP_MSG_EXT, data: { groupID: o3, topicID: e3.to, messageSequence: e3.sequence, extensionList: t3, operateType: n3 } });
      } }, { key: "reset", value: function() {
        M2.l("".concat(this._n, ".reset")), this._topicMap.clear(), this._getTopicTimeMap.clear(), this.TOPIC_CACHE_TIME = 300, this.TOPIC_LAST_ACTIVE_TIME = 3600;
      } }])), hi = e2(function e3(t3) {
        p2(this, e3), this._userM = t3, this._n = "ProfileHandler", this.TAG = "profile", this.accountProfileMap = /* @__PURE__ */ new Map(), this.expirationTime = 864e5;
      }, [{ key: "setExpirationTime", value: function(e3) {
        this.expirationTime = e3;
      } }, { key: "getUserProfile", value: function(e3) {
        var t3 = this, n3 = "".concat(this._n, ".").concat("getUserProfile"), o3 = e3.userIDList;
        e3.fromAccount = this._userM.getMyAccount(), 100 < o3.length && (M2.w("".concat(n3, " ").concat(tn(100))), o3.length = 100);
        for (var i3, a3 = [], s3 = [], r3 = 0, c3 = o3.length; r3 < c3; r3++)
          i3 = o3[r3], this._userM.isMyFriend(i3) && this._contains(i3) ? s3.push(this._getProfileFromMap(i3)) : a3.push(i3);
        if (0 === a3.length)
          return D2(s3);
        e3.toAccount = a3;
        var u3 = e3.bFromGetMyProfile || false, l3 = [], d3 = (e3.toAccount.forEach(function(e4) {
          l3.push({ toAccount: e4, standardSequence: 0, customSequence: 0 });
        }), e3.userItem = l3, new P2("getUserProfile"));
        return d3.setMessage(5 < o3.length ? "userIDList.length:".concat(o3.length) : "userIDList:".concat(o3)), this._userM.req({ P: G2.GET_USER_PROFILE, data: e3 }).then(function(e4) {
          d3.end(), M2.i("".concat(n3, " ok"));
          e4 = t3._handleResponse(e4).concat(s3);
          return T2(u3 ? e4[0] : e4);
        }).catch(function(e4) {
          return d3.setError(e4).end(), M2.e("".concat(n3, " failed. error:"), e4), E2(e4);
        });
      } }, { key: "getMyProfile", value: function() {
        var e3, t3 = this._userM.getMyAccount(), n3 = "".concat(this._n, ".getMyProfile");
        return M2.l("".concat(n3, " myAccount:").concat(t3)), this._fill(), this._contains(t3) ? (e3 = this._getProfileFromMap(t3), M2.d("".concat(n3, " from cache, myProfile:").concat(JSON.stringify(e3))), D2(e3)) : this.getUserProfile({ fromAccount: t3, userIDList: [t3], bFromGetMyProfile: true });
      } }, { key: "_handleResponse", value: function(e3) {
        var t3 = e3.data.userProfileItem;
        if (!O2(t3))
          return [];
        for (var n3 = [], e3 = Date.now(), o3 = 0, i3 = t3.length; o3 < i3; o3++) {
          var a3 = t3[o3], s3 = a3.to, a3 = a3.profileItem;
          "@TLS#NOT_FOUND" !== s3 && "" !== s3 && (s3 = this._update(s3, this._getLatestProfileFromResponse(s3, a3)).latestProfile, n3.push(s3));
        }
        return M2.l("".concat(this._n, "._handleResponse cost:").concat(an(e3))), n3;
      } }, { key: "_getLatestProfileFromResponse", value: function(e3, t3) {
        var n3 = { userID: e3, profileCustomField: [] };
        if (!S2(t3))
          for (var o3 = 0, i3 = t3.length; o3 < i3; o3++)
            if (-1 < t3[o3].tag.indexOf("Tag_Profile_Custom"))
              n3.profileCustomField.push({ key: t3[o3].tag, value: t3[o3].value });
            else
              switch (t3[o3].tag) {
                case f2.NICK:
                  n3.nick = t3[o3].value;
                  break;
                case f2.GENDER:
                  n3.gender = t3[o3].value;
                  break;
                case f2.BIRTHDAY:
                  n3.birthday = t3[o3].value;
                  break;
                case f2.LOCATION:
                  n3.location = t3[o3].value;
                  break;
                case f2.SELFSIGNATURE:
                  n3.selfSignature = t3[o3].value;
                  break;
                case f2.ALLOWTYPE:
                  n3.allowType = t3[o3].value;
                  break;
                case f2.LANGUAGE:
                  n3.language = t3[o3].value;
                  break;
                case f2.AVATAR:
                  n3.avatar = t3[o3].value;
                  break;
                case f2.MESSAGESETTINGS:
                  n3.messageSettings = t3[o3].value;
                  break;
                case f2.ADMINFORBIDTYPE:
                  n3.adminForbidType = t3[o3].value;
                  break;
                case f2.LEVEL:
                  n3.level = t3[o3].value;
                  break;
                case f2.ROLE:
                  n3.role = t3[o3].value;
                  break;
                default:
                  M2.w("".concat(this._n, "._getLatestProfileFromResponse unknown tag:"), t3[o3].tag, t3[o3].value);
              }
        return n3;
      } }, { key: "updateMyProfile", value: function(o3) {
        var i3 = this, a3 = "".concat(this._n, ".").concat("updateMyProfile");
        if (o3.nick && false === this._userM.filterProfanity("nick", o3))
          return E2({ code: k2.PROFANITY_FOUND });
        if (o3.selfSignature && false === this._userM.filterProfanity("selfSignature", o3))
          return E2({ code: k2.PROFANITY_FOUND });
        var s3 = new P2("updateMyProfile"), e3 = (s3.setMessage(JSON.stringify(o3)), new Ho().validate(o3));
        if (!e3.valid)
          return s3.setCode(k2.UPDATE_PROFILE_INVALID_PARAM).setMoreMessage("info:".concat(e3.tips)).end(), M2.e("".concat(a3, " info:").concat(e3.tips)), E2({ code: k2.UPDATE_PROFILE_INVALID_PARAM });
        var t3, r3, n3 = [];
        for (t3 in o3)
          Object.prototype.hasOwnProperty.call(o3, t3) && ("profileCustomField" === t3 ? o3.profileCustomField.forEach(function(e4) {
            n3.push({ tag: e4.key, value: e4.value });
          }) : n3.push({ tag: f2[t3.toUpperCase()], value: o3[t3] }));
        return 0 === n3.length ? (e3 = new L2({ code: k2.UPDATE_PROFILE_NO_KEY }), s3.setError(e3).end(), M2.e("".concat(a3, " failed. error:"), e3), E2(e3)) : (r3 = this._userM.getMyAccount(), this._userM.req({ P: G2.UPDATE_MY_PROFILE, data: { fromAccount: r3, profileItem: n3 } }).then(function(e4) {
          s3.end(), M2.i("".concat(a3, " ok"));
          var t4 = i3._update(r3, o3), n4 = t4.isProfileUpdated, t4 = t4.latestProfile;
          return true === n4 && i3._userM.emitOEvt(h2.PROFILE_UPDATED, [t4]), D2(t4);
        }).catch(function(e4) {
          return s3.setError(e4).end(), M2.e("".concat(a3, " failed. error:"), e4), E2(e4);
        }));
      } }, { key: "onProfileModified", value: function(e3) {
        var t3 = e3.dataList;
        if (!S2(t3)) {
          var n3 = t3.length;
          M2.d("".concat(this._n, ".onProfileModified count:").concat(n3, " dataList:"), e3.dataList);
          for (var o3 = [], i3 = 0; i3 < n3; i3++) {
            var a3 = t3[i3].userID, a3 = this._update(a3, this._getLatestProfileFromResponse(a3, t3[i3].profileList)), s3 = a3.isProfileUpdated, a3 = a3.latestProfile;
            true === s3 && o3.push(a3);
          }
          0 < o3.length && (this._userM.emitIEvt(U2.PROFILE_UPDATED, o3), this._userM.emitOEvt(h2.PROFILE_UPDATED, o3));
        }
      } }, { key: "_fill", value: function() {
        if (0 === this.accountProfileMap.size) {
          for (var e3 = this._getCachedProfiles(), t3 = Date.now(), n3 = 0, o3 = e3.length; n3 < o3; n3++)
            t3 - e3[n3].lastUpdatedTime < this.expirationTime && this.accountProfileMap.set(e3[n3].userID, e3[n3]);
          M2.l("".concat(this._n, "._fill from cache, size:").concat(this.accountProfileMap.size));
        }
      } }, { key: "_update", value: function(e3, t3) {
        var n3, o3 = false, i3 = Date.now();
        return this._contains(e3) ? (n3 = this._getProfileFromMap(e3), t3.profileCustomField && true === Rt2(n3.profileCustomField, t3.profileCustomField) && (n3.lastUpdatedTime = i3, o3 = true), 0 < ht2(n3, t3, ["profileCustomField"]) && (n3.lastUpdatedTime = i3, o3 = true)) : (n3 = new Ho(t3), !this._userM.isMyFriend(e3) && e3 !== this._userM.getMyAccount() || (n3.lastUpdatedTime = i3, o3 = true, this.accountProfileMap.set(e3, n3))), this._flush(e3 === this._userM.getMyAccount()), true === o3 && M2.l("".concat(this._n, "._update account:").concat(e3, " isUpdated:").concat(o3)), { isProfileUpdated: o3, latestProfile: n3 };
      } }, { key: "_flush", value: function(e3) {
        var t3 = d2(this.accountProfileMap.values()), n3 = this._userM.getStorageModule();
        M2.d("".concat(this._n, "._flush length:").concat(t3.length, " flushAtOnce:").concat(e3)), n3.setItem(this.TAG, t3, e3);
      } }, { key: "_contains", value: function(e3) {
        return this.accountProfileMap.has(e3);
      } }, { key: "_getProfileFromMap", value: function(e3) {
        return this.accountProfileMap.get(e3);
      } }, { key: "_getCachedProfiles", value: function() {
        var e3 = this._userM.getStorageModule().getItem(this.TAG);
        return S2(e3) ? [] : e3;
      } }, { key: "onConvProfileUpdated", value: function(e3) {
        for (var t3, n3, o3, i3 = [], a3 = 0, s3 = e3.length; a3 < s3; a3++)
          n3 = (t3 = e3[a3]).userID, this._userM.isMyFriend(n3) && (this._contains(n3) ? (o3 = this._getProfileFromMap(n3), 0 < ht2(o3, t3) && i3.push(n3)) : i3.push(t3.userID));
        0 !== i3.length && (M2.l("".concat(this._n, ".onConvProfileUpdated toAccountList:").concat(i3)), this.getUserProfile({ userIDList: i3 }));
      } }, { key: "getNickAndAvatarByUserID", value: function(e3) {
        return this._contains(e3) ? { nick: (e3 = this._getProfileFromMap(e3)).nick, avatar: e3.avatar } : { nick: "", avatar: "" };
      } }, { key: "getUserNickAndAvatar", value: function(e3) {
        var t3, n3 = this, o3 = d2(new Set(e3)), i3 = (M2.l("".concat(this._n, ".getUserNickAndAvatar userIDList.length:").concat(e3.length, " uniqueUserIDList.length:").concat(o3.length)), []);
        return 0 === e3.length ? Promise.resolve(i3) : (e3 = this._createUserIDListGroup(o3), t3 = [], e3.forEach(function(e4) {
          t3.push(n3.getUserProfile({ userIDList: e4 }));
        }), Promise.all(t3).then(function(e4) {
          return e4.forEach(function(e5) {
            e5 = e5.data.map(function(e6) {
              return { userID: e6.userID, nick: e6.nick, avatar: e6.avatar };
            });
            i3.push.apply(i3, d2(e5));
          }), i3;
        }));
      } }, { key: "_createUserIDListGroup", value: function(e3) {
        for (var t3 = [], n3 = 0; n3 < e3.length; )
          t3.push(e3.slice(n3, n3 += 100));
        return t3;
      } }, { key: "reset", value: function() {
        this._flush(true), this.accountProfileMap.clear();
      } }]), gi = e2(function e3(t3) {
        p2(this, e3);
      }), fi = e2(function e3(t3) {
        p2(this, e3), this._userM = t3, this._n = "BlacklistHandler", this._blacklistMap = /* @__PURE__ */ new Map(), this._startIndex = 0;
      }, [{ key: "getLocalBlacklist", value: function() {
        return d2(this._blacklistMap.keys());
      } }, { key: "getBlacklist", value: function() {
        var o3 = this, i3 = "".concat(this._n, ".getBlacklist"), e3 = { fromAccount: this._userM.getMyAccount(), maxLimited: 100, startIndex: this._startIndex }, a3 = new P2("getBlacklist");
        return this._userM.req({ P: G2.GET_BL, data: e3 }).then(function(e4) {
          var e4 = e4.data, t3 = e4.blackListItem, e4 = e4.startIndex, n3 = S2(t3) ? 0 : t3.length;
          a3.setMessage("count:".concat(n3)).end(), M2.i("".concat(i3, " ok")), o3._startIndex = e4, o3._handleResponse(t3, true), o3._userM.emitOEvt(h2.BLACKLIST_UPDATED, d2(o3._blacklistMap.keys())), 0 !== o3._startIndex && o3.getBlacklist();
        }).catch(function(e4) {
          return a3.setError(e4).end(), M2.e("".concat(i3, " failed. error:"), e4), E2(e4);
        });
      } }, { key: "addBlacklist", value: function(t3) {
        var e3, n3, o3 = this, i3 = new P2("addToBlacklist"), a3 = "".concat(this._n, ".addBlacklist"), s3 = this._userM.getMyAccount();
        return 1 === t3.userIDList.length && t3.userIDList[0] === s3 ? (n3 = this._userM.getErrMsg(e3 = k2.CANNOT_ADD_SELF_TO_BLACKLIST), i3.setCode(e3).setMessage(n3).end(), n3 = new L2({ code: e3 }), M2.e("".concat(a3, " failed. error:"), n3), E2(n3)) : (t3.userIDList.includes(s3) && (t3.userIDList = t3.userIDList.filter(function(e4) {
          return e4 !== s3;
        })), t3.fromAccount = this._userM.getMyAccount(), t3.toAccount = t3.userIDList, this._userM.req({ P: G2.ADD_TO_BL, data: t3 }).then(function(e4) {
          return i3.setMessage(5 < t3.userIDList.length ? "userIDList.length:".concat(t3.userIDList.length) : "userIDList:".concat(t3.userIDList)).end(), M2.i("".concat(a3, " ok")), o3._handleResponse(e4.resultItem, true), T2(d2(o3._blacklistMap.keys()));
        }).catch(function(e4) {
          return i3.setError(e4).end(), M2.e("".concat(a3, " failed. error:"), e4), E2(e4);
        }));
      } }, { key: "_handleResponse", value: function(e3, t3) {
        if (!S2(e3))
          for (var n3, o3, i3, a3 = 0, s3 = e3.length; a3 < s3; a3++)
            o3 = e3[a3].to, i3 = e3[a3].resultCode, !N2(i3) && 0 !== i3 || (t3 ? ((n3 = this._blacklistMap.has(o3) ? this._blacklistMap.get(o3) : new gi()).userID = o3, S2(e3[a3].addBlackTimeStamp) || (n3.timeStamp = e3[a3].addBlackTimeStamp), this._blacklistMap.set(o3, n3)) : this._blacklistMap.has(o3) && (n3 = this._blacklistMap.get(o3), this._blacklistMap.delete(o3)));
        M2.l("".concat(this._n, "._handleResponse total:").concat(this._blacklistMap.size, " bAdd:").concat(t3));
      } }, { key: "deleteBlacklist", value: function(t3) {
        var n3 = this, o3 = "".concat(this._n, ".deleteBlacklist"), i3 = new P2("removeFromBlacklist");
        return t3.fromAccount = this._userM.getMyAccount(), t3.toAccount = t3.userIDList, this._userM.req({ P: G2.RM_FROM_BL, data: t3 }).then(function(e3) {
          return i3.setMessage(5 < t3.userIDList.length ? "userIDList.length:".concat(t3.userIDList.length) : "userIDList:".concat(t3.userIDList)).end(), M2.i("".concat(o3, " ok")), n3._handleResponse(e3.data.resultItem, false), T2(d2(n3._blacklistMap.keys()));
        }).catch(function(e3) {
          return i3.setError(e3).end(), M2.e("".concat(o3, " failed. error:"), e3), E2(e3);
        });
      } }, { key: "onAccountDeleted", value: function(e3) {
        for (var t3 = 0, n3 = e3.length; t3 < n3; t3++) {
          var o3 = e3[t3];
          this._blacklistMap.has(o3) && this._blacklistMap.delete(o3);
        }
        var i3 = e3.length;
        0 < i3 && (M2.l("".concat(this._n, ".onAccountDeleted count:").concat(i3, " ").concat(i3 < 30 ? "userIDList:".concat(e3) : "")), this._userM.emitOEvt(h2.BLACKLIST_UPDATED, d2(this._blacklistMap.keys())));
      } }, { key: "onAccountAdded", value: function(e3) {
        for (var t3, n3 = [], o3 = 0, i3 = e3.length; o3 < i3; o3++)
          t3 = e3[o3], this._blacklistMap.has(t3) || (this._blacklistMap.set(t3, new gi({ userID: t3 })), n3.push(t3));
        0 < n3.length && (M2.l("".concat(this._n, ".onAccountAdded count:").concat(n3.length, " userIDList:"), n3), this._userM.emitOEvt(h2.BLACKLIST_UPDATED, d2(this._blacklistMap.keys())));
      } }, { key: "reset", value: function() {
        this._blacklistMap.clear(), this._startIndex = 0;
      } }]), mi = e2(function e3(t3) {
        p2(this, e3), this._userM = t3, this._n = "UserStatusHandler", this.MAX_QUERY_USER_COUNT = 500, this.MAX_SUBSCRIBE_USER_COUNT = 100, this.MAX_UNSUBSCRIBE_USER_COUNT = 100, this._userM.getIEmitInst().on(U2.CLOUD_CONFIG, this._onCloudConfig, this);
      }, [{ key: "_onCloudConfig", value: function() {
        var e3 = this._userM.getCloudConfig("status_query_count"), t3 = this._userM.getCloudConfig("status_sub_count"), n3 = this._userM.getCloudConfig("status_unsub_count");
        M2.l("".concat(this._n, "._onCloudConfig statusQueryCount:").concat(e3, " statusSubscribeCount:").concat(t3) + " statusUnsubscribeCount:".concat(n3)), N2(e3) || (this.MAX_QUERY_USER_COUNT = parseInt(e3, 10)), N2(e3) || (this.MAX_SUBSCRIBE_USER_COUNT = parseInt(t3, 10)), N2(e3) || (this.MAX_UNSUBSCRIBE_USER_COUNT = parseInt(n3, 10));
      } }, { key: "onUserStatusUpdated", value: function(e3) {
        var e3 = e3.dataList, o3 = this._userM.getMyUserID(), i3 = this._userM.get(12), e3 = e3.map(function(e4) {
          var t3 = e4.to, n3 = e4.statusType, e4 = e4.customStatus, e4 = xo(e4);
          return t3 === o3 && i3.setCustomStatus(e4), { userID: t3, statusType: n3, customStatus: e4 };
        });
        M2.l("".concat(this._n, ".onUserStatusUpdated list:").concat(JSON.stringify(e3))), this._userM.emitOEvt(h2.USER_STATUS_UPDATED, e3);
      } }, { key: "setSelfStatus", value: function(e3) {
        var t3, n3, o3 = this, i3 = "".concat(this._n, ".setSelfStatus");
        return false === this._userM.filterProfanity("customStatus", e3) ? E2({ code: k2.PROFANITY_FOUND }) : (t3 = new P2("setSelfStatus"), n3 = e3.customStatus, this._userM.req({ P: G2.SET_SELF_STATUS, data: { customStatus: n3 } }).then(function(e4) {
          return t3.setMessage("customStatus:".concat(n3)).end(), M2.l("".concat(i3, " ok. customStatus:").concat(n3)), o3._userM.get(12).setCustomStatus(n3), T2({ userID: o3._userM.getMyUserID(), statusType: 1, customStatus: n3 });
        }).catch(function(e4) {
          return t3.setError(e4).end(), M2.e("".concat(i3, " failed. error:"), e4), E2(e4);
        }));
      } }, { key: "getUserStatus", value: function(e3) {
        var o3 = "".concat(this._n, ".").concat("getUserStatus"), e3 = e3.userIDList, i3 = void 0 === e3 ? [] : e3, e3 = this._userM.getMyUserID(), t3 = d2(i3), a3 = void 0, n3 = t3.indexOf(e3);
        if (-1 < n3 && (t3.splice(n3, 1), a3 = { userID: e3, statusType: 1, customStatus: this._userM.get(12).getCustomStatus() }), 0 === t3.length)
          return D2({ successUserList: [a3], failureUserList: [] });
        if (!this._userM.canIUse(g2.USER_STATUS))
          return this._userM.noUse("getUserStatus");
        t3.length > this.MAX_QUERY_USER_COUNT && (M2.w("".concat(o3, " ").concat(tn(this.MAX_QUERY_USER_COUNT))), t3 = i3.slice(0, this.MAX_QUERY_USER_COUNT));
        var s3 = new P2("getUserStatus");
        return this._userM.req({ P: G2.GET_USER_STATUS, data: { userIDList: t3 } }).then(function(e4) {
          var e4 = e4.data, t4 = e4.successUserList, t4 = void 0 === t4 ? [] : t4, e4 = e4.failureUserList, e4 = void 0 === e4 ? [] : e4, t4 = t4.map(function(e5) {
            var t5 = e5.userID, n5 = e5.statusType, e5 = e5.customStatus;
            return { userID: t5, statusType: n5, customStatus: xo(e5) };
          }), e4 = e4.map(function(e5) {
            var t5 = e5.userID, n5 = e5.invalidUserID, o4 = e5.errorCode, e5 = e5.errorInfo;
            return { userID: S2(n5) ? t5 : n5, code: o4, message: e5 };
          }), n4 = (N2(a3) || t4.unshift(a3), "userID count:".concat(i3.length, ", success count:").concat(t4.length, ", fail count:").concat(e4.length));
          return s3.setMessage("".concat(n4)).end(), M2.l("".concat(o3, " ok. ").concat(n4, ".")), T2({ successUserList: t4, failureUserList: e4 });
        }).catch(function(e4) {
          return s3.setMessage("userID count:".concat(i3.length)).setError(e4).end(), M2.e("".concat(o3, " failed. error:"), e4), E2(e4);
        });
      } }, { key: "subscribeUserStatus", value: function(e3) {
        var t3, n3, o3, i3, a3 = "subscribeUserStatus";
        return this._userM.canIUse(g2.USER_STATUS) ? (t3 = "".concat(this._n, ".").concat(a3), (n3 = d2(e3 = void 0 === (e3 = e3.userIDList) ? [] : e3)).length > this.MAX_SUBSCRIBE_USER_COUNT && (M2.w("".concat(t3, " ").concat(tn(this.MAX_SUBSCRIBE_USER_COUNT))), n3 = e3.slice(0, this.MAX_SUBSCRIBE_USER_COUNT)), o3 = new P2(a3), i3 = "userID count:".concat(e3.length), M2.l("".concat(t3, " ").concat(i3)), this._userM.req({ P: G2.SUB_USER_STATUS, data: { userIDList: n3 } }).then(function(e4) {
          e4 = e4.data.failureUserList, e4 = (void 0 === e4 ? [] : e4).map(function(e5) {
            var t4 = e5.userID, n4 = e5.invalidUserID, o4 = e5.errorCode, e5 = e5.errorInfo;
            return { userID: S2(n4) ? t4 : n4, code: o4, message: e5 };
          });
          return o3.setMessage("".concat(i3, " fail count:").concat(e4.length)).end(), M2.l("".concat(t3, " ok. fail count:").concat(e4.length, ".")), T2({ failureUserList: e4 });
        }).catch(function(e4) {
          return o3.setMessage(i3).setError(e4).end(), M2.e("".concat(t3, " failed. error:"), e4), E2(e4);
        })) : this._userM.noUse(a3);
      } }, { key: "unsubscribeUserStatus", value: function(e3) {
        var t3, n3, o3, i3, a3 = "unsubscribeUserStatus";
        return this._userM.canIUse(g2.USER_STATUS) ? (t3 = "".concat(this._n, ".").concat(a3), n3 = d2(e3 = void 0 === (e3 = (e3 || {}).userIDList) ? [] : e3), e3.length > this.MAX_UNSUBSCRIBE_USER_COUNT && (M2.w("".concat(t3, " ").concat(tn(this.MAX_UNSUBSCRIBE_USER_COUNT))), n3 = e3.slice(0, this.MAX_UNSUBSCRIBE_USER_COUNT)), o3 = new P2(a3), i3 = "userID count:".concat(e3.length), M2.l("".concat(t3, " ").concat(i3)), e3 = { userIDList: n3 }, 0 === n3.length && (e3.userIDList = void 0, e3.unsubscribeAll = 1), this._userM.req({ P: G2.UNSUB_USER_STATUS, data: e3 }).then(function(e4) {
          e4 = e4.data.failureUserList, e4 = (void 0 === e4 ? [] : e4).map(function(e5) {
            var t4 = e5.userID, n4 = e5.invalidUserID, o4 = e5.errorCode, e5 = e5.errorInfo;
            return { userID: S2(n4) ? t4 : n4, code: o4, message: e5 };
          });
          return o3.setMessage("".concat(i3, " fail count:").concat(e4.length)).end(), M2.l("".concat(t3, " ok. fail count:").concat(e4.length, ".")), T2({ failureUserList: e4 });
        }).catch(function(e4) {
          return o3.setMessage("".concat(i3)).setError(e4).end(), M2.e("".concat(t3, " failed. error:"), e4), E2(e4);
        })) : this._userM.noUse(a3);
      } }, { key: "reset", value: function() {
        this.MAX_QUERY_USER_COUNT = 500, this.MAX_SUBSCRIBE_USER_COUNT = 100, this.MAX_UNSUBSCRIBE_USER_COUNT = 100;
      } }]), vi = (t2(Ti, c2), e2(Ti, [{ key: "onContextUpdated", value: function(e3) {
        this._profileHandler.getMyProfile(), this._blacklistHandler.getBlacklist();
      } }, { key: "mockOnNickAvatarModified", value: function(e3, t3) {
        M2.l("".concat(this._n, "._mockOnNickAvatarModified nick:").concat(e3, " avatar:").concat(t3)), this.onProfileModified({ dataList: [{ pushType: 1, userID: this.getMyUserID(), profileList: [{ tag: f2.NICK, value: e3 }, { tag: f2.AVATAR, value: t3 }] }] });
      } }, { key: "onProfileModified", value: function(e3) {
        this._profileHandler.onProfileModified(e3);
      } }, { key: "onRelationChainModified", value: function(e3) {
        var t3, n3, e3 = e3.dataList;
        S2(e3) || (t3 = [], e3.forEach(function(e4) {
          e4.blackListDelAccount && t3.push.apply(t3, d2(e4.blackListDelAccount));
        }), 0 < t3.length && this._blacklistHandler.onAccountDeleted(t3), n3 = [], e3.forEach(function(e4) {
          e4.blackListAddAccount && n3.push.apply(n3, d2(e4.blackListAddAccount));
        }), 0 < n3.length && this._blacklistHandler.onAccountAdded(n3));
      } }, { key: "onConvProfileUpdated", value: function(e3) {
        this._profileHandler.onConvProfileUpdated(e3);
      } }, { key: "getMyAccount", value: function() {
        return this.getMyUserID();
      } }, { key: "getMyNick", value: function() {
        return this._profileHandler.getNickAndAvatarByUserID(this.getMyUserID()).nick;
      } }, { key: "getMyProfile", value: function() {
        return this._profileHandler.getMyProfile();
      } }, { key: "getStorageModule", value: function() {
        return this.get(13);
      } }, { key: "filterProfanity", value: function(e3, t3) {
        var n3, o3 = this.get(29);
        return !o3 || (n3 = (o3 = o3.filterText(t3[e3], "user_profile")).isAllowedToSend, o3 = o3.modifiedText, true === n3 && (t3[e3] = o3, true));
      } }, { key: "isMyFriend", value: function(e3) {
        var t3 = this.get(8);
        return !!t3 && t3.isMyFriend(e3);
      } }, { key: "getUserProfile", value: function(e3) {
        return this._profileHandler.getUserProfile(e3);
      } }, { key: "updateMyProfile", value: function(e3) {
        return this._profileHandler.updateMyProfile(e3);
      } }, { key: "getNickAndAvatarByUserID", value: function(e3) {
        return this._profileHandler.getNickAndAvatarByUserID(e3);
      } }, { key: "getUserNickAndAvatar", value: function(e3) {
        return this._profileHandler.getUserNickAndAvatar(e3);
      } }, { key: "getLocalBlacklist", value: function() {
        var e3 = this._blacklistHandler.getLocalBlacklist();
        return D2(e3);
      } }, { key: "addBlacklist", value: function(e3) {
        return this._blacklistHandler.addBlacklist(e3);
      } }, { key: "deleteBlacklist", value: function(e3) {
        return this._blacklistHandler.deleteBlacklist(e3);
      } }, { key: "onUserStatusUpdated", value: function(e3) {
        this._userStatusHandler.onUserStatusUpdated(e3);
      } }, { key: "setSelfStatus", value: function(e3) {
        return this._userStatusHandler.setSelfStatus(e3);
      } }, { key: "getUserStatus", value: function(e3) {
        return this._userStatusHandler.getUserStatus(e3);
      } }, { key: "subscribeUserStatus", value: function(e3) {
        return this._userStatusHandler.subscribeUserStatus(e3);
      } }, { key: "unsubscribeUserStatus", value: function(e3) {
        return this._userStatusHandler.unsubscribeUserStatus(e3);
      } }, { key: "reset", value: function() {
        M2.l("".concat(this._n, ".reset")), this._profileHandler.reset(), this._blacklistHandler.reset(), this._userStatusHandler.reset();
      } }])), Ii = e2(function e3(t3, n3) {
        p2(this, e3), this._m = t3, this._isLoggedIn = false, this._SDKAppID = n3.SDKAppID, this._userID = n3.userID || "", this._userSig = n3.userSig || "", this._version = "3.5.5", this._a2Key = "", this._tinyID = "", this._customStatus = "", this._contentType = "json", this._unlimitedAVChatRoom = n3.unlimitedAVChatRoom, this._scene = n3.scene || "", this._oversea = n3.oversea, this._instanceID = n3.instanceID, this._statusInstanceID = 0, this._isDevMode = n3.devMode, this._isTestEnv = n3.testEnv, this._proxyServer = n3.proxyServer, this._fileUploadProxy = n3.fileUploadProxy, this._fileDownloadProxy = n3.fileDownloadProxy, this._applicationID = 0, this._isPartialUpdatedConvs = n3.partialUpdatedConversations, this._isIndependentDomainDisabled = n3.disableIndependentDomain, this._isUsingChatCore = false, this._uiPlatform = 0, this._authKey = "", this._customLoginInfo = "";
      }, [{ key: "isLoggedIn", value: function() {
        return this._isLoggedIn;
      } }, { key: "isOversea", value: function() {
        return this._oversea;
      } }, { key: "isPrivateNetWork", value: function() {
        return this._proxyServer;
      } }, { key: "isDevMode", value: function() {
        return this._isDevMode;
      } }, { key: "isTestEnv", value: function() {
        return this._isTestEnv;
      } }, { key: "isPartialUpdatedConvs", value: function() {
        return this._isPartialUpdatedConvs;
      } }, { key: "isIndependentDomainDisabled", value: function() {
        return this._isIndependentDomainDisabled;
      } }, { key: "isSingaporeSite", value: function() {
        return 2e7 <= this._SDKAppID && this._SDKAppID < 3e7 || 172e7 <= this._SDKAppID && this._SDKAppID < 173e7;
      } }, { key: "isKoreaSite", value: function() {
        return 3e7 <= this._SDKAppID && this._SDKAppID < 4e7 || 173e7 <= this._SDKAppID && this._SDKAppID < 174e7;
      } }, { key: "isGermanySite", value: function() {
        return 4e7 <= this._SDKAppID && this._SDKAppID < 5e7 || 174e7 <= this._SDKAppID && this._SDKAppID < 175e7;
      } }, { key: "isIndiaSite", value: function() {
        return 5e7 <= this._SDKAppID && this._SDKAppID < 6e7 || 175e7 <= this._SDKAppID && this._SDKAppID < 176e7;
      } }, { key: "isJapanSite", value: function() {
        return 6e7 <= this._SDKAppID && this._SDKAppID < 7e7 || 176e7 <= this._SDKAppID && this._SDKAppID < 177e7;
      } }, { key: "isUSASite", value: function() {
        return 7e7 <= this._SDKAppID && this._SDKAppID < 8e7 || 177e7 <= this._SDKAppID && this._SDKAppID < 178e7;
      } }, { key: "isIndonesiaSite", value: function() {
        return 8e7 <= this._SDKAppID && this._SDKAppID < 9e7 || 178e7 <= this._SDKAppID && this._SDKAppID < 179e7;
      } }, { key: "isIntl", value: function() {
        return 0 === (e3 = this._SDKAppID) || 2e7 <= e3 && e3 < 9e7 || 172e7 <= e3 && e3 < 179e7;
        var e3;
      } }, { key: "isUnlimitedAVChatRoom", value: function() {
        return this._unlimitedAVChatRoom;
      } }, { key: "isUsingChatCore", value: function() {
        return this._isUsingChatCore;
      } }, { key: "setUsingChatCore", value: function(e3) {
        this._isUsingChatCore = e3;
      } }, { key: "getUIPlatform", value: function() {
        return this._uiPlatform;
      } }, { key: "setUIPlatform", value: function(e3) {
        this._uiPlatform = e3;
      } }, { key: "setUserID", value: function(e3) {
        this._userID = e3;
      } }, { key: "getUserID", value: function() {
        return this._userID;
      } }, { key: "setUserSig", value: function(e3) {
        this._userSig = e3;
      } }, { key: "getUserSig", value: function() {
        return this._userSig;
      } }, { key: "getSDKAppID", value: function() {
        return this._SDKAppID;
      } }, { key: "setTinyID", value: function(e3) {
        this._tinyID = e3, this._isLoggedIn = true;
      } }, { key: "getTinyID", value: function() {
        return this._tinyID;
      } }, { key: "setCustomStatus", value: function(e3) {
        this._customStatus = e3;
      } }, { key: "getCustomStatus", value: function() {
        return this._customStatus;
      } }, { key: "getScene", value: function() {
        return Ue2 ? window.tencent_cloud_im_csig_flutter_for_web_25F_cy : this._isTUIKit() ? "tuikit" : this._scene;
      } }, { key: "getInstanceID", value: function() {
        return this._instanceID;
      } }, { key: "getStatusInstanceID", value: function() {
        return this._statusInstanceID;
      } }, { key: "setStatusInstanceID", value: function(e3) {
        this._statusInstanceID = e3;
      } }, { key: "getVersion", value: function() {
        return this._version;
      } }, { key: "getA2Key", value: function() {
        return this._a2Key;
      } }, { key: "setA2Key", value: function(e3) {
        this._a2Key = e3;
      } }, { key: "getContentType", value: function() {
        return this._contentType;
      } }, { key: "getProxyServer", value: function() {
        return this._proxyServer;
      } }, { key: "getFileUploadProxy", value: function() {
        return this._fileUploadProxy;
      } }, { key: "getFileDownloadProxy", value: function() {
        return this._fileDownloadProxy;
      } }, { key: "setApplicationID", value: function(e3) {
        this._applicationID = e3;
      } }, { key: "getApplicationID", value: function() {
        return this._applicationID;
      } }, { key: "setDowloadFileAuthKey", value: function(e3) {
        this._authKey = e3;
      } }, { key: "getDownloadFileAuthKey", value: function() {
        return this._authKey;
      } }, { key: "setCustomLoginInfo", value: function(e3) {
        this._customLoginInfo = e3;
      } }, { key: "getCustomLoginInfo", value: function() {
        return this._customLoginInfo;
      } }, { key: "_isTUIKit", value: function() {
        var e3 = false, t3 = false, n3 = false, o3 = false, i3 = [];
        v2 && (i3 = Object.keys(I2));
        for (var a3 = 0, s3 = (i3 = Ce2 ? Me2 ? Object.keys(uni) : Object.keys(window) : i3).length; a3 < s3; a3++)
          if (i3[a3].toLowerCase().includes("uikit")) {
            e3 = true;
            break;
          }
        var r3, i3 = null, c3 = (v2 && !dt2(I2.createGamePortal) && dt2(getApp) && !N2(getApp()) && (r3 = getApp().globalData, m2(r3)) && true === r3.isTUIKit && (t3 = true), true === this._m.get(13).getStorageSync("TIM_".concat(this._SDKAppID, "_isTUIKit")) && (n3 = true), null);
        if (_e2 && !fe2 && "undefined" == typeof uni && __wxConfig && (c3 = __wxConfig.pages), ge2 && "undefined" == typeof uni && __qqConfig && (c3 = __qqConfig.pages), O2(c3) && 0 < c3.length) {
          for (var u3 = 0, l3 = c3.length; u3 < l3; u3++)
            if (c3[u3].toLowerCase().includes("tui")) {
              o3 = true;
              break;
            }
          c3 = null;
        }
        return e3 || t3 || n3 || o3;
      } }, { key: "reset", value: function() {
        this._isLoggedIn = false, this._userSig = "", this._a2Key = "", this._tinyID = "", this._customStatus = "", this._statusInstanceID = 0;
      } }]), Mi = { "k-vue2-pc": 1, "k-vue2-h5": 2, "k-vue2-h5-uni": 3, "k-vue2-app-uni": 4, "k-vue2-mp-uni": 5, "k-vue2-pc-uni": 6, "k-vue3-pc": 7, "k-vue3-h5": 8, "k-vue3-h5-uni": 9, "k-vue3-app-uni": 10, "k-vue3-mp-uni": 11, "k-vue3-pc-uni": 12, "k-rn": 13 }, yi = (t2(Ci, c2), e2(Ci, [{ key: "onCheckTimer", value: function(e3) {
        this.isLoggedIn() && e3 % this._helloInterval == 0 && this._hello();
      } }, { key: "getPushModule", value: function() {
        var e3 = void 0, t3 = this.get(36), n3 = this.get(28);
        return t3.canIUseTIMPush() ? e3 = t3 : n3.canIUseOfflinePush() && (e3 = n3), e3;
      } }, { key: "login", value: function(e3) {
        if (this.isLoggedIn())
          return n3 = this.getMyUserID(), (n3 = this.getErrMsg("RepeatLogin", n3)) && M2.w(n3), D2({ actionStatus: "OK", errorCode: 0, errorInfo: n3, repeatLogin: true });
        if (Date.now() - this._lastLoginTs <= 15e3)
          return this.warn("LoggingIn", e3.userID), E2({ code: k2.REPEAT_LOGIN });
        M2.l("".concat(this._n, ".login userID:").concat(e3.userID));
        var t3, n3 = this._checkLoginInfo(e3);
        return 0 !== n3.code ? E2(n3) : (n3 = this.get(12), t3 = e3.userID, e3 = e3.userSig, n3.setUserID(t3), n3.setUserSig(e3), this.get(20).updateProtocolConfig(), this._login());
      } }, { key: "_login", value: function() {
        var _3 = this, h3 = this.get(12), g3 = h3.getScene(), e3 = 0, t3 = g3, f3 = (g3 && g3.startsWith("k-") && (t3 = Mi[g3], g3 = "tuikit"), new P2("login")), n3 = (f3.setMessage("".concat(t3)).setMoreMessage("identifier:".concat(this.getMyUserID())), "tuikit" === g3), o3 = 0, n3 = (Me2 ? o3 = n3 ? 3 === t3 || 4 === t3 || 5 === t3 || 6 === t3 ? 31 : 9 === t3 || 10 === t3 || 11 === t3 || 12 === t3 ? 32 : 4 : 3 : v2 ? o3 = he2 ? 36 : "tuikit" === g3 ? 12 : 11 : Ce2 ? o3 = Ue2 ? "flutter_web_uikit" === g3 ? 21 : 20 : this._isReactUIKit() ? Pe2 ? 25 : 24 : n3 ? 1 === t3 || 2 === t3 ? 29 : 7 === t3 || 8 === t3 ? 30 : Pe2 ? 17 : 14 : Pe2 ? 16 : 13 : 13 === t3 && (o3 = 38), f3.setUIPlatform(o3), h3.setUIPlatform(o3), this.getPushModule()), m3 = (n3 && (this._isWebUniapp = n3.getUniAppPlatform(), t3 = this._getStatusInstanceID(), h3.setStatusInstanceID(t3), this.get(20).updateProtocolConfig(), e3 = n3.getDeviceBrand()), "".concat(this._n, "._login"));
        return this._lastLoginTs = Date.now(), this.req({ P: G2.LOGIN, data: { deviceBrand: e3, isWebUniapp: this._isWebUniapp, customInfo: h3.getCustomLoginInfo() } }).then(function(e4) {
          _3._lastLoginTs = 0;
          var t4 = Date.now(), n4 = null, o4 = e4.data, i3 = o4.a2Key, a3 = o4.tinyID, s3 = o4.helloInterval, r3 = o4.instanceID, c3 = o4.timeStamp, u3 = o4.customStatus, u3 = void 0 === u3 ? "" : u3, l3 = o4.purchaseBits, o4 = o4.authKey, o4 = void 0 === o4 ? "" : o4, d3 = 1e3 * c3, p3 = t4 - f3.getStartTs(), p3 = d3 + parseInt(p3 / 2) - t4, t4 = f3.getStartTs() + p3;
          if (f3.start(t4), t4 = d3, We2 = p3, (d3 = /* @__PURE__ */ new Date()).setTime(t4), M2.i("baseTime from server:".concat(d3, " offset:").concat(We2)), a3) {
            if (i3)
              return t4 = _3.get(21).getSocketID(), d3 = xo(u3), u3 = "socketID:".concat(t4, " scene:").concat(g3, " helloInterval:").concat(s3, " instanceID:").concat(r3, " timeStamp:").concat(c3) + " offset:".concat(p3, " customStatus:").concat(d3, " isWebUniapp:").concat(_3._isWebUniapp), M2.l("".concat(m3, " ok. ").concat(u3)), c3 = t4 = "", _e2 && dt2(I2.getAccountInfoSync) && (p3 = I2.getAccountInfoSync().miniProgram) && (t4 = p3.appId, c3 = p3.envVersion), f3.setMoreMessage("".concat(u3, " href:").concat(Ce2 ? window.location.href : "", " mpAppId:").concat(t4, " envVersion:").concat(c3, " authKey:").concat(o4)).end(), h3.setA2Key(i3), h3.setTinyID(a3), h3.setStatusInstanceID(r3), h3.setCustomStatus(d3), h3.setDowloadFileAuthKey(o4), l3 && _3.get(27).onPushedConfig({ errorCode: 0, expiredTime: 0, purchaseBits: l3 }), _3.get(20).updateProtocolConfig(), _3.emitIEvt(U2.A2KEY_AND_TINYID_UPDATED), _3._helloInterval = s3, _3.triggerReady(), (p3 = _3.getPushModule()) && (uni.setStorageSync("timUniAppInstanceID", r3), p3.init()), _3._fetchCloudControlConfig(), _3.get(29).init(), e4;
            n4 = new L2({ code: k2.NO_A2KEY });
          } else
            n4 = new L2({ code: k2.NO_TINYID });
          throw f3.setError(n4).end(), n4;
        }).catch(function(e4) {
          return f3.setError(e4).end(true), _3._m.setNotReadyReason(k2.LOGIN_FAILED), M2.e("".concat(m3, " failed. error:"), e4), _3._lastLoginTs = 0, _3._m.onLoginFailed(), E2(e4);
        });
      } }, { key: "logout", value: function() {
        var t3 = this, e3 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 0, n3 = "".concat(this._n, ".logout"), o3 = this.isLoggedIn();
        return M2.i("".concat(n3, " type:").concat(e3, " isLoggedIn:").concat(o3, " isWebUniapp:").concat(this._isWebUniapp)), o3 ? (new P2("logout").setMessage("identifier:".concat(this.getMyUserID())).end(true), 0 === e3 && this._m.setNotReadyReason(k2.LOGGED_OUT), this.req({ P: G2.LOGOUT, data: { type: e3, isWebUniapp: this._isWebUniapp } }).then(function() {
          return t3.resetReady(), D2({});
        }).catch(function(e4) {
          return M2.e("".concat(n3, " error:"), e4), t3.resetReady(), D2({});
        })) : E2({ code: k2.USER_NOT_LOGGED_IN });
      } }, { key: "getLoginUser", value: function() {
        return this.isLoggedIn() ? this.getMyUserID() : "";
      } }, { key: "_fetchCloudControlConfig", value: function() {
        this.get(23).fetchConfig();
      } }, { key: "_getStatusInstanceID", value: function() {
        return uni.getStorageSync("timUniAppInstanceID") || 0;
      } }, { key: "_hello", value: function() {
        var t3 = this;
        this._lastWsHelloTs = Date.now(), this.req({ P: G2.HELLO, data: { isWebUniapp: this._isWebUniapp } }).catch(function(e3) {
          M2.w("".concat(t3._n, "._hello error:"), e3);
        });
      } }, { key: "getLastWsHelloTs", value: function() {
        return this._lastWsHelloTs;
      } }, { key: "_checkLoginInfo", value: function(e3) {
        var t3 = 0;
        return S2(this.get(12).getSDKAppID()) ? t3 = k2.NO_SDKAPPID : S2(e3.userID) ? t3 = k2.NO_IDENTIFIER : S2(e3.userSig) && (t3 = k2.NO_USERSIG), { code: t3 };
      } }, { key: "_isReactUIKit", value: function() {
        return Ce2 && void 0 !== window.tencent_cloud_im_csig_react_uikit_23F_xa;
      } }, { key: "onMultipleAccountKickedOut", value: function(e3) {
        var t3 = this;
        new P2("kickedOut").setMessage("type:".concat(R2.KICKED_OUT_MULT_ACCOUNT, " newInstanceInfo:").concat(JSON.stringify(e3))).end(true), M2.w("".concat(this._n, ".onMultipleAccountKickedOut userID:").concat(this.getMyUserID(), " newInstanceInfo:"), e3), this.logout(1).then(function() {
          t3.emitOEvt(h2.KICKED_OUT, { type: R2.KICKED_OUT_MULT_ACCOUNT }), t3._m.setNotReadyReason(k2.KICKED_OUT_MULT_ACCOUNT), t3._m.reset();
        });
      } }, { key: "onMultipleDeviceKickedOut", value: function(e3) {
        var t3 = this;
        new P2("kickedOut").setMessage("type:".concat(R2.KICKED_OUT_MULT_DEVICE, " newInstanceInfo:").concat(JSON.stringify(e3))).end(true), M2.w("".concat(this._n, ".onMultipleDeviceKickedOut userID:").concat(this.getMyUserID(), " newInstanceInfo:"), e3), this.logout(1).then(function() {
          t3.emitOEvt(h2.KICKED_OUT, { type: R2.KICKED_OUT_MULT_DEVICE }), t3._m.setNotReadyReason(k2.KICKED_OUT_MULT_DEVICE), t3._m.reset();
        });
      } }, { key: "onUserSigExpired", value: function() {
        new P2("kickedOut").setMessage(R2.KICKED_OUT_USERSIG_EXPIRED).end(true), M2.w("".concat(this._n, ".onUserSigExpired userID:").concat(this.getMyUserID())), 0 !== this.get(12).getStatusInstanceID() && (this.emitOEvt(h2.KICKED_OUT, { type: R2.KICKED_OUT_USERSIG_EXPIRED }), this._m.setNotReadyReason(k2.KICKED_OUT_USERSIG_EXPIRED), this._m.reset());
      } }, { key: "onRestApiKickedOut", value: function(e3) {
        new P2("kickedOut").setMessage("type:".concat(R2.KICKED_OUT_REST_API, " newInstanceInfo:").concat(JSON.stringify(e3))).end(true), M2.w("".concat(this._n, ".onRestApiKickedOut userID:").concat(this.getMyUserID(), " newInstanceInfo:"), e3), 0 !== this.get(12).getStatusInstanceID() && (this.emitOEvt(h2.KICKED_OUT, { type: R2.KICKED_OUT_REST_API }), this._m.setNotReadyReason(k2.KICKED_OUT_REST_API), this._m.reset(), this.get(21).onRestApiKickedOut());
      } }, { key: "reset", value: function() {
        M2.l("".concat(this._n, ".reset")), this.resetReady(), this._helloInterval = 120, this._lastLoginTs = 0, this._lastWsHelloTs = 0, this._isWebUniapp = 0;
      } }]));
      function Ci(e3) {
        return p2(this, Ci), (e3 = i2(this, Ci, [e3]))._n = "SignModule", e3._helloInterval = 120, e3._lastLoginTs = 0, e3._lastWsHelloTs = 0, e3._isWebUniapp = 0, wo.mixin(e3), e3;
      }
      function Ti(e3) {
        return p2(this, Ti), (e3 = i2(this, Ti, [e3]))._n = "UserModule", e3._profileHandler = new hi(e3), e3._blacklistHandler = new fi(e3), e3._userStatusHandler = new mi(e3), e3.getIEmitInst().on(U2.A2KEY_AND_TINYID_UPDATED, e3.onContextUpdated, e3), e3;
      }
      function Di(e3) {
        return p2(this, Di), (e3 = i2(this, Di, [e3]))._n = "TopicModule", e3._topicMap = /* @__PURE__ */ new Map(), e3._getTopicTimeMap = /* @__PURE__ */ new Map(), e3.TOPIC_CACHE_TIME = 300, e3.TOPIC_LAST_ACTIVE_TIME = 3600, e3.getIEmitInst().on(U2.CLOUD_CONFIG, e3._onCloudConfig, e3), e3;
      }
      function Ei(e3) {
        return p2(this, Ei), (e3 = i2(this, Ei, [e3]))._n = "GroupModule", e3._commonGroupHandler = new $o(e3), e3._groupAttributesHandler = new ei(e3), e3._groupCountersHandler = new ti(e3), e3._AVChatRoomHandler = new ii(e3), e3._groupTipsHandler = new Qo(e3), e3._groupSystemNoticeHandler = new ci(e3), e3._groupMemberHandler = new si(e3), e3.groupMap = /* @__PURE__ */ new Map(), e3._unjoinedAVChatRoomList = /* @__PURE__ */ new Map(), e3._receiptDetailCompleteMap = /* @__PURE__ */ new Map(), e3._onlineMemberCountMap = /* @__PURE__ */ new Map(), e3._timeoutIDs = [], e3.getIEmitInst().on(U2.CLOUD_CONFIG, e3._onCloudConfig, e3), e3;
      }
      function Li(e3) {
        return p2(this, Li), (e3 = i2(this, Li, [e3]))._n = "ConvModule", wo.mixin(e3), e3._msgListHandler = new Uo(e3), e3._msgRemindHandler = new zo(e3), e3._convGroupHandler = new Xo(e3), e3._sll = new Ko(100), e3._pagingStatus = bn, e3._pagingTs = 0, e3._pagingStartIdx = 0, e3._pagingPinnedTs = 0, e3._pagingPinnedStartIdx = 0, e3._pagingConvIDMap = /* @__PURE__ */ new Map(), e3._convIDFromUnreadDBMap = /* @__PURE__ */ new Map(), e3._convMap = /* @__PURE__ */ new Map(), e3._tmpGroupList = [], e3._tmpGroupAtTipsList = [], e3._peerReadTimeMap = /* @__PURE__ */ new Map(), e3._completedMap = /* @__PURE__ */ new Map(), e3._roamingMsgKeyAndTimeMap = /* @__PURE__ */ new Map(), e3._remoteGroupReadSeqMap = /* @__PURE__ */ new Map(), e3._convTotalUnreadCount = 0, e3._pagingGetCostList = [], e3._convMapForDiff = /* @__PURE__ */ new Map(), e3._partialUpdatedConvMap = /* @__PURE__ */ new Map(), e3._everClearedMap = /* @__PURE__ */ new Map(), e3._bPullOnInvite = true, e3._initListeners(), e3;
      }
      function Si() {
        return null;
      }
      function ki(e3) {
        var t3 = e3.get(12);
        return { SDKType: 10, SDKAppID: t3.getSDKAppID(), SDKVersion: t3.getVersion(), tinyID: Number(t3.getTinyID()), userID: t3.getUserID(), platform: e3.getPlatform(), instanceID: t3.getInstanceID(), traceID: Ye2() };
      }
      var Ri = e2(function e3(t3) {
        p2(this, e3), this._m = t3, this._n = "StorageModule", this._storageQueue = /* @__PURE__ */ new Map(), this._errorTolerantHandle();
      }, [{ key: "_errorTolerantHandle", value: function() {
        v2 || "undefined" != typeof window && this._canIUseCookies() || (this.getItem = Si, this.setItem = Si, this.removeItem = Si, this.clear = Si);
      } }, { key: "onCheckTimer", value: function(e3) {
        e3 % 20 == 0 && 0 !== this._storageQueue.size && this._doFlush();
      } }, { key: "_doFlush", value: function() {
        try {
          var e3, t3 = F2(this._storageQueue);
          try {
            for (t3.s(); !(e3 = t3.n()).done; ) {
              var n3 = j2(e3.value, 2), o3 = n3[0], i3 = n3[1];
              this._setStorageSync(this._getKey(o3), i3);
            }
          } catch (e4) {
            t3.e(e4);
          } finally {
            t3.f();
          }
          this._storageQueue.clear();
        } catch (e4) {
          M2.w("".concat(this._n, "._doFlush error:"), e4);
        }
      } }, { key: "_getPrefix", value: function() {
        var e3 = this._m.get(12);
        return "TIM_".concat(e3.getSDKAppID(), "_").concat(e3.getUserID(), "_");
      } }, { key: "_getKey", value: function(e3) {
        return "".concat(this._getPrefix()).concat(e3);
      } }, { key: "getItem", value: function(e3) {
        var t3 = !(1 < arguments.length && void 0 !== arguments[1]) || arguments[1];
        try {
          var n3 = t3 ? this._getKey(e3) : e3;
          return this.getStorageSync(n3);
        } catch (e4) {
          return M2.w("".concat(this._n, ".getItem error:"), e4), {};
        }
      } }, { key: "setItem", value: function(e3, t3) {
        var n3;
        2 < arguments.length && void 0 !== arguments[2] && arguments[2] ? (n3 = !(3 < arguments.length && void 0 !== arguments[3]) || arguments[3] ? this._getKey(e3) : e3, this._setStorageSync(n3, t3)) : this._storageQueue.set(e3, t3);
      } }, { key: "clear", value: function() {
        try {
          v2 ? I2.clearStorageSync() : this._canIUseCookies() && localStorage.clear();
        } catch (e3) {
          M2.w("".concat(this._n, ".clear error:"), e3);
        }
      } }, { key: "removeItem", value: function(e3) {
        var t3 = !(1 < arguments.length && void 0 !== arguments[1]) || arguments[1];
        try {
          var n3 = t3 ? this._getKey(e3) : e3;
          this._removeStorageSync(n3);
        } catch (e4) {
          M2.w("".concat(this._n, ".removeItem error:"), e4);
        }
      } }, { key: "getSize", value: function(e3) {
        var t3 = this, n3 = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : "b";
        try {
          var o3 = { size: 0, limitSize: 5242880, unit: n3 };
          if (Object.defineProperty(o3, "leftSize", { enumerable: true, get: function() {
            return o3.limitSize - o3.size;
          } }), v2 && (o3.limitSize = 1024 * I2.getStorageInfoSync().limitSize), e3)
            o3.size = JSON.stringify(this.getItem(e3)).length + this._getKey(e3).length;
          else if (v2)
            I2.getStorageInfoSync().keys.forEach(function(e4) {
              o3.size += JSON.stringify(t3.getStorageSync(e4)).length + t3._getKey(e4).length;
            });
          else if (this._canIUseCookies())
            for (var i3 in localStorage)
              localStorage.hasOwnProperty(i3) && (o3.size += localStorage.getItem(i3).length + i3.length);
          return this._convertUnit(o3);
        } catch (e4) {
          M2.w("".concat(this._n, " error:"), e4);
        }
      } }, { key: "_convertUnit", value: function(e3) {
        var t3, n3 = {}, o3 = e3.unit;
        for (t3 in n3.unit = o3, e3)
          "number" == typeof e3[t3] && ("kb" === o3.toLowerCase() ? n3[t3] = Math.round(e3[t3] / 1024) : "mb" === o3.toLowerCase() ? n3[t3] = Math.round(e3[t3] / 1024 / 1024) : n3[t3] = e3[t3]);
        return n3;
      } }, { key: "_setStorageSync", value: function(e3, t3) {
        v2 ? ve2 ? my.setStorageSync({ key: e3, data: t3 }) : I2.setStorageSync(e3, t3) : this._canIUseCookies() && localStorage.setItem(e3, JSON.stringify(t3));
      } }, { key: "getStorageSync", value: function(e3) {
        return v2 ? ve2 ? my.getStorageSync({ key: e3 }).data : I2.getStorageSync(e3) : this._canIUseCookies() ? JSON.parse(localStorage.getItem(e3)) : {};
      } }, { key: "_removeStorageSync", value: function(e3) {
        v2 ? ve2 ? my.removeStorageSync({ key: e3 }) : I2.removeStorageSync(e3) : this._canIUseCookies() && localStorage.removeItem(e3);
      } }, { key: "_canIUseCookies", value: function() {
        return "undefined" != typeof window && navigator && navigator.cookieEnabled && localStorage;
      } }, { key: "reset", value: function() {
        M2.l("".concat(this._n, ".reset")), this._doFlush();
      } }]), Ai = e2(function e3(t3) {
        p2(this, e3), this._n = "SSOLogBody", this._report = [];
      }, [{ key: "pushIn", value: function(e3) {
        M2.d("".concat(this._n, ".pushIn"), this._report.length, e3), this._report.push(e3);
      } }, { key: "backfill", value: function(e3) {
        var t3;
        O2(e3) && 0 !== e3.length && (M2.d("".concat(this._n, ".backfill"), this._report.length, e3.length), (t3 = this._report).unshift.apply(t3, d2(e3)));
      } }, { key: "getLogsNumInMemory", value: function() {
        return this._report.length;
      } }, { key: "isEmpty", value: function() {
        return 0 === this._report.length;
      } }, { key: "_reset", value: function() {
        this._report.length = 0, this._report = [];
      } }, { key: "getLogsInMemory", value: function() {
        var e3 = this._report.slice();
        return this._reset(), e3;
      } }]), Oi = (t2(Ui, c2), e2(Ui, [{ key: "reportAtOnce", value: function() {
        this._report();
      } }, { key: "_onLoginSuccess", value: function() {
        var t3 = this, e3 = this.get(13), n3 = e3.getItem(this.TAG, false);
        !S2(n3) && dt2(n3.forEach) && (M2.l("".concat(this._n, "._onLoginSuccess. logs count:").concat(n3.length)), n3.forEach(function(e4) {
          t3._reportBody.pushIn(e4);
        }), e3.removeItem(this.TAG, false));
      } }, { key: "_onCloudConfig", value: function() {
        var e3 = this.getCloudConfig("evt_rpt_threshold"), t3 = this.getCloudConfig("evt_rpt_waiting"), n3 = this.getCloudConfig("evt_rpt_level"), o3 = this.getCloudConfig("evt_rpt_sdkappid_bl"), i3 = this.getCloudConfig("evt_rpt_tinyid_wl");
        N2(e3) || (this.MIN_THRESHOLD = Number(e3)), N2(t3) || (this.WAITING_TIME = Number(t3)), N2(n3) || (this.REPORT_LEVEL = n3.split(",").map(function(e4) {
          return Number(e4);
        })), N2(o3) || (this.REPORT_SDKAPPID_BLACKLIST = o3.split(",").map(function(e4) {
          return Number(e4);
        })), N2(i3) || (this.REPORT_TINYID_WHITELIST = i3.split(","));
      } }, { key: "pushIn", value: function(e3) {
        e3 instanceof P2 && (e3.updateTimeStamp(), this._reportBody.pushIn(e3), this._reportBody.getLogsNumInMemory() >= this.MIN_THRESHOLD) && this._report();
      } }, { key: "onCheckTimer", value: function() {
        Date.now() < this._lastReportTime + this.WAITING_TIME || this._reportBody.isEmpty() || this._report();
      } }, { key: "_filterLogs", value: function(e3) {
        var t3 = this, n3 = this.get(12), o3 = n3.getSDKAppID(), n3 = n3.getTinyID();
        return Jt2(this.REPORT_SDKAPPID_BLACKLIST, o3) && !zt(this.REPORT_TINYID_WHITELIST, n3) ? [] : e3.filter(function(e4) {
          return t3.REPORT_LEVEL.includes(e4.level);
        });
      } }, { key: "_report", value: function() {
        var t3, e3, n3 = this;
        this._reportBody.isEmpty() || (t3 = this._reportBody.getLogsInMemory(), 0 !== (e3 = this._filterLogs(t3)).length ? (e3 = { header: ki(this), event: e3 }, this.req({ P: G2.SSO_STAT, data: y2({}, e3) }).then(function() {
          n3._lastReportTime = Date.now();
        }).catch(function(e4) {
          M2.w("".concat(n3._n, "._report failed. error:"), e4), n3._lastReportTime = Date.now(), n3._reportBody.backfill(t3), n3._reportBody.getLogsNumInMemory() > n3.MAX_THRESHOLD && n3._flushAtOnce();
        })) : this._lastReportTime = Date.now());
      } }, { key: "_flushAtOnce", value: function() {
        var e3 = this.get(13), t3 = e3.getItem(this.TAG, false), n3 = this._reportBody.getLogsInMemory(), o3 = "".concat(this._n, "._flushAtOnce");
        S2(t3) ? (M2.l("".concat(o3, " count:").concat(n3.length)), e3.setItem(this.TAG, n3, true, false)) : ((n3 = n3.concat(t3)).length > this.MAX_THRESHOLD && (n3 = n3.slice(0, this.MAX_THRESHOLD)), M2.l("".concat(o3, " count:").concat(n3.length)), e3.setItem(this.TAG, n3, true, false));
      } }, { key: "reset", value: function() {
        M2.l("".concat(this._n, ".reset")), this._lastReportTime = 0, this._report(), this.REPORT_SDKAPPID_BLACKLIST = [], this.REPORT_TINYID_WHITELIST = [];
      } }])), Ni = "none", Gi = "online", Pi = e2(function e3(t3) {
        p2(this, e3), this._m = t3, this._networkType = Gi, this._n = "NetMonitorModule", this._mpNetworkStatusCallback = null, this._webOnlineCallback = null, this._webOfflineCallback = null, this._removeListener = null, this._m.getIEmitInst().on(U2.A2KEY_AND_TINYID_UPDATED, this._startRN, this);
      }, [{ key: "_startRN", value: function() {
        var e3, n3 = this;
        ye2 && (e3 = this._m.get(18).getPlugin("chat-network-monitor")) && (this._removeListener = e3.addEventListener(function(e4) {
          var t3 = e4.isConnected, e4 = e4.type;
          n3._networkType !== e4 && n3._onNetworkStatusChange({ isConnected: void 0 !== t3 && t3, networkType: e4 });
        }));
      } }, { key: "start", value: function() {
        var t3 = this, n3 = "".concat(this._n, ".start");
        v2 ? (I2.getNetworkType({ success: function(e3) {
          t3._networkType = e3.networkType || e3.subtype || "", e3.networkType === Ni ? M2.w("".concat(n3, " no network, please check!")) : M2.i("".concat(n3, " networkType:").concat(e3.networkType));
        } }), this._mpNetworkStatusCallback = this._onNetworkStatusChange.bind(this), I2.onNetworkStatusChange(this._mpNetworkStatusCallback)) : Ce2 && (this._networkType = Gi, this._webOnlineCallback = this._onWebOnline.bind(this), this._webOfflineCallback = this._onWebOffline.bind(this), window.addEventListener("online", this._webOnlineCallback), window.addEventListener("offline", this._webOfflineCallback));
      } }, { key: "_onWebOnline", value: function() {
        this._onNetworkStatusChange({ isConnected: true, networkType: Gi });
      } }, { key: "_onWebOffline", value: function() {
        this._onNetworkStatusChange({ isConnected: false, networkType: Ni });
      } }, { key: "_onNetworkStatusChange", value: function(e3) {
        var t3 = e3.isConnected, e3 = e3.networkType, n3 = "".concat(this._n, "._onNetworkStatusChange"), o3 = false, i3 = "previous:".concat(this._networkType, " current:").concat(e3);
        t3 ? (M2.i("".concat(n3, " ").concat(i3)), this._networkType !== e3 && (o3 = true, this._networkType = e3, this._m.get(21).reConnect(true))) : this._networkType !== e3 && (o3 = true, this._networkType = e3, M2.w("".concat(n3, " no network, please check!")), this._m.get(21).offline()), o3 && new P2("networkChange").setMessage("isConnected:".concat(t3, " ").concat(i3)).end();
      } }, { key: "isOnline", value: function() {
        return this._networkType !== Ni;
      } }, { key: "getNetworkType", value: function() {
        return this._networkType;
      } }, { key: "reset", value: function() {
        M2.l("".concat(this._n, ".reset")), v2 ? null !== this._mpNetworkStatusCallback && (I2.offNetworkStatusChange && I2.offNetworkStatusChange(this._mpNetworkStatusCallback), this._mpNetworkStatusCallback = null) : Ce2 ? (null !== this._webOnlineCallback && (window.removeEventListener("online", this._webOnlineCallback), this._webOnlineCallback = null), null !== this._onWebOffline && (window.removeEventListener("offline", this._webOfflineCallback), this._webOfflineCallback = null)) : ye2 && this._removeListener && (this._removeListener(), this._removeListener = null);
      } }]);
      function Ui(e3) {
        p2(this, Ui), (e3 = i2(this, Ui, [e3]))._n = "EventStatModule", e3.TAG = "im-ssolog-event", e3._reportBody = new Ai(), e3.MIN_THRESHOLD = 20, e3.MAX_THRESHOLD = 100, e3.WAITING_TIME = 6e4, e3.REPORT_LEVEL = [4, 5, 6], e3.REPORT_SDKAPPID_BLACKLIST = [], e3.REPORT_TINYID_WHITELIST = [], e3._lastReportTime = Date.now();
        var t3 = e3.getIEmitInst();
        return t3.on(U2.A2KEY_AND_TINYID_UPDATED, e3._onLoginSuccess, e3), t3.on(U2.CLOUD_CONFIG, e3._onCloudConfig, e3), e3;
      }
      function bi(e3, t3) {
        return e3(t3 = { exports: {} }, t3.exports), t3.exports;
      }
      var wi = bi(function(e3) {
        var o3 = Object.prototype.hasOwnProperty, _3 = "~";
        function n3() {
        }
        function a3(e4, t4, n4) {
          this.fn = e4, this.context = t4, this.once = n4 || false;
        }
        function i3(e4, t4, n4, o4, i4) {
          if ("function" != typeof n4)
            throw new TypeError("The listener must be a function");
          n4 = new a3(n4, o4 || e4, i4), o4 = _3 ? _3 + t4 : t4;
          return e4._events[o4] ? e4._events[o4].fn ? e4._events[o4] = [e4._events[o4], n4] : e4._events[o4].push(n4) : (e4._events[o4] = n4, e4._eventsCount++), e4;
        }
        function c3(e4, t4) {
          0 == --e4._eventsCount ? e4._events = new n3() : delete e4._events[t4];
        }
        function t3() {
          this._events = new n3(), this._eventsCount = 0;
        }
        Object.create && (n3.prototype = /* @__PURE__ */ Object.create(null), new n3().__proto__ || (_3 = false)), t3.prototype.eventNames = function() {
          var e4, t4, n4 = [];
          if (0 === this._eventsCount)
            return n4;
          for (t4 in e4 = this._events)
            o3.call(e4, t4) && n4.push(_3 ? t4.slice(1) : t4);
          return Object.getOwnPropertySymbols ? n4.concat(Object.getOwnPropertySymbols(e4)) : n4;
        }, t3.prototype.listeners = function(e4) {
          var e4 = _3 ? _3 + e4 : e4, t4 = this._events[e4];
          if (!t4)
            return [];
          if (t4.fn)
            return [t4.fn];
          for (var n4 = 0, o4 = t4.length, i4 = new Array(o4); n4 < o4; n4++)
            i4[n4] = t4[n4].fn;
          return i4;
        }, t3.prototype.listenerCount = function(e4) {
          e4 = _3 ? _3 + e4 : e4, e4 = this._events[e4];
          return e4 ? e4.fn ? 1 : e4.length : 0;
        }, t3.prototype.emit = function(e4, t4, n4, o4, i4, a4) {
          var s3 = _3 ? _3 + e4 : e4;
          if (!this._events[s3])
            return false;
          var r3, c4 = this._events[s3], u3 = arguments.length;
          if (c4.fn) {
            switch (c4.once && this.removeListener(e4, c4.fn, void 0, true), u3) {
              case 1:
                return c4.fn.call(c4.context), true;
              case 2:
                return c4.fn.call(c4.context, t4), true;
              case 3:
                return c4.fn.call(c4.context, t4, n4), true;
              case 4:
                return c4.fn.call(c4.context, t4, n4, o4), true;
              case 5:
                return c4.fn.call(c4.context, t4, n4, o4, i4), true;
              case 6:
                return c4.fn.call(c4.context, t4, n4, o4, i4, a4), true;
            }
            for (p3 = 1, r3 = new Array(u3 - 1); p3 < u3; p3++)
              r3[p3 - 1] = arguments[p3];
            c4.fn.apply(c4.context, r3);
          } else
            for (var l3, d3 = c4.length, p3 = 0; p3 < d3; p3++)
              switch (c4[p3].once && this.removeListener(e4, c4[p3].fn, void 0, true), u3) {
                case 1:
                  c4[p3].fn.call(c4[p3].context);
                  break;
                case 2:
                  c4[p3].fn.call(c4[p3].context, t4);
                  break;
                case 3:
                  c4[p3].fn.call(c4[p3].context, t4, n4);
                  break;
                case 4:
                  c4[p3].fn.call(c4[p3].context, t4, n4, o4);
                  break;
                default:
                  if (!r3)
                    for (l3 = 1, r3 = new Array(u3 - 1); l3 < u3; l3++)
                      r3[l3 - 1] = arguments[l3];
                  c4[p3].fn.apply(c4[p3].context, r3);
              }
          return true;
        }, t3.prototype.on = function(e4, t4, n4) {
          return i3(this, e4, t4, n4, false);
        }, t3.prototype.once = function(e4, t4, n4) {
          return i3(this, e4, t4, n4, true);
        }, t3.prototype.removeListener = function(e4, t4, n4, o4) {
          e4 = _3 ? _3 + e4 : e4;
          if (this._events[e4])
            if (t4) {
              var i4 = this._events[e4];
              if (i4.fn)
                i4.fn !== t4 || o4 && !i4.once || n4 && i4.context !== n4 || c3(this, e4);
              else {
                for (var a4 = 0, s3 = [], r3 = i4.length; a4 < r3; a4++)
                  (i4[a4].fn !== t4 || o4 && !i4[a4].once || n4 && i4[a4].context !== n4) && s3.push(i4[a4]);
                s3.length ? this._events[e4] = 1 === s3.length ? s3[0] : s3 : c3(this, e4);
              }
            } else
              c3(this, e4);
          return this;
        }, t3.prototype.removeAllListeners = function(e4) {
          return e4 ? (e4 = _3 ? _3 + e4 : e4, this._events[e4] && c3(this, e4)) : (this._events = new n3(), this._eventsCount = 0), this;
        }, t3.prototype.off = t3.prototype.removeListener, t3.prototype.addListener = t3.prototype.on, t3.prefixed = _3, e3.exports = t3.EventEmitter = t3;
      }), Fi = ["rich.my-imcloud.com", "imrich.qcloud.com"], qi = ["requestSnapshotUrl"], xi = (t2(Wi, c2), e2(Wi, [{ key: "_init", value: function() {
        this._fileDownloadProxy = this.getFileDownloadProxy(), this._authKey = this.getDownloadFileAuthKey();
        var e3 = this.get(18);
        this.TIMUploadPlugin = e3.getPlugin("tim-upload-plugin"), this.TIMUploadPlugin ? this._initUploaderMethod() : (this.COSSDK = e3.getPlugin(e3 = v2 ? "cos-wx-sdk" : "cos-js-sdk"), this.COSSDK ? (this._getAuthorizationKey(), this.warn("CosReplacement", e3)) : this.warn("PluginUndetected"));
      } }, { key: "_onCloudConfig", value: function() {
        var t3 = this, e3 = "".concat(this._n, "._onCloudConfig"), n3 = this.getCloudConfig("upload_size_limit"), o3 = this.getCloudConfig("simple_cos"), i3 = this.getCloudConfig("file_dn_list");
        if (M2.l("".concat(e3, " uploadSizeLimit:").concat(n3, " simpleCos:").concat(o3)), !N2(n3))
          try {
            var a3 = JSON.parse(n3);
            this.UPLOAD_SIZE_LIMIT = { A: a3.a ? 1048576 * parseInt(a3.a) : this.UPLOAD_SIZE_LIMIT.A, F: a3.f ? 1048576 * parseInt(a3.f) : this.UPLOAD_SIZE_LIMIT.F, I: a3.i ? 1048576 * parseInt(a3.i) : this.UPLOAD_SIZE_LIMIT.I, V: a3.v ? 1048576 * parseInt(a3.v) : this.UPLOAD_SIZE_LIMIT.V };
          } catch (e4) {
          }
        if (N2(o3) || (this.isSimpleCos = "1" === o3), !N2(i3))
          try {
            JSON.parse(i3).forEach(function(e4) {
              t3._fileDNList.includes(e4) || t3._fileDNList.push(e4);
            });
          } catch (e4) {
          }
      } }, { key: "_getAuthorizationKey", value: function() {
        var n3 = this, o3 = "".concat(this._n, ".").concat("_getAuthorizationKey"), i3 = new P2("_getAuthorizationKey"), a3 = Math.ceil(Date.now() / 1e3);
        this.req({ P: G2.COS_SIGN, data: { duration: this.expiredTimeLimit } }).then(function(e3) {
          var e3 = e3.data, t3 = (M2.l("".concat(o3, " ok. data:"), e3), e3.expiredTime - a3);
          i3.setMessage("requestId:".concat(e3.requestId, " requestTime:").concat(a3, " expiredTime:").concat(e3.expiredTime, " diff:").concat(t3, "s")).end(), !v2 && e3.region && (n3.region = e3.region), n3.appid = e3.appid, n3.bucketName = e3.bucketName, n3.ciUrl = e3.ciUrl, n3.directory = e3.directory, n3.downloadUrl = e3.downloadUrl, n3.uploadUrl = e3.uploadUrl, n3.cosOptions = { secretId: e3.secretId, secretKey: e3.secretKey, sessionToken: e3.sessionToken, expiredTime: e3.expiredTime }, M2.l("".concat(o3, " ok. region:").concat(n3.region, " bucketName:").concat(n3.bucketName)), n3._initUploaderMethod();
        }).catch(function(e3) {
          i3.setError(e3).end(), M2.w("".concat(o3, " failed. error:"), e3);
        });
      } }, { key: "_getCosPreSigUrl", value: function(t3) {
        var i3 = this, a3 = "".concat(this._n, ".").concat("_getCosPreSigUrl"), s3 = Math.ceil(Date.now() / 1e3), r3 = new P2("_getCosPreSigUrl"), e3 = { uploadMethod: t3.uploadMethod, platform: this.getPlatform(), SDKAppID: this.getSDKAppID(), userID: t3.userID, conversationType: t3.conversationType, uploadConfig: [{ fileID: 1, fileType: t3.fileType, fileName: t3.fileName }] }, n3 = G2.SIMPLE_COS_PRE_SIG;
        return this.isSimpleCos || (e3 = { fileType: t3.fileType, fileName: t3.fileName, uploadMethod: t3.uploadMethod, duration: t3.duration }, n3 = G2.COS_PRE_SIG), this.req({ P: n3, data: e3 }).then(function(e4) {
          i3.tryCount = 0;
          var t4, n4, e4 = e4.data || {}, o3 = (M2.l("".concat(a3, " ok. isSimpleCos:").concat(i3.isSimpleCos, " data:"), e4), "");
          return o3 = i3.isSimpleCos ? (t4 = (n4 = e4.preSig[0]).uploadUrl, n4 = n4.fileKey, "uploadIP:".concat(e4.uploadIP, " uploadUrl:").concat(t4, " fileKey:").concat(n4, " cost:").concat(an(s3))) : "requestId:".concat(e4.requestId, " expiredTime:").concat(e4.expiredTime, " diff:").concat(e4.expiredTime - s3, "s"), r3.setMessage(o3).end(), e4;
        }).catch(function(e4) {
          return -1 === e4.code && (e4.code = k2.COS_GET_SIG_FAIL), r3.setError(e4).end(), M2.w("".concat(a3, " failed. error:"), e4), i3.tryCount < 1 ? (i3.tryCount++, i3._getCosPreSigUrl(t3)) : (i3.tryCount = 0, E2({ code: k2.COS_GET_SIG_FAIL }));
        });
      } }, { key: "_initUploaderMethod", value: function() {
        var n3 = this;
        this.TIMUploadPlugin ? (this.timUploadPlugin = new this.TIMUploadPlugin(), this._cosUploadMethod = function(e3, t3) {
          n3.timUploadPlugin.uploadFile(e3, t3);
        }) : this.appid && (this.cos = v2 ? new this.COSSDK({ ForcePathStyle: true, getAuthorization: this._getAuthorization.bind(this) }) : new this.COSSDK({ getAuthorization: this._getAuthorization.bind(this) }), this._cosUploadMethod = v2 ? function(e3, t3) {
          n3.cos.postObject(e3, t3);
        } : function(e3, t3) {
          n3.cos.uploadFiles(e3, t3);
        });
      } }, { key: "onCheckTimer", value: function(e3) {
        !this.COSSDK || this.TIMUploadPlugin || this.isLoggedIn() && e3 % 60 == 0 && Math.ceil(Date.now() / 1e3) >= this.cosOptions.expiredTime - 120 && this._getAuthorizationKey();
      } }, { key: "getFileDNList", value: function() {
        return this._fileDNList;
      } }, { key: "_getAuthorization", value: function(e3, t3) {
        t3({ TmpSecretId: this.cosOptions.secretId, TmpSecretKey: this.cosOptions.secretKey, XCosSecurityToken: this.cosOptions.sessionToken, ExpiredTime: this.cosOptions.expiredTime });
      } }, { key: "upload", value: function(e3) {
        if (true === e3._relayFlag)
          return Promise.resolve();
        var t3 = this.get(26);
        switch (e3.type) {
          case R2.MSG_IMAGE:
            return t3.addTotalCount(Zn), this._uploadImage(e3);
          case R2.MSG_FILE:
            return t3.addTotalCount(Zn), this._uploadFile(e3);
          case R2.MSG_AUDIO:
            return t3.addTotalCount(Zn), this._uploadAudio(e3);
          case R2.MSG_VIDEO:
            return t3.addTotalCount(Zn), this._uploadVideo(e3);
          default:
            return Promise.resolve();
        }
      } }, { key: "_uploadImage", value: function(v3) {
        var I3 = this, e3 = this.get(2), M3 = v3.getElements()[0], t3 = e3.getMessageOption(v3.clientSequence);
        return this.doUploadImage({ file: t3.payload.file, to: t3.to, message: v3, onProgress: function(e4) {
          if (M3.updatePercent(e4), dt2(t3.onProgress))
            try {
              t3.onProgress(e4);
            } catch (e5) {
              return E2({ code: k2.MSG_ONPROGRESS_ERR });
            }
        } }).then(function(e4) {
          var t4 = e4.location, n3 = e4.fileType, o3 = e4.fileSize, i3 = e4.width, a3 = e4.height, s3 = e4.smallImageUrl, r3 = e4.smallImageWidth, c3 = e4.smallImageHeight, u3 = e4.largeImageUrl, l3 = e4.largeImageWidth, d3 = e4.largeImageHeight, p3 = e4.imageInfoArray, e4 = I3.isPrivateNetWork() ? t4 : Mt2(t4);
          M3.updateImageFormat(n3);
          var _3, h3, g3 = { size: o3, url: e4, width: i3, height: a3 };
          if (p3 && 0 < p3.length)
            for (var f3 = 0; f3 < p3.length; f3++) {
              var m3 = p3[f3];
              1 === m3.type ? _3 = m3 : 2 === m3.type ? h3 = m3 : g3 = y2(y2({}, g3), m3);
            }
          else
            h3 = s3 && u3 ? (_3 = { url: s3, width: r3, height: c3 }, { url: u3, width: l3, height: d3 }) : (_3 = Kt2({ originUrl: e4, originWidth: i3, originHeight: a3, min: 198 }), Kt2({ originUrl: e4, originWidth: i3, originHeight: a3, min: 720 }));
          return M3.updateImageInfoArray([y2({}, g3), y2({}, h3), y2({}, _3)]), v3;
        });
      } }, { key: "_uploadFile", value: function(n3) {
        var o3 = this, e3 = this.get(2), i3 = n3.getElements()[0], t3 = e3.getMessageOption(n3.clientSequence);
        return this.doUploadFile({ file: t3.payload.file, to: t3.to, message: n3, onProgress: function(e4) {
          if (i3.updatePercent(e4), dt2(t3.onProgress))
            try {
              t3.onProgress(e4);
            } catch (e5) {
              return E2({ code: k2.MSG_ONPROGRESS_ERR });
            }
        } }).then(function(e4) {
          var e4 = e4.location, t4 = e4;
          return o3.isPrivateNetWork() || (t4 = co(t4 = Mt2(e4), o3._fileDownloadProxy, o3._authKey, o3._fileDNList)), i3.updateFileUrl(t4), n3;
        });
      } }, { key: "_uploadAudio", value: function(t3) {
        var n3 = this, e3 = this.get(2), o3 = t3.getElements()[0], i3 = e3.getMessageOption(t3.clientSequence);
        return this.doUploadAudio({ file: i3.payload.file, to: i3.to, message: t3, onProgress: function(e4) {
          if (o3.updatePercent(e4), dt2(i3.onProgress))
            try {
              i3.onProgress(e4);
            } catch (e5) {
              return E2({ code: k2.MSG_ONPROGRESS_ERR });
            }
        } }).then(function(e4) {
          e4 = e4.location, e4 = n3.isPrivateNetWork() ? e4 : Mt2(e4);
          return o3.updateAudioUrl(e4), t3;
        });
      } }, { key: "_uploadVideo", value: function(n3) {
        var o3 = this, e3 = this.get(2), i3 = n3.getElements()[0], t3 = e3.getMessageOption(n3.clientSequence);
        return this.doUploadVideo({ file: t3.payload.file, to: t3.to, message: n3, onProgress: function(e4) {
          if (i3.updatePercent(e4), dt2(t3.onProgress))
            try {
              t3.onProgress(e4);
            } catch (e5) {
              return E2({ code: k2.MSG_ONPROGRESS_ERR });
            }
        } }).then(function(e4) {
          var t4 = e4.location, e4 = e4.snapshotInfo, t4 = o3.isPrivateNetWork() ? t4 : Mt2(t4);
          return i3.updateVideoUrl(t4), S2(e4) || i3.updateSnapshotInfo(e4), n3;
        });
      } }, { key: "_checkSizeError", value: function(e3) {
        var t3 = "";
        return "A" === e3 ? t3 = "audio" : "I" === e3 ? t3 = "image" : "V" === e3 ? t3 = "video" : "F" === e3 && (t3 = "file"), E2({ code: k2["MSG_".concat(e3, "_SIZE_LIMIT")], message: this.getErrMsg("UploadSizeLimit", t3, "".concat(this.UPLOAD_SIZE_LIMIT[e3] / 1048576, "MB")) });
      } }, { key: "doUploadImage", value: function(o3) {
        var e3, i3, a3 = this;
        return !o3.file || this._isEmptyFileList(o3.file.files) ? E2({ code: k2.MSG_I_SELECT_F_FIRST }) : true !== (e3 = this._checkImageType(o3.file)) ? e3 : true !== (e3 = this._checkImageSize(o3.file)) ? e3 : (i3 = null, this._setUploadFileType(1), this.uploadByCOS(o3).then(function(e4) {
          if (i3 = e4, a3.isPrivateNetWork())
            return xt2(n3);
          if (O2(i3.imageInfoArray)) {
            var t3 = i3.imageInfoArray.find(function(e5) {
              return 3 === e5.type;
            });
            if (t3)
              return t3;
          }
          var n3;
          return ye2 ? { width: o3.file.width, height: o3.file.height } : (n3 = Mt2(e4.location), a3.COSSDK ? xt2(n3) : xt2(n3 = co(n3, a3._fileDownloadProxy, a3._authKey, a3._fileDNList)));
        }).then(function(e4) {
          return i3.width = e4.width, i3.height = e4.height, Promise.resolve(i3);
        }));
      } }, { key: "_checkImageType", value: function(e3) {
        var t3 = "", t3 = v2 ? e3.url.slice(e3.url.lastIndexOf(".") + 1) : ye2 ? e3.type.split("/")[1] : e3.files[0].name.slice(e3.files[0].name.lastIndexOf(".") + 1);
        return 0 <= Vo.indexOf(t3.toLowerCase()) || E2({ code: k2.MSG_I_TYPES_LIMIT });
      } }, { key: "_checkImageSize", value: function(e3) {
        return 0 === (e3 = (v2 || ye2 ? e3 : e3.files[0]).size) ? E2({ code: k2.MSG_F_IS_EMPTY }) : e3 < this.UPLOAD_SIZE_LIMIT.I || this._checkSizeError("I");
      } }, { key: "doUploadFile", value: function(e3) {
        return !e3.file || this._isEmptyFileList(e3.file.files) ? E2({ code: k2.MSG_F_SELECT_F_FIRST }) : e3.file.files[0].size > this.UPLOAD_SIZE_LIMIT.F ? this._checkSizeError("F") : 0 === e3.file.files[0].size ? E2({ code: k2.MSG_F_IS_EMPTY }) : (this._setUploadFileType(255), this.uploadByCOS(e3));
      } }, { key: "doUploadVideo", value: function(e3) {
        return e3.file.videoFile.size > this.UPLOAD_SIZE_LIMIT.V ? this._checkSizeError("V") : 0 === e3.file.videoFile.size ? E2({ code: k2.MSG_F_IS_EMPTY }) : -1 === Bo.indexOf(e3.file.videoFile.type) ? E2({ code: k2.MSG_V_TYPES_LIMIT }) : (this._setUploadFileType(2), v2 || ye2 ? this.handleVideoUpload(y2(y2({}, e3), {}, { file: e3.file.videoFile })) : Ce2 ? this.handleVideoUpload(e3) : void 0);
      } }, { key: "handleVideoUpload", value: function(n3) {
        var o3 = this;
        return new Promise(function(t3, e3) {
          o3.uploadByCOS(n3).then(function(e4) {
            t3(e4);
          }).catch(function() {
            o3.uploadByCOS(n3).then(function(e4) {
              t3(e4);
            }).catch(function() {
              e3(new L2({ code: k2.MSG_V_UPLOAD_FAIL }));
            });
          });
        });
      } }, { key: "doUploadAudio", value: function(e3) {
        return e3.file ? e3.file.size > this.UPLOAD_SIZE_LIMIT.A ? this._checkSizeError("A") : 0 === e3.file.size ? E2({ code: k2.MSG_F_IS_EMPTY }) : (this._setUploadFileType(3), this.uploadByCOS(e3)) : E2({ code: k2.MSG_A_UPLOAD_FAIL });
      } }, { key: "uploadByCOS", value: function(t3) {
        var c3, u3, l3, d3, p3 = this;
        return dt2(this._cosUploadMethod) ? this.timUploadPlugin ? this._uploadWithPreSigUrl(t3) : (c3 = new P2("upload"), u3 = "".concat(this._n, ".uploadByCOS"), l3 = Date.now(), d3 = this._getFile(t3), new Promise(function(a3, s3) {
          var e3 = v2 ? p3._createCosOptionsWXMiniApp(t3) : p3._createCosOptionsWeb(t3), r3 = p3;
          p3._cosUploadMethod(e3, function(e4, t4) {
            var n3, o3, i3 = /* @__PURE__ */ Object.create(null);
            t4 ? e4 || O2(t4.files) && t4.files[0].error ? (n3 = new L2({ code: k2.MSG_F_UPLOAD_FAIL }), c3.setError(n3).end(), M2.l("".concat(u3, " failed. error:"), t4.files[0].error), 403 === t4.files[0].error.statusCode && p3._getAuthorizationKey(), s3(n3)) : (i3.fileName = d3.name, i3.fileSize = d3.size, i3.fileType = d3.type.slice(d3.type.indexOf("/") + 1).toLowerCase(), i3.location = (v2 ? t4 : t4.files[0].data).Location, n3 = Date.now() - l3, t4 = r3._formatFileSize(d3.size), o3 = r3._formatSpeed(1e3 * d3.size / n3), t4 = "size:".concat(t4, " time:").concat(n3, "ms speed:").concat(o3), M2.l("".concat(u3, " success. name:").concat(d3.name, " ").concat(t4)), a3(i3), (o3 = p3.get(26)).addCost(Zn, n3), o3.addFileSize(Zn, d3.size), c3.setMessage(t4).end()) : (i3 = new L2({ code: k2.MSG_F_UPLOAD_FAIL }), c3.setError(i3).end(), M2.w("".concat(u3, " failed. error:"), e4), 403 === e4.statusCode && p3._getAuthorizationKey(), s3(i3));
          });
        })) : (this.warn("PluginUndetected"), E2({ code: k2.COS_UNDETECTED }));
      } }, { key: "_uploadWithPreSigUrl", value: function(e3) {
        var p3 = this, _3 = "".concat(this._n, "._uploadWithPreSigUrl"), h3 = this._getFile(e3);
        return this._createCosOptionsPreSigUrl(e3).then(function(d3) {
          return new Promise(function(a3, s3) {
            var r3 = new P2("upload"), e4 = d3.requestSnapshotUrl, c3 = void 0 === e4 ? void 0 : e4, u3 = W2(d3, qi), l3 = Date.now();
            p3._cosUploadMethod(u3, function(e5, t3) {
              if (e5 || 403 === t3.statusCode)
                r3.setError(new L2(e5)).end(), o3 = { HttpStatusCode: 9999, CostTime: an(l3, false), error: e5, url: d3.url }, t3.data && t3.data.uploadIP && (o3.uploadIP = t3.data.uploadIP), p3._uploadSSOLog(o3), M2.l("".concat(_3, " failed, error:"), e5), s3(new L2({ code: k2.MSG_F_UPLOAD_FAIL }));
              else {
                var n3 = /* @__PURE__ */ Object.create(null), o3 = t3.data.location || "", e5 = (p3.isPrivateNetWork() || 0 !== o3.indexOf("https://") && 0 !== o3.indexOf("http://") || (o3 = o3.split("//")[1]), n3.fileName = h3.name, n3.fileSize = h3.size, n3.fileType = h3.type.slice(h3.type.indexOf("/") + 1).toLowerCase(), n3.location = o3, an(l3, false)), o3 = p3._formatFileSize(h3.size), i3 = p3._formatSpeed(1e3 * h3.size / e5), o3 = "size:".concat(o3, " time:").concat(e5, "ms speed:").concat(i3, " res:").concat(JSON.stringify(t3.data)), i3 = (M2.l("".concat(_3, " ok. name:").concat(h3.name, " ").concat(o3)), r3.setMessage(o3).end(), { HttpStatusCode: t3.statusCode, FileSize: h3.size, CostTime: e5, url: d3.url }), o3 = (t3.data && t3.data.uploadIP && (i3.uploadIP = t3.data.uploadIP), p3._uploadSSOLog(i3), p3.get(26)), i3 = (o3.addCost(Zn, e5), o3.addFileSize(Zn, h3.size), []);
                if (u3.thumbUrl && u3.largeUrl && i3.push.apply(i3, [p3._getSmallImageInfoByUrl(u3.thumbUrl, n3), p3._getLargeImageInfoByUrl(u3.largeUrl, n3)]), 1 === p3.uploadFileType && p3.isSimpleCos && !p3.isPrivateNetWork() && (i3.push(p3._getImageInfoArray(u3.downloadUrl, n3)), t3.data.uploadIP) && i3.push(p3._getDownloadIP(u3.downloadUrl.split("//")[1].split("/")[0], n3)), c3 && i3.push(p3._getSnapshotInfoByUrl(c3, n3)), 0 < i3.length)
                  return Promise.all(i3).then(function() {
                    a3(n3);
                  });
                a3(n3);
              }
            });
          });
        });
      } }, { key: "_getDownloadIP", value: function(e3, n3) {
        var o3 = "".concat(this._n, "._getDownloadIP"), i3 = Date.now();
        return this.req({ P: G2.GET_IP, data: { domainName: e3 } }).then(function(e4) {
          var t3;
          e4.data && e4.data.ip && (M2.l("".concat(o3, " ok. downloadIP:").concat(e4.data.ip, " cost:").concat(an(i3))), (t3 = n3.location.split("/"))[0] = e4.data.ip, n3.location = t3.join("/"));
        }).catch(function(e4) {
        });
      } }, { key: "_getImageInfoArray", value: function(t3, n3) {
        var o3 = this, i3 = "".concat(this._n, "._getImageInfoArray"), a3 = Date.now();
        return this.req({ P: G2.GET_IMAGE_INFO, data: { imageUrl: t3 } }).then(function(e3) {
          e3 = e3.data || {};
          return M2.l("".concat(i3, " ok. data: ").concat(JSON.stringify(e3), " cost:").concat(an(a3))), n3.imageInfoArray = e3.imageInfoArray, e3;
        }).catch(function(e3) {
          n3.imageInfoArray = void 0, o3._uploadSSOLog({ HttpStatusCode: 1e4, CostTime: an(a3, false), url: t3 });
        });
      } }, { key: "_uploadSSOLog", value: function(e3) {
        var t3, n3;
        this.isSimpleCos && ((t3 = new P2()).setEventType(18), e3.error && t3.setError(new L2(e3.error)), n3 = "HttpStatusCode:".concat(e3.HttpStatusCode, "|CosRequestId:").concat(e3.CosRequestId || "", "|") + "FileAlreadyExist:".concat(e3.FileAlreadyExist || 0, "|FileSize:").concat(e3.FileSize || 0, "|CostTime:").concat(e3.CostTime), e3.uploadIP && (n3 += "|FinalIP:".concat(e3.uploadIP)), t3.setMessage("OK").setMoreMessage(e3.url).setExtension(n3).end());
      } }, { key: "_getRawOrUploadProxyUrl", value: function(e3) {
        var t3 = this.get(12).getFileUploadProxy(), n3 = e3;
        return n3 = t3 ? e3.replace(/^https:\/\/[^/]+/, t3) : n3;
      } }, { key: "_getFile", value: function(e3) {
        return O2(e3.file.files) || pt2(e3.file.files) ? e3.file.files[0] : e3.file;
      } }, { key: "_formatFileSize", value: function(e3) {
        return e3 < 1024 ? e3 + "B" : e3 < 1048576 ? Math.floor(e3 / 1024) + "KB" : Math.floor(e3 / 1048576) + "MB";
      } }, { key: "_formatSpeed", value: function(e3) {
        return e3 <= 1048576 ? jt2(e3 / 1024, 1) + "KB/s" : jt2(e3 / 1048576, 1) + "MB/s";
      } }, { key: "_createCosOptionsWeb", value: function(t3) {
        var e3 = this._getFile(t3), n3 = e3.name, n3 = n3.slice(n3.lastIndexOf(".")), n3 = this._genFileName("".concat(mt2(999999)).concat(n3));
        return { files: [{ Bucket: "".concat(this.bucketName, "-").concat(this.appid), Region: this.region, Key: "".concat(this.directory, "/").concat(n3), Body: e3 }], SliceSize: 1048576, onProgress: function(e4) {
          if ("function" == typeof t3.onProgress)
            try {
              t3.onProgress(e4.percent);
            } catch (e5) {
              M2.w("onProgress callback error:", e5);
            }
        }, onFileFinish: function(e4, t4, n4) {
        } };
      } }, { key: "_createCosOptionsWXMiniApp", value: function(t3) {
        var e3 = this._getFile(t3), n3 = this._genFileName(e3.name), e3 = e3.url;
        return { Bucket: "".concat(this.bucketName, "-").concat(this.appid), Region: this.region, Key: "".concat(this.directory, "/").concat(n3), FilePath: e3, onProgress: function(e4) {
          if (M2.l(JSON.stringify(e4)), "function" == typeof t3.onProgress)
            try {
              t3.onProgress(e4.percent);
            } catch (e5) {
              M2.w("onProgress callback error:", e5);
            }
        } };
      } }, { key: "_createCosOptionsPreSigUrl", value: function(r3) {
        var e3, c3 = this, u3 = "", l3 = "", t3 = 0, n3 = this._getFile(r3), t3 = v2 || ye2 ? (u3 = r3.message.type === R2.MSG_FILE ? (e3 = (e3 = n3.name).slice(e3.lastIndexOf(".")), this._genFileName("".concat(mt2(999999)).concat(e3))) : this._genFileName(n3.name), l3 = n3.url, 1) : (e3 = (e3 = n3.name).slice(e3.lastIndexOf(".")), u3 = this._genFileName("".concat(mt2(999999)).concat(e3)), l3 = n3, 0);
        return this._getCosPreSigUrl({ fileType: this.uploadFileType, fileName: u3, uploadMethod: t3, duration: this.duration, userID: r3.message.from, conversationType: bt2(r3.message.conversationID) ? 1 : 2 }).then(function(e4) {
          var t4 = c3.isSimpleCos ? e4.preSig[0] : e4, n4 = t4.uploadUrl, o3 = t4.downloadUrl, i3 = t4.requestSnapshotUrl, i3 = void 0 === i3 ? void 0 : i3, a3 = t4.thumbUrl, s3 = t4.largeUrl, t4 = t4.fileKey, e4 = e4.uploadIP, e4 = void 0 === e4 ? "" : e4;
          return { url: c3._getRawOrUploadProxyUrl(n4), fileType: c3.uploadFileType, fileName: u3, resources: l3, downloadUrl: o3, requestSnapshotUrl: i3, thumbUrl: a3, largeUrl: s3, fileKey: t4, uploadIP: !c3.isPrivateNetWork() && e4, onProgress: function(e5) {
            if ("function" == typeof r3.onProgress)
              try {
                r3.onProgress(e5.percent);
              } catch (e6) {
                M2.w("onProgress callback error:", e6), M2.e(e6);
              }
          } };
        });
      } }, { key: "_genFileName", value: function(e3) {
        return "".concat(Vt2(), "-").concat(e3);
      } }, { key: "_setUploadFileType", value: function(e3) {
        this.uploadFileType = e3;
      } }, { key: "_getSnapshotInfoByUrl", value: function(e3, n3) {
        var o3 = this, i3 = "_getSnapshotInfoByUrl", a3 = new P2(i3);
        return this.req({ P: G2.VIDEO_COVER, data: { platform: this.getPlatform(), coverName: this._genFileName(mt2(99999)), requestSnapshotUrl: e3 } }).then(function(e4) {
          var t3, e4 = (e4.data || {}).snapshotUrl;
          return M2.l("".concat(o3._n, ".").concat(i3, " ok. snapshotUrl:").concat(e4)), a3.setMessage("snapshotUrl:".concat(e4)).end(), S2(e4) ? {} : xt2(t3 = co(e4, o3._fileDownloadProxy, o3._authKey, o3._fileDNList)).then(function(e5) {
            n3.snapshotInfo = { snapshotUrl: t3, snapshotWidth: e5.width, snapshotHeight: e5.height };
          });
        }).catch(function(e4) {
          return M2.w("".concat(o3._n, ".").concat(i3, " failed. error:"), e4), a3.setCode(e4.errorCode).setMessage(e4.errorInfo).end(), {};
        });
      } }, { key: "_getSmallImageInfoByUrl", value: function(t3, n3) {
        return xt2(co(t3, this._fileDownloadProxy, this._authKey, this._fileDNList)).then(function(e3) {
          n3.smallImageUrl = t3, n3.smallImageWidth = e3.width, n3.smallImageHeight = e3.height;
        });
      } }, { key: "_getLargeImageInfoByUrl", value: function(t3, n3) {
        return xt2(co(t3, this._fileDownloadProxy, this._authKey, this._fileDNList)).then(function(e3) {
          n3.largeImageUrl = t3, n3.largeImageWidth = e3.width, n3.largeImageHeight = e3.height;
        });
      } }, { key: "_isEmptyFileList", value: function(e3) {
        return !(!pt2(e3) || 0 !== e3.length);
      } }, { key: "reset", value: function() {
        M2.l("".concat(this._n, ".reset"));
      } }])), Vi = ["downloadKey", "pbDownloadKey", "messageList"], Bi = e2(function e3(t3) {
        p2(this, e3), this._n = "MergerMessageHandler", this._msgM = t3;
      }, [{ key: "uploadMergerMessage", value: function(e3, n3) {
        var o3 = "".concat(this._n, ".").concat("uploadMergerMessage"), e3 = (M2.d("".concat(o3, " message:"), e3, "messageBytes:".concat(n3)), JSON.parse(JSON.stringify(e3.payload)).messageList), i3 = e3.length, t3 = this._msgM.get(17).getFileDNList(), a3 = new P2("uploadMergerMessage");
        return e3.forEach(function(e4) {
          uo(e4.messageBody[0].type, e4.messageBody, t3);
        }), this._msgM.req({ P: G2.UPLOAD_MERGER_MSG, data: { messageList: e3 } }).then(function(e4) {
          M2.d("".concat(o3, " ok. response:"), e4.data);
          var e4 = e4.data, t4 = e4.pbDownloadKey, e4 = e4.downloadKey, t4 = { pbDownloadKey: t4, downloadKey: e4, messageNumber: i3 };
          return a3.setMessage("".concat(i3, "-").concat(n3, "-").concat(e4)).end(), t4;
        }).catch(function(e4) {
          throw M2.w("".concat(o3, " failed. error:"), e4), a3.setError(e4).end(), e4;
        });
      } }, { key: "downloadMergerMessage", value: function(i3) {
        var a3 = this, s3 = "".concat(this._n, ".").concat("downloadMergerMessage"), t3 = (M2.d("".concat(s3, " message:"), i3), i3.payload.downloadKey), r3 = this._msgM.getFileDownloadProxy(), c3 = this._msgM.getDownloadFileAuthKey(), u3 = new P2("downloadMergerMessage");
        return u3.setMessage("downloadKey:".concat(t3)), this._msgM.req({ P: G2.DOWNLOAD_MERGER_MSG, data: { downloadKey: t3 } }).then(function(e3) {
          M2.d("".concat(s3, " ok. response:"), e3.data);
          var t4, n3, o3 = a3._msgM.get(17).getFileDNList();
          return dt2(i3.clearElement) ? ((t4 = i3.payload).downloadKey, t4.pbDownloadKey, t4.messageList, t4 = W2(t4, Vi), i3.clearElement(), i3.setElement({ type: i3.type, content: y2({ messageList: e3.data.messageList }, t4) }, r3, c3, o3)) : (n3 = [], e3.data.messageList.forEach(function(e4) {
            S2(e4) || (e4 = new Do(e4, r3, c3, o3), n3.push(e4));
          }), i3.payload.messageList = n3, i3.payload.downloadKey = "", i3.payload.pbDownloadKey = ""), u3.end(), i3;
        }).catch(function(e3) {
          throw M2.w("".concat(s3, " failed. key:").concat(t3, " error:"), e3), u3.setError(e3).end(), e3;
        });
      } }, { key: "createMergerMessagePack", value: function(e3, t3, n3) {
        return e3.conversationType === R2.CONV_C2C ? this._createC2CMergerMessagePack(e3, t3, n3) : this._createGroupMergerMessagePack(e3, t3, n3);
      } }, { key: "_createC2CMergerMessagePack", value: function(e3, t3, n3) {
        var o3 = null, i3 = (t3 && (t3.offlinePushInfo && (o3 = t3.offlinePushInfo), true === t3.onlineUserOnly) && (o3 ? o3.disablePush = true : o3 = { disablePush: true }), []), a3 = (m2(t3) && m2(t3.messageControlInfo) && (a3 = (r3 = t3.messageControlInfo).excludedFromUnreadCount, s3 = r3.excludedFromLastMessage, r3 = r3.excludedFromContentModeration, true === a3 && i3.push("NoUnread"), true === s3 && i3.push("NoLastMsg"), true === r3) && i3.push("NoMsgCheck"), ""), s3 = (C2(e3.cloudCustomData) && 0 < e3.cloudCustomData.length && (a3 = e3.cloudCustomData), n3.pbDownloadKey), r3 = n3.downloadKey, n3 = n3.messageNumber, c3 = e3.payload, u3 = c3.title, l3 = c3.abstractList, c3 = c3.compatibleText, d3 = this._msgM.get(6), d3 = d3 && d3.isOnlineMessage(e3, t3) ? 0 : void 0;
        return { P: G2.SEND_C2C_MSG, data: { fromAccount: this._msgM.getMyUserID(), toAccount: e3.to, msgBody: [{ msgType: e3.type, msgContent: { pbDownloadKey: s3, downloadKey: r3, title: u3, abstractList: l3, compatibleText: c3, messageNumber: n3 } }], cloudCustomData: a3, clientTime: e3.clientTime, msgSeq: e3.sequence, msgRandom: e3.random, msgLifeTime: d3, offlinePushInfo: Go(o3), messageControlInfo: 0 !== d3 ? i3 : void 0, isSupportExtension: true === e3.isSupportExtension ? 1 : 0, isRelayMessage: true === e3._relayFlag ? 1 : 0 } };
      } }, { key: "_createGroupMergerMessagePack", value: function(e3, t3, n3) {
        var o3 = null, i3 = (t3 && t3.offlinePushInfo && (o3 = t3.offlinePushInfo), []), a3 = (m2(t3) && m2(t3.messageControlInfo) && (a3 = (r3 = t3.messageControlInfo).excludedFromUnreadCount, s3 = r3.excludedFromLastMessage, r3 = r3.excludedFromContentModeration, true === a3 && i3.push("NoUnread"), true === s3 && i3.push("NoLastMsg"), true === r3) && i3.push("NoMsgCheck"), ""), s3 = (C2(e3.cloudCustomData) && 0 < e3.cloudCustomData.length && (a3 = e3.cloudCustomData), n3.pbDownloadKey), r3 = n3.downloadKey, n3 = n3.messageNumber, c3 = e3.payload, u3 = c3.title, l3 = c3.abstractList, c3 = c3.compatibleText, d3 = this._msgM.get(7), t3 = d3 && d3.isOnlineMessage(e3, t3) ? 1 : 0;
        return { P: G2.SEND_GRP_MSG, data: { fromAccount: this._msgM.getMyUserID(), groupID: e3.to, msgBody: [{ msgType: e3.type, msgContent: { pbDownloadKey: s3, downloadKey: r3, title: u3, abstractList: l3, compatibleText: c3, messageNumber: n3 } }], random: e3.random, priority: e3.priority, clientSequence: e3.clientSequence, groupAtInfo: void 0, cloudCustomData: a3, onlineOnlyFlag: t3, offlinePushInfo: Go(o3), clientTime: e3.clientTime, needReadReceipt: true !== e3.needReadReceipt || d3.isMessageFromOrToAVChatroom(e3.to) ? 0 : 1, messageControlInfo: 0 == t3 ? i3 : void 0, isSupportExtension: true === e3.isSupportExtension ? 1 : 0, isRelayMessage: true === e3._relayFlag ? 1 : 0 } };
      } }]), Hi = { ERR_SVR_COMM_SENSITIVE_TEXT: 80001, ERR_SVR_COMM_BODY_SIZE_LIMIT: 80002, OPEN_SERVICE_OVERLOAD_ERROR: 60022, ERR_SVR_MSG_PKG_PARSE_FAILED: 20001, ERR_SVR_MSG_INTERNAL_AUTH_FAILED: 20002, ERR_SVR_MSG_INVALID_ID: 20003, ERR_SVR_MSG_PUSH_DENY: 20006, ERR_SVR_MSG_IN_PEER_BLACKLIST: 20007, ERR_SVR_MSG_BOTH_NOT_FRIEND: 20009, ERR_SVR_MSG_NOT_PEER_FRIEND: 20010, ERR_SVR_MSG_NOT_SELF_FRIEND: 20011, ERR_SVR_MSG_SHUTUP_DENY: 20012, ERR_SVR_GROUP_INVALID_PARAMETERS: 10004, ERR_SVR_GROUP_PERMISSION_DENY: 10007, ERR_SVR_GROUP_NOT_FOUND: 10010, ERR_SVR_GROUP_INVALID_GROUPID: 10015, ERR_SVR_GROUP_REJECT_FROM_THIRDPARTY: 10016, ERR_SVR_GROUP_SHUTUP_DENY: 10017, MSG_SEND_FAIL: 2100, OVER_FREQUENCY_LIMIT: 2996 }, Ki = [k2.MSG_ONPROGRESS_ERR, k2.MSG_I_SELECT_F_FIRST, k2.MSG_I_TYPES_LIMIT, k2.MSG_F_IS_EMPTY, k2.MSG_I_SIZE_LIMIT, k2.MSG_F_SELECT_F_FIRST, k2.MSG_F_SIZE_LIMIT, k2.MSG_V_SIZE_LIMIT, k2.MSG_V_TYPES_LIMIT, k2.MSG_A_UPLOAD_FAIL, k2.MSG_A_SIZE_LIMIT, k2.COS_UNDETECTED];
      function Wi(e3) {
        p2(this, Wi), (e3 = i2(this, Wi, [e3]))._n = "UploadModule", e3.TIMUploadPlugin = null, e3.timUploadPlugin = null, e3.COSSDK = null, e3._cosUploadMethod = null, e3.expiredTimeLimit = 600, e3.appid = 0, e3.bucketName = "", e3.ciUrl = "", e3.directory = "", e3.downloadUrl = "", e3.uploadUrl = "", e3.region = "ap-shanghai", e3.cos = null, e3.cosOptions = { secretId: "", secretKey: "", sessionToken: "", expiredTime: 0 }, e3.uploadFileType = "", e3.duration = 900, e3.tryCount = 0, e3.UPLOAD_SIZE_LIMIT = { A: 20971520, F: 104857600, I: 20971520, V: 104857600 }, e3.isSimpleCos = false, e3._fileDownloadProxy = "", e3._authKey = "", e3._fileDNList = Fi;
        var t3 = e3.getIEmitInst();
        return t3.on(U2.A2KEY_AND_TINYID_UPDATED, e3._init, e3), t3.on(U2.CLOUD_CONFIG, e3._onCloudConfig, e3), e3;
      }
      function Yi(e3) {
        var t3 = false;
        return Object.values(Hi).includes(e3) && (t3 = true), t3 = 120001 <= e3 && e3 <= 13e4 || 10100 <= e3 && e3 <= 10200 ? true : t3;
      }
      t2(aa, c2);
      var ji = e2(aa, [{ key: "createTextMessage", value: function(e3) {
        var t3 = this.getMyUserID(), n3 = (e3.currentUser = t3, e3.senderTinyID = this.getMyTinyID(), new So(e3)), e3 = C2(e3.payload) ? e3.payload : e3.payload.text, e3 = new ao({ text: e3 }), t3 = this._getNickAndAvatarByUserID(t3);
        return n3.setElement(e3), n3.setNickAndAvatar(t3), n3.setNameCard(this._getNameCardByGroupID(n3)), n3;
      } }, { key: "createImageMessage", value: function(e3) {
        var t3 = this.getMyUserID(), n3 = (e3.currentUser = t3, e3.senderTinyID = this.getMyTinyID(), new So(e3));
        if (v2) {
          var o3 = e3.payload.file;
          if (ct2(o3))
            return void this.warn("FileUnsupportedInMP", "createImageMessage");
          var i3 = o3.tempFiles[0].path || o3.tempFiles[0].tempFilePath, o3 = { url: i3, name: i3.slice(i3.lastIndexOf("/") + 1), size: o3.tempFiles && o3.tempFiles[0].size || 1, type: i3.slice(i3.lastIndexOf(".") + 1).toLowerCase() };
          e3.payload.file = o3;
        } else
          ye2 ? (o3 = { url: (i3 = e3.payload.file).uri, name: i3.fileName, size: i3.fileSize || 1, type: i3.type, width: i3.width, height: i3.height }, e3.payload.file = o3) : Ce2 && (ct2(e3.payload.file) ? (i3 = e3.payload.file, e3.payload.file = { files: [i3] }) : m2(e3.payload.file) && "undefined" != typeof uni && (o3 = e3.payload.file.tempFiles[0], e3.payload.file = { files: [o3] }));
        i3 = this.get(17).getFileDNList(), o3 = new _o({ imageFormat: Xe2.UNKNOWN, uuid: this._generateUUID(e3.payload.file), file: e3.payload.file }, this.getFileDownloadProxy(), this.getDownloadFileAuthKey(), i3), i3 = this._getNickAndAvatarByUserID(t3);
        return n3.setElement(o3), n3.setNickAndAvatar(i3), n3.setNameCard(this._getNameCardByGroupID(n3)), this._messageOptionsMap.set(n3.clientSequence, e3), n3;
      } }, { key: "createAudioMessage", value: function(e3) {
        var t3 = e3.payload.file, n3 = (v2 && (n3 = { url: t3.tempFilePath, name: t3.tempFilePath.slice(t3.tempFilePath.lastIndexOf("/") + 1), size: t3.fileSize, second: parseInt(t3.duration) / 1e3, type: t3.tempFilePath.slice(t3.tempFilePath.lastIndexOf(".") + 1).toLowerCase() }, e3.payload.file = n3), ye2 && (n3 = { url: t3.uri, name: t3.uri.slice(t3.uri.lastIndexOf("/") + 1), size: t3.fileSize || 1, second: Math.floor(t3.duration / 1e3), type: t3.uri.slice(t3.uri.lastIndexOf(".") + 1).toLowerCase() }, e3.payload.file = n3, S2(t3.uri)) && this.warn("VoiceFileInRN"), this.getMyUserID()), o3 = (e3.currentUser = n3, e3.senderTinyID = this.getMyTinyID(), this.get(17).getFileDNList()), i3 = new So(e3), t3 = new go({ second: Math.floor(t3.duration / 1e3), size: t3.fileSize || t3.size || 1, url: t3.tempFilePath || t3.uri, uuid: this._generateUUID(e3.payload.file) }, this.getFileDownloadProxy(), this.getDownloadFileAuthKey(), o3), o3 = this._getNickAndAvatarByUserID(n3);
        return i3.setElement(t3), i3.setNickAndAvatar(o3), i3.setNameCard(this._getNameCardByGroupID(i3)), this._messageOptionsMap.set(i3.clientSequence, e3), i3;
      } }, { key: "createVideoMessage", value: function(e3) {
        var t3 = this.getMyUserID(), n3 = (e3.currentUser = t3, e3.senderTinyID = this.getMyTinyID(), e3.payload.file.thumbUrl = "", e3.payload.file.thumbSize = 0, {});
        if (v2) {
          if (ve2)
            return void this.warn("VideoUnsupportedInAlipay");
          if (ct2(e3.payload.file))
            return void this.warn("FileUnsupportedInMP", "createVideoMessage");
          var o3 = e3.payload.file;
          O2(o3.tempFiles) && (o3 = o3.tempFiles[0]), n3.url = o3.tempFilePath, n3.name = o3.tempFilePath.slice(o3.tempFilePath.lastIndexOf("/") + 1), n3.size = o3.size || 1, n3.second = o3.duration || 0, n3.type = o3.tempFilePath.slice(o3.tempFilePath.lastIndexOf(".") + 1).toLowerCase();
        } else
          ye2 ? (o3 = e3.payload.file, n3.url = o3.uri, n3.name = o3.fileName, n3.size = o3.fileSize || 1, n3.second = o3.duration || 0, n3.type = o3.type.split("/")[1]) : Ce2 && (ct2(e3.payload.file) ? (o3 = e3.payload.file, e3.payload.file.files = [o3]) : m2(e3.payload.file) && "undefined" != typeof uni && (o3 = e3.payload.file.tempFile, e3.payload.file.files = [o3]), o3 = e3.payload.file, n3.url = window.URL.createObjectURL(o3.files[0]), n3.name = o3.files[0].name, n3.size = o3.files[0].size || 1, n3.second = o3.files[0].duration || 0, n3.type = o3.files[0].type.split("/")[1]);
        e3.payload.file.videoFile = n3;
        var o3 = this.get(17).getFileDNList(), i3 = new So(e3), n3 = new Co({ videoFormat: n3.type, videoSecond: jt2(n3.second, 0), videoSize: n3.size, remoteVideoUrl: "", videoUrl: n3.url, videoUUID: this._generateUUID(e3.payload.file.videoFile), thumbUUID: this._generateUUID(e3.payload.file.videoFile, "jpg"), thumbWidth: e3.payload.file.width || 200, thumbHeight: e3.payload.file.height || 200, thumbUrl: e3.payload.file.thumbUrl, thumbSize: e3.payload.file.thumbSize, thumbFormat: "jpg" }, this.getFileDownloadProxy(), this.getDownloadFileAuthKey(), o3), o3 = this._getNickAndAvatarByUserID(t3);
        return i3.setElement(n3), i3.setNickAndAvatar(o3), i3.setNameCard(this._getNameCardByGroupID(i3)), this._messageOptionsMap.set(i3.clientSequence, e3), i3;
      } }, { key: "createCustomMessage", value: function(e3) {
        var t3 = this.getMyUserID(), n3 = (e3.currentUser = t3, e3.senderTinyID = this.getMyTinyID(), new So(e3)), e3 = new yo({ data: e3.payload.data, description: e3.payload.description, extension: e3.payload.extension }), t3 = this._getNickAndAvatarByUserID(t3);
        return n3.setElement(e3), n3.setNickAndAvatar(t3), n3.setNameCard(this._getNameCardByGroupID(n3)), n3;
      } }, { key: "createFaceMessage", value: function(e3) {
        var t3 = this.getMyUserID(), n3 = (e3.currentUser = t3, e3.senderTinyID = this.getMyTinyID(), new So(e3)), e3 = new ho(e3.payload), t3 = this._getNickAndAvatarByUserID(t3);
        return n3.setElement(e3), n3.setNickAndAvatar(t3), n3.setNameCard(this._getNameCardByGroupID(n3)), n3;
      } }, { key: "createMergerMessage", value: function(e3) {
        var t3 = this.getMyUserID(), t3 = (e3.currentUser = t3, e3.senderTinyID = this.getMyTinyID(), this._getNickAndAvatarByUserID(t3)), n3 = new So(e3), e3 = new Eo(e3.payload);
        return n3.setElement(e3), n3.setNickAndAvatar(t3), n3.setNameCard(this._getNameCardByGroupID(n3)), n3.setRelayFlag(true), n3;
      } }, { key: "createForwardMessage", value: function(e3) {
        var t3, n3, o3 = e3.to, i3 = e3.conversationType, a3 = e3.priority, s3 = e3.payload, r3 = e3.needReadReceipt, c3 = e3.receiverList;
        return O2(s3._elements) ? (t3 = this.getMyUserID(), n3 = this._getNickAndAvatarByUserID(t3), s3.type === R2.MSG_GRP_TIP ? E2({ code: k2.MSG_FORWARD_TYPE_INVALID }) : (i3 = { to: o3, conversationType: i3, conversationID: "".concat(i3).concat(o3), priority: a3, isPlaceMessage: 0, status: Gn, currentUser: t3, senderTinyID: this.getMyTinyID(), cloudCustomData: e3.cloudCustomData || s3.cloudCustomData || "", needReadReceipt: r3, receiverList: c3, isSupportExtension: e3.isSupportExtension || false }, (o3 = new So(i3)).setElement(s3._elements[0]), o3.setNickAndAvatar(n3), o3.setNameCard(this._getNameCardByGroupID(s3)), o3.setRelayFlag(true), o3)) : E2({ code: k2.MSG_FORWARD_INVALID_ELEMENTS });
      } }, { key: "downloadMergerMessage", value: function(e3) {
        return this._mergerMessageHandler.downloadMergerMessage(e3);
      } }, { key: "createFileMessage", value: function(e3) {
        if (v2) {
          if (!_e2 && !ge2 && !Ie2)
            return;
          var t3 = I2.getSystemInfoSync().SDKVersion;
          if (_e2 && Ht2(t3, "2.5.0") < 0)
            return void this.warn("WXChooseMessageFile");
          if (ge2 && Ht2(t3, "1.18.0") < 0)
            return void this.warn("QQChooseMessageFile");
        }
        Ce2 || Ie2 ? ct2(e3.payload.file) ? (t3 = e3.payload.file, e3.payload.file = { files: [t3] }) : m2(e3.payload.file) && "undefined" != typeof uni && (o3 = (t3 = e3.payload.file).tempFiles, t3 = t3.files, n3 = null, O2(o3) ? n3 = o3[0] : O2(t3) && (n3 = t3[0]), e3.payload.file = { files: [n3] }) : _e2 || ge2 ? (t3 = y2(y2({}, (o3 = e3.payload.file.tempFiles)[0]), {}, { url: o3[0].path }), e3.payload.file = { files: [t3] }) : ye2 && (o3 = y2(y2({}, n3 = e3.payload.file), {}, { url: n3.uri }), e3.payload.file = { files: [o3] });
        var t3 = this.getMyUserID(), n3 = (e3.currentUser = t3, e3.senderTinyID = this.getMyTinyID(), new So(e3)), o3 = new Mo({ uuid: this._generateUUID(e3.payload.file), file: e3.payload.file }), t3 = this._getNickAndAvatarByUserID(t3);
        return n3.setElement(o3), n3.setNickAndAvatar(t3), n3.setNameCard(this._getNameCardByGroupID(n3)), this._messageOptionsMap.set(n3.clientSequence, e3), n3;
      } }, { key: "createLocationMessage", value: function(e3) {
        var t3 = this.getMyUserID(), n3 = (e3.currentUser = t3, e3.senderTinyID = this.getMyTinyID(), new So(e3)), e3 = new To(e3.payload), t3 = this._getNickAndAvatarByUserID(t3);
        return n3.setElement(e3), n3.setNickAndAvatar(t3), n3.setNameCard(this._getNameCardByGroupID(n3)), n3;
      } }, { key: "_onNoModule", value: function() {
        return E2({ code: k2.NO_MODULE });
      } }, { key: "sendMessageInstance", value: function(i3, a3) {
        var s3 = this;
        if (false === this.get(29).filterMessage(i3, a3))
          return i3.hasRiskContent = true, this._onSendMessageFailed(i3, new L2({ code: k2.PROFANITY_FOUND }));
        var r3, c3, u3, l3, t3 = null;
        if (i3.conversationType === R2.CONV_C2C)
          t3 = this.get(6);
        else {
          if (i3.conversationType !== R2.CONV_GROUP)
            return E2({ code: k2.MSG_INVALID_CONV_TYPE });
          t3 = this.get(7);
        }
        return t3 ? (c3 = "".concat(this._n, ".sendMessageInstance"), u3 = this.get(11), l3 = t3.isOnlineMessage(i3, a3), this.get(17).upload(i3).then(function() {
          return s3._getSendMessageSpecifiedKey(i3) === Xn && s3.get(26).addSuccessCount(Zn), s3._guardForGroup(i3).then(function() {
            if (!i3.isSendable())
              return E2({ code: k2.MSG_F_URL_IS_EMPTY });
            s3._addSendMessageTotalCount(i3), r3 = Date.now();
            var e3 = function(e4) {
              var t4 = "utf-8";
              Ce2 && document && (t4 = document.charset.toLowerCase());
              var n3, o3 = 0, i4 = e4.length;
              if ("utf-8" === t4 || "utf8" === t4)
                for (var a4 = 0; a4 < i4; a4++)
                  (n3 = e4.codePointAt(a4)) <= 127 ? o3 += 1 : n3 <= 2047 ? o3 += 2 : n3 <= 65535 ? o3 += 3 : (o3 += 4, a4++);
              else if ("utf-16" === t4 || "utf16" === t4)
                for (var s4 = 0; s4 < i4; s4++)
                  (n3 = e4.codePointAt(s4)) <= 65535 ? o3 += 2 : (o3 += 4, s4++);
              else
                o3 = e4.replace(/[^\x00-\xff]/g, "aa").length;
              return o3;
            }(JSON.stringify(i3));
            return i3.type === R2.MSG_MERGER && 11264 < e3 ? s3._mergerMessageHandler.uploadMergerMessage(i3, e3).then(function(e4) {
              e4 = s3._mergerMessageHandler.createMergerMessagePack(i3, a3, e4);
              return s3.req(e4);
            }) : (u3.setMessageRandom(i3), t3.sendMessage(i3, a3));
          }).then(function(e3) {
            var e3 = e3.data, t4 = e3.time, n3 = e3.sequence, o3 = e3.readReceiptCode, e3 = e3.messageDropReason, e3 = (A2(o3) && 0 !== o3 && (new P2("sendMessageWithReceipt").setMessage("from:".concat(i3.from, " to:").concat(i3.to, " sequence:").concat(n3, " readReceiptCode:").concat(o3)).end(), M2.w("".concat(c3, " readReceiptCode:").concat(o3, " message:").concat(s3.getErrMsg(o3)))), e3 && (o3 = new P2("messageDropReason"), e3 = "from:".concat(i3.from, " to:").concat(i3.to, " sequence:").concat(n3, " messageDropReason:").concat(e3), o3.setMessage(e3).end(), M2.w("".concat(c3, " ").concat(e3))), s3._addSendMessageSuccessCount(i3, r3), s3._messageOptionsMap.delete(i3.clientSequence), true === i3.isResend && (o3 = u3.findMessage(i3.ID)) && (M2.l("".concat(c3, " resend ok. ID:").concat(o3.ID)), u3.deleteLocalMessage(o3)), i3.status = Pn, i3.time = t4, false);
            return i3.conversationType === R2.CONV_GROUP ? i3.sequence = n3 : i3.conversationType === R2.CONV_C2C && (o3 = u3.getLatestMessageSentByMe(i3.conversationID)) && (t4 = o3.nick, n3 = o3.avatar, t4 === i3.nick && n3 === i3.avatar || (e3 = true)), e3 && u3.modifyMessageSentByMe({ conversationID: i3.conversationID, latestNick: i3.nick, latestAvatar: i3.avatar }), true === l3 ? i3._onlineOnlyFlag = true : (u3.appendToMessageList(i3), o3 = i3, m2(a3) && m2(a3.messageControlInfo) && (true === a3.messageControlInfo.excludedFromLastMessage && (i3._isExcludedFromLastMessage = true, o3 = ""), true === a3.messageControlInfo.excludedFromUnreadCount) && (i3._isExcludedFromUnreadCount = true), t4 = i3.conversationType, Ut2(i3.to) && (t4 = R2.CONV_TOPIC, s3.get(10).onMessageSent({ groupID: Xt2(i3.to), topicID: i3.to, lastMessage: o3 })), u3.onMessageSent({ conversationOptionsList: [{ conversationID: i3.conversationID, unreadCount: 0, type: t4, subType: i3.conversationSubType, lastMessage: o3 }] })), i3._relayFlag || "TIMImageElem" !== i3.type || Wt2(i3.payload.imageInfoArray), T2({ message: i3 });
          });
        }).catch(function(e3) {
          return s3._onSendMessageFailed(i3, e3, l3);
        })) : this._onNoModule();
      } }, { key: "_guardForGroup", value: function(e3) {
        if (e3.conversationType !== R2.CONV_GROUP)
          return Promise.resolve();
        var t3 = this.get(7);
        if (!t3)
          return this._onNoModule();
        if (Pt2({ groupID: e3.to })) {
          var n3 = t3.getLocalGroupProfile(e3.to);
          if (n3 && n3.isSupportTopic)
            return E2({ code: k2.MSG_SEND_GRP_WITH_TOPIC_FAIL });
        }
        return t3.guardForAVChatRoom(e3);
      } }, { key: "_onSendMessageFailed", value: function(e3, t3) {
        var n3 = 2 < arguments.length && void 0 !== arguments[2] && arguments[2], o3 = "".concat(this._n, "._onSendMessageFailed"), i3 = (e3.status = Un, 80001 !== t3.code && 80004 !== t3.code || (e3.hasRiskContent = true), this.get(11)), a3 = (i3.deleteMessageRandom(e3), 10100 <= t3.code && t3.code <= 10200 || 120001 <= t3.code && t3.code <= 13e4), n3 = (n3 || a3 || true === i3.appendToMessageList(e3) && M2.l("".concat(o3, " message stored, ID:").concat(e3.ID)), this._addSendMessageFailCountOnUser(e3, t3), new P2("sendMessage")), a3 = "head.seq:".concat(t3.data.headSeq, " type:").concat(e3.type, " from:").concat(e3.from, " to:").concat(e3.to);
        return Ce2 && ("connection" in navigator && (i3 = navigator.connection, a3 += " downlink:".concat(i3.downlink, " effectiveType:").concat(i3.effectiveType, " rtt:").concat(i3.rtt)), "memory" in window.performance) && (i3 = window.performance.memory, a3 += " usedJSHeapSize:".concat(i3.usedJSHeapSize, " totalJSHeapSize:").concat(i3.totalJSHeapSize, " jsHeapSizeLimit:").concat(i3.jsHeapSizeLimit)), n3.setMessage(a3).setError(t3).end(), M2.e("".concat(o3, " ").concat(a3, " error:"), t3), E2(new L2({ code: t3 && t3.code ? t3.code : k2.MSG_SEND_FAIL, message: t3 && t3.message ? t3.message : void 0, data: { message: e3 } }));
      } }, { key: "_getSendMessageSpecifiedKey", value: function(e3) {
        if ([R2.MSG_IMAGE, R2.MSG_AUDIO, R2.MSG_VIDEO, R2.MSG_FILE].includes(e3.type))
          return Xn;
        if (e3.conversationType === R2.CONV_C2C)
          return jn;
        if (e3.conversationType === R2.CONV_GROUP) {
          var t3 = this.get(7);
          if (t3) {
            t3 = t3.getLocalGroupProfile(e3.to);
            if (t3)
              return e3 = t3.type, Gt2(e3) ? zn : Jn;
          }
        }
      } }, { key: "_addSendMessageTotalCount", value: function(e3) {
        e3 = this._getSendMessageSpecifiedKey(e3);
        e3 && this.get(26).addTotalCount(e3);
      } }, { key: "_addSendMessageSuccessCount", value: function(e3, t3) {
        var n3, e3 = this._getSendMessageSpecifiedKey(e3);
        e3 && ((n3 = this.get(26)).addSuccessCount(e3), n3.addCost(e3, an(t3, false)));
      } }, { key: "_addSendMessageFailCountOnUser", value: function(e3, t3) {
        var n3, t3 = t3.code, t3 = void 0 === t3 ? -1 : t3, o3 = this.get(26), e3 = this._getSendMessageSpecifiedKey(e3);
        e3 === Xn && (n3 = false, n3 = Ki.includes(t3) ? true : n3) ? o3.addFailedCountOfUserSide(Zn) : Yi(t3) && e3 && o3.addFailedCountOfUserSide(e3);
      } }, { key: "resendMessage", value: function(e3, t3) {
        return e3.isResend = true, e3.status = Gn, this.sendMessageInstance(e3, t3);
      } }, { key: "revokeMessage", value: function(n3) {
        var o3, i3, t3 = this, e3 = null;
        return n3.conversationType === R2.CONV_C2C ? e3 = this.get(6) : n3.conversationType === R2.CONV_GROUP && (e3 = this.get(7)), e3 ? ((o3 = new P2("revokeMessage")).setMessage("type:".concat(n3.type, " from:").concat(n3.from, " to:").concat(n3.to)), i3 = "".concat(this._n, ".").concat("revokeMessage"), e3.revokeMessage(n3).then(function(e4) {
          var e4 = e4.data.recallRetList;
          return S2(e4) || 0 === e4[0].retCode ? (M2.i("".concat(i3, " ok. ID:").concat(n3.ID)), n3.isRevoked = true, o3.end(), t3.get(11).onMessageRevoked([n3]), T2({ message: n3 })) : (e4 = new L2({ code: e4[0].retCode, data: { message: n3 } }), o3.setCode(e4.code).setMoreMessage(e4.message).end(), E2(e4));
        }).catch(function(e4) {
          o3.setError(e4).end();
          var t4 = new L2({ code: e4 && e4.code ? e4.code : k2.MSG_REVOKE_FAIL, message: e4 && e4.message ? e4.message : void 0, data: { message: n3 } });
          return M2.w("".concat(i3, " failed. error:"), e4), E2(t4);
        })) : this._onNoModule();
      } }, { key: "deleteMessage", value: function(e3) {
        var t3 = this, n3 = null, o3 = e3[0], i3 = o3.conversationID, a3 = "", s3 = [], r3 = [];
        if (o3.conversationType === R2.CONV_C2C)
          n3 = this.get(6), a3 = i3.replace(R2.CONV_C2C, ""), e3.forEach(function(e4) {
            e4 && e4.status === Pn && e4.conversationID === i3 && (e4._onlineOnlyFlag || s3.push("".concat(e4.sequence, "_").concat(e4.random, "_").concat(e4.time)), r3.push(e4));
          });
        else if (o3.conversationType === R2.CONV_GROUP)
          n3 = this.get(7), a3 = i3.replace(R2.CONV_GROUP, ""), e3.forEach(function(e4) {
            e4 && e4.status === Pn && e4.conversationID === i3 && (e4._onlineOnlyFlag || s3.push("".concat(e4.sequence)), r3.push(e4));
          });
        else if (o3.conversationType === R2.CONV_SYSTEM)
          return E2({ code: k2.CANNOT_DELETE_GRP_SYSTEM_NOTICE });
        if (!n3)
          return this._onNoModule();
        if (0 === s3.length)
          return this._onMessageDeleted(r3);
        30 < s3.length && (s3 = s3.slice(0, 30), r3 = r3.slice(0, 30));
        var c3 = new P2("deleteMessage"), u3 = (c3.setMessage("to:".concat(a3, " count:").concat(s3.length)), "".concat(this._n, ".").concat("deleteMessage"));
        return n3.deleteMessage({ to: a3, keyList: s3 }).then(function(e4) {
          return c3.end(), M2.i("".concat(u3, " ok")), t3._onMessageDeleted(r3);
        }).catch(function(e4) {
          c3.setError(e4).end(), M2.w("".concat(u3, " failed. error:"), e4);
          e4 = new L2({ code: e4 && e4.code ? e4.code : k2.MSG_DELETE_FAIL, message: e4 && e4.message ? e4.message : void 0 });
          return E2(e4);
        });
      } }, { key: "_onMessageDeleted", value: function(e3) {
        return this.get(11).onMessageDeleted(e3), D2({ messageList: e3 });
      } }, { key: "translateText", value: function(e3) {
        var o3 = "".concat(this._n, ".").concat("translateText"), t3 = e3.sourceTextList, n3 = e3.sourceLanguage, e3 = e3.targetLanguage, i3 = new P2("translateText");
        return i3.setMessage("sourceLanguage:".concat(n3, " targetLanguage:").concat(e3)), this.req({ P: G2.TRANSLATE_TEXT, data: { sourceTextList: t3, source: n3 || "auto", target: e3, from: this.getMyTinyID(), SDKAppID: this.getSDKAppID() } }).then(function(e4) {
          var e4 = e4.data, t4 = e4.error, n4 = e4.requestID, e4 = e4.translatedTextList;
          if (0 === t4.code)
            return i3.end(), M2.i("".concat(o3, " ok. requestID:").concat(n4)), T2({ translatedTextList: e4 });
          throw y2(y2({}, t4), {}, { requestID: n4 });
        }).catch(function(e4) {
          return i3.setCode(e4.code).setMoreMessage(e4.requestID).end(), M2.w("".concat(o3, " failed. error:"), e4), E2({ code: e4.code || k2.TRANSLATE_TEXT_FAIL, message: e4.message });
        });
      } }, { key: "convertVoiceToText", value: function(e3) {
        var t3, o3, i3, n3 = e3.message, e3 = e3.language, a3 = n3.payload.url, n3 = (n3.from === this.getMyUserID() && "out" === n3.flow && (a3 = n3.payload.remoteAudioUrl), /\.(wav|pcm|ogg-opus|speex|silk|mp3|m4a|aac|amr)/);
        return n3.test(a3) ? (n3 = n3.exec(a3)[1] || "mp3", t3 = "16k_zh-PY", e3 ? "zh (cmn-Hans-CN)" === e3 ? t3 = "16k_zh" : "en-US" === e3 ? t3 = "16k_en" : "yue-Hant-HK" === e3 ? t3 = "16k_yue" : "ja-JP" === e3 && (t3 = "16k_ja") : t3 = "16k_zh-PY", e3 = "serviceType:".concat(t3, " url:").concat(a3), o3 = "".concat(this._n, ".").concat("convertVoiceToText"), M2.i("".concat(o3, " ").concat(e3)), (i3 = new P2("convertVoiceToText")).setMessage(e3), this.req({ P: G2.VOICE_TO_TEXT, data: { url: a3, language: t3, SDKAppID: this.getSDKAppID(), format: n3 } }).then(function(e4) {
          var e4 = e4.data, t4 = e4.error, n4 = e4.requestID, e4 = e4.result;
          if (0 === t4.code)
            return i3.end(), M2.i("".concat(o3, " ok. requestID:").concat(n4)), T2({ result: e4 });
          throw y2(y2({}, t4), {}, { requestID: n4 });
        }).catch(function(e4) {
          return i3.setCode(e4.code).setMoreMessage(e4.requestID || "").end(), M2.w("".concat(o3, " failed. error:"), e4), E2({ code: k2.VOICE_TO_TEXT_FAIL });
        })) : E2({ code: k2.UNSUPPORTED_VOICE_FORMAT });
      } }, { key: "modifyRemoteMessage", value: function(n3) {
        var o3 = this;
        if (false === this.get(29).filterMessage(n3))
          return n3.hasRiskContent = true, E2({ code: k2.PROFANITY_FOUND, data: { message: n3 } });
        var e3 = null, t3 = n3.conversationType, i3 = n3.to;
        if (t3 === R2.CONV_C2C)
          e3 = this.get(6);
        else if (t3 === R2.CONV_GROUP) {
          if (!(e3 = this.get(7)))
            return this._onNoModule();
          if (e3.isMessageFromOrToAVChatroom(i3))
            return E2({ code: k2.MSG_MODIFY_DISABLED_IN_AV, data: { message: n3 } });
        }
        var a3 = new P2("modifyMessage"), s3 = (a3.setMessage("to:".concat(i3)), "".concat(this._n, ".modifyRemoteMessage"));
        return e3.modifyRemoteMessage(n3).then(function(e4) {
          a3.end(), M2.i("".concat(s3, " ok"));
          e4 = o3._onModifyRemoteMessageResp(n3, e4.data);
          return T2({ message: e4 });
        }).catch(function(e4) {
          var t4;
          return a3.setCode(e4.code).setMoreMessage(e4.message).end(), M2.w("".concat(s3, " failed. error:"), e4), 20027 === e4.code ? (t4 = o3._onModifyRemoteMessageResp(n3, e4.data), E2({ code: k2.MSG_MODIFY_CONFLICT, data: { message: t4 } })) : E2({ code: e4.code, message: e4.message, data: { message: n3 } });
        });
      } }, { key: "_onModifyRemoteMessageResp", value: function(e3, t3) {
        M2.d("".concat(this._n, "._onModifyRemoteMessageResp options:"), t3);
        var n3 = e3.conversationType, o3 = e3.from, i3 = e3.to, a3 = e3.random, s3 = e3.sequence, e3 = e3.time, r3 = t3.elements, c3 = t3.messageVersion, t3 = t3.cloudCustomData, t3 = void 0 === t3 ? "" : t3;
        return this.get(11).onMessageModified({ conversationType: n3, from: o3, to: i3, time: e3, random: a3, sequence: s3, elements: r3, cloudCustomData: t3, messageVersion: c3 });
      } }, { key: "_generateUUID", value: function(e3, t3) {
        var n3 = this.get(12), n3 = "".concat(n3.getSDKAppID(), "-").concat(n3.getUserID(), "-").concat(vt2());
        return t3 ? "".concat(n3, ".").concat(t3) : (e3 = (t3 = e3.name || e3.value || e3.url || e3.tempFilePath) && t3.slice(t3.lastIndexOf(".") + 1)) ? "".concat(n3, ".").concat(e3) : n3;
      } }, { key: "getMessageOption", value: function(e3) {
        return this._messageOptionsMap.get(e3);
      } }, { key: "_getNickAndAvatarByUserID", value: function(e3) {
        return this.get(4).getNickAndAvatarByUserID(e3);
      } }, { key: "_getNameCardByGroupID", value: function(e3) {
        if (e3.conversationType === R2.CONV_GROUP) {
          var t3 = this.get(7);
          if (t3)
            return t3.getMyNameCardByGroupID(e3.to);
        }
        return "";
      } }, { key: "reset", value: function() {
        M2.l("".concat(this._n, ".reset")), this._messageOptionsMap.clear();
      } }]), Ji = (t2(ia, c2), e2(ia, [{ key: "onMsgExtNotify", value: function(e3) {
        var o3 = this, e3 = e3.dataList, t3 = e3.messageInfo, i3 = e3.operateType, n3 = e3.operateResultList, a3 = e3.tinyID, e3 = e3.globalSequence, s3 = t3.clientTime, t3 = t3.random, r3 = "".concat(a3, "-").concat(s3, "-").concat(t3), c3 = [], u3 = [], l3 = (M2.l("".concat(this._n, ".onMsgExtNotify messageID:").concat(r3, " operateType:").concat(i3, " globalSequence:").concat(e3)), this._updateGlobalSeq(r3, e3), false), d3 = false;
        n3.forEach(function(e4) {
          var t4 = e4.extensions, t4 = void 0 === t4 ? [] : t4, n4 = e4.clearSequence;
          1 === i3 ? (l3 = true, t4.forEach(function(e5) {
            c3.push({ key: e5.key, value: e5.value });
          }), o3._updateLocalExt(r3, t4)) : 2 === i3 ? (d3 = true, t4.forEach(function(e5) {
            u3.push(e5.key);
          }), o3._updateLocalExt(r3, t4)) : 3 === i3 && (d3 = true, o3._hasLocalExt(r3) && o3._getLocalExt(r3).forEach(function(e5, t5) {
            e5.seq <= n4 && !S2(e5.value) && u3.push(t5);
          }), o3._clearLocalExt(r3, n4));
        }), l3 && this.emitOEvt(h2.MESSAGE_EXTENSIONS_UPDATED, { messageID: r3, extensions: c3 }), d3 && this.emitOEvt(h2.MESSAGE_EXTENSIONS_DELETED, { messageID: r3, keyList: u3 });
      } }, { key: "setMessageExtensions", value: function(e3, t3) {
        var o3, n3, i3, a3, s3, r3, c3, u3 = "setMessageExtensions";
        return this.canIUse(g2.MSG_EXT) ? (o3 = "".concat(this._n, ".").concat(u3), n3 = e3.ID, i3 = e3.conversationID, a3 = e3.sequence, s3 = e3.time, r3 = d2(t3), 20 < t3.length && (r3 = t3.slice(0, 20), M2.w("".concat(o3, ". the length of extensions cannot exceed 20."))), t3 = "convID:".concat(i3, " messageID:").concat(n3, " sequence:").concat(a3, " time:").concat(s3, " count:").concat(r3.length), (c3 = new P2(u3)).setMessage(t3), M2.l("".concat(o3, " ").concat(t3)), this._modifyMsgExts(e3, r3).then(function(e4) {
          var t4 = e4.resultList, n4 = e4.successCount, e4 = e4.failureCount, n4 = "successCount:".concat(n4, " failCount:").concat(e4);
          return c3.setMoreMessage(n4).end(), M2.l("".concat(o3, " ok. ").concat(n4)), T2({ extensions: t4 });
        }).catch(function(e4) {
          return c3.setError(e4).end(), M2.e("".concat(o3, " failed. error:"), e4), E2(e4);
        })) : this.noUse(u3);
      } }, { key: "getMessageExtensions", value: function(e3) {
        var t3, n3, o3, i3, a3, s3, r3, c3 = this, u3 = "getMessageExtensions";
        return this.canIUse(g2.MSG_EXT) ? (t3 = "".concat(this._n, ".").concat(u3), n3 = e3.ID, a3 = e3.conversationID, o3 = e3.sequence, i3 = e3.time, a3 = "convID:".concat(a3, " messageID:").concat(n3, " sequence:").concat(o3, " time:").concat(i3), (s3 = new P2(u3)).setMessage(a3), r3 = void M2.l("".concat(t3, " ").concat(a3)), this.getMsgExtsMap.has(n3) && (r3 = this._getGlobalSeq(n3)), this._getMsgExts(e3, r3).then(function(e4) {
          return s3.end(), M2.l("".concat(t3, " ok. extCount:").concat(e4.length)), N2(r3) && 0 < e4.length && c3.getMsgExtsMap.set(n3, 1), T2({ extensions: e4 });
        }).catch(function(e4) {
          return s3.setError(e4).end(), M2.e("".concat(t3, " failed. error:"), e4), E2(e4);
        })) : this.noUse(u3);
      } }, { key: "deleteMessageExtensions", value: function(e3, t3) {
        var i3, n3, a3, o3, s3, r3, c3, u3 = "deleteMessageExtensions";
        return this.canIUse(g2.MSG_EXT) ? (i3 = "".concat(this._n, ".").concat(u3), n3 = [], a3 = 3, S2(t3) || (a3 = 2, t3.forEach(function(e4) {
          n3.push({ key: e4, value: "", seq: 0 });
        })), t3 = e3.ID, r3 = e3.conversationID, o3 = e3.sequence, s3 = e3.time, r3 = "convID:".concat(r3, " messageID:").concat(t3, " sequence:").concat(o3, " time:").concat(s3, " operateType:").concat(a3), (c3 = new P2(u3)).setMessage(r3), M2.l("".concat(i3, " ").concat(r3)), this._modifyMsgExts(e3, n3, a3).then(function(e4) {
          var t4 = e4.resultList, n4 = e4.successCount, e4 = e4.failureCount, o4 = "";
          return 2 === a3 && (o4 = "success count:".concat(n4, " fail count:").concat(e4)), c3.setMoreMessage("".concat(o4)).end(), M2.l("".concat(i3, " ok. ").concat(o4)), T2({ extensions: t4 });
        }).catch(function(e4) {
          return c3.setError(e4).end(), M2.e("".concat(i3, " failed. error:"), e4), E2(e4);
        })) : this.noUse(u3);
      } }, { key: "_modifyMsgExts", value: function(n3, e3) {
        var o3 = this, t3 = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 1, i3 = Ut2(n3.to) ? R2.CONV_TOPIC : n3.conversationType, a3 = void 0, s3 = (3 !== t3 && (a3 = this._getReqExts(n3, e3)), null);
        switch (i3) {
          case R2.CONV_C2C:
            s3 = this.get(6);
            break;
          case R2.CONV_GROUP:
            s3 = this.get(7);
            break;
          case R2.CONV_TOPIC:
            s3 = this.get(10);
            break;
          default:
            return E2({ code: k2.NO_MODULE });
        }
        return s3.modifyMsgExts(n3, a3, t3).then(function(e4) {
          var e4 = e4.data, t4 = e4.extensions, e4 = e4.seq, i4 = [], a4 = 0, s4 = 0, r3 = [];
          return (t4 = S2(t4) ? [] : t4).forEach(function(e5) {
            var t5 = e5.errorCode, e5 = e5.extension, n4 = e5.key, o4 = e5.value, e5 = e5.seq;
            i4.push({ code: t5, key: n4, value: o4 }), 0 === t5 ? a4++ : s4++, r3.push({ key: n4, value: o4, seq: e5 });
          }), o3._updateGlobalSeq(n3.ID, e4), 0 < r3.length && (o3._updateLocalExt(n3.ID, r3), r3 = null), { resultList: i4, successCount: a4, failureCount: s4 };
        }).catch(function(e4) {
          return E2(e4);
        });
      } }, { key: "_getReqExts", value: function(e3, t3) {
        var o3, i3 = [];
        return this._hasLocalExt(e3.ID) ? (o3 = this._getLocalExt(e3.ID), t3.forEach(function(e4) {
          var t4 = e4.key, e4 = e4.value, n3 = 0;
          o3.has(t4) && (n3 = o3.get(t4).seq), i3.push({ key: t4, value: e4, seq: n3 });
        })) : t3.forEach(function(e4) {
          var t4 = e4.key, e4 = e4.value;
          i3.push({ key: t4, value: e4, seq: 0 });
        }), i3;
      } }, { key: "_getMsgExts", value: function(i3, e3) {
        var a3 = this, s3 = "".concat(this._n, "._getMsgExts"), r3 = i3.ID, t3 = i3.to, n3 = null;
        switch (Ut2(t3) ? R2.CONV_TOPIC : i3.conversationType) {
          case R2.CONV_C2C:
            n3 = this.get(6);
            break;
          case R2.CONV_GROUP:
            n3 = this.get(7);
            break;
          case R2.CONV_TOPIC:
            n3 = this.get(10);
            break;
          default:
            return E2({ code: k2.NO_MODULE });
        }
        return n3.getMessageExtensions(i3, e3).then(function(e4) {
          var e4 = e4.data, t4 = e4.extensions, n4 = e4.completeFlag, o3 = e4.globalSequence, e4 = e4.clearSequence, t4 = S2(t4) ? [] : t4;
          return M2.l("".concat(s3, " ok. completeFlag:").concat(n4, " globalSequence:").concat(o3, " clearSequence:").concat(e4, " count:").concat(t4.length)), a3._updateLocalExt(r3, t4), a3._clearLocalExt(r3, e4), a3._updateGlobalSeq(r3, o3), 1 !== n4 ? (e4 = t4.slice(-1)[0].seq + 1, a3._getMsgExts(i3, e4)) : a3._getLocalExtList(r3);
        }).catch(function(e4) {
          return E2(e4);
        });
      } }, { key: "_hasLocalExt", value: function(e3) {
        return this.msgExtMap.has(e3);
      } }, { key: "_getLocalExt", value: function(e3) {
        return this.msgExtMap.get(e3);
      } }, { key: "_updateLocalExt", value: function(e3, t3) {
        this._hasLocalExt(e3) || this.msgExtMap.set(e3, /* @__PURE__ */ new Map());
        var o3 = this._getLocalExt(e3);
        t3.forEach(function(e4) {
          var t4 = e4.key, n3 = e4.value, e4 = e4.seq;
          o3.set(t4, { value: void 0 === n3 ? "" : n3, seq: e4 });
        });
      } }, { key: "_clearLocalExt", value: function(e3, n3) {
        var o3;
        n3 <= 0 || !this._hasLocalExt(e3) || (o3 = this._getLocalExt(e3)).forEach(function(e4, t3) {
          e4.seq <= n3 && o3.delete(t3);
        });
      } }, { key: "_getLocalExtList", value: function(e3) {
        var n3 = [];
        return this._hasLocalExt(e3) && this._getLocalExt(e3).forEach(function(e4, t3) {
          e4 = e4.value;
          S2(e4) || n3.push({ key: t3, value: e4 });
        }), n3;
      } }, { key: "_getGlobalSeq", value: function(e3) {
        return this.globalSeqMap.get(e3);
      } }, { key: "_updateGlobalSeq", value: function(e3, t3) {
        this.globalSeqMap.set(e3, t3);
      } }, { key: "reset", value: function() {
        M2.l("".concat(this._n, ".reset")), this.msgExtMap.clear(), this.globalSeqMap.clear(), this.getMsgExtsMap.clear();
      } }])), zi = (t2(oa, c2), e2(oa, [{ key: "onReactionNotifyList", value: function(e3) {
        var a3 = this, e3 = (e3 || {}).dataList;
        (void 0 === e3 ? [] : e3).forEach(function(e4) {
          var t3 = e4.C2CMessageInfo, n3 = e4.groupMessageInfo, n3 = void 0 === n3 ? {} : n3, e4 = e4.reactionList, e4 = void 0 === e4 ? [] : e4, t3 = y2(y2({}, void 0 === t3 ? {} : t3), n3), n3 = t3.tinyID, o3 = t3.clientTime, t3 = t3.random, n3 = "".concat(n3, "-").concat(o3, "-").concat(t3), i3 = [];
          e4.forEach(function(e5) {
            N2(e5.userIDList) && (e5.userIDList = [], e5.count = 0), i3.push.apply(i3, d2(e5.userIDList));
          }), M2.l("".concat(a3._n, ".onReactionNotifyList messageID:").concat(n3, " reactionList:").concat(e4.length)), a3._handleReactionSummary([{ messageID: n3, reactionList: e4 }], i3).then(function(e5) {
            a3.emitOEvt(h2.MESSAGE_REACTIONS_UPDATED, y2({}, e5[0]));
          });
        });
      } }, { key: "onReactionNotify", value: function(e3) {
        var e3 = e3.dataList || {}, t3 = e3.C2CMessageInfo, n3 = e3.groupMessageInfo, n3 = void 0 === n3 ? {} : n3, o3 = e3.reactionID, e3 = e3.operateType, t3 = y2(y2({}, void 0 === t3 ? {} : t3), n3), n3 = t3.tinyID, i3 = t3.clientTime, t3 = t3.random, n3 = "".concat(n3, "-").concat(i3, "-").concat(t3), i3 = (M2.l("".concat(this._n, ".onReactionNotify messageID:").concat(n3, " reactionID:").concat(o3, " operateType:").concat(e3)), 1 === e3 ? this._addReactedByMyselfMap(n3, o3) : this._removeReactedByMyselfMap(n3, o3), "".concat(n3, "-").concat(o3));
        this._reactionInfoMap.has(i3) && ((t3 = this._reactionInfoMap.get(i3)).reactedByMyself = 1 === e3, this.emitOEvt(h2.MESSAGE_REACTIONS_UPDATED, { messageID: n3, reactionList: [t3] }));
      } }, { key: "addMessageReaction", value: function(t3, n3) {
        var o3, e3, i3, a3, s3 = this, r3 = "addMessageReaction";
        return this.canIUse(g2.MSG_REACTION) ? (o3 = "".concat(this._n, ".").concat(r3), a3 = t3.ID, e3 = t3.conversationID, e3 = "convID:".concat(e3, " messageID:").concat(a3, " reactionID:").concat(n3), (i3 = new P2(r3)).setMessage(e3), M2.l("".concat(o3, " ").concat(e3)), a3 = this._createReactionOperationPack(t3, n3, 1), this._addReactedByMyselfMap(t3.ID, n3), this.req(a3).then(function() {
          return i3.end(), M2.l("".concat(o3, " ok.")), T2();
        }).catch(function(e4) {
          return s3._removeReactedByMyselfMap(t3.ID, n3), i3.setError(e4).end(), M2.e("".concat(o3, " failed. error:"), e4), E2(e4);
        })) : this.noUse(r3);
      } }, { key: "removeMessageReaction", value: function(e3, t3) {
        var n3, o3, i3, a3, s3 = "removeMessageReaction";
        return this.canIUse(g2.MSG_REACTION) ? (n3 = "".concat(this._n, ".").concat(s3), a3 = e3.ID, o3 = e3.conversationID, o3 = "convID:".concat(o3, " messageID:").concat(a3, " reactionID:").concat(t3), (i3 = new P2(s3)).setMessage(o3), M2.l("".concat(n3, " ").concat(o3)), a3 = this._createReactionOperationPack(e3, t3, 2), this._removeReactedByMyselfMap(e3.ID, t3), this.req(a3).then(function() {
          return i3.end(), M2.l("".concat(n3, " ok.")), T2();
        }).catch(function(e4) {
          return i3.setError(e4).end(), M2.e("".concat(n3, " failed. error:"), e4), E2(e4);
        })) : this.noUse(s3);
      } }, { key: "getMessageReactions", value: function(e3) {
        var t3, n3, o3, i3, a3, s3, r3 = this, c3 = "getMessageReactions";
        return this.canIUse(g2.MSG_REACTION) ? (t3 = "".concat(this._n, ".").concat(c3), n3 = e3.messageList, s3 = e3.maxUserCountPerReaction, o3 = n3[0].conversationID, o3 = "convID:".concat(o3, " maxUserCountPerReaction:").concat(s3, " msgCount:").concat(n3.length), (i3 = new P2(c3)).setMessage(o3), M2.l("".concat(t3, " ").concat(o3)), a3 = /* @__PURE__ */ new Map(), s3 = this._createReactionSummaryPack(y2(y2({}, e3), {}, { messageIDMap: a3 })), this.req(s3).then(function(e4) {
          var e4 = e4.data.resultList, o4 = [], i4 = [];
          return (void 0 === e4 ? [] : e4).forEach(function(e5) {
            var t4 = e5.messageKey, t4 = void 0 === t4 ? void 0 : t4, n4 = e5.messageSequence, n4 = void 0 === n4 ? void 0 : n4, e5 = e5.reactionList, e5 = void 0 === e5 ? [] : e5, n4 = N2(t4) ? a3.get(n4) : a3.get(t4);
            o4.push({ messageID: n4, reactionList: e5 }), e5.forEach(function(e6) {
              i4.push.apply(i4, d2(e6.userIDList));
            });
          }), r3._handleReactionSummary(o4, i4);
        }).then(function(e4) {
          return i3.end(), M2.l("".concat(t3, " ok.")), a3.clear(), T2({ resultList: e4 });
        }).catch(function(e4) {
          return i3.setError(e4).end(), M2.e("".concat(t3, " failed. error:"), e4), E2(e4);
        })) : this.noUse(c3);
      } }, { key: "getAllUserListOfMessageReaction", value: function(e3) {
        var t3, n3, o3, i3, a3, s3, r3, c3, u3 = this, l3 = "getAllUserListOfMessageReaction";
        return this.canIUse(g2.MSG_REACTION) ? (t3 = "".concat(this._n, ".").concat(l3), a3 = e3.message, n3 = e3.reactionID, o3 = e3.nextSeq, i3 = e3.count, c3 = a3.ID, a3 = a3.conversationID, a3 = "convID:".concat(a3, " messageID:").concat(c3, " reactionID:").concat(n3, " nextSeq:").concat(o3, " count:").concat(i3), (s3 = new P2(l3)).setMessage(a3), M2.l("".concat(t3, " ").concat(a3)), r3 = { userList: [], nextSeq: 0, isCompleted: false }, c3 = this._createReactionUserListPack(e3), this.req(c3).then(function(e4) {
          var e4 = e4.data, t4 = e4.userIDList, t4 = void 0 === t4 ? [] : t4, e4 = e4.nextSeq, e4 = void 0 === e4 ? 0 : e4;
          return r3.nextSeq = e4, r3.isCompleted = 0 === e4, u3.get(4).getUserNickAndAvatar(t4);
        }).then(function(e4) {
          return r3.userList = e4, s3.end(), M2.l("".concat(t3, " ok.")), T2(r3);
        }).catch(function(e4) {
          return s3.setError(e4).end(), M2.e("".concat(t3, " failed. error:"), e4), E2(e4);
        })) : this.noUse(l3);
      } }, { key: "_createReactionOperationPack", value: function(e3, t3, n3) {
        var o3, i3, a3 = void 0, t3 = { reactionID: t3, userIDList: [this.getMyUserID()] };
        return e3.conversationType === R2.CONV_C2C && (o3 = this.get(6), a3 = 1 === n3 ? G2.ADD_C2C_MSG_REACTION : G2.RM_C2C_MSG_REACTION, t3.from = e3.from, t3.to = e3.to, t3.messageKey = o3.getMessageKey(e3)), e3.conversationType === R2.CONV_GROUP && (o3 = void 0, i3 = e3.to, Ut2(e3.to) && (i3 = Xt2(o3 = e3.to)), a3 = 1 === n3 ? G2.ADD_GRP_MSG_REACTION : G2.RM_GRP_MSG_REACTION, t3.groupID = i3, t3.topicID = o3, t3.messageSequence = e3.sequence), { P: a3, data: t3 };
      } }, { key: "_createReactionSummaryPack", value: function(e3) {
        var n3, t3, o3, i3 = e3.messageList, a3 = e3.maxUserCountPerReaction, a3 = void 0 === a3 ? 10 : a3, s3 = e3.messageIDMap, e3 = i3[0], r3 = void 0, c3 = void 0;
        return e3.conversationType === R2.CONV_C2C && (n3 = this.get(6), t3 = i3.map(function(e4) {
          var t4 = n3.getMessageKey(e4);
          return s3.set(t4, e4.ID), t4;
        }), r3 = G2.GET_C2C_MSG_REACTIONS, c3 = { from: e3.from, to: e3.to, messageKeyList: t3, count: a3 }), e3.conversationType === R2.CONV_GROUP && (t3 = void 0, o3 = e3.to, Ut2(e3.to) && (o3 = Xt2(t3 = e3.to)), e3 = i3.map(function(e4) {
          return s3.set(e4.sequence, e4.ID), e4.sequence;
        }), r3 = G2.GET_GRP_MSG_REACTIONS, c3 = { groupID: o3, topicID: t3, messageSequenceList: e3, count: a3 }), { P: r3, data: c3 };
      } }, { key: "_createReactionUserListPack", value: function(e3) {
        var t3 = e3.message, n3 = e3.reactionID, o3 = e3.nextSeq, e3 = e3.count, e3 = void 0 === e3 ? 100 : e3, i3 = void 0, n3 = { reactionID: n3, nextSeq: void 0 === o3 ? 0 : o3, count: 100 < e3 ? 100 : e3 };
        return t3.conversationType === R2.CONV_C2C && (o3 = this.get(6), i3 = G2.GET_C2C_MSG_REACTION_USER_LIST, n3.from = t3.from, n3.to = t3.to, n3.messageKey = o3.getMessageKey(t3)), t3.conversationType === R2.CONV_GROUP && (e3 = void 0, o3 = t3.to, Ut2(t3.to) && (o3 = Xt2(e3 = t3.to)), i3 = G2.GET_GRP_MSG_REACTION_USER_LIST, n3.groupID = o3, n3.topicID = e3, n3.messageSequence = t3.sequence), { P: i3, data: n3 };
      } }, { key: "_handleReactionSummary", value: function(t3, e3) {
        var c3 = this;
        return this.get(4).getUserNickAndAvatar(e3).then(function(r3) {
          var e4 = [];
          return t3.forEach(function(a3) {
            var s3 = [];
            a3.reactionList.forEach(function(e5) {
              var t4 = e5.reactionID, n3 = e5.count, o3 = e5.userIDList, e5 = e5.reactedByMyself, e5 = void 0 === e5 ? void 0 : e5, i3 = [], o3 = (o3.forEach(function(t5) {
                r3.forEach(function(e6) {
                  t5 === e6.userID && i3.push(e6);
                });
              }), { reactionID: t4, totalUserCount: n3, partialUserList: i3, reactedByMyself: c3._computeReactedByMyself({ reactedByMyself: e5, messageID: a3.messageID, reactionID: t4 }) });
              s3.push(o3), N2(e5) && !c3._reactedByMyselfMap.has(a3.messageID) && (n3 = "".concat(a3.messageID, "-").concat(t4), c3._reactionInfoMap.set(n3, o3));
            }), e4.push({ messageID: a3.messageID, reactionList: s3 });
          }), e4;
        });
      } }, { key: "_addReactedByMyselfMap", value: function(e3, t3) {
        this._reactedByMyselfMap.has(e3) || this._reactedByMyselfMap.set(e3, []);
        e3 = this._reactedByMyselfMap.get(e3);
        -1 === e3.indexOf(t3) && e3.push(t3);
      } }, { key: "_removeReactedByMyselfMap", value: function(e3, t3) {
        this._reactedByMyselfMap.has(e3) && -1 < (t3 = (e3 = this._reactedByMyselfMap.get(e3)).indexOf(t3)) && e3.splice(t3, 1);
      } }, { key: "_computeReactedByMyself", value: function(e3) {
        var t3 = e3.reactedByMyself, n3 = e3.messageID, e3 = e3.reactionID;
        return N2(t3) ? !!this._reactedByMyselfMap.has(n3) && this._reactedByMyselfMap.get(n3).includes(e3) : 1 === t3;
      } }, { key: "reset", value: function() {
        M2.l("".concat(this._n, ".reset")), this._reactedByMyselfMap.clear(), this._reactionInfoMap.clear();
      } }])), Xi = (t2(na, c2), e2(na, [{ key: "sendMessage", value: function(e3) {
        var o3 = this, i3 = this._createMsg(e3);
        if (null === i3)
          return E2({ code: k2.MSG_SEND_FAIL });
        this._addSendMessageTotalCount(i3);
        var a3 = Date.now();
        return this.get(11).setMessageRandom(i3), this._sendComboMessage(i3, e3).then(function(e4) {
          var e4 = e4.data, t3 = e4.time, n3 = e4.sequence, e4 = e4.readReceiptCode, e4 = (A2(e4) && 0 !== e4 && (new P2("sendMessageWithReceipt").setMessage("from:".concat(i3.from, " to:").concat(i3.to, " sequence:").concat(n3, " readReceiptCode:").concat(e4)).end(), M2.w("".concat(o3._n, ".sendMessage readReceiptCode:").concat(e4, " message:").concat(o3.getErrMsg(e4)))), o3._addSendMessageSuccessCount(i3, a3), o3.get(11)), t3 = (i3.status = Pn, i3.time = t3, i3.conversationType === R2.CONV_GROUP && (i3.sequence = n3), e4.appendToMessageList(i3), i3);
          return true === i3._isExcludedFromLastMessage && (t3 = ""), e4.onMessageSent({ conversationOptionsList: [{ conversationID: i3.conversationID, unreadCount: 0, type: i3.conversationType, subType: i3.conversationSubType, lastMessage: t3 }] }), T2({ message: i3 });
        }).catch(function(e4) {
          return o3._onSendMessageFailed(i3, e4);
        });
      } }, { key: "_sendComboMessage", value: function(e3, t3) {
        var n3 = this._m.get(20), o3 = "";
        return e3.conversationType === R2.CONV_C2C && (o3 = "".concat(a2.NAME.OPEN_IM, ".").concat(G2.SEND_C2C_MSG)), e3.conversationType === R2.CONV_GROUP && (o3 = "".concat(a2.NAME.GRP, ".").concat(G2.SEND_GRP_MSG)), n3.sendComboMessage({ servcmd: o3, data: t3 });
      } }, { key: "_createMsg", value: function(e3) {
        var t3 = "".concat(this._n, "._createMsg"), n3 = null;
        try {
          var o3, i3 = this.getMyUserID(), a3 = {};
          a3.senderTinyID = this.getMyTinyID(), a3.currentUser = i3, a3.from = e3.From_Account || i3, e3.GroupId ? (a3.conversationID = "".concat(R2.CONV_GROUP).concat(e3.GroupId), a3.conversationType = R2.CONV_GROUP, a3.to = e3.GroupId) : e3.To_Account && (a3.conversationID = "".concat(R2.CONV_C2C).concat(e3.To_Account), a3.conversationType = R2.CONV_C2C, a3.to = e3.To_Account), a3.time = e3.MsgTimeStamp || 0, a3.random = e3.Random || e3.MsgRandom || 0, a3.priority = e3.MsgPriority, C2(e3.CloudCustomData) && 0 < e3.CloudCustomData.length && (a3.cloudCustomData = e3.CloudCustomData), O2(e3.SendMsgControl) && (a3.messageControlInfo = {}, e3.SendMsgControl.includes("NoUnread") && (a3.messageControlInfo.excludedFromUnreadCount = 1), e3.SendMsgControl.includes("NoLastMsg")) && (a3.messageControlInfo.excludedFromLastMessage = 1), a3.conversationType === R2.CONV_GROUP && O2(e3.To_Account) && 0 < e3.To_Account.length && (o3 = e3.To_Account, 50 < e3.To_Account.length && (o3 = e3.To_Account.slice(0, 50), M2.w("".concat(t3, " To_Account must be less than or equal to 50."))), a3.receiverList = d2(o3), e3.To_Account = d2(o3)), 1 !== e3.IsNeedReadReceipt && 1 !== e3.NeedReadReceipt || (a3.needReadReceipt = true), 1 === e3.SupportMessageExtension && (a3.isSupportExtension = true), (n3 = new So(a3)).status = Gn, e3.MsgClientTime = n3.clientTime, n3.conversationType === R2.CONV_C2C && (e3.MsgSeq = n3.sequence);
          for (var s3, r3 = e3.MsgBody.length, c3 = 0; c3 < r3; c3++)
            "TIMTextElem" === (s3 = e3.MsgBody[c3]).MsgType ? n3.setTextElement(s3.MsgContent.Text) : "TIMCustomElem" === s3.MsgType ? n3.setCustomElement({ data: s3.MsgContent.Data || "", description: s3.MsgContent.Desc || "", extension: s3.MsgContent.Ext || "" }) : "TIMFaceElem" === s3.MsgType && n3.setFaceElement({ index: s3.MsgContent.Index, data: s3.MsgContent.Data });
          var u3 = n3.getElements();
          n3.payload = u3[0].content, n3.type = u3[0].type;
        } catch (e4) {
          n3 = null, M2.e("".concat(t3, " failed. error:"), e4);
        }
        return n3;
      } }, { key: "_onSendMessageFailed", value: function(e3, t3) {
        e3.status = Un, this.get(11).deleteMessageRandom(e3), this._addSendMessageFailCountOnUser(e3, t3);
        var n3 = new P2("sendMessage"), o3 = "head.seq:".concat(t3.data.headSeq, "  type:").concat(e3.type, " from:").concat(e3.from, " to:").concat(e3.to);
        return n3.setMessage(o3).setError(t3).end(), M2.e("".concat(this._n, "._onSendMessageFailed ").concat(o3, " error:"), t3), E2(new L2({ code: t3 && t3.code ? t3.code : k2.MSG_SEND_FAIL, message: t3 && t3.message ? t3.message : void 0, data: { message: e3 } }));
      } }, { key: "_getSendMessageSpecifiedKey", value: function(e3) {
        if (e3.conversationType === R2.CONV_C2C)
          return jn;
        if (e3.conversationType === R2.CONV_GROUP) {
          var e3 = this.get(7).getLocalGroupProfile(e3.to);
          if (e3)
            return e3 = e3.type, Gt2(e3) ? zn : Jn;
        }
      } }, { key: "_addSendMessageTotalCount", value: function(e3) {
        e3 = this._getSendMessageSpecifiedKey(e3);
        e3 && this.get(26).addTotalCount(e3);
      } }, { key: "_addSendMessageSuccessCount", value: function(e3, t3) {
        var n3, e3 = this._getSendMessageSpecifiedKey(e3);
        e3 && ((n3 = this.get(26)).addSuccessCount(e3), n3.addCost(e3, an(t3, false)));
      } }, { key: "_addSendMessageFailCountOnUser", value: function(e3, t3) {
        var t3 = t3.code, t3 = void 0 === t3 ? -1 : t3, n3 = this.get(26), e3 = this._getSendMessageSpecifiedKey(e3);
        Yi(t3) && e3 && n3.addFailedCountOfUserSide(e3);
      } }])), Zi = (t2(ta, c2), e2(ta, [{ key: "registerPlugin", value: function(t3) {
        var n3 = this, o3 = "0";
        Object.keys(t3).forEach(function(e3) {
          n3.plugins[e3] = t3[e3], "tim-upload-plugin" === e3 && "function" == typeof t3[e3].getVersion && (o3 = t3[e3].getVersion());
        }), new P2("registerPlugin").setMessage("".concat(Object.keys(t3))).setMoreMessage("version:".concat(o3)).end();
      } }, { key: "getPlugin", value: function(e3) {
        return this.plugins[e3];
      } }, { key: "reset", value: function() {
      } }])), Qi = (t2(ea, c2), e2(ea, [{ key: "_init", value: function() {
        this._startSync({ cookie: this._cookie, syncFlag: 0, isOnlineSync: 0 });
      } }, { key: "_startSync", value: function(e3) {
        var i3 = this, t3 = e3.cookie, n3 = e3.syncFlag, o3 = e3.isOnlineSync, a3 = "".concat(this._n, "._startSync"), s3 = (M2.l("".concat(a3, " options:"), e3), new P2("syncUnread"));
        s3.setMessage(JSON.stringify(e3)), this.req({ P: G2.SYNC_UNREAD_MSG, data: { cookie: t3, syncFlag: n3, isOnlineSync: o3 } }).then(function(e4) {
          var t4 = e4.data, n4 = t4.cookie, t4 = t4.syncFlag, o4 = "$cookie:".concat(n4, " syncFlag:").concat(t4);
          M2.l("".concat(a3, " ok. ").concat(o4)), i3._cookie = n4, s3.setMoreMessage(o4).end(), S2(n4) || (0 === t4 || 1 === t4 ? (i3._dispatch(y2(y2({}, e4.data), {}, { isSyncingEnded: false })), i3._startSync({ cookie: n4, syncFlag: t4, isOnlineSync: 0 })) : 2 === t4 && i3._dispatch(y2(y2({}, e4.data), {}, { isSyncingEnded: true })));
        }).catch(function(e4) {
          s3.setError(e4).end(), M2.e("".concat(a3, " failed. error:"), e4);
        });
      } }, { key: "_dispatch", value: function(e3) {
        e3.eventArray && this.get(20).onMessage({ head: {}, body: { eventArray: e3.eventArray, isInstantMessage: this._onlineSyncFlag, isSyncingEnded: e3.isSyncingEnded } }), this.get(6).onNewMessage({ dataList: e3.messageList, isInstantMessage: !!e3.isSyncingEnded && this._onlineSyncFlag, C2CRemainingUnreadList: e3.C2CRemainingUnreadList, C2CPairUnreadList: e3.C2CPairUnreadList, isSyncingEnded: e3.isSyncingEnded });
      } }, { key: "syncOnNeed", value: function() {
        M2.l("".concat(this._n, ".syncOnNeed cookie:").concat(this._cookie)), this._onlineSyncFlag = true, this._startSync({ cookie: this._cookie, syncFlag: 0, isOnlineSync: 1 });
      } }, { key: "syncOnReconnected", value: function() {
        M2.l("".concat(this._n, ".syncOnReconnected cookie:").concat(this._cookie)), this._onlineSyncFlag = true, this._startSync({ cookie: this._cookie, syncFlag: 0, isOnlineSync: 0 });
      } }, { key: "reset", value: function() {
        M2.l("".concat(this._n, ".reset")), this._onlineSyncFlag = false, this._cookie = "";
      } }])), $i = { req: { toAccount: "To_Account", fromAccount: "From_Account", to: "To_Account", from: "From_Account", groupID: "GroupId", groupAtUserID: "GroupAt_Account", extension: "Ext", data: "Data", description: "Desc", elements: "MsgBody", sizeType: "Type", downloadFlag: "Download_Flag", thumbUUID: "ThumbUUID", videoUUID: "VideoUUID", remoteAudioUrl: "Url", remoteVideoUrl: "VideoUrl", videoUrl: "", imageUrl: "URL", fileUrl: "Url", uuid: "UUID", priority: "MsgPriority", receiverUserID: "To_Account", receiverGroupID: "GroupId", messageSender: "SenderId", messageReceiver: "ReceiverId", nick: "From_AccountNick", avatar: "From_AccountHeadurl", messageNumber: "MsgNum", pbDownloadKey: "PbMsgKey", downloadKey: "JsonMsgKey", applicationType: "PendencyType", userIDList: "To_Account", groupNameList: "GroupName", userID: "To_Account", groupAttributeList: "GroupAttr", mainSequence: "AttrMainSeq", avChatRoomKey: "BytesKey", attributeControl: "AttrControl", sequence: "seq", messageControlInfo: "SendMsgControl", updateSequence: "UpdateSeq", clientTime: "MsgClientTime", sequenceList: "MsgSeqList", topicID: "TopicId", customData: "CustomString", isSupportTopic: "SupportTopic", isWebUniapp: "is_web_uniapp", isSupportExtension: "SupportMessageExtension", messageSequence: "MsgSeq", messageKey: "MsgKey", startSequence: "startSeq", simplifiedMessage: "DownsizeFlag", isRelayMessage: "IsRelayMsg", reactionID: "Reaction", messageSequenceList: "MsgSeqList", messageKeyList: "MsgKeyList", cmConfigID: "CustomModerationConfigID" }, res: { MsgPriority: "priority", ThumbUUID: "thumbUUID", VideoUUID: "videoUUID", Download_Flag: "downloadFlag", GroupId: "groupID", Member_Account: "userID", MsgList: "messageList", SyncFlag: "syncFlag", To_Account: "to", From_Account: "from", MsgSeq: "sequence", MsgRandom: "random", MsgTime: "time", MsgTimeStamp: "time", MsgContent: "content", MsgBody: "elements", From_AccountNick: "nick", From_AccountHeadurl: "avatar", GroupWithdrawInfoArray: "revokedInfos", GroupReadInfoArray: "groupMessageReadNotice", LastReadMsgSeq: "lastMessageSeq", WithdrawC2cMsgNotify: "c2cMessageRevokedNotify", C2cWithdrawInfoArray: "revokedInfos", C2cReadedReceipt: "c2cMessageReadReceipt", ReadC2cMsgNotify: "c2cMessageReadNotice", LastReadTime: "peerReadTime", MsgRand: "random", MsgType: "type", MsgShow: "messageShow", NextMsgSeq: "nextMessageSeq", FaceUrl: "avatar", ProfileDataMod: "profileModify", Profile_Account: "userID", ValueBytes: "value", ValueNum: "value", NoticeSeq: "noticeSequence", NotifySeq: "notifySequence", MsgFrom_AccountExtraInfo: "messageFromAccountExtraInformation", Operator_Account: "operatorID", OpType: "operationType", ReportType: "operationType", UserId: "userID", User_Account: "userID", List_Account: "userIDList", MsgOperatorMemberExtraInfo: "operatorInfo", MsgMemberExtraInfo: "memberInfoList", ImageUrl: "avatar", NickName: "nick", MsgGroupNewInfo: "newGroupProfile", MsgAppDefinedData: "groupCustomField", Owner_Account: "ownerID", GroupFaceUrl: "avatar", GroupIntroduction: "introduction", GroupNotification: "notification", GroupApplyJoinOption: "joinOption", MsgKey: "messageKey", GroupInfo: "groupProfile", ShutupTime: "muteTime", Desc: "description", Ext: "extension", GroupAt_Account: "groupAtUserID", MsgNum: "messageNumber", PbMsgKey: "pbDownloadKey", JsonMsgKey: "downloadKey", MsgModifiedFlag: "isModified", PendencyItem: "applicationItem", PendencyType: "applicationType", AddTime: "time", AddSource: "source", AddWording: "wording", ProfileImImage: "avatar", PendencyAdd: "friendApplicationAdded", FrienPencydDel_Account: "friendApplicationDeletedUserIDList", Peer_Account: "userID", GroupAttr: "groupAttributeList", GroupAttrAry: "groupAttributeList", AttrMainSeq: "mainSequence", seq: "sequence", GroupAttrOption: "groupAttributeOption", BytesChangedKeys: "changedKeyList", GroupAttrInfo: "groupAttributeList", GroupAttrSeq: "mainSequence", PushChangedAttrValFlag: "isWithChangedAttributeInfo", SubKeySeq: "sequence", Val: "value", MsgGroupFromCardName: "senderNameCard", MsgGroupFromNickName: "senderNick", C2cNick: "peerNick", C2cImage: "peerAvatar", SendMsgControl: "messageControlInfo", NoLastMsg: "excludedFromLastMessage", NoUnread: "excludedFromUnreadCount", UpdateSeq: "updateSequence", MuteNotifications: "muteFlag", MsgClientTime: "clientTime", TinyId: "tinyID", GroupMsgReceiptList: "readReceiptList", ReadNum: "readCount", UnreadNum: "unreadCount", TopicId: "topicID", MillionGroupFlag: "communityType", SupportTopic: "isSupportTopic", MsgTopicNewInfo: "newTopicInfo", ShutupAll: "muteAllMembers", CustomString: "customData", TopicFaceUrl: "avatar", TopicIntroduction: "introduction", TopicNotification: "notification", TopicIdArray: "topicIDList", MsgVersion: "messageVersion", C2cMsgModNotifys: "c2cMessageModified", GroupMsgModNotifys: "groupMessageModified", ApplyJoinOption: "joinOption", MsgFlag: "messageRemindType", AtInfoList: "groupAtInfoList", AtFlagList: "groupAtType", AtMsgSeq: "sequence", BanDuration: "duration", BanDescription: "reason", NotVisible: "invisible", BytesTag: "tag", BytesValue: "value", RptBytesValue: "value", LatestSeq: "globalSequence", ClearSeq: "clearSequence", SupportMessageExtension: "isSupportExtension", ExtensionList: "extensions", GroupCounter: "counterList", Revoker_Account: "revoker", MsgExtensionNotify: "messageExtensionNotify", ExtensionC2cMsgInfo: "messageInfo", ExtensionGroupMsgInfo: "messageInfo", MsgOptType: "operateType", SetKVInfo: "operateResultList", DeleteKVInfo: "operateResultList", ClearKVInfo: "operateResultList", MsgKeyValue: "extensions", ClearMsgSeq: "clearSequence", MsgLastSeq: "globalSequence", InviteJoinOption: "inviteOption", MemberList_Account: "inviteeList", MsgMemberExtraInfoList: "inviteeInfoList", E: "event", GInf: "groupProfile", MCT: "clientTime", MR: "random", MP: "priority", MTS: "time", GId: "groupID", MS: "sequence", CCD: "cloudCustomData", F_Account: "from", F_Hd: "avatar", F_NN: "nick", GN: "groupName", GT: "groupType", IsSys: "isSystemMessage", OpInf: "operatorInfo", Img: "avatar", NN: "nick", OnlineInf: "onlineMemberInfo", ET: "expireTime", Num: "onlineMemberNum", Opt: "operationType", O_Account: "operatorID", RT: "operationType", UDF: "userDefinedField", L_Account: "userIDList", IsPlaceMsg: "isPlaceMessage", MsgCheckResult: "checkResult", Results: "resultList", Reaction: "reactionID", Reaction_Account: "userIDList", MsgReactionNotifyList: "messageReactionNotifyList", MsgReactionNotify: "messageReactionNotify", MsgReactionSummary: "reactionList", C2CMsgInfo: "C2CMessageInfo", GroupMsgInfo: "groupMessageInfo", int32_err_code: "errorCode", str_err_msg: "errorMsg", MsgDropReason: "messageDropReason", ReactedByMe: "reactedByMyself", Level: "messageRemindType", PeerReadTime: "timestamp", NoUnreadSeqList: "excludedUnreadSequenceList", NewMsg: "topicLatestMessage" }, ignoreKeyWord: ["C2C", "ID", "USP"] };
      function ea(e3) {
        return p2(this, ea), (e3 = i2(this, ea, [e3]))._n = "SyncUnreadMsgModule", e3._cookie = "", e3._onlineSyncFlag = false, e3.getIEmitInst().on(U2.A2KEY_AND_TINYID_UPDATED, e3._init, e3), e3;
      }
      function ta(e3) {
        return p2(this, ta), (e3 = i2(this, ta, [e3]))._n = "PluginModule", e3.plugins = {}, e3;
      }
      function na(e3) {
        return p2(this, na), (e3 = i2(this, na, [e3]))._n = "ComboMsgModule", e3;
      }
      function oa(e3) {
        return p2(this, oa), (e3 = i2(this, oa, [e3]))._n = "MsgReactionModule", e3._reactedByMyselfMap = /* @__PURE__ */ new Map(), e3._reactionInfoMap = /* @__PURE__ */ new Map(), e3;
      }
      function ia(e3) {
        return p2(this, ia), (e3 = i2(this, ia, [e3]))._n = "MsgExtModule", e3.msgExtMap = /* @__PURE__ */ new Map(), e3.globalSeqMap = /* @__PURE__ */ new Map(), e3.getMsgExtsMap = /* @__PURE__ */ new Map(), e3;
      }
      function aa(e3) {
        return p2(this, aa), (e3 = i2(this, aa, [e3]))._n = "MessageModule", e3._messageOptionsMap = /* @__PURE__ */ new Map(), e3._mergerMessageHandler = new Bi(e3), e3;
      }
      function sa(e3, t3) {
        if ("string" == typeof e3 || Array.isArray(e3))
          return t3 = Object.assign({ pascalCase: false }, t3), 0 === (e3 = Array.isArray(e3) ? e3.map(function(e4) {
            return e4.trim();
          }).filter(function(e4) {
            return e4.length;
          }).join("-") : e3.trim()).length ? "" : 1 === e3.length ? t3.pascalCase ? e3.toUpperCase() : e3.toLowerCase() : (e3 = e3 = (e3 = e3 !== e3.toLowerCase() ? ra(e3) : e3).replace(/^[_.\- ]+/, "").toLowerCase().replace(/[_.\- ]+(\w|$)/g, function(e4, t4) {
            return t4.toUpperCase();
          }).replace(/\d+(\w|$)/g, function(e4) {
            return e4.toUpperCase();
          }), t3.pascalCase ? e3.charAt(0).toUpperCase() + e3.slice(1) : e3);
        throw new TypeError("Expected the input to be `string | string[]`");
      }
      var ra = function(e3) {
        for (var t3 = false, n3 = false, o3 = false, i3 = 0; i3 < e3.length; i3++) {
          var a3 = e3[i3];
          t3 && /[a-zA-Z]/.test(a3) && a3.toUpperCase() === a3 ? (e3 = e3.slice(0, i3) + "-" + e3.slice(i3), o3 = n3, n3 = !(t3 = false), i3++) : n3 && o3 && /[a-zA-Z]/.test(a3) && a3.toLowerCase() === a3 ? (e3 = e3.slice(0, i3 - 1) + "-" + e3.slice(i3 - 1), o3 = n3, t3 = !(n3 = false)) : (t3 = a3.toLowerCase() === a3 && a3.toUpperCase() !== a3, o3 = n3, n3 = a3.toUpperCase() === a3 && a3.toLowerCase() !== a3);
        }
        return e3;
      };
      function ca(e3, t3) {
        var r3 = 0;
        return function n3(e4, i3) {
          var t4, o3, a3, s3;
          return 100 < ++r3 ? (r3--, e4) : O2(e4) ? (t4 = e4.map(function(e5) {
            return ut2(e5) ? n3(e5, i3) : e5;
          }), r3--, t4) : ut2(e4) ? (o3 = e4, a3 = function(e5, t5) {
            if (!_t2(t5))
              return false;
            if (t5 !== sa(t5))
              for (var n4 = 0; n4 < $i.ignoreKeyWord.length && !t5.includes($i.ignoreKeyWord[n4]); n4++)
                ;
            var o4;
            return N2(i3[t5]) ? (o4 = t5)[0].toUpperCase() + sa(o4).slice(1) : i3[t5];
          }, s3 = /* @__PURE__ */ Object.create(null), Object.keys(o3).forEach(function(e5) {
            var t5 = a3(o3[e5], e5);
            t5 && (s3[t5] = o3[e5]);
          }), t4 = qt2(t4 = s3, function(e5, t5) {
            return O2(e5) || ut2(e5) ? n3(e5, i3) : e5;
          }), r3--, t4) : void 0;
        }(e3, t3);
      }
      for (var ua = String.fromCharCode, la = function(e3) {
        var t3 = 0 | e3.charCodeAt(0);
        if (55296 <= t3)
          if (t3 < 56320) {
            e3 = 0 | e3.charCodeAt(1);
            if (56320 <= e3 && e3 <= 57343) {
              if (65535 < (t3 = (t3 << 10) + e3 - 56613888 | 0))
                return ua(240 | t3 >>> 18, 128 | t3 >>> 12 & 63, 128 | t3 >>> 6 & 63, 128 | 63 & t3);
            } else
              t3 = 65533;
          } else
            t3 <= 57343 && (t3 = 65533);
        return t3 <= 2047 ? ua(192 | t3 >>> 6, 128 | 63 & t3) : ua(224 | t3 >>> 12, 128 | t3 >>> 6 & 63, 128 | 63 & t3);
      }, da = function(e3) {
        for (var t3 = void 0 === e3 ? "" : ("" + e3).replace(/[\x80-\uD7ff\uDC00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]?/g, la), n3 = 0 | t3.length, o3 = new Uint8Array(n3), i3 = 0; i3 < n3; i3 = i3 + 1 | 0)
          o3[i3] = 0 | t3.charCodeAt(i3);
        return o3;
      }, pa = e2(function e3(t3) {
        p2(this, e3);
        var n3, i3, o3 = (this._handler = t3).getURL();
        this._socket = null, this._workerSocket = null, this._id = mt2(), this._handler.getIsWorkerEnabled() ? (n3 = URL.createObjectURL(new Blob([';let _socket = null;onmessage = function(event) {  if (event.data.cmd === "start") {    const url = event.data.url;    _socket = new WebSocket(url);    _socket.binaryType = "arraybuffer";    _socket.onopen = function() {      postMessage({ callback: "onOpen", extensions: _socket.extensions });    };    _socket.onclose = function(e) {      postMessage({ callback: "onOpen", e: { code: e.code, reason: e.reason } });    };    _socket.onmessage = function(e) {      postMessage({ callback: "onMessage", data: e.data });    };    _socket.onerror = function(e) {      postMessage({ callback: "onError", e: { isTrusted: "true" } });    };  } else if (event.data.cmd === "sendMessage") {    if (_socket !== null) {      _socket.send(event.data.data);    }  } else if (event.data.cmd === "stop") {    if (_socket !== null) {      _socket.close(event.data.code);      _socket = null;    }  }};'], { type: "application/javascript; charset=utf-8" })), this._workerSocket = new Worker(n3), (i3 = this)._workerSocket.onmessage = function(e4) {
          var t4 = e4.data, n4 = t4.callback, o4 = t4.e, t4 = t4.extensions;
          "onOpen" === n4 ? i3._onOpen(t4) : "onClose" === n4 ? i3._onClose(o4) : "onError" === n4 ? i3._onError(o4) : "onMessage" === n4 && i3._onMessage(e4.data);
        }, this._workerSocket.postMessage({ cmd: "start", id: this._id, url: o3 })) : v2 ? ve2 ? (I2.connectSocket({ url: o3, header: { "content-type": "application/json" } }), I2.onSocketClose(this._onClose.bind(this)), I2.onSocketOpen(this._onOpen.bind(this)), I2.onSocketMessage(this._onMessage.bind(this)), I2.onSocketError(this._onError.bind(this))) : (this._socket = I2.connectSocket({ url: o3, header: { "content-type": "application/json" }, complete: function() {
        } }), this._socket.onClose(this._onClose.bind(this)), this._socket.onOpen(this._onOpen.bind(this)), this._socket.onMessage(this._onMessage.bind(this)), this._socket.onError(this._onError.bind(this))) : (this._socket = new WebSocket(o3), this._socket.binaryType = "arraybuffer", this._socket.onopen = this._onOpen.bind(this, this._socket.extensions), this._socket.onmessage = this._onMessage.bind(this), this._socket.onclose = this._onClose.bind(this), this._socket.onerror = this._onError.bind(this)), this._canIUseBinaryFrame = t3.canIUseBinaryFrame();
      }, [{ key: "getID", value: function() {
        return this._id;
      } }, { key: "_onOpen", value: function(e3) {
        this._handler.onOpen({ id: this._id, res: JSON.stringify(e3) });
      } }, { key: "_onClose", value: function(e3) {
        this._handler.onClose({ id: this._id, e: e3 });
      } }, { key: "_onMessage", value: function(e3) {
        e3 = this._canIUseBinaryFrame ? this._isAppCompressedData(e3.data) ? this._handler.inflate(e3.data) : function(e4) {
          for (var t3 = new Uint8Array(e4), n3 = "", o3 = 0, i3 = t3.length; o3 < i3; ) {
            var a3 = t3[o3], s3 = 0, r3 = 0;
            if (a3 <= 127 ? (s3 = 0, r3 = 255 & a3) : a3 <= 223 ? (s3 = 1, r3 = 31 & a3) : a3 <= 239 ? (s3 = 2, r3 = 15 & a3) : a3 <= 244 && (s3 = 3, r3 = 7 & a3), 0 < i3 - o3 - s3)
              for (var c3 = 0; c3 < s3; )
                r3 = r3 << 6 | 63 & (a3 = t3[o3 + c3 + 1]), c3 += 1;
            else
              r3 = 65533, s3 = i3 - o3;
            n3 += String.fromCodePoint(r3), o3 += s3 + 1;
          }
          return n3;
        }(e3.data) : e3.data;
        this._handler.onMessage({ data: e3 });
      } }, { key: "_isAppCompressedData", value: function(e3) {
        e3 = new Uint8Array(e3);
        return 67 === e3[0] && 79 === e3[1] && 77 === e3[2] && 80 === e3[3];
      } }, { key: "_onError", value: function(e3) {
        this._handler.onError({ id: this._id, e: e3 });
      } }, { key: "setIsWorkerEnabled", value: function(e3) {
        this._isWorkerEnabled = true;
      } }, { key: "close", value: function(e3) {
        this._workerSocket && (this._workerSocket.postMessage({ cmd: "stop", code: e3 }), this._workerSocket.terminate(), this._workerSocket = null), ve2 ? (I2.offSocketClose(), I2.offSocketMessage(), I2.offSocketOpen(), I2.offSocketError(), I2.closeSocket()) : this._socket && (v2 ? (this._socket.onClose(function() {
        }), this._socket.onOpen(function() {
        }), this._socket.onMessage(function() {
        }), this._socket.onError(function() {
        })) : (this._socket.onopen = null, this._socket.onmessage = null, this._socket.onclose = null, this._socket.onerror = null), me2 ? this._socket.close({ code: e3 }) : this._socket.close(e3), this._socket = null);
      } }, { key: "send", value: function(e3) {
        this._workerSocket ? this._workerSocket.postMessage({ cmd: "sendMessage", data: this._canIUseBinaryFrame ? da(e3.data).buffer : e3.data }) : ve2 ? I2.sendSocketMessage({ data: e3.data, fail: function() {
          e3.fail && e3.requestID && e3.fail(e3.requestID);
        } }) : this._socket && (v2 ? this._socket.send({ data: this._canIUseBinaryFrame ? da(e3.data).buffer : e3.data, fail: function() {
          e3.fail && e3.requestID && e3.fail(e3.requestID);
        } }) : this._socket.send(this._canIUseBinaryFrame ? da(e3.data) : e3.data));
      } }]), _a2 = ["keyMap"], ha = ["keyMap"], ga = "connected", fa = "connecting", ma = "disconnected", va = e2(function e3(t3) {
        p2(this, e3), this._chM = t3, this._n = "SocketHandler", this._promiseMap = /* @__PURE__ */ new Map(), this._readyState = ma, this._simpleRequestMap = /* @__PURE__ */ new Map(), this.MAX_SIZE = 100, this._startSequence = mt2(), this._startTs = 0, this._reConnectFlag = false, this._nextPingTs = 0, this._reConnectCount = 0, this.MAX_RECONNECT_COUNT = 3, this._socketID = -1, this._random = 0, this._socket = null, this._url = "", this._onOpenTs = 0, this._canIUseBinaryFrame = true, this._isWorkerEnabled = true, this._currentSite = ae2, this._setWebsocketHost(), this._initConnection();
      }, [{ key: "_setWebsocketHost", value: function() {
        var e3 = this._chM.get(12);
        this._currentSite = ae2, this._chM.isOversea() && (this._currentSite = "OVERSEA"), e3.isSingaporeSite() ? this._currentSite = "SINGAPORE" : e3.isKoreaSite() ? this._currentSite = "KOREA" : e3.isGermanySite() ? this._currentSite = "GERMANY" : e3.isIndiaSite() ? this._currentSite = "IND" : e3.isJapanSite() ? this._currentSite = "JPN" : e3.isUSASite() ? this._currentSite = "USA" : e3.isIndonesiaSite() && (this._currentSite = "INDONESIA"), a2.HOST.setCurrent(this._currentSite);
      } }, { key: "_initConnection", value: function() {
        var e3 = this._chM.get(12).getSDKAppID() + "", t3 = this._chM.get(12).isIndependentDomainDisabled(), t3 = (N2(a2.HOST.CURRENT.BACKUP) ? this._url = a2.HOST.CURRENT.DEFAULT : "" === this._url ? this._url = t3 ? a2.HOST.CURRENT.DEFAULT : a2.HOST.CURRENT.DEFAULT0.replace("*", e3) : -1 < this._url.indexOf(e3) ? this._url = a2.HOST.CURRENT.DEFAULT : this._url === a2.HOST.CURRENT.DEFAULT ? this._url = a2.HOST.CURRENT.IPV6 : this._url === a2.HOST.CURRENT.IPV6 ? this._url = Ce2 ? this._genRandomDomain() : a2.HOST.CURRENT.BACKUP : this._isWebBackupUrl(this._url) || this._url === a2.HOST.CURRENT.BACKUP ? this._url = this._canIUseAnyCast() ? a2.HOST.CURRENT.ANYCAST : a2.HOST.CURRENT.DEFAULT : this._url === a2.HOST.CURRENT.ANYCAST && (a2.HOST.CURRENT.ANYCAST = "", this._url = a2.HOST.CURRENT.DEFAULT), this._chM.get(12)), e3 = t3.getProxyServer();
        S2(e3) || (this._url = e3), t3.isTestEnv() && (this._url = ee2.TEST[this._currentSite].DEFAULT), this._connect(), this._nextPingTs = 0;
      } }, { key: "_genRandomDomain", value: function() {
        var e3 = Math.floor(10001 * Math.random()) + 1e4;
        return a2.HOST.CURRENT.BACKUP_WEB.replace("*", e3);
      } }, { key: "_isWebBackupUrl", value: function(e3) {
        return e3.includes("my-cpaas.com");
      } }, { key: "_canIUseAnyCast", value: function() {
        return Ce2 && a2.HOST.CURRENT.ANYCAST;
      } }, { key: "onCheckTimer", value: function(e3) {
        e3 % 1 == 0 && (this._checkPromiseMap(), this._checkNativeAppWS());
      } }, { key: "_checkPromiseMap", value: function() {
        var a3 = this;
        0 !== this._promiseMap.size && this._promiseMap.forEach(function(e3, t3) {
          var n3 = e3.reject, o3 = e3.timestamp, e3 = e3.headSeq, i3 = 15e3;
          -1 !== t3.indexOf(G2.LOGIN) ? i3 = 9e4 : -1 !== t3.indexOf(G2.PING) && (i3 = 3e3), Date.now() - o3 >= i3 && (M2.l("".concat(a3._n, "._checkPromiseMap request timeout, delete requestID:").concat(t3)), a3._promiseMap.delete(t3), n3(new L2({ code: k2.NETWORK_TIMEOUT, data: { headSeq: e3 } })), a3._chM.onRequestTimeout());
        });
      } }, { key: "_checkNativeAppWS", value: function() {
        Ie2 && !this.isConnected() && this._reConnect();
      } }, { key: "onOpen", value: function(e3) {
        var t3, n3;
        this._readyState !== ma && (this._onOpenTs = Date.now(), n3 = e3.id, e3 = e3.res, this._socketID = n3, t3 = an(this._startTs, false), n3 = "socketID:".concat(n3, " res:").concat(e3), M2.l("".concat(this._n, "._onOpen cost:").concat(t3, " ms. ").concat(n3)), new P2("wsOnOpen").setMessage(t3).setCostTime(t3).setMoreMessage(n3).end(), this._readyState = ga, this._reConnectCount = 0, this._resend(), true === this._reConnectFlag && (this._chM.onReconnected(), this._reConnectFlag = false), this._chM.onOpen());
      } }, { key: "onClose", value: function(e3) {
        var t3 = new P2("wsOnClose"), n3 = e3.id, e3 = e3.e, o3 = "sourceSocketID:".concat(n3, " currentSocketID:").concat(this._socketID, " code:").concat(e3.code, " reason:").concat(e3.reason), i3 = 0;
        0 !== this._onOpenTs && (i3 = Date.now() - this._onOpenTs), t3.setMessage(i3).setCostTime(i3).setMoreMessage(o3).setCode(e3.code).end(true), M2.l("".concat(this._n, "._onClose ").concat(o3, " onlineTime:").concat(i3)), n3 === this._socketID && (this._readyState = ma, i3 < 1e3 ? this._chM.onReconnectFailed() : this._chM.onClose());
      } }, { key: "onError", value: function(e3) {
        var t3 = e3.id, e3 = e3.e, n3 = "sourceSocketID:".concat(t3, " currentSocketID:").concat(this._socketID);
        new P2("wsOnError").setMessage(e3.errMsg || JSON.stringify(e3, ["message", "code"])).setMoreMessage(n3).setLevel("error").end(true), M2.w("".concat(this._n, "._onError"), e3, n3), t3 === this._socketID && (this._readyState = ma, this._chM.onError());
      } }, { key: "onMessage", value: function(t3) {
        var e3, n3, o3, i3, a3, s3;
        try {
          e3 = JSON.parse(t3.data);
        } catch (e4) {
          new P2("jsonParseError").setMessage(t3.data).end();
        }
        e3 && e3.head && (t3 = this._getRequestIDFromHead(e3.head), n3 = e3.body, this._chM.get(30).isTRTCCommand(t3) || (s3 = Yt2(e3.head), n3 = function t4(e4, n4) {
          var o4, i4, a4;
          return O2(e4) ? e4.map(function(e5) {
            return ut2(e5) ? t4(e5, n4) : e5;
          }) : ut2(e4) ? (o4 = e4, i4 = function(e5, t5) {
            return N2(n4[t5]) ? sa(t5) : n4[t5];
          }, a4 = {}, Object.keys(o4).forEach(function(e5) {
            a4[i4(o4[e5], e5)] = o4[e5];
          }), qt2(a4, function(e5) {
            return O2(e5) || ut2(e5) ? t4(e5, n4) : e5;
          })) : void 0;
        }(e3.body, this._getResKeyMap(s3))), M2.d("".concat(this._n, ".onMessage ret:").concat(JSON.stringify(n3), " requestID:").concat(t3, " has:").concat(this._promiseMap.has(t3))), this._setNextPingTs(), this._promiseMap.has(t3) ? (o3 = (s3 = this._promiseMap.get(t3)).resolve, i3 = s3.reject, a3 = s3.timestamp, s3 = s3.headSeq, this._promiseMap.delete(t3), this._calcRTT(a3), n3.errorCode && 0 !== n3.errorCode ? (this._chM.onErrorCodeNotZero(n3), i3(new L2({ code: n3.errorCode, message: n3.errorInfo || "", data: t3.includes(G2.MODIFY_C2C_MSG) || t3.includes(G2.MODIFY_GRP_MSG) ? { elements: n3.elements, messageVersion: n3.messageVersion, cloudCustomData: n3.cloudCustomData, headSeq: s3 } : { headSeq: s3 } }))) : o3(T2(n3))) : this._chM.onMessage({ head: e3.head, body: n3 }));
      } }, { key: "_calcRTT", value: function(e3) {
        e3 = Date.now() - e3;
        this._chM.get(26).addRTT(e3);
      } }, { key: "_connect", value: function() {
        this._readyState !== fa && this._readyState !== ga && (this._startTs = Date.now(), this._onOpenTs = 0, this._readyState = fa, this._socket = new pa(this), this._socketID = this._socket.getID(), M2.l("".concat(this._n, "._connect isWorkerEnabled:").concat(this.getIsWorkerEnabled(), " socketID:").concat(this._socketID, " url:").concat(this.getURL())), new P2("wsConnect").setMessage("socketID:".concat(this._socketID, " url:").concat(this.getURL())).end());
      } }, { key: "getURL", value: function() {
        this._chM.isDevMode() && (this._canIUseBinaryFrame = false);
        var e3 = Bt2(), t3 = ((ve2 || _e2 && "windows" === e3 || Ie2) && (this._canIUseBinaryFrame = false), -1), n3 = ("ios" === e3 ? t3 = Le2 || -1 : "android" === e3 && (t3 = ke2 || -1), this._chM.get(12)), o3 = this._chM.getPlatform(), i3 = n3.getSDKAppID(), n3 = n3.getInstanceID(), i3 = "sdkappid=".concat(i3, "&instanceid=").concat(n3, "&random=").concat(this._getRandom(), "&platform=").concat(o3, "&host=").concat(e3) + "&version=".concat(t3, "&sdkversion=").concat("3.5.5");
        return he2 && (i3 += "&isminigame=1"), this._chM.canIUseInflate() && (i3 += "&compress=gzip"), (this._canIUseBinaryFrame ? "".concat(this._url, "/binfo?") : "".concat(this._url, "/info?")).concat(i3);
      } }, { key: "_closeConnection", value: function(e3) {
        M2.l("".concat(this._n, "._closeConnection socketID:").concat(this._socketID)), this._socket && (this._socket.close(e3), this._socketID = -1, this._socket = null, this._readyState = ma);
      } }, { key: "_resend", value: function() {
        var i3 = this;
        if (M2.l("".concat(this._n, "._resend reConnectFlag:").concat(this._reConnectFlag), "promiseMap.size:".concat(this._promiseMap.size, " simpleRequestMap.size:").concat(this._simpleRequestMap.size)), 0 < this._promiseMap.size && this._promiseMap.forEach(function(e4, t4) {
          var n4 = e4.uplinkData, o4 = e4.resolve, e4 = e4.reject;
          -1 !== t4.indexOf(G2.AV_POLLING) ? i3._promiseMap.delete(t4) : (i3._promiseMap.set(t4, { resolve: o4, reject: e4, timestamp: Date.now(), uplinkData: n4 }), i3._execute(t4, n4));
        }), 0 < this._simpleRequestMap.size) {
          var e3, t3 = F2(this._simpleRequestMap);
          try {
            for (t3.s(); !(e3 = t3.n()).done; ) {
              var n3 = j2(e3.value, 2), o3 = n3[0], a3 = n3[1];
              this._execute(o3, a3);
            }
          } catch (e4) {
            t3.e(e4);
          } finally {
            t3.f();
          }
          this._simpleRequestMap.clear();
        }
      } }, { key: "send", value: function(n3) {
        var o3 = this, i3 = (n3.head.seq = this._getSequence(), n3.head.reqtime = Math.floor(Date.now() / 1e3), n3.head.cs = this._calcCheckSum(n3.head.servcmd, n3.body), n3.keyMap, W2(n3, _a2)), a3 = this._getRequestIDFromHead(n3.head), s3 = JSON.stringify(i3);
        return new Promise(function(e3, t3) {
          o3._promiseMap.set(a3, { resolve: e3, reject: t3, timestamp: Date.now(), uplinkData: s3, headSeq: n3.head.seq }), M2.d("".concat(o3._n, ".send uplinkData:").concat(JSON.stringify(i3), " requestID:").concat(a3, " readyState:").concat(o3._readyState)), o3._readyState !== ga ? o3._reConnect() : (o3._execute(a3, s3), o3._chM.get(26).addRequestCount());
        });
      } }, { key: "simplySend", value: function(e3) {
        e3.head.seq = this._getSequence(), e3.head.reqtime = Math.floor(Date.now() / 1e3), e3.keyMap;
        var t3 = W2(e3, ha), e3 = this._getRequestIDFromHead(e3.head), t3 = JSON.stringify(t3);
        this._readyState !== ga ? (this._simpleRequestMap.size < this.MAX_SIZE ? this._simpleRequestMap.set(e3, t3) : M2.l("".concat(this._n, ".simplySend. simpleRequestMap is full, drop request!")), this._reConnect()) : this._execute(e3, t3);
      } }, { key: "_execute", value: function(e3, t3) {
        this._socket.send({ data: t3, fail: v2 ? this._onSendFail.bind(this) : void 0, requestID: e3 });
      } }, { key: "_onSendFail", value: function(e3) {
        M2.l("".concat(this._n, "._onSendFail requestID:").concat(e3)), this._chM.onSendFail();
      } }, { key: "_getSequence", value: function() {
        var e3;
        if (this._startSequence < 2415919103)
          return e3 = this._startSequence, this._startSequence += 1, 2415919103 === this._startSequence && (this._startSequence = mt2()), e3;
      } }, { key: "_getRequestIDFromHead", value: function(e3) {
        return e3.servcmd + e3.seq;
      } }, { key: "_getResKeyMap", value: function(e3) {
        e3 = this._chM.getKeyMap(e3);
        return y2(y2({}, $i.res), e3.res);
      } }, { key: "_reConnect", value: function() {
        this._readyState !== ga && this._readyState !== fa && this.forcedReconnect();
      } }, { key: "forcedReconnect", value: function() {
        var e3 = "".concat(this._n, ".forcedReconnect");
        M2.l("".concat(e3, " count:").concat(this._reConnectCount, " readyState:").concat(this._readyState)), this._reConnectFlag = true, this._resetRandom(), this._reConnectCount < this.MAX_RECONNECT_COUNT ? (this._reConnectCount += 1, this._closeConnection(4001), this._initConnection()) : (this._reConnectCount = 0, this._chM.get(15).isOnline() ? (M2.w("".concat(e3, " disconnected from wsserver but network is ok, continue...")), this._closeConnection(4001), this._initConnection()) : this._chM.onReconnectFailed());
      } }, { key: "getReconnectFlag", value: function() {
        return this._reConnectFlag;
      } }, { key: "_setNextPingTs", value: function() {
        this._nextPingTs = Ie2 ? Date.now() + 5e3 : Date.now() + 1e4;
      } }, { key: "getNextPingTs", value: function() {
        return this._nextPingTs;
      } }, { key: "isConnected", value: function() {
        return this._readyState === ga;
      } }, { key: "canIUseBinaryFrame", value: function() {
        return this._canIUseBinaryFrame;
      } }, { key: "getSocketID", value: function() {
        return this._socketID;
      } }, { key: "inflate", value: function(e3) {
        if (this._chM.canIUseInflate())
          return this._chM.get(37).inflate(e3);
      } }, { key: "setIsWorkerEnabled", value: function(e3) {
        M2.l("".concat(this._n, ".setIsWorkerEnabled flag:").concat(e3)), this._isWorkerEnabled = e3;
      } }, { key: "getIsWorkerEnabled", value: function() {
        return this._isWorkerEnabled && Ge2;
      } }, { key: "_getRandom", value: function() {
        return 0 === this._random && (this._random = Math.random()), this._random;
      } }, { key: "_resetRandom", value: function() {
        this._random = 0;
      } }, { key: "_calcCheckSum", value: function(e3, t3) {
        if (-1 !== e3.indexOf(G2.PING) || -1 !== e3.indexOf(G2.LOGIN) || -1 !== e3.indexOf(G2.LOGOUT) || -1 !== e3.indexOf(G2.AV_POLLING) || -1 !== e3.indexOf(G2.AV_NOAUTH_POLLING))
          return 0;
        for (var n3 = da(JSON.stringify(t3)), o3 = 4294967295, i3 = 0, a3 = n3.length; i3 < a3; i3++) {
          o3 ^= n3[i3];
          for (var s3 = 0; s3 < 8; s3++)
            1 == (1 & o3) ? o3 = o3 >>> 1 ^ 3988292384 : o3 >>>= 1;
        }
        return (4294967295 ^ o3) >>> 0;
      } }, { key: "close", value: function() {
        M2.l("".concat(this._n, ".close")), this._closeConnection(4e3), this._promiseMap.clear(), this._startSequence = mt2(), this._readyState = ma, this._simpleRequestMap.clear(), this._reConnectFlag = false, this._reConnectCount = 0, this._onOpenTs = 0, this._url = "", this._random = 0, this._canIUseBinaryFrame = true, this._isWorkerEnabled = true;
      } }]), Ia = function(a3, s3, r3) {
        return new Promise(function(t3, e3) {
          var n3, o3, i3 = "application/x-www-form-urlencoded;charset=UTF-8";
          v2 ? I2.request({ url: s3, data: r3, method: a3, timeout: 3e3, header: { "content-type": i3 }, success: function(e4) {
            e4 && e4.data && e4.data.NetCheckInfo && M2.l("".concat("getconninfo ok in", " miniapp. ret:"), e4.data), t3();
          }, fail: function() {
            e3(new L2({ code: k2.NETWORK_ERROR }));
          } }) : (n3 = new XMLHttpRequest(), o3 = setTimeout(function() {
            n3.abort(), e3(new L2({ code: k2.NETWORK_TIMEOUT }));
          }, 3e3), n3.onreadystatechange = function() {
            4 === n3.readyState && (o3 && clearTimeout(o3), 200 === n3.status || 304 === n3.status ? (n3.responseText && -1 < n3.responseText.indexOf("NetCheckInfo") && M2.l("".concat("getconninfo ok in", " web. ret:"), JSON.parse(n3.responseText)), t3()) : e3(new L2({ code: k2.NETWORK_ERROR })));
          }, n3.open(a3, s3, true), n3.setRequestHeader("Content-type", i3), r3 ? n3.send(r3) : n3.send());
        });
      }, Ma = (t2(Oa, c2), e2(Oa, [{ key: "onCheckTimer", value: function(e3) {
        this._socketHandler && (this.isLoggedIn() ? (0 < this._timerForNotLoggedIn && (clearInterval(this._timerForNotLoggedIn), this._timerForNotLoggedIn = -1), this._socketHandler.onCheckTimer(e3)) : this._socketHandler.onCheckTimer(1), this._checkNextPing());
      } }, { key: "onErrorCodeNotZero", value: function(e3) {
        this.get(20).onErrorCodeNotZero(e3);
      } }, { key: "onMessage", value: function(e3) {
        this.get(20).onMessage(e3);
      } }, { key: "send", value: function(e3) {
        return this._socketHandler ? this._previousState !== R2.NET_STATE_CONNECTED && e3.head.servcmd.includes(G2.SSO_STAT) ? (this.reConnect(), this.isPrivateNetWork() ? Promise.resolve() : this._sendLogViaHTTP(e3)) : this._socketHandler.send(e3) : Promise.reject();
      } }, { key: "_sendLogViaHTTP", value: function(e3) {
        var t3 = a2.HOST.CURRENT.STAT, t3 = "".concat(t3, "/v4/imopenstat/tim_web_report_v2?sdkappid=").concat(e3.head.sdkappid, "&reqtime=").concat(Date.now()), e3 = JSON.stringify(e3.body);
        return Ia("POST", t3, e3);
      } }, { key: "simplySend", value: function(e3) {
        return this._socketHandler ? this._socketHandler.simplySend(e3) : Promise.reject();
      } }, { key: "onOpen", value: function() {
        this._ping();
      } }, { key: "onClose", value: function() {
        this._socketHandler && this._socketHandler.getReconnectFlag() && this._emitNetStateChangeEvent(R2.NET_STATE_DISCONNECTED), this.reConnect();
      } }, { key: "onError", value: function() {
        v2 && !Ie2 && this.warn("DomainNameInMP"), this._emitNetStateChangeEvent(R2.NET_STATE_DISCONNECTED);
      } }, { key: "getKeyMap", value: function(e3) {
        return this.get(20).getKeyMap(e3);
      } }, { key: "onRequestTimeout", value: function() {
        3e4 <= Date.now() - this._lastDiagnoseTS && this.diagnose();
      } }, { key: "onSendFail", value: function() {
        this._emitNetStateChangeEvent(R2.NET_STATE_DISCONNECTED);
      } }, { key: "onReconnected", value: function() {
        M2.l("".concat(this._n, ".onReconnected cost:").concat(an(this._disconnectedTS, true, true))), this._m.restartTimer(), this.get(20).onReconnected(an(this._disconnectedTS, false, false)), this._disconnectedTS = 0, this._emitNetStateChangeEvent(R2.NET_STATE_CONNECTED);
      } }, { key: "onReconnectFailed", value: function() {
        M2.l("".concat(this._n, ".onReconnectFailed")), this._emitNetStateChangeEvent(R2.NET_STATE_DISCONNECTED);
      } }, { key: "setIsWorkerEnabled", value: function(e3) {
        this._socketHandler && this._socketHandler.setIsWorkerEnabled(false);
      } }, { key: "offline", value: function() {
        this._emitNetStateChangeEvent(R2.NET_STATE_DISCONNECTED);
      } }, { key: "reConnect", value: function() {
        var e3 = 0 < arguments.length && void 0 !== arguments[0] && arguments[0], t3 = false, n3 = (this._socketHandler && (t3 = this._socketHandler.getReconnectFlag()), "forcedFlag:".concat(e3, " fatalErrorFlag:").concat(this._fatalErrorFlag, " previousState:").concat(this._previousState, " reconnectFlag:").concat(t3));
        M2.l("".concat(this._n, ".reConnect ").concat(n3)), this._fatalErrorFlag || !this._socketHandler || true !== e3 && this._previousState === R2.NET_STATE_CONNECTING && t3 || (this._socketHandler.forcedReconnect(), this._emitNetStateChangeEvent(R2.NET_STATE_CONNECTING));
      } }, { key: "_emitNetStateChangeEvent", value: function(e3) {
        this._previousState !== e3 && (M2.l("".concat(this._n, "._emitNetStateChangeEvent from ").concat(this._previousState, " to ").concat(e3)), e3 === R2.NET_STATE_DISCONNECTED && 0 === this._disconnectedTS && (this._disconnectedTS = Date.now(), this.diagnose()), this._previousState = e3, this.emitOEvt(h2.NET_STATE_CHANGE, { state: e3 }));
      } }, { key: "_ping", value: function() {
        var e3, n3 = this;
        true !== this._probing && (this._probing = true, e3 = this.get(20).getProtocolData({ P: G2.PING }), this.send(e3).then(function() {
          n3._probing = false;
        }).catch(function(e4) {
          n3._probing = false;
          var t3 = n3.get(15).isOnline();
          M2.w("".concat(n3._n, "._ping failed. bOnline:").concat(t3, " error:"), e4), e4 && 60002 === e4.code ? (new P2("error").setMessage("code:".concat(e4.code, " message:").concat(e4.message)).end(), n3._fatalErrorFlag = true, n3._emitNetStateChangeEvent(R2.NET_STATE_DISCONNECTED)) : t3 ? n3.reConnect() : n3._emitNetStateChangeEvent(R2.NET_STATE_DISCONNECTED);
        }));
      } }, { key: "_checkNextPing", value: function() {
        this._socketHandler && this._socketHandler.isConnected() && Date.now() >= this._socketHandler.getNextPingTs() && this._ping();
      } }, { key: "dealloc", value: function() {
        this._socketHandler && (this._socketHandler.close(), this._socketHandler = null), -1 < this._timerForNotLoggedIn && clearInterval(this._timerForNotLoggedIn);
      } }, { key: "onRestApiKickedOut", value: function() {
        this._socketHandler && (this._socketHandler.close(), this.reConnect(true));
      } }, { key: "canIUseInflate", value: function() {
        return this._m.canIUseInflate();
      } }, { key: "getSocketID", value: function() {
        if (this._socketHandler)
          return this._socketHandler.getSocketID();
      } }, { key: "diagnose", value: function() {
        this.isPrivateNetWork() || (this._lastDiagnoseTS = Date.now(), this._diagnoseBySSO(), this._diagnoseByCDN());
      } }, { key: "_diagnoseBySSO", value: function() {
        var t3 = this, e3 = this._socketHandler.getURL(), n3 = e3.split("/")[2];
        n3.startsWith("ws") && (e3 = e3.slice(e3.indexOf("info?") + 5), n3 = "https://".concat(n3, "/v3/netcheck/getconninfo?").concat(e3, "&reqtime=").concat(Date.now()), Ia("GET", n3).catch(function(e4) {
          M2.w("".concat(t3._n, "._diagnoseBySSO failed. error:"), e4);
        }));
      } }, { key: "_diagnoseByCDN", value: function() {
        var t3 = this, e3 = this._socketHandler.getURL(), e3 = e3.slice(e3.indexOf("info?") + 5), e3 = "https://boce-cdn.my-imcloud.com/v3/netcheck/getconninfo?".concat(e3, "&reqtime=").concat(Date.now());
        Ia("GET", e3).catch(function(e4) {
          M2.w("".concat(t3._n, "._diagnoseByCDN failed. error:"), e4);
        });
      } }, { key: "reset", value: function() {
        M2.l("".concat(this._n, ".reset")), this._previousState = R2.NET_STATE_CONNECTED, this._probing = false, this._fatalErrorFlag = false, this._timerForNotLoggedIn = setInterval(this.onCheckTimer.bind(this), 1e3), this._disconnectedTS = 0, this._lastDiagnoseTS = 0;
      } }])), ya = ["a2", "tinyid"], Ca = ["a2", "tinyid"], Ta = e2(function e3(t3) {
        p2(this, e3), this._n = "PHandler", this._sessionM = t3, this._map = /* @__PURE__ */ new Map(), this._fillMap();
      }, [{ key: "_fillMap", value: function() {
        this._map.clear();
        var e3 = this._sessionM.genCommonHead(), t3 = this._sessionM.genCosSpecifiedHead(), n3 = this._sessionM.genSSOReportHead();
        this._map.set(G2.LOGIN, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.IM_OPEN_STATUS, ".").concat(G2.LOGIN) }), body: { state: "Online", isWebUniapp: 0, deviceBrand: 0, customInfo: "" }, keyMap: { req: { deviceBrand: "InstType" }, res: { InstId: "instanceID", HelloInterval: "helloInterval", RichMsgAuthKey: "authKey" } } }), this._map.set(G2.LOGOUT, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.IM_OPEN_STATUS, ".").concat(G2.LOGOUT) }), body: { type: 0, isWebUniapp: 0 }, keyMap: { req: { type: "wslogout_type" } } }), this._map.set(G2.HELLO, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.IM_OPEN_STATUS, ".").concat(G2.HELLO) }), body: { isWebUniapp: 0 }, keyMap: { res: { NewInstInfo: "newInstanceInfo" } } }), this._map.set(G2.KICK_OTHER, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.STAT_SERVICE, ".").concat(G2.KICK_OTHER) }), body: {} }), this._map.set(G2.COS_SIGN, { head: y2(y2({}, t3), {}, { servcmd: "".concat(a2.NAME.IM_COS_SIGN, ".").concat(G2.COS_SIGN) }), body: { cmd: "open_im_cos_svc", subCmd: "get_cos_token", duration: 300, version: 2 }, keyMap: { req: { userSig: "usersig", subCmd: "sub_cmd", cmd: "cmd", duration: "duration", version: "version" }, res: { expired_time: "expiredTime", bucket_name: "bucketName", session_token: "sessionToken", tmp_secret_id: "secretId", tmp_secret_key: "secretKey" } } }), this._map.set(G2.COS_PRE_SIG, { head: y2(y2({}, t3), {}, { servcmd: "".concat(a2.NAME.CUSTOM_UPLOAD, ".").concat(G2.COS_PRE_SIG) }), body: { fileType: void 0, fileName: void 0, uploadMethod: 0, duration: 900 }, keyMap: { req: { userSig: "usersig", fileType: "file_type", fileName: "file_name", uploadMethod: "upload_method" }, res: { expired_time: "expiredTime", request_id: "requestId", head_url: "headUrl", upload_url: "uploadUrl", download_url: "downloadUrl", ci_url: "ciUrl", snapshot_url: "requestSnapshotUrl" } } }), this._map.set(G2.SIMPLE_COS_PRE_SIG, { head: y2(y2({}, t3), {}, { servcmd: "".concat(a2.NAME.CUSTOM_UPLOAD, ".").concat(G2.SIMPLE_COS_PRE_SIG) }), body: { uploadMethod: 0, platform: 2, SDKAppID: 0, userID: "", conversationType: 1, uploadConfig: [{ fileID: 1, fileType: 1, fileName: "" }] }, keyMap: { req: { platform: "uint32_platform", SDKAppID: "uint32_sdkappid", userID: "str_user_id", uploadMethod: "uint32_upload_method", conversationType: "uint32_scene", uploadConfig: "rpt_upload_object", fileID: "uint32_file_id", fileType: "uint32_file_type", fileName: "str_file_name" }, res: { str_final_ip: "uploadIP", rpt_pre_sig: "preSig", uint32_file_id: "fileID", uint32_exist_flag: "existFlag", str_download_url: "downloadUrl", str_upload_url: "uploadUrl", str_snapshot_url: "requestSnapshotUrl", str_file_key: "fileKey" } } }), this._map.set(G2.GET_IMAGE_INFO, { head: y2(y2({}, t3), {}, { servcmd: "".concat(a2.NAME.CUSTOM_UPLOAD, ".").concat(G2.GET_IMAGE_INFO) }), body: { imageUrl: "" }, keyMap: { req: { imageUrl: "str_image_url" }, res: { rpt_msg_image_info: "imageInfoArray", uint32_image_type: "type", str_url: "url", uint32_width: "width", uint32_height: "height", str_image_format: "imageFormat" } } }), this._map.set(G2.GET_IP, { head: y2(y2({}, t3), {}, { servcmd: "".concat(a2.NAME.CUSTOM_UPLOAD, ".").concat(G2.GET_IP) }), body: { domainName: "" }, keyMap: { req: { domainName: "str_domain" }, res: { str_final_ip: "ip" } } }), this._map.set(G2.VIDEO_COVER, { head: y2(y2({}, t3), {}, { servcmd: "".concat(a2.NAME.CUSTOM_UPLOAD, ".").concat(G2.VIDEO_COVER) }), body: { version: 1, platform: void 0, coverName: void 0, requestSnapshotUrl: void 0 }, keyMap: { req: { version: "version", platform: "platform", coverName: "cover_name", requestSnapshotUrl: "snapshot_url" }, res: { error_code: "errorCode", error_msg: "errorInfo", download_url: "snapshotUrl" } } }), this._map.set(G2.FETCH_COMMERCIAL_CONFIG, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.IM_CONFIG_MANAGER, ".").concat(G2.FETCH_COMMERCIAL_CONFIG) }), body: { SDKAppID: 0 }, keyMap: { req: { SDKAppID: "uint32_sdkappid" }, res: { int32_error_code: "errorCode", str_error_message: "errorMessage", str_purchase_bits: "purchaseBits", uint32_expired_time: "expiredTime" } } }), this._map.set(G2.PUSHED_COMMERCIAL_CONFIG, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.IM_CONFIG_MANAGER, ".").concat(G2.PUSHED_COMMERCIAL_CONFIG) }), body: {}, keyMap: { res: { int32_error_code: "errorCode", str_error_message: "errorMessage", str_purchase_bits: "purchaseBits", uint32_expired_time: "expiredTime" } } }), this._map.set(G2.FETCH_CLOUD_CTRL_CONFIG, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.IM_CONFIG_MANAGER, ".").concat(G2.FETCH_CLOUD_CTRL_CONFIG) }), body: { SDKAppID: 0, version: 0 }, keyMap: { req: { SDKAppID: "uint32_sdkappid", version: "uint64_version" }, res: { int32_error_code: "errorCode", str_error_message: "errorMessage", str_json_config: "cloudControlConfig", uint32_expired_time: "expiredTime", uint32_sdkappid: "SDKAppID", uint64_version: "version" } } }), this._map.set(G2.PUSHED_CLOUD_CTRL_CONFIG, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.IM_CONFIG_MANAGER, ".").concat(G2.PUSHED_CLOUD_CTRL_CONFIG) }), body: {}, keyMap: { res: { int32_error_code: "errorCode", str_error_message: "errorMessage", str_json_config: "cloudControlConfig", uint32_expired_time: "expiredTime", uint32_sdkappid: "SDKAppID", uint64_version: "version" } } }), this._map.set(G2.OVERLOAD_NOTIFY, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.OVERLOAD_PUSH, ".").concat(G2.OVERLOAD_NOTIFY) }), body: {}, keyMap: { res: { OverLoadServCmd: "overloadCommand", DelaySecs: "waitingTime" } } }), this._map.set(G2.SYNC_UNREAD_MSG, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.OPEN_IM, ".").concat(G2.SYNC_UNREAD_MSG) }), body: { cookie: "", syncFlag: 0, needAbstract: 1, isOnlineSync: 0, needSignaling: 1, needCachedMsg: 1 }, keyMap: { req: { fromAccount: "From_Account", toAccount: "To_Account", from: "From_Account", to: "To_Account", time: "MsgTimeStamp", sequence: "MsgSeq", random: "MsgRandom", elements: "MsgBody" }, res: { MsgList: "messageList", SyncFlag: "syncFlag", To_Account: "to", From_Account: "from", ClientSeq: "clientSequence", MsgSeq: "sequence", NoticeSeq: "noticeSequence", NotifySeq: "notifySequence", MsgRandom: "random", MsgTimeStamp: "time", MsgContent: "content", ToGroupId: "to", MsgKey: "messageKey", GroupTips: "groupTips", MsgBody: "elements", MsgType: "type", C2CRemainingUnreadCount: "C2CRemainingUnreadList", C2CPairUnreadCount: "C2CPairUnreadList" } } }), this._map.set(G2.GET_PROFANITY_LIST, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.IM_MSG_AUDIT_MGR, ".").concat(G2.GET_PROFANITY_LIST) }), body: { version: 0, deviceID: "", startIndex: void 0 }, keyMap: { req: { version: "uint64_version", deviceID: "str_device_id", startIndex: "uint64_start_index" }, res: { msg_cmd_error_code: "errorInfo", str_err_msg: "errorMessage", uint32_code: "errorCode", msg_scene_ctl_config: "filterConfig", uint64_c2c_custom_msg_flag: "c2c_custom_message", uint64_c2c_text_msg_flag: "c2c_text_message", uint64_group_custom_msg_flag: "group_custom_message", uint64_group_text_msg_flag: "group_text_message", uint64_group_info_flag: "group_profile", uint64_group_member_info_flag: "group_member_profile", uint64_relation_chain_flag: "sns", uint64_user_info_flag: "user_profile", rpt_msg_dirty_word: "lexicon", str_dirty_word: "profanity", str_replaced_content: "replacement", uint64_filter_type: "filterType", uint64_id: "id", uint64_word_type: "profanityType", uint64_complete_flag: "completeFlag", uint64_next_start_index: "nextStartIndex", uint64_version: "version", uint64_expired_time: "expiredTime" } } }), this._map.set(G2.SEND_C2C_MSG, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.OPEN_IM, ".").concat(G2.SEND_C2C_MSG) }), body: { fromAccount: "", toAccount: "", msgSeq: 0, msgRandom: 0, msgBody: [], cloudCustomData: void 0, nick: "", avatar: "", msgLifeTime: void 0, offlinePushInfo: { pushFlag: 0, title: "", desc: "", ext: "", apnsInfo: { sound: "", badgeMode: 0, isVoipPush: void 0, image: "", interruptionLevel: "active", contentAvailable: 0 }, androidInfo: { sound: "", XiaoMiChannelID: "", OPPOChannelID: "", GoogleChannelID: "", VIVOClassification: 1, VIVOCategory: "", HuaWeiCategory: "", OPPOCategory: "", HuaWeiImage: "", HonorImage: "", GoogleImage: "", HonorImportance: "", MeizuNotifyType: void 0 } }, messageControlInfo: void 0, clientTime: void 0, needReadReceipt: 0, isSupportExtension: 0, isRelayMessage: 0, cmConfigID: void 0, forbidCallbackControl: void 0 }, keyMap: { req: { fromAccount: "From_Account", toAccount: "To_Account", msgTimeStamp: "MsgTimeStamp", msgSeq: "MsgSeq", msgRandom: "MsgRandom", msgBody: "MsgBody", count: "MaxCnt", lastMessageTime: "LastMsgTime", messageKey: "MsgKey", peerAccount: "Peer_Account", data: "Data", description: "Desc", extension: "Ext", type: "MsgType", content: "MsgContent", sizeType: "Type", uuid: "UUID", url: "", imageUrl: "URL", fileUrl: "Url", remoteAudioUrl: "Url", remoteVideoUrl: "VideoUrl", thumbUUID: "ThumbUUID", videoUUID: "VideoUUID", videoUrl: "", downloadFlag: "Download_Flag", nick: "From_AccountNick", avatar: "From_AccountHeadurl", from: "From_Account", time: "MsgTimeStamp", messageRandom: "MsgRandom", messageSequence: "MsgSeq", elements: "MsgBody", clientSequence: "ClientSeq", payload: "MsgContent", messageList: "MsgList", messageNumber: "MsgNum", abstractList: "AbstractList", messageBody: "MsgBody", needReadReceipt: "IsNeedReadReceipt", GoogleChannelID: "GoogleChannelID", XiaoMiChannelID: "XiaoMiChannelID", OPPOChannelID: "OPPOChannelID", OPPOCategory: "OPPOCategory", VIVOClassification: "VIVOClassification", VIVOCategory: "VIVOCategory", HonorImportance: "HonorImportance", MeizuNotifyType: "MeiZuNoticeMsgType" } } }), this._map.set(G2.SEND_GRP_MSG, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP, ".").concat(G2.SEND_GRP_MSG) }), body: { fromAccount: "", groupID: "", random: 0, clientSequence: 0, priority: "", msgBody: [], cloudCustomData: void 0, onlineOnlyFlag: 0, offlinePushInfo: { pushFlag: 0, title: "", desc: "", ext: "", apnsInfo: { sound: "", badgeMode: 0, isVoipPush: void 0, image: "", interruptionLevel: "active", contentAvailable: 0 }, androidInfo: { sound: "", XiaoMiChannelID: "", OPPOChannelID: "", GoogleChannelID: "", VIVOClassification: 1, VIVOCategory: "", HuaWeiCategory: "", OPPOCategory: "", HuaWeiImage: "", HonorImage: "", GoogleImage: "", HonorImportance: "", MeizuNotifyType: void 0 } }, groupAtInfo: [], messageControlInfo: void 0, clientTime: void 0, needReadReceipt: 0, topicID: void 0, receiverList: void 0, isSupportExtension: 0, isRelayMessage: 0, cmConfigID: void 0, forbidCallbackControl: void 0 }, keyMap: { req: { to: "GroupId", extension: "Ext", data: "Data", description: "Desc", random: "Random", sequence: "ReqMsgSeq", count: "ReqMsgNumber", type: "MsgType", priority: "MsgPriority", content: "MsgContent", elements: "MsgBody", sizeType: "Type", uuid: "UUID", url: "", imageUrl: "URL", fileUrl: "Url", remoteAudioUrl: "Url", remoteVideoUrl: "VideoUrl", thumbUUID: "ThumbUUID", videoUUID: "VideoUUID", videoUrl: "", downloadFlag: "Download_Flag", clientSequence: "ClientSeq", from: "From_Account", time: "MsgTimeStamp", messageRandom: "MsgRandom", messageSequence: "MsgSeq", payload: "MsgContent", messageList: "MsgList", messageNumber: "MsgNum", abstractList: "AbstractList", messageBody: "MsgBody", needReadReceipt: "NeedReadReceipt", receiverList: "To_Account", GoogleChannelID: "GoogleChannelID", XiaoMiChannelID: "XiaoMiChannelID", OPPOChannelID: "OPPOChannelID", OPPOCategory: "OPPOCategory", VIVOClassification: "VIVOClassification", VIVOCategory: "VIVOCategory", HonorImportance: "HonorImportance", MeizuNotifyType: "MeiZuNoticeMsgType" }, res: { MsgTime: "time", MsgSeq: "sequence" } } }), this._map.set(G2.REVOKE_C2C_MSG, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.OPEN_IM, ".").concat(G2.REVOKE_C2C_MSG) }), body: { msgInfo: { fromAccount: "", toAccount: "", msgTimeStamp: 0, msgSeq: 0, msgRandom: 0 } }, keyMap: { req: { msgInfo: "MsgInfo", msgTimeStamp: "MsgTimeStamp", msgSeq: "MsgSeq", msgRandom: "MsgRandom" } } }), this._map.set(G2.REVOKE_GRP_MSG, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP, ".").concat(G2.REVOKE_GRP_MSG) }), body: { groupID: "", msgSeqList: void 0, topicID: "" }, keyMap: { req: { msgSeqList: "MsgSeqList", msgSeq: "MsgSeq" } } }), this._map.set(G2.GET_C2C_ROAMING_MSG, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.OPEN_IM, ".").concat(G2.GET_C2C_ROAMING_MSG) }), body: { peerAccount: "", count: 15, lastMessageTime: 0, messageKey: "", withRecalledMessage: 1, direction: 0 }, keyMap: { req: { messageKey: "MsgKey", peerAccount: "Peer_Account", count: "MaxCnt", lastMessageTime: "LastMsgTime", withRecalledMessage: "WithRecalledMsg", direction: "GetDirection" }, res: { LastMsgTime: "lastMessageTime", IsNeedReadReceipt: "needReadReceipt", IsPeerRead: "readReceiptSentByPeer" } } }), this._map.set(G2.MODIFY_C2C_MSG, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.OPEN_IM, ".").concat(G2.MODIFY_C2C_MSG) }), body: { from: "", to: "", sequence: 0, random: 0, time: 0, version: 0, elements: void 0, cloudCustomData: void 0 }, keyMap: { req: { sequence: "MsgSeq", random: "MsgRandom", time: "MsgTime", version: "MsgVersion", type: "MsgType", content: "MsgContent" } } }), this._map.set(G2.GET_GRP_ROAMING_MSG, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP, ".").concat(G2.GET_GRP_ROAMING_MSG) }), body: { withRecalledMsg: 1, groupID: "", count: 15, sequence: "", topicID: void 0 }, keyMap: { req: { sequence: "ReqMsgSeq", count: "ReqMsgNumber", withRecalledMessage: "WithRecalledMsg" }, res: { Random: "random", MsgTime: "time", MsgSeq: "sequence", ReqMsgSeq: "sequence", RspMsgList: "messageList", IsSystemMsg: "isSystemMessage", ToGroupId: "to", EnumFrom_AccountType: "fromAccountType", EnumTo_AccountType: "toAccountType", GroupCode: "groupCode", MsgPriority: "priority", MsgBody: "elements", MsgType: "type", MsgContent: "content", IsFinished: "complete", Download_Flag: "downloadFlag", ClientSeq: "clientSequence", ThumbUUID: "thumbUUID", VideoUUID: "videoUUID", ToTopicId: "topicID", InvisibleMsgSeq: "invisibleSequenceList", NextReqMsgSeq: "nextSequence" } } }), this._map.set(G2.SET_C2C_MSG_READ, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.OPEN_IM, ".").concat(G2.SET_C2C_MSG_READ) }), body: { C2CMsgReaded: void 0 }, keyMap: { req: { lastMessageTime: "LastedMsgTime" } } }), this._map.set(G2.SET_C2C_PEER_MUTE_NOTIFICATIONS, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.OPEN_IM, ".").concat(G2.SET_C2C_PEER_MUTE_NOTIFICATIONS) }), body: { userIDList: void 0, muteFlag: 0 }, keyMap: { req: { userIDList: "Peer_Account", muteFlag: "Mute_Notifications" } } }), this._map.set(G2.GET_C2C_PEER_MUTE_NOTIFICATIONS, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.OPEN_IM, ".").concat(G2.GET_C2C_PEER_MUTE_NOTIFICATIONS) }), body: { toAccount: void 0, userIDList: void 0 }, keyMap: { req: { userIDList: "Peer_Account" }, res: { MuteNotificationsList: "muteFlagList" } } }), this._map.set(G2.SET_GRP_MSG_READ, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP, ".").concat(G2.SET_GRP_MSG_READ) }), body: { groupID: void 0, messageReadSeq: void 0, topicID: void 0 }, keyMap: { req: { messageReadSeq: "MsgReadedSeq" } } }), this._map.set(G2.SET_ALL_MSG_READ, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.OPEN_IM, ".").concat(G2.SET_ALL_MSG_READ) }), body: { readAllC2CMessage: 0, groupMessageReadInfoList: [] }, keyMap: { req: { readAllC2CMessage: "C2CReadAllMsg", groupMessageReadInfoList: "GroupReadInfo", messageSequence: "MsgSeq" }, res: { C2CReadAllMsg: "readAllC2CMessage", GroupReadInfoArray: "groupMessageReadInfoList" } } }), this._map.set(G2.DEL_C2C_MSG, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.OPEN_IM, ".").concat(G2.DEL_C2C_MSG) }), body: { fromAccount: "", to: "", keyList: void 0 }, keyMap: { req: { keyList: "MsgKeyList" } } }), this._map.set(G2.DEL_GRP_MSG, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP, ".").concat(G2.DEL_GRP_MSG) }), body: { groupID: "", deleter: "", keyList: void 0, topicID: void 0 }, keyMap: { req: { deleter: "Deleter_Account", keyList: "Seqs" } } }), this._map.set(G2.TRANSLATE_TEXT, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.IM_OPEN_TRANSLATE, ".").concat(G2.TRANSLATE_TEXT) }), body: { sourceTextList: void 0, SDKAppID: 0, from: 0, source: "", target: "" }, keyMap: { req: { sourceTextList: "SourceText", SDKAppID: "SdkAppId", from: "FromAccount" }, res: { TargetText: "translatedTextList", RequestId: "requestID", CmdErrorCode: "error", ErrorCode: "code", ErrorInfo: "message" } } }), this._map.set(G2.VOICE_TO_TEXT, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.IM_OPEN_SPEECH, ".").concat(G2.VOICE_TO_TEXT) }), body: { url: "", SDKAppID: 0, format: "", sourceType: 0, language: "" }, keyMap: { req: { url: "BytesUrl", SDKAppID: "Uint32Sdkappid", format: "BytesVoiceFormat", sourceType: "Uint64SourceType", language: "BytesEngServiceType" }, res: { BytesRequestid: "requestID", BytesResult: "result", CmdErrorCode: "error", ErrorCode: "code", ErrorInfo: "message" } } }), this._map.set(G2.MODIFY_GRP_MSG, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.OPEN_IM, ".").concat(G2.MODIFY_GRP_MSG) }), body: { groupID: "", topicID: void 0, sequence: 0, version: 0, elements: void 0, cloudCustomData: void 0 }, keyMap: { req: { sequence: "MsgSeq", version: "MsgVersion", type: "MsgType", content: "MsgContent" } } }), this._map.set(G2.GET_READ_RECEIPT, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP, ".").concat(G2.GET_READ_RECEIPT) }), body: { groupID: "", sequenceList: void 0 }, keyMap: { req: { sequence: "MsgSeq" } } }), this._map.set(G2.SEND_C2C_READ_RECEIPT, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.OPEN_IM, ".").concat(G2.SEND_C2C_READ_RECEIPT) }), body: { peerAccount: "", messageInfoList: void 0 }, keyMap: { req: { peerAccount: "Peer_Account", messageInfoList: "C2CMsgInfo", fromAccount: "From_Account", toAccount: "To_Account", sequence: "MsgSeq", random: "MsgRandom", time: "MsgTime", clientTime: "MsgClientTime" } } }), this._map.set(G2.SEND_READ_RECEIPT, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP, ".").concat(G2.SEND_READ_RECEIPT) }), body: { groupID: "", sequenceList: void 0 }, keyMap: { req: { sequenceList: "MsgSeqList", sequence: "MsgSeq" } } }), this._map.set(G2.GET_READ_RECEIPT_DETAIL, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP, ".").concat(G2.GET_READ_RECEIPT_DETAIL) }), body: { groupID: "", sequence: void 0, flag: 0, cursor: 0, count: 0 }, keyMap: { req: { sequence: "MsgSeq", count: "Num" }, res: { ReadList: "readUserIDList", Read_Account: "userID", UnreadList: "unreadUserIDList", Unread_Account: "userID", IsFinish: "isCompleted" } } }), this._map.set(G2.GET_GRP_RECEIPTS_BY_USERS, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP, ".").concat(G2.GET_GRP_RECEIPTS_BY_USERS) }), body: { groupID: "", dataList: void 0 }, keyMap: { req: { dataList: "MemberReadMsgList", sequence: "MsgSeq", userIDList: "MemberList_Account" }, res: { MsgReadList: "dataList", Read_Account: "userID", Read_Time: "readTime" } } }), this._map.set(G2.MODIFY_C2C_MSG_EXT, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.OPEN_IM_MSG_EXT, ".").concat(G2.MODIFY_C2C_MSG_EXT) }), body: { from: void 0, to: void 0, messageKey: void 0, operateType: void 0, extensionList: void 0 } }), this._map.set(G2.GET_C2C_MSG_EXT, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.OPEN_IM_MSG_EXT, ".").concat(G2.GET_C2C_MSG_EXT) }), body: { from: void 0, to: void 0, messageKey: void 0, startSequence: void 0 } }), this._map.set(G2.MODIFY_GRP_MSG_EXT, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.OPEN_IM_MSG_EXT, ".").concat(G2.MODIFY_GRP_MSG_EXT) }), body: { groupID: void 0, topicID: void 0, messageSequence: void 0, operateType: void 0, extensionList: void 0 } }), this._map.set(G2.GET_GRP_MSG_EXT, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.OPEN_IM_MSG_EXT, ".").concat(G2.GET_GRP_MSG_EXT) }), body: { groupID: void 0, topicID: void 0, messageSequence: void 0, startSequence: void 0 } }), this._map.set(G2.ADD_C2C_MSG_REACTION, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.OPEN_IM_MSG_EXT, ".").concat(G2.ADD_C2C_MSG_REACTION) }), body: { from: void 0, to: void 0, reactionID: void 0, messageKey: void 0, userIDList: void 0 }, keyMap: { req: { userIDList: "Add_Account" } } }), this._map.set(G2.RM_C2C_MSG_REACTION, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.OPEN_IM_MSG_EXT, ".").concat(G2.RM_C2C_MSG_REACTION) }), body: { from: void 0, to: void 0, reactionID: void 0, messageKey: void 0, userIDList: void 0 }, keyMap: { req: { userIDList: "Del_Account" } } }), this._map.set(G2.GET_C2C_MSG_REACTIONS, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.OPEN_IM_MSG_EXT, ".").concat(G2.GET_C2C_MSG_REACTIONS) }), body: { from: void 0, to: void 0, messageKeyList: void 0, count: void 0 } }), this._map.set(G2.GET_C2C_MSG_REACTION_USER_LIST, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.OPEN_IM_MSG_EXT, ".").concat(G2.GET_C2C_MSG_REACTION_USER_LIST) }), body: { from: void 0, to: void 0, reactionID: void 0, messageKey: void 0, count: void 0 } }), this._map.set(G2.ADD_GRP_MSG_REACTION, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.OPEN_IM_MSG_EXT, ".").concat(G2.ADD_GRP_MSG_REACTION) }), body: { groupID: void 0, topicID: void 0, reactionID: void 0, messageSequence: void 0, userIDList: void 0 }, keyMap: { req: { userIDList: "Add_Account" } } }), this._map.set(G2.RM_GRP_MSG_REACTION, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.OPEN_IM_MSG_EXT, ".").concat(G2.RM_GRP_MSG_REACTION) }), body: { groupID: void 0, topicID: void 0, reactionID: void 0, messageSequence: void 0, userIDList: void 0 }, keyMap: { req: { userIDList: "Del_Account" } } }), this._map.set(G2.GET_GRP_MSG_REACTIONS, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.OPEN_IM_MSG_EXT, ".").concat(G2.GET_GRP_MSG_REACTIONS) }), body: { groupID: void 0, topicID: void 0, messageSequenceList: void 0, count: void 0 }, keyMap: { res: { MsgSeq: "messageSequence" } } }), this._map.set(G2.GET_GRP_MSG_REACTION_USER_LIST, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.OPEN_IM_MSG_EXT, ".").concat(G2.GET_GRP_MSG_REACTION_USER_LIST) }), body: { groupID: void 0, topicID: void 0, reactionID: void 0, messageSequence: void 0, nextSeq: void 0, count: void 0 } }), this._map.set(G2.GET_C2C_PEER_READ_TIME, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.OPEN_IM, ".").concat(G2.GET_C2C_PEER_READ_TIME) }), body: { userIDList: void 0 }, keyMap: { req: { userIDList: "To_Account" }, res: { ReadTime: "peerReadTimeList" } } }), this._map.set(G2.PAGING_GET_CONV_LIST, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.RECENT_CONTACT, ".").concat(G2.PAGING_GET_CONV_LIST) }), body: { fromAccount: void 0, timeStamp: void 0, startIndex: void 0, pinnedTimeStamp: void 0, pinnedStartIndex: void 0, orderType: void 0, messageAssistFlag: 15, assistFlag: 31 }, keyMap: { req: { messageAssistFlag: "MsgAssistFlags", assistFlag: "AssistFlags", pinnedTimeStamp: "TopTimeStamp", pinnedStartIndex: "TopStartIndex" }, res: { SessionItem: "conversations", ToAccount: "groupID", To_Account: "userID", UnreadMsgCount: "unreadCount", MsgGroupReadedSeq: "messageReadSeq", C2cPeerReadTime: "c2cPeerReadTime", LastMsgFlags: "lastMessageFlag", TopFlags: "isPinned", TopTimeStamp: "pinnedTimeStamp", TopStartIndex: "pinnedStartIndex", GroupId: "convGroupID", C2cRemark: "friendRemark", MsgRecvOption: "messageRemindType", GroupIgnoredUnreadSeqCount: "noUnreadCount", GroupNextMsgSeq: "nextMessageSeq" } } }), this._map.set(G2.DEL_CONV, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.RECENT_CONTACT, ".").concat(G2.DEL_CONV) }), body: { fromAccount: "", conversationList: void 0, clearHistoryMessage: void 0 }, keyMap: { req: { toGroupID: "ToGroupid", clearHistoryMessage: "ClearRamble", conversationList: "ContactItem" }, res: { ResultItem: "resultList", ToGroupid: "groupID", ResultCode: "code", ResultInfo: "info" } } }), this._map.set(G2.CLEAR_HISTORY_MSG, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.RECENT_CONTACT, ".").concat(G2.CLEAR_HISTORY_MSG) }), body: { fromAccount: "", toAccount: void 0, type: 1, toGroupID: void 0 }, keyMap: { req: { toGroupID: "ToGroupid" } } }), this._map.set(G2.PIN_CONV, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.RECENT_CONTACT, ".").concat(G2.PIN_CONV) }), body: { fromAccount: "", operationType: 1, itemList: void 0 }, keyMap: { req: { itemList: "RecentContactItem" } } }), this._map.set(G2.DEL_GROUP_AT_TIPS, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.OPEN_IM, ".").concat(G2.DEL_GROUP_AT_TIPS) }), body: { messageListToDelete: void 0 }, keyMap: { req: { messageListToDelete: "DelMsgList", messageSeq: "MsgSeq", messageRandom: "MsgRandom" } } }), this._map.set(G2.SET_CONV_CUSTOM_DATA, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.RECENT_CONTACT, ".").concat(G2.MARK_CONV) }), body: { fromAccount: "", itemList: void 0 }, keyMap: { req: { itemList: "MarkItem", operationType: "OptType", groupID: "ToGroupId" }, res: { ToGroupId: "groupID", OptType: "operationType" } } }), this._map.set(G2.MARK_CONV, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.RECENT_CONTACT, ".").concat(G2.MARK_CONV) }), body: { fromAccount: "", itemList: void 0 }, keyMap: { req: { itemList: "MarkItem", operationType: "OptType", groupID: "ToGroupId" }, res: { ToGroupId: "groupID", OptType: "operationType" } } }), this._map.set(G2.CREATE_CONV_GRP, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.RECENT_CONTACT, ".").concat(G2.CREATE_CONV_GRP) }), body: { fromAccount: "", itemList: void 0 }, keyMap: { req: { itemList: "GroupContactItem", groupID: "ToGroupId" }, res: { GroupId: "convGroupID", ToGroupId: "groupID", OptType: "operationType" } } }), this._map.set(G2.DEL_CONV_GRP, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.RECENT_CONTACT, ".").concat(G2.DEL_CONV_GRP) }), body: { fromAccount: "", groupName: void 0 }, keyMap: { res: { GroupId: "convGroupID" } } }), this._map.set(G2.RENAME_CONV_GRP, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.RECENT_CONTACT, ".").concat(G2.RENAME_CONV_GRP) }), body: { fromAccount: "", updateType: void 0, updateGroup: void 0 }, keyMap: { req: { oldName: "OldGroupName", newName: "NewGroupName", groupID: "ToGroupId", operationType: "ContactOptType", groupName: "OldGroupName", updateItem: "ContactUpdateItem" }, res: { ContactOptType: "operationType", ToGroupId: "groupID", GroupId: "convGroupID" } } }), this._map.set(G2.ADD_CONV_TO_GRP, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.RECENT_CONTACT, ".").concat(G2.RENAME_CONV_GRP) }), body: { fromAccount: "", updateType: void 0, updateGroup: { groupName: void 0, updateGroupType: void 0, updateItem: void 0 } } }), this._map.set(G2.DEL_CONV_FROM_GRP, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.RECENT_CONTACT, ".").concat(G2.RENAME_CONV_GRP) }), body: { fromAccount: "", updateType: void 0, updateGroup: void 0 } }), this._map.set(G2.GET_CONV_GRP_LIST, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.RECENT_CONTACT, ".").concat(G2.GET_CONV_GRP_LIST) }), body: { fromAccount: "", startIndex: void 0 }, keyMap: { res: { GroupId: "convGroupID", ToGroupId: "groupID", OptType: "operationType", CustomMark: "customData", ContactGroupId: "convGroupIDList" } } }), this._map.set(G2.SEARCH_CONV_GRP_MARK, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.RECENT_CONTACT, ".").concat(G2.SEARCH_CONV_GRP_MARK) }), body: { fromAccount: "", contactItem: void 0 }, keyMap: { req: { groupID: "ToGroupId" }, res: { GroupId: "convGroupID", ToGroupId: "groupID", OptType: "operationType", CustomMark: "customData", ContactGroupId: "convGroupIDList", ContactResultItem: "contactItem" } } }), this._map.set(G2.GET_USER_PROFILE, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.PROFILE, ".").concat(G2.GET_USER_PROFILE) }), body: { fromAccount: "", userItem: [] }, keyMap: { req: { toAccount: "To_Account", standardSequence: "StandardSequence", customSequence: "CustomSequence" } } }), this._map.set(G2.UPDATE_MY_PROFILE, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.PROFILE, ".").concat(G2.UPDATE_MY_PROFILE) }), body: { fromAccount: "", profileItem: [{ tag: f2.NICK, value: "" }, { tag: f2.GENDER, value: "" }, { tag: f2.ALLOWTYPE, value: "" }, { tag: f2.AVATAR, value: "" }] }, keyMap: { req: { toAccount: "To_Account", standardSequence: "StandardSequence", customSequence: "CustomSequence" } } }), this._map.set(G2.GET_BL, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.FD, ".").concat(G2.GET_BL) }), body: { fromAccount: "", startIndex: 0, maxLimited: 30 } }), this._map.set(G2.ADD_TO_BL, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.FD, ".").concat(G2.ADD_TO_BL) }), body: { fromAccount: "", toAccount: [] } }), this._map.set(G2.RM_FROM_BL, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.FD, ".").concat(G2.RM_FROM_BL) }), body: { fromAccount: "", toAccount: [] } }), this._map.set(G2.SET_SELF_STATUS, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.IM_OPEN_STATUS, ".").concat(G2.SET_SELF_STATUS) }), body: { customStatus: "" } }), this._map.set(G2.GET_USER_STATUS, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.IM_OPEN_STATUS, ".").concat(G2.GET_USER_STATUS) }), body: { userIDList: void 0 }, keyMap: { res: { UserStatusList: "successUserList", ErrorList: "failureUserList", To_Account: "userID", Invalid_Account: "invalidUserID", Status: "statusType" } } }), this._map.set(G2.SUB_USER_STATUS, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.IM_OPEN_STATUS, ".").concat(G2.SUB_USER_STATUS) }), body: { userIDList: void 0 }, keyMap: { res: { ErrorList: "failureUserList", To_Account: "userID", Invalid_Account: "invalidUserID" } } }), this._map.set(G2.UNSUB_USER_STATUS, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.IM_OPEN_STATUS, ".").concat(G2.UNSUB_USER_STATUS) }), body: { userIDList: void 0, unsubscribeAll: void 0 }, keyMap: { res: { ErrorList: "failureUserList", To_Account: "userID", Invalid_Account: "invalidUserID" } } }), this._map.set(G2.GET_FD_LIST, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.FD, ".").concat(G2.GET_FD_LIST) }), body: { fromAccount: "", startIndex: 0, standardSequence: 0, customSequence: 0 }, keyMap: { res: { FriendNum: "friendCount", UserDataItem: "resultList", ValueItem: "tagValueList" } } }), this._map.set(G2.ADD_FD, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.FD, ".").concat(G2.ADD_FD) }), body: { fromAccount: "", addFriendItem: [], type: "" }, keyMap: { req: { source: "AddSource", wording: "AddWording", type: "AddType" }, res: { ResultItem: "resultList" } } }), this._map.set(G2.UPDATE_FD, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.FD, ".").concat(G2.UPDATE_FD) }), body: { fromAccount: "", updateItem: void 0 }, keyMap: { req: { snsItem: "SnsItem" }, res: { ResultItem: "resultList" } } }), this._map.set(G2.DEL_FD, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.FD, ".").concat(G2.DEL_FD) }), body: { fromAccount: "", userIDList: [], type: "" }, keyMap: { req: { type: "DeleteType" }, res: { ResultItem: "resultList" } } }), this._map.set(G2.GET_FD_PROFILE, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.FD, ".").concat(G2.GET_FD_PROFILE) }), body: { fromAccount: "", userIDList: void 0 }, keyMap: { res: { InfoItem: "resultList", SnsProfileItem: "tagValueList" } } }), this._map.set(G2.CHECK_FD, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.FD, ".").concat(G2.CHECK_FD) }), body: { fromAccount: "", userIDList: [], type: "" }, keyMap: { req: { type: "CheckType" }, res: { InfoItem: "resultList" } } }), this._map.set(G2.GET_FD_APPLICATION_LIST, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.FD, ".").concat(G2.GET_FD_APPLICATION_LIST) }), body: { fromAccount: "", applicationType: "", startTime: 0, maxLimited: 0, lastSequence: 0 }, keyMap: { res: { PendencyItem: "resultList", AddSource: "source", AddTime: "time", AddWording: "wording", Image: "avatar", UnreadPendencyCount: "unreadCount", To_Account: "userID", PendencyType: "type" } } }), this._map.set(G2.RESPOND_FD_APPLICATION, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.FD, ".").concat(G2.RESPOND_FD_APPLICATION) }), body: { fromAccount: "", responseFriendItem: [] }, keyMap: { req: { tag: "TagName", action: "ResponseAction" }, res: { ResultItem: "resultList" } } }), this._map.set(G2.DEL_FD_APPLICATION, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.FD, ".").concat(G2.DEL_FD_APPLICATION) }), body: { fromAccount: "", type: "", userIDList: void 0 }, keyMap: { req: { type: "PendencyType", userIDList: "To_Account" }, res: { ResultItem: "resultList" } } }), this._map.set(G2.REPORT_FD_APPLICATION, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.FD, ".").concat(G2.REPORT_FD_APPLICATION) }), body: { fromAccount: "", latestTimeStamp: "" }, keyMap: { req: { latestTimeStamp: "LatestPendencyTimeStamp" } } }), this._map.set(G2.CREATE_FD_GRP, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.FD, ".").concat(G2.CREATE_FD_GRP) }), body: { fromAccount: "", groupName: void 0, userIDList: void 0 }, keyMap: { req: { groupName: "GroupName", userIDList: "To_Account" }, res: { ResultItem: "resultList" } } }), this._map.set(G2.DEL_FD_GRP, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.FD, ".").concat(G2.DEL_FD_GRP) }), body: { fromAccount: "", nameList: void 0 }, keyMap: { req: { nameList: "GroupName" } } }), this._map.set(G2.GET_FD_GRP_LIST, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.FD, ".").concat(G2.GET_FD_GRP_LIST) }), body: { fromAccount: "", lastSequence: 0, needFriend: "Need_Friend_Type_Yes" }, keyMap: { res: { ResultItem: "resultList", GroupName: "name", FriendNumber: "friendCount", To_Account: "userIDList" } } }), this._map.set(G2.UPDATE_FD_GRP, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.FD, ".").concat(G2.UPDATE_FD_GRP) }), body: { fromAccount: "", oldName: "", newName: void 0, updateGroupItem: void 0 }, keyMap: { req: { oldName: "GroupOldName", newName: "GroupNewName" }, res: { UpdateType: "type", ResultItem: "resultList" } } }), this._map.set(G2.GET_GRP_LIST, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP, ".").concat(G2.GET_GRP_LIST) }), body: { memberAccount: "", limit: void 0, offset: void 0, groupType: void 0, responseFilter: { groupBaseInfoFilter: void 0, selfInfoFilter: void 0 }, isSupportTopic: 0, needAppDefineData: 1 }, keyMap: { req: { memberAccount: "Member_Account" }, res: { GroupIdList: "groups", MsgSeq: "readedSequence", LastRecallTime: "_lastRevokedTime", AppDefinedData: "groupCustomField" } } }), this._map.set(G2.GET_GRP_PROFILE, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP, ".").concat(G2.GET_GRP_PROFILE) }), body: { groupIDList: void 0, responseFilter: { groupBaseInfoFilter: void 0, groupCustomFieldFilter: void 0, memberInfoFilter: void 0, memberCustomFieldFilter: void 0 } }, keyMap: { req: { groupIDList: "GroupIdList", groupCustomField: "AppDefinedData", memberCustomField: "AppMemberDefinedData", groupCustomFieldFilter: "AppDefinedDataFilter_Group", memberCustomFieldFilter: "AppDefinedDataFilter_GroupMember" }, res: { GroupIdList: "groups", AppDefinedData: "groupCustomField", AppMemberDefinedData: "memberCustomField", AppDefinedDataFilter_Group: "groupCustomFieldFilter", AppDefinedDataFilter_GroupMember: "memberCustomFieldFilter", InfoSeq: "infoSequence", MemberList: "members", GroupInfo: "groups", ShutUpUntil: "muteUntil", ShutUpAllMember: "muteAllMembers" } } }), this._map.set(G2.CREATE_GRP, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP, ".").concat(G2.CREATE_GRP) }), body: { type: void 0, name: void 0, groupID: void 0, ownerID: void 0, introduction: void 0, notification: void 0, maxMemberNum: void 0, joinOption: void 0, memberList: void 0, groupCustomField: void 0, memberCustomField: void 0, webPushFlag: 1, avatar: "", isSupportTopic: void 0, inviteOption: void 0 }, keyMap: { req: { ownerID: "Owner_Account", userID: "Member_Account", avatar: "FaceUrl", maxMemberNum: "MaxMemberCount", joinOption: "ApplyJoinOption", groupCustomField: "AppDefinedData", memberCustomField: "AppMemberDefinedData", inviteOption: "InviteJoinOption" }, res: { HugeGroupFlag: "avChatRoomFlag", OverJoinedGroupLimit_Account: "overLimitUserIDList" } } }), this._map.set(G2.DISMISS_GRP, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP, ".").concat(G2.DISMISS_GRP) }), body: { groupID: void 0 } }), this._map.set(G2.UPDATE_GRP_PROFILE, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP, ".").concat(G2.UPDATE_GRP_PROFILE) }), body: { groupID: void 0, name: void 0, introduction: void 0, notification: void 0, avatar: void 0, joinOption: void 0, groupCustomField: void 0, muteAllMembers: void 0, inviteOption: void 0 }, keyMap: { req: { groupCustomField: "AppDefinedData", muteAllMembers: "ShutUpAllMember", joinOption: "ApplyJoinOption", avatar: "FaceUrl", inviteOption: "InviteJoinOption" }, res: { AppDefinedData: "groupCustomField", ShutUpAllMember: "muteAllMembers" } } }), this._map.set(G2.APPLY_JOIN_GRP, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP, ".").concat(G2.APPLY_JOIN_GRP) }), body: { groupID: void 0, applyMessage: void 0, userDefinedField: void 0, webPushFlag: 1, historyMessageFlag: void 0 }, keyMap: { req: { applyMessage: "ApplyMsg", historyMessageFlag: "HugeGroupHistoryMsgFlag" }, res: { HugeGroupFlag: "avChatRoomFlag", AVChatRoomKey: "avChatRoomKey", RspMsgList: "messageList", ToGroupId: "to" } } }), this._map.set(G2.APPLY_JOIN_GRP_NOAUTH, (e3.a2, e3.tinyid, { head: y2(y2({}, W2(e3, ya)), {}, { servcmd: "".concat(a2.NAME.BIG_GRP_NO_AUTH, ".").concat(G2.APPLY_JOIN_GRP) }), body: { groupID: void 0, applyMessage: void 0, userDefinedField: void 0, webPushFlag: 1 }, keyMap: { req: { applyMessage: "ApplyMsg" }, res: { HugeGroupFlag: "avChatRoomFlag" } } })), this._map.set(G2.QUIT_GRP, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP, ".").concat(G2.QUIT_GRP) }), body: { groupID: void 0 } }), this._map.set(G2.SEARCH_GRP, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP, ".").concat(G2.SEARCH_GRP) }), body: { groupIDList: void 0, responseFilter: { groupBasePublicInfoFilter: ["Type", "Name", "Introduction", "Notification", "FaceUrl", "CreateTime", "Owner_Account", "LastInfoTime", "LastMsgTime", "NextMsgSeq", "MemberNum", "MaxMemberNum", "ApplyJoinOption", "InviteJoinOption"] } } }), this._map.set(G2.CHANGE_GRP_OWNER, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP, ".").concat(G2.CHANGE_GRP_OWNER) }), body: { groupID: void 0, newOwnerID: void 0 }, keyMap: { req: { newOwnerID: "NewOwner_Account" } } }), this._map.set(G2.HANDLE_GRP_APPLICATION, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP, ".").concat(G2.HANDLE_GRP_APPLICATION) }), body: { groupID: void 0, applicant: void 0, handleAction: void 0, handleMessage: void 0, authentication: void 0, messageKey: void 0, userDefinedField: void 0 }, keyMap: { req: { applicant: "Applicant_Account", handleAction: "HandleMsg", handleMessage: "ApprovalMsg", messageKey: "MsgKey" } } }), this._map.set(G2.HANDLE_INVITE_JOIN_GRP, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP, ".").concat(G2.HANDLE_INVITE_JOIN_GRP) }), body: { groupID: void 0, applicant: void 0, invitee: void 0, handleAction: void 0, handleMessage: void 0, authentication: void 0, userDefinedField: void 0 }, keyMap: { req: { applicant: "Applicant_Account", invitee: "Invited_Account", handleAction: "HandleMsg", handleMessage: "ApprovalMsg" } } }), this._map.set(G2.HANDLE_GRP_INVITATION, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP, ".").concat(G2.HANDLE_GRP_INVITATION) }), body: { groupID: void 0, inviter: void 0, handleAction: void 0, handleMessage: void 0, authentication: void 0, messageKey: void 0, userDefinedField: void 0 }, keyMap: { req: { inviter: "Inviter_Account", handleAction: "HandleMsg", handleMessage: "ApprovalMsg", messageKey: "MsgKey" } } }), this._map.set(G2.GET_GRP_PENDENCY, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP, ".").concat(G2.GET_GRP_PENDENCY) }), body: { startTime: void 0, limit: void 0, handleAccount: void 0 }, keyMap: { req: { handleAccount: "Handle_Account" }, res: { To_Account: "userID", ApplyInviteMsg: "note" } } }), this._map.set(G2.DEL_GRP_SYSTEM_NOTICE, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.OPEN_IM, ".").concat(G2.DEL_GRP_SYSTEM_NOTICE) }), body: { messageListToDelete: void 0 }, keyMap: { req: { messageListToDelete: "DelMsgList", messageSeq: "MsgSeq", messageRandom: "MsgRandom" } } }), this._map.set(G2.AV_POLLING, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.BIG_GRP_POLLING, ".").concat(G2.AV_POLLING) }), body: { USP: 1, startSeq: 1, startBroadcastSeq: void 0, holdTime: 90, key: void 0, simplifiedMessage: void 0 }, keyMap: { req: { USP: "USP" }, res: { ToGroupId: "groupID", RspBroadcastMsgList: "broadcastMessageList", IsSystemMsg: "isSystemMessage" } } }), this._map.set(G2.AV_NOAUTH_POLLING, (e3.a2, e3.tinyid, { head: y2(y2({}, W2(e3, Ca)), {}, { servcmd: "".concat(a2.NAME.BIG_GRP_POLLING_NO_AUTH, ".").concat(G2.AV_POLLING) }), body: { USP: 1, startSeq: 1, holdTime: 90, key: void 0, simplifiedMessage: void 0 }, keyMap: { req: { USP: "USP" }, res: { ToGroupId: "groupID", RspBroadcastMsgList: "broadcastMessageList", IsSystemMsg: "isSystemMessage" } } })), this._map.set(G2.GET_ONLINE_MBR_NUM, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP, ".").concat(G2.GET_ONLINE_MBR_NUM) }), body: { groupID: void 0 }, keyMap: { res: { OnlineMemberNum: "memberCount" } } }), this._map.set(G2.SET_GRP_ATTR, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP, ".").concat(G2.SET_GRP_ATTR) }), body: { groupID: void 0, groupAttributeList: void 0, mainSequence: void 0, avChatRoomKey: void 0, attributeControl: ["RaceConflict"] }, keyMap: { req: { key: "key", value: "value" } } }), this._map.set(G2.MODIFY_GRP_ATTR, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP, ".").concat(G2.MODIFY_GRP_ATTR) }), body: { groupID: void 0, groupAttributeList: void 0, mainSequence: void 0, avChatRoomKey: void 0, attributeControl: ["RaceConflict"] }, keyMap: { req: { key: "key", value: "value" } } }), this._map.set(G2.DEL_GRP_ATTR, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP, ".").concat(G2.DEL_GRP_ATTR) }), body: { groupID: void 0, groupAttributeList: void 0, mainSequence: void 0, avChatRoomKey: void 0, attributeControl: ["RaceConflict"] }, keyMap: { req: { key: "key" } } }), this._map.set(G2.CLEAR_GRP_ATTR, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP, ".").concat(G2.CLEAR_GRP_ATTR) }), body: { groupID: void 0, mainSequence: void 0, avChatRoomKey: void 0, attributeControl: ["RaceConflict"] } }), this._map.set(G2.GET_GRP_ATTR, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP_ATTR, ".").concat(G2.GET_GRP_ATTR) }), body: { groupID: void 0, avChatRoomKey: void 0, groupType: 1 }, keyMap: { req: { avChatRoomKey: "Key", groupType: "GroupType" } } }), this._map.set(G2.GET_GRP_NOTIFY, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP, ".").concat(G2.GET_GRP_NOTIFY) }), body: { notifyReqList: [] }, keyMap: { req: { notifyReqList: "NotifyReqList" }, res: { NextMsgTime: "nextRevokedTime", NotifyMsgList: "notifyList", NotifyRspList: "notifyRspList" } } }), this._map.set(G2.UPDATE_GRP_COUNTER, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP, ".").concat(G2.UPDATE_GRP_COUNTER) }), body: { groupID: void 0, counterList: void 0, avChatRoomKey: void 0, mode: void 0 }, keyMap: { req: { counterList: "GroupCounter" } } }), this._map.set(G2.GET_GRP_COUNTER, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP, ".").concat(G2.GET_GRP_COUNTER) }), body: { groupID: void 0, keyList: [], avChatRoomKey: void 0 }, keyMap: { req: { keyList: "GroupCounterKeys" } } }), this._map.set(G2.CREATE_TOPIC, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP_COMMUNITY, ".").concat(G2.CREATE_TOPIC) }), body: { groupID: void 0, topicName: void 0, avatar: void 0, customData: void 0, topicID: void 0, notification: void 0, introduction: void 0 }, keyMap: { req: { avatar: "FaceUrl" } } }), this._map.set(G2.DEL_TOPIC, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP_COMMUNITY, ".").concat(G2.DEL_TOPIC) }), body: { groupID: void 0, topicIDList: void 0 }, keyMap: { req: { topicIDList: "TopicIdList" }, res: { DestroyResultItem: "resultList" } } }), this._map.set(G2.UPDATE_TOPIC_PROFILE, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP_COMMUNITY, ".").concat(G2.UPDATE_TOPIC_PROFILE) }), body: { groupID: void 0, topicID: void 0, avatar: void 0, customData: void 0, notification: void 0, introduction: void 0, muteAllMembers: void 0, topicName: void 0 }, keyMap: { req: { avatar: "FaceUrl", muteAllMembers: "ShutUpAllMember" } } }), this._map.set(G2.GET_TOPIC_LIST, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP_COMMUNITY, ".").concat(G2.GET_TOPIC_LIST) }), body: { groupID: void 0, topicIDList: void 0, MemberInfoFilter: ["NoUnreadSeqList"] }, keyMap: { req: { topicIDList: "TopicIdList" }, res: { TopicAndSelfInfo: "topicInfoList", TopicInfo: "topic", GroupID: "groupID", ShutUpTime: "muteTime", ShutUpAllFlag: "muteAllMembers", LastMsgTime: "lastMessageTime", MsgSeq: "readedSequence", LastMsgSeq: "sequence" } } }), this._map.set(G2.GET_GRP_MBR_LIST, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP, ".").concat(G2.GET_GRP_MBR_LIST) }), body: { groupID: void 0, limit: 0, offset: void 0, next: void 0, memberRoleFilter: void 0, memberInfoFilter: void 0, memberCustomFieldFilter: void 0 }, keyMap: { req: { memberCustomFieldFilter: "AppDefinedDataFilter_GroupMember" }, res: { AppMemberDefinedData: "memberCustomField", AppDefinedDataFilter_GroupMember: "memberCustomFieldFilter", MemberList: "members", ShutUpUntil: "muteUntil" } } }), this._map.set(G2.GET_AV_MBR_LIST, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP_AV, ".").concat(G2.GET_AV_MBR_LIST) }), body: { groupID: void 0, offset: void 0, filter: void 0 }, keyMap: { req: { offset: "Timestamp", filter: "Mark" }, res: { NextTimestamp: "offset" } } }), this._map.set(G2.GET_GRP_MBR_PROFILE, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP, ".").concat(G2.GET_GRP_MBR_PROFILE) }), body: { groupID: void 0, userIDList: void 0, memberInfoFilter: void 0, memberCustomFieldFilter: void 0 }, keyMap: { req: { userIDList: "Member_List_Account", memberCustomFieldFilter: "AppDefinedDataFilter_GroupMember" }, res: { MemberList: "members", ShutUpUntil: "muteUntil", AppDefinedDataFilter_GroupMember: "memberCustomFieldFilter", AppMemberDefinedData: "memberCustomField" } } }), this._map.set(G2.ADD_GRP_MBR, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP, ".").concat(G2.ADD_GRP_MBR) }), body: { groupID: void 0, silence: void 0, userIDList: void 0 }, keyMap: { req: { userID: "Member_Account", userIDList: "MemberList" }, res: { MemberList: "members" } } }), this._map.set(G2.DEL_GRP_MBR, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP, ".").concat(G2.DEL_GRP_MBR) }), body: { groupID: void 0, userIDList: void 0, reason: void 0 }, keyMap: { req: { userIDList: "MemberToDel_Account" } } }), this._map.set(G2.BAN_AV_MBR, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP, ".").concat(G2.BAN_AV_MBR) }), body: { groupID: void 0, userIDList: void 0, duration: void 0, reason: "" }, keyMap: { req: { userIDList: "Members_Account", duration: "Duration", reason: "Description" } } }), this._map.set(G2.MODIFY_GRP_MBR_INFO, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP, ".").concat(G2.MODIFY_GRP_MBR_INFO) }), body: { groupID: void 0, topicID: void 0, userID: void 0, messageRemindType: void 0, nameCard: void 0, role: void 0, memberCustomField: void 0, muteTime: void 0 }, keyMap: { req: { userID: "Member_Account", memberCustomField: "AppMemberDefinedData", muteTime: "ShutUpTime", messageRemindType: "MsgFlag" } } }), this._map.set(G2.MARK_AV_MBR_INFO, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP_AV, ".").concat(G2.MARK_AV_MBR_INFO) }), body: { groupID: void 0, operationType: 1, memberList: [] }, keyMap: { req: { operationType: "CommandType", memberList: "MemberList", markType: "Marks", userID: "Member_Account" }, res: { CommandType: "operationType", Marks: "markType", Member_Account: "userID" } } }), this._map.set(G2.CS, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.MSG_SEARCH, ".").concat(G2.CS) }), body: { keywordList: void 0, keywordListMatchType: "or", account: void 0, groupID: void 0, count: 100, cursor: void 0, messageTypeList: void 0, senderUserIDList: void 0, startTime: void 0, endTime: void 0 }, keyMap: { req: { keywordListMatchType: "MatchType", account: "PeerAccount", groupID: "GroupID", messageTypeList: "MsgTypeList", senderUserIDList: "SendUserIDList", keywords: "Keywords", keywordMatchType: "KeywordMatchType", count: "Count", miniBirthday: "UserBirthStart", maxBirthday: "UserBirthEnd", gender: "UserGenderType", groupTypeList: "GroupType", groupIDList: "GroupIdList" }, res: { GroupID: "groupID", UserID: "userID", ErrorCode: "code", ErrorInfo: "message", TotalCount: "totalCount", Count: "messageCount", LastMsgTime: "lastMessageTime", ConversationMsgs: "searchResult", IsNeedReadReceipt: "needReadReceipt", IsPeerRead: "readReceiptSentByPeer", MsgSeq: "sequence", ReqMsgSeq: "sequence", IsSystemMsg: "isSystemMessage", ToGroupId: "to", EnumFrom_AccountType: "fromAccountType", EnumTo_AccountType: "toAccountType", GroupCode: "groupCode", MsgContent: "content", ClientSeq: "clientSequence", ToTopicId: "topicID", InvisibleMsgSeq: "invisibleSequenceList", Users: "userList", ProfileItems: "profileItems", StrValue: "value", IntValue: "value", Groups: "groupList", GroupFaceUrl: "avatar", GroupIntroduction: "introduction", GroupOwnerUserID: "ownerID", GroupOwnerUserName: "ownerNick", GroupOwnerTinyID: "ownerTinyID", GroupMemberNum: "memberNum", GroupName: "name", GroupType: "type", GroupMembers: "groupMemberList", GroupMemberUserID: "userID", GroupMemberTinyID: "userTinyID", GroupMemberUserName: "nick", GroupMemberNameCard: "nameCard" } } }), this._map.set(G2.USER_CS, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.USER_SEARCH, ".").concat(G2.CS) }), body: { keywords: void 0, keywordMatchType: 0, miniBirthday: void 0, maxBirthday: void 0, gender: void 0, count: 20, cursor: void 0 } }), this._map.set(G2.GRP_CS, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP_SEARCH, ".").concat(G2.CS) }), body: { keywords: void 0, keywordMatchType: 0, groupType: void 0, count: 20, cursor: void 0 } }), this._map.set(G2.MBR_CS, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.GRP_MEMBER_SEARCH, ".").concat(G2.CS) }), body: { keywords: void 0, keywordMatchType: 0, groupType: void 0, groupIDList: void 0, count: 20, cursor: void 0 } }), this._map.set(G2.SSO_STAT, { head: y2(y2({}, n3), {}, { servcmd: "".concat(a2.NAME.IM_OPEN_STAT, ".").concat(G2.SSO_STAT) }), body: { header: {}, event: [], quality: [] }, keyMap: { req: { SDKType: "sdk_type", SDKVersion: "sdk_version", deviceType: "device_type", platform: "platform", instanceID: "instance_id", traceID: "trace_id", SDKAppID: "sdk_app_id", userID: "user_id", tinyID: "tiny_id", extension: "extension", timestamp: "timestamp", networkType: "network_type", eventType: "event_type", code: "error_code", message: "error_message", moreMessage: "more_message", duplicate: "duplicate", costTime: "cost_time", level: "level", qualityType: "quality_type", reportIndex: "report_index", wholePeriod: "whole_period", totalCount: "total_count", rttCount: "success_count_business", successRateOfRequest: "percent_business", countLessThan1Second: "success_count_business", percentOfCountLessThan1Second: "percent_business", countLessThan3Second: "success_count_platform", percentOfCountLessThan3Second: "percent_platform", successCountOfBusiness: "success_count_business", successRateOfBusiness: "percent_business", successCountOfPlatform: "success_count_platform", successRateOfPlatform: "percent_platform", successCountOfMessageReceived: "success_count_business", successRateOfMessageReceived: "percent_business", avgRTT: "average_value", avgDelay: "average_value", avgValue: "average_value", uiPlatform: "ui_platform" } } }), this._map.set(G2.PING, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.HEARTBEAT, ".").concat(G2.PING) }), body: {} }), this._map.set(G2.MSG_PUSH, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.IM_OPEN_PUSH, ".").concat(G2.MSG_PUSH) }), body: {}, keyMap: { res: { C2cMsgArray: "C2CMessageArray", GroupMsgArray: "groupMessageArray", GroupTips: "groupTips", C2cNotifyMsgArray: "C2CNotifyMessageArray", C2cMsgInfo: "C2CReadReceiptArray", ClientSeq: "clientSequence", MsgPriority: "priority", NoticeSeq: "noticeSequence", MsgContent: "content", MsgType: "type", MsgBody: "elements", ToGroupId: "to", Desc: "description", Ext: "extension", IsSyncMsg: "isSyncMessage", Flag: "needSync", NeedAck: "needAck", PendencyAdd_Account: "userID", ProfileImNick: "nick", PendencyType: "applicationType", C2CReadAllMsg: "readAllC2CMessage", IsNeedReadReceipt: "needReadReceipt", Status: "statusType" } } }), this._map.set(G2.MULTI_MSG_PUSH, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.IM_OPEN_PUSH, ".").concat(G2.MULTI_MSG_PUSH) }), body: {}, keyMap: { res: { GroupMsgArray: "groupMessageArray", GroupTips: "groupTips", ClientSeq: "clientSequence", MsgPriority: "priority", NoticeSeq: "noticeSequence", MsgContent: "content", MsgType: "type", MsgBody: "elements", ToGroupId: "to", Desc: "description", Ext: "extension", IsSyncMsg: "isSyncMessage", Flag: "needSync", NeedAck: "needAck", PendencyType: "applicationType" } } }), this._map.set(G2.MSG_PUSH_ACK, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.OPEN_IM, ".").concat(G2.MSG_PUSH_ACK) }), body: { sessionData: void 0 }, keyMap: { req: { sessionData: "SessionData" } } }), this._map.set(G2.STATUS_FORCE_OFFLINE, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.IM_OPEN_STATUS, ".").concat(G2.STATUS_FORCE_OFFLINE) }), body: {}, keyMap: { res: { C2cNotifyMsgArray: "C2CNotifyMessageArray", NoticeSeq: "noticeSequence", KickoutMsgNotify: "kickoutMsgNotify", NewInstInfo: "newInstanceInfo" } } }), this._map.set(G2.DOWNLOAD_MERGER_MSG, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.IM_LONG_MSG, ".").concat(G2.DOWNLOAD_MERGER_MSG) }), body: { downloadKey: "" }, keyMap: { res: { Data: "data", Desc: "description", Ext: "extension", Download_Flag: "downloadFlag", ThumbUUID: "thumbUUID", VideoUUID: "videoUUID" } } }), this._map.set(G2.UPLOAD_MERGER_MSG, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.IM_LONG_MSG, ".").concat(G2.UPLOAD_MERGER_MSG) }), body: { messageList: [] }, keyMap: { req: { fromAccount: "From_Account", toAccount: "To_Account", msgTimeStamp: "MsgTimeStamp", msgSeq: "MsgSeq", msgRandom: "MsgRandom", msgBody: "MsgBody", type: "MsgType", content: "MsgContent", data: "Data", description: "Desc", extension: "Ext", sizeType: "Type", uuid: "UUID", url: "", imageUrl: "URL", fileUrl: "Url", remoteAudioUrl: "Url", remoteVideoUrl: "VideoUrl", thumbUUID: "ThumbUUID", videoUUID: "VideoUUID", videoUrl: "", downloadFlag: "Download_Flag", from: "From_Account", time: "MsgTimeStamp", messageRandom: "MsgRandom", messageSequence: "MsgSeq", elements: "MsgBody", clientSequence: "ClientSeq", payload: "MsgContent", messageList: "MsgList", messageNumber: "MsgNum", abstractList: "AbstractList", messageBody: "MsgBody" } } }), this._map.set(G2.FOLLOW, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.FOLLOW, ".").concat(G2.FOLLOW) }), body: { fromAccount: "", userIDList: [] }, keyMap: { req: { userIDList: "FollowItem" }, res: { ResultItem: "resultList", To_Account: "userID" } } }), this._map.set(G2.UNFOLLOW, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.FOLLOW, ".").concat(G2.UNFOLLOW) }), body: { fromAccount: "", userIDList: [] }, keyMap: { req: { userIDList: "To_Account" }, res: { ResultItem: "resultList", To_Account: "userID" } } }), this._map.set(G2.GET_FOLLOW_INFO, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.FOLLOW, ".").concat(G2.GET_FOLLOW_INFO) }), body: { fromAccount: "", userIDList: [] }, keyMap: { req: { userIDList: "To_Account" }, res: { FollowInfo: "followInfoList", To_Account: "userID", FollowerCount: "followersCount", FollowingCount: "followingCount", MutualFollowingCount: "mutualFollowersCount" } } }), this._map.set(G2.GET_FOLLOW, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.FOLLOW, ".").concat(G2.GET_FOLLOW) }), body: { fromAccount: "", type: 1, nextCursor: "", count: 500 }, keyMap: { req: { type: "FollowType", nextCursor: "StartCursor", count: "WantNum" }, res: { FollowItem: "resultList", To_Account: "userID", ProfileItem: "profileList" } } }), this._map.set(G2.CHECK_FOLLOW_TYPE, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.FOLLOW, ".").concat(G2.CHECK_FOLLOW_TYPE) }), body: { fromAccount: "", userIDList: [] }, keyMap: { req: { userIDList: "To_Account" }, res: { ResultItem: "resultList", To_Account: "userID" } } }), this._map.set(G2.SET_TOKEN, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.IM_OPEN_STATUS, ".").concat(G2.SET_TOKEN) }), body: { tokenID: "", pushMsg: 0, sdkAppID: 0, businessID: "", deviceBrand: "", deviceToken: "", isTpns: 0, isWebUniapp: 0, notificationStatus: 0, deviceModel: "", systemVersion: "", pushVersion: "" }, keyMap: { req: { tokenID: "TokenID", pushMsg: "PushMsg", sdkAppID: "EnterVersion", businessID: "BusiID", deviceBrand: "InstType", deviceToken: "VarToken", isTpns: "IsTpns", notificationStatus: "NotificationStatus", deviceModel: "DeviceModel", systemVersion: "SystemVersion", pushVersion: "PushPluginVersion" } } }), this._map.set(G2.STAT_FOREGROUND, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.IM_OPEN_STATUS, ".").concat(G2.STAT_FOREGROUND) }), body: { isWebUniapp: 0 } }), this._map.set(G2.STAT_BACKGROUND, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.IM_OPEN_STATUS, ".").concat(G2.STAT_BACKGROUND) }), body: { C2CUnread: 0, GroupUnread: 0, isWebUniapp: 0 }, keyMap: { req: { c2cUnreadCount: "C2cUnread", groupUnreadCount: "GrpUnread" } } }), this._map.set(G2.PUSH_REPORT, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.OFFLINE_PUSH_REPORT, ".").concat(G2.PUSH_REPORT) }), body: { eventList: [] }, keyMap: { req: { eventList: "UinappPushEvents", type: "EventType", time: "EventTime", pushId: "ClickExt" } } }), this._map.set(G2.SET_ALL_RECEIVE_MSG_OPT, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.IM_MSG_LOGIC, ".").concat(G2.SET_ALL_RECEIVE_MSG_OPT) }), body: { startTime: 0, endTime: 0, isRepeated: 0, messageRemindType: 0 }, keyMap: { req: { messageRemindType: "Level" } } }), this._map.set(G2.GET_ALL_RECEIVE_MSG_OPT, { head: y2(y2({}, e3), {}, { servcmd: "".concat(a2.NAME.IM_MSG_LOGIC, ".").concat(G2.GET_ALL_RECEIVE_MSG_OPT) }), body: { toAccount: void 0 } });
      } }, { key: "has", value: function(e3) {
        return this._map.has(e3);
      } }, { key: "get", value: function(e3) {
        return this._map.get(e3);
      } }, { key: "update", value: function() {
        this._fillMap();
      } }, { key: "getKeyMap", value: function(e3) {
        return this.has(e3) ? this.get(e3).keyMap || {} : (M2.w("".concat(this._n, ".getKeyMap unknown P:").concat(e3)), {});
      } }, { key: "getProtocolData", value: function(e3) {
        var t3 = e3.P, n3 = e3.data, e3 = this.get(t3), t3 = null;
        if (n3) {
          var o3, i3 = this._simpleDeepCopy(e3), i3 = this._updateService(n3, i3), a3 = i3.body, s3 = /* @__PURE__ */ Object.create(null);
          for (o3 in a3)
            if (Object.prototype.hasOwnProperty.call(a3, o3)) {
              if (s3[o3] = a3[o3], void 0 === n3[o3])
                continue;
              s3[o3] = n3[o3];
            }
          i3.body = s3, t3 = this._getUplinkData(i3);
        } else
          t3 = this._getUplinkData(e3);
        return t3;
      } }, { key: "_getUplinkData", value: function(e3) {
        var e3 = this._dataCleaner(e3), t3 = Yt2(e3.head), t3 = ca(e3.body, this._getReqKeyMap(t3));
        return e3.body = t3, e3;
      } }, { key: "_updateService", value: function(e3, t3) {
        var n3, o3, i3 = Yt2(t3.head);
        return this._isFromGroupRequest(t3) && (n3 = e3.type, o3 = e3.groupID, e3 = void 0 === (e3 = e3.groupIDList) ? [] : e3, N2(o3 = void 0 === o3 ? void 0 : o3) && (o3 = e3[0] || ""), Pt2({ type: n3, groupID: o3 })) && (t3.head.servcmd = "".concat(a2.NAME.GRP_COMMUNITY, ".").concat(i3)), t3;
      } }, { key: "_isFromGroupRequest", value: function(e3) {
        return e3.head.servcmd.includes(a2.NAME.GRP) || e3.head.servcmd.includes(a2.NAME.GRP_ATTR);
      } }, { key: "_getReqKeyMap", value: function(e3) {
        e3 = this.getKeyMap(e3);
        return y2(y2({}, $i.req), e3.req);
      } }, { key: "_dataCleaner", value: function(e3) {
        var t3, n3 = Array.isArray(e3) ? [] : /* @__PURE__ */ Object.create(null);
        for (t3 in e3)
          Object.prototype.hasOwnProperty.call(e3, t3) && _t2(t3) && null !== e3[t3] && void 0 !== e3[t3] && ("object" !== z2(e3[t3]) ? n3[t3] = e3[t3] : n3[t3] = this._dataCleaner.bind(this)(e3[t3]));
        return n3;
      } }, { key: "_simpleDeepCopy", value: function(e3) {
        for (var t3, n3 = Object.keys(e3), o3 = {}, i3 = 0, a3 = n3.length; i3 < a3; i3++)
          t3 = n3[i3], O2(e3[t3]) ? o3[t3] = Array.from(e3[t3]) : ut2(e3[t3]) ? o3[t3] = this._simpleDeepCopy(e3[t3]) : o3[t3] = e3[t3];
        return o3;
      } }]), Da = [G2.MSG_PUSH_ACK], Ea = e2(function e3(t3) {
        p2(this, e3), this._sessionM = t3, this._n = "MsgDispatcher", this._eventHandlerMap = /* @__PURE__ */ new Map(), this._eventHandlerMap.set("C2CMessageArray", this._onC2CMsgArray.bind(this)), this._eventHandlerMap.set("groupMessageArray", this._onGroupMsgArray.bind(this)), this._eventHandlerMap.set("groupTips", this._onGroupTips.bind(this)), this._eventHandlerMap.set("C2CNotifyMessageArray", this._onC2CNotifyMsgArray.bind(this)), this._eventHandlerMap.set("C2CReadReceiptArray", this._onC2CReadReceiptArray.bind(this)), this._eventHandlerMap.set("profileModify", this._onProfileModified.bind(this)), this._eventHandlerMap.set("friendListMod", this._onRelationChainModified.bind(this)), this._eventHandlerMap.set("recentContactMod", this._onRecentContact.bind(this)), this._eventHandlerMap.set("readAllC2CMessage", this._onAllMsgRead.bind(this)), this._eventHandlerMap.set("c2cMessageModified", this._onC2CMsgModified.bind(this)), this._eventHandlerMap.set("groupMessageModified", this._onGroupMsgModified.bind(this)), this._eventHandlerMap.set("userStatusList", this._onUserStatusList.bind(this)), this._eventHandlerMap.set("messageExtensionNotify", this._onMsgExtNotify.bind(this)), this._eventHandlerMap.set("messageReactionNotifyList", this._onMsgReactionNotifyList.bind(this)), this._eventHandlerMap.set("messageReactionNotify", this._onMsgReactionNotify.bind(this)), this._eventHandlerMap.set("followChangeList", this._onFollowNotify.bind(this)), this._keys = d2(this._eventHandlerMap.keys());
      }, [{ key: "_onC2CMsgArray", value: function(e3) {
        var t3 = this._sessionM.get(6);
        e3.dataList.forEach(function(e4) {
          var t4;
          1 === e4.isSyncMessage && (t4 = e4.from, e4.from = e4.to, e4.to = t4);
        }), 1 === e3.needSync && this._sessionM.get(19).syncOnNeed(), t3.onNewMessage({ dataList: e3.dataList, isInstantMessage: true });
      } }, { key: "_onC2CMsgModified", value: function(e3) {
        this._sessionM.get(6).onMsgModified(e3);
      } }, { key: "_onGroupMsgArray", value: function(e3) {
        var t3 = this._sessionM.get(7);
        t3 && t3.onNewMessage({ event: e3.event, dataList: e3.dataList, isInstantMessage: true });
      } }, { key: "_onGroupMsgModified", value: function(e3) {
        var t3 = this._sessionM.get(7);
        t3 && t3.onMsgModified(e3);
      } }, { key: "_onGroupTips", value: function(e3) {
        var t3 = this._sessionM.get(7);
        if (t3) {
          var n3 = e3.event, o3 = e3.dataList, i3 = e3.isInstantMessage, a3 = void 0 === i3 || i3, s3 = e3.isSyncingEnded;
          switch (n3) {
            case 4:
            case 6:
              t3.onNewGroupTips({ event: n3, dataList: o3 });
              break;
            case 5:
              for (var r3 = 0; r3 < o3.length; r3++)
                if (O2(o3[r3].elements.revokedInfos))
                  t3.onMsgRevoked({ dataList: o3 });
                else if (O2(o3[r3].elements.groupMessageReadNotice))
                  t3.onMsgReadNotice({ dataList: o3 });
                else {
                  if (!O2(o3[r3].elements.readReceiptList)) {
                    t3.onNewGroupSystemNotice({ dataList: o3, isInstantMessage: a3, isSyncingEnded: s3 });
                    break;
                  }
                  t3.onReadReceiptList({ dataList: o3 });
                }
              break;
            case 12:
              this._sessionM.get(11).onNewGroupAtTips({ dataList: o3 });
              break;
            default:
              M2.l("".concat(this._n, "._onGroupTips unknown event:").concat(n3, " dataList:"), o3);
          }
        }
      } }, { key: "_onC2CNotifyMsgArray", value: function(e3) {
        var o3, i3 = this, a3 = e3.dataList;
        O2(a3) && (o3 = this._sessionM.get(6), a3.forEach(function(e4) {
          var t3, n3;
          m2(e4) && (e4.hasOwnProperty("kickoutMsgNotify") ? (t3 = (n3 = e4.kickoutMsgNotify).kickType, n3 = void 0 === (n3 = n3.newInstanceInfo) ? {} : n3, 1 === t3 ? i3._sessionM.onMultipleAccountKickedOut(n3) : 2 === t3 ? i3._sessionM.onMultipleDeviceKickedOut(n3) : 3 === t3 && i3._sessionM.onRestApiKickedOut(n3)) : e4.hasOwnProperty("c2cMessageRevokedNotify") ? o3 && o3.onMsgRevoked({ dataList: a3 }, true) : e4.hasOwnProperty("c2cMessageReadReceipt") ? o3 && o3.onMsgReadReceipt({ dataList: a3 }) : e4.hasOwnProperty("c2cMessageReadNotice") ? o3 && o3.onMsgReadNotice({ dataList: a3 }) : e4.hasOwnProperty("muteNotificationsSync") && i3._sessionM.get(11).onC2CMsgRemindTypeSynced({ dataList: a3 }));
        }));
      } }, { key: "_onC2CReadReceiptArray", value: function(e3) {
        this._sessionM.get(6).onReadReceiptList(e3);
      } }, { key: "_onProfileModified", value: function(e3) {
        this._sessionM.get(4).onProfileModified({ dataList: e3.dataList });
        var t3 = this._sessionM.get(8);
        t3 && t3.onFriendProfileModified({ dataList: e3.dataList });
      } }, { key: "_onRelationChainModified", value: function(e3) {
        this._sessionM.get(4).onRelationChainModified({ dataList: e3.dataList });
        var t3 = this._sessionM.get(8);
        t3 && t3.onRelationChainModified({ dataList: e3.dataList });
      } }, { key: "_onRecentContact", value: function(e3) {
        var i3, e3 = e3.dataList;
        O2(e3) && (i3 = this._sessionM.get(11)) && e3.forEach(function(e4) {
          var t3, n3, o3 = e4.pushType;
          1 === o3 ? (t3 = e4.recentContactDeleteItem, i3.onConvDeleted(t3.recentContactList)) : 2 === o3 ? (t3 = e4.recentContactTopItem, i3.onConvPinnedStatus(t3.recentContactList, true)) : 3 === o3 ? (t3 = e4.recentContactTopItem, i3.onConvPinnedStatus(t3.recentContactList, false)) : 4 === o3 ? (t3 = e4.recentContactMarkContact, i3.onConvMarkUpdated(t3.recentContactMarkContactItem)) : 5 === o3 ? (t3 = e4.recentContactCreateContactGroup, i3.onConvGroupCreated(t3.msgContactGroupContactItem)) : 6 === o3 ? (t3 = e4.recentContactDelContactGroup, i3.onConvGroupDeleted(t3.msgGroupItem)) : 7 === o3 && (o3 = (t3 = e4.recentContactUpdateContactGroup).updateType, e4 = t3.msgUpdateGroup, t3 = t3.msgUpdateContact, 1 === o3 ? 1 === (n3 = e4.updateGroupType) ? i3.onConvGroupNameUpdated(e4) : 2 === n3 && i3.onConvInGroupUpdated(e4) : 2 === o3 && i3.onConvAddedToOrDeletedFromGroup(t3));
        });
      } }, { key: "_onAllMsgRead", value: function(e3) {
        var e3 = e3.dataList, t3 = this._sessionM.get(11);
        t3 && t3.onPushedAllMessageRead(e3);
      } }, { key: "_onUserStatusList", value: function(e3) {
        this._sessionM.get(4).onUserStatusUpdated(e3);
      } }, { key: "_onMsgExtNotify", value: function(e3) {
        this._sessionM.get(3).onMsgExtNotify(e3);
      } }, { key: "_onMsgReactionNotifyList", value: function(e3) {
        this._sessionM.get(34).onReactionNotifyList(e3);
      } }, { key: "_onMsgReactionNotify", value: function(e3) {
        this._sessionM.get(34).onReactionNotify(e3);
      } }, { key: "_onFollowNotify", value: function(e3) {
        this._sessionM.get(35).onFollowNotify(e3);
      } }, { key: "_onTopicLatestMsg", value: function(e3) {
        this._sessionM.get(10).onTopicLatestMsg(e3);
      } }, { key: "onMessage", value: function(e3) {
        var t3 = this, n3 = e3.body;
        if (this._filterMsgFromIMOpenPush(e3)) {
          var o3, i3 = n3.eventArray, a3 = n3.isInstantMessage, s3 = n3.isSyncingEnded, r3 = n3.needSync;
          if (O2(i3))
            for (var c3, u3, l3, d3 = 0, p3 = i3.length; d3 < p3; d3++)
              100 !== (l3 = (c3 = i3[d3]).event) ? 24 !== l3 ? 26 !== l3 ? (o3 = Object.keys(c3).find(function(e4) {
                return -1 !== t3._keys.indexOf(e4);
              })) ? (u3 = 14 === l3 ? { readAllC2CMessage: c3[o3], groupMessageReadInfoList: c3.groupMessageReadNotice || [] } : 16 === l3 ? { userID: c3.userID, timestamp: c3.timestamp, readReceiptList: c3[o3] } : c3[o3], this._eventHandlerMap.get(o3)({ event: l3, dataList: u3, isInstantMessage: a3, isSyncingEnded: s3, needSync: r3 })) : M2.l("".concat(this._n, ".onMessage unknown eventItem:"), c3) : this._onTopicLatestMsg(c3) : this._onAllRcvMsgOptNotify(c3) : this._onRoomCustomData(c3.content);
        }
      } }, { key: "_onRoomCustomData", value: function(e3) {
        this._sessionM.get(30).onRoomCustomDataReceived(e3), M2.l("".concat(this._n, "._onRoomCustomData data:").concat(e3));
      } }, { key: "_onAllRcvMsgOptNotify", value: function(e3) {
        this._sessionM.get(11).onAllRcvMsgOptNotify(e3);
      } }, { key: "_filterMsgFromIMOpenPush", value: function(e3) {
        var t3 = e3.head, e3 = e3.body, t3 = t3.servcmd, n3 = false;
        return !(n3 = N2(t3) ? n3 : t3.includes(a2.NAME.IM_CONFIG_MANAGER) || t3.includes(a2.NAME.OVERLOAD_PUSH) || t3.includes(a2.NAME.STAT_SERVICE)) || (t3.includes(G2.PUSHED_CLOUD_CTRL_CONFIG) ? this._sessionM.get(23).onPushedConfig(e3) : t3.includes(G2.PUSHED_COMMERCIAL_CONFIG) ? this._sessionM.get(27).onPushedConfig(e3) : t3.includes(G2.OVERLOAD_NOTIFY) ? this._sessionM.onPushedServerOverload(e3) : t3.includes(G2.KICK_OTHER) && (n3 = Date.now(), this._sessionM.reLoginOnKickOther(), e3 = new P2("kickOther"), n3 = n3 - (t3 = this._sessionM.get(1).getLastWsHelloTs()), e3.setMessage("last wshello time:".concat(t3, " diff:").concat(n3, "ms")).end()), false);
      } }]), La = [{ cmd: G2.GET_GRP_PROFILE, interval: 1, count: 8 }, { cmd: G2.UPDATE_GRP_PROFILE, interval: 1, count: 8 }, { cmd: G2.GET_AV_MBR_LIST, interval: 3, count: 1 }, { cmd: G2.GET_GRP_PENDENCY, interval: 1, count: 15 }, { cmd: G2.GET_TOPIC_LIST, interval: 1, count: 10 }, { cmd: G2.SET_GRP_ATTR, interval: 5, count: 10 }, { cmd: G2.MODIFY_GRP_ATTR, interval: 5, count: 10 }, { cmd: G2.DEL_GRP_ATTR, interval: 5, count: 10 }, { cmd: G2.CLEAR_GRP_ATTR, interval: 5, count: 10 }, { cmd: G2.GET_GRP_ATTR, interval: 5, count: 20 }, { cmd: G2.UPDATE_GRP_COUNTER, interval: 5, count: 20 }, { cmd: G2.GET_GRP_COUNTER, interval: 5, count: 20 }, { cmd: G2.SET_ALL_MSG_READ, interval: 1, count: 1 }, { cmd: G2.GET_USER_STATUS, interval: 5, count: 20 }, { cmd: G2.SUB_USER_STATUS, interval: 5, count: 20 }, { cmd: G2.UNSUB_USER_STATUS, interval: 5, count: 20 }, { cmd: G2.CS, interval: 5, count: 20 }, { cmd: G2.GRP_CS, interval: 5, count: 20 }, { cmd: G2.MBR_CS, interval: 5, count: 20 }, { cmd: G2.USER_CS, interval: 5, count: 20 }, { cmd: G2.CHECK_FOLLOW_TYPE, interval: 5, count: 20 }, { cmd: G2.GET_GRP_ROAMING_MSG, interval: 1, count: 20 }, { cmd: G2.GET_C2C_ROAMING_MSG, interval: 1, count: 20 }], Sa = /* @__PURE__ */ new Map(), ka = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F"], Ra = 0, Aa = ka.length; Ra < Aa; Ra++)
        Sa.set(Ra, ka[Ra]);
      function Oa(e3) {
        return p2(this, Oa), (e3 = i2(this, Oa, [e3]))._n = "ChannelModule", e3._socketHandler = new va(e3), e3._probing = false, e3._isAppShowing = true, e3._previousState = R2.NET_STATE_CONNECTED, e3._timerForNotLoggedIn = -1, e3._timerForNotLoggedIn = setInterval(e3.onCheckTimer.bind(e3), 1e3), e3._fatalErrorFlag = false, e3._disconnectedTS = 0, e3._lastDiagnoseTS = 0, e3;
      }
      function Na(e3) {
        for (var t3, n3, o3 = e3, i3 = "", a3 = 0, s3 = (o3 = e3.length % 8 != 0 ? "0".repeat(8 - e3.length % 8) + e3 : o3).length; a3 < s3; a3 += 8)
          t3 = parseInt(o3.slice(a3, a3 + 4), 2), n3 = parseInt(o3.slice(a3 + 4, a3 + 8), 2), i3 += Sa.get(t3) + Sa.get(n3);
        return i3;
      }
      function Ga(e3) {
        var t3;
        return e3 < 0 || 53 < e3 ? NaN : (t3 = 0 | 1073741824 * Math.random(), 30 < e3 ? t3 + 1073741824 * (0 | Math.random() * (1 << e3 - 30)) : t3 >>> 30 - e3);
      }
      function Pa(e3, t3) {
        for (var n3 = e3.toString(16), o3 = t3 - n3.length, i3 = "0"; 0 < o3; o3 >>>= 1, i3 += i3)
          1 & o3 && (n3 = i3 + n3);
        return n3;
      }
      t2(Es, c2);
      var Ua = e2(Es, [{ key: "_init", value: function() {
        this._updateCmdFreqLimitMap(La);
      } }, { key: "_onCloudConfig", value: function() {
        var e3 = this.getCloudConfig("cmd_frequency_limit");
        N2(e3) || (e3 = JSON.parse(e3), this._updateCmdFreqLimitMap(e3));
      } }, { key: "_updateCmdFreqLimitMap", value: function(e3) {
        var t3 = this;
        e3.forEach(function(e4) {
          t3._cmdFreqLimitMap.set(e4.cmd, { interval: e4.interval, count: e4.count });
        });
      } }, { key: "updateProtocolConfig", value: function() {
        this._pHandler.update();
      } }, { key: "req", value: function(e3) {
        M2.d("".concat(this._n, ".req options:"), e3);
        var t3, n3, o3 = e3.P;
        return this._pHandler.has(o3) ? (t3 = (e3 = this.getProtocolData(e3)).head.servcmd, this._isFreqOverLimit(t3) ? E2({ code: n3 = k2.OVER_FREQUENCY_LIMIT, message: this.getErrMsg(n3, this._getCmd(t3)) }) : this._isServerOverload(t3) ? E2({ code: n3 = k2.OPEN_SERVICE_OVERLOAD_ERROR, message: this.getErrMsg(n3, this._getCmd(t3)) }) : (n3 = this.get(21), Da.includes(o3) ? n3.simplySend(e3) : n3.send(e3))) : (M2.w("".concat(this._n, ".req unknown P:").concat(o3)), E2({ code: k2.NO_PROTOCOL }));
      } }, { key: "getKeyMap", value: function(e3) {
        return this._pHandler.getKeyMap(e3);
      } }, { key: "genCommonHead", value: function() {
        var e3 = this.get(12);
        return { ver: "v4", platform: this._platform, websdkappid: oe2, websdkversion: ne2, a2: e3.getA2Key() || void 0, tinyid: e3.getTinyID() || void 0, status_instid: e3.getStatusInstanceID(), sdkappid: e3.getSDKAppID(), contenttype: e3.getContentType(), reqtime: 0, identifier: e3.getA2Key() ? void 0 : e3.getUserID(), usersig: e3.getA2Key() ? void 0 : e3.getUserSig(), sdkability: 75689843, sdkability_ext: Na(""), cappid: e3.getApplicationID(), cs: 0 };
      } }, { key: "genCosSpecifiedHead", value: function() {
        var e3 = this.get(12);
        return { ver: "v4", platform: this._platform, websdkappid: oe2, websdkversion: ne2, sdkappid: e3.getSDKAppID(), contenttype: e3.getContentType(), reqtime: 0, identifier: e3.getUserID(), usersig: e3.getUserSig(), status_instid: e3.getStatusInstanceID(), sdkability: 75689843, sdkability_ext: Na(""), cappid: e3.getApplicationID(), cs: 0 };
      } }, { key: "genSSOReportHead", value: function() {
        var e3 = this.get(12);
        return { ver: "v4", platform: this._platform, websdkappid: oe2, websdkversion: ne2, sdkappid: e3.getSDKAppID(), contenttype: "", reqtime: 0, identifier: "", usersig: "", status_instid: e3.getStatusInstanceID(), sdkability: 75689843, sdkability_ext: Na(""), cappid: e3.getApplicationID(), cs: 0 };
      } }, { key: "getProtocolData", value: function(e3) {
        return this._pHandler.getProtocolData(e3);
      } }, { key: "trans", value: function(e3) {
        var t3 = e3.servcmd, e3 = e3.data, t3 = { head: y2(y2({}, this.genCommonHead()), {}, { servcmd: t3 }), body: e3 };
        return this.get(21).send(t3);
      } }, { key: "sendComboMessage", value: function(e3) {
        var t3 = e3.servcmd, e3 = e3.data, t3 = { head: y2(y2({}, this.genCommonHead()), {}, { servcmd: t3 }), body: e3 };
        return this.get(21).send(t3);
      } }, { key: "onErrorCodeNotZero", value: function(e3) {
        var t3, n3 = e3.errorCode;
        n3 === k2.HELLO_ANSWER_KICKED_OUT && (t3 = e3.kickType, e3 = void 0 === (e3 = e3.newInstanceInfo) ? {} : e3, 1 === t3 ? this.onMultipleAccountKickedOut(e3) : 2 === t3 ? this.onMultipleDeviceKickedOut(e3) : 3 === t3 && this.onRestApiKickedOut(e3)), n3 !== k2.MSG_A2KEY_EXPIRED && n3 !== k2.ACCOUNT_A2KEY_EXPIRED || (this._onUserSigExpired(), this.get(21).reConnect());
      } }, { key: "onMessage", value: function(e3) {
        var t3 = e3.body, n3 = t3.needAck, t3 = t3.sessionData;
        1 === (void 0 === n3 ? 0 : n3) && this._sendACK(t3), this._msgDispatcher.onMessage(e3);
      } }, { key: "onReconnected", value: function(e3) {
        this._incrementalPullContactFlag = e3 <= 300, this._reLoginOnReconnected();
      } }, { key: "reLoginOnKickOther", value: function() {
        M2.l("".concat(this._n, ".reLoginOnKickOther")), this._reLogin();
      } }, { key: "_reLoginOnReconnected", value: function() {
        M2.l("".concat(this._n, "._reLoginOnReconnected")), this._reLogin();
      } }, { key: "_reLogin", value: function() {
        var e3, t3, s3, r3 = this, c3 = "".concat(this._n, "._reLogin");
        this.isLoggedIn() && (e3 = 0, (t3 = this.get(1).getPushModule()) && (e3 = t3.getUniAppPlatform()), s3 = new P2("reLogin"), this.req({ P: G2.LOGIN, data: { isWebUniapp: e3, customInfo: this.get(12).getCustomLoginInfo() } }).then(function(e4) {
          var e4 = e4.data, t4 = e4.instanceID, e4 = e4.customStatus, n3 = r3.get(12), o3 = xo(e4), i3 = (n3.setStatusInstanceID(t4), r3.get(21)), a3 = i3.getSocketID(), a3 = "socketID:".concat(a3, " instanceID:").concat(t4, " customStatus:").concat(o3), t4 = (s3.setMessage(a3).end(true), M2.l("".concat(c3, " ok. ").concat(a3)), n3.getCustomStatus() !== o3 && r3.get(4).onUserStatusUpdated({ dataList: [{ to: r3.getMyUserID(), statusType: R2.USER_STATUS_ONLINE, customStatus: e4 }] }), i3.diagnose(), r3.get(11).syncConvList(r3._incrementalPullContactFlag).then(function() {
            M2.l("".concat(c3, ", sync conv list ok.")), r3.get(25).start();
          }), r3.get(7)), a3 = (t4 && t4.updateLocalMainSequenceOnReconnected(), r3.get(10)), n3 = (a3.resetGetTopicTime(), a3.getTopicListOnReconnected(), r3.get(35)), o3 = (n3 && n3.clearCacheOnReconnected(), r3.get(8));
          o3 && o3.updateCacheOnReconnected();
        }));
      } }, { key: "onMultipleAccountKickedOut", value: function(e3) {
        this.get(1).onMultipleAccountKickedOut(e3);
      } }, { key: "onMultipleDeviceKickedOut", value: function(e3) {
        this.get(1).onMultipleDeviceKickedOut(e3);
      } }, { key: "_onUserSigExpired", value: function() {
        this.get(1).onUserSigExpired();
      } }, { key: "onRestApiKickedOut", value: function(e3) {
        this.get(1).onRestApiKickedOut(e3);
      } }, { key: "_sendACK", value: function(e3) {
        this.req({ P: G2.MSG_PUSH_ACK, data: { sessionData: e3 } });
      } }, { key: "_isFreqOverLimit", value: function(e3) {
        var t3, n3, o3, i3, e3 = e3.split(".")[1];
        return !!this._cmdFreqLimitMap.has(e3) && (!this._cmdReqInfoMap.has(e3) || (t3 = (n3 = this._cmdFreqLimitMap.get(e3)).count, n3 = n3.interval, o3 = (i3 = this._cmdReqInfoMap.get(e3)).startTime, i3 = i3.requestCount, Date.now() - o3 > 1e3 * n3) ? (this._cmdReqInfoMap.set(e3, { startTime: Date.now(), requestCount: 1 }), false) : (this._cmdReqInfoMap.set(e3, { startTime: o3, requestCount: i3 += 1 }), t3 < i3));
      } }, { key: "_isServerOverload", value: function(e3) {
        var t3, n3;
        return !!this._serverOverloadInfoMap.has(e3) && (t3 = (n3 = this._serverOverloadInfoMap.get(e3)).overloadTime, n3 = n3.waitingTime, Date.now() - t3 <= 1e3 * n3 || (this._serverOverloadInfoMap.delete(e3), false));
      } }, { key: "_getCmd", value: function(e3) {
        var t3 = "";
        if (e3.includes(".")) {
          var n3, o3 = e3.split(".")[1];
          for (n3 in G2)
            if (G2[n3] === o3) {
              t3 = n3;
              break;
            }
        }
        return t3;
      } }, { key: "onPushedServerOverload", value: function(e3) {
        var t3 = e3.overloadCommand, e3 = e3.waitingTime;
        this._serverOverloadInfoMap.set(t3, { overloadTime: Date.now(), waitingTime: e3 }), M2.w("".concat(this._n, ".onPushedServerOverload waitingTime:").concat(e3, "s cmd:").concat(this._getCmd(t3)));
      } }, { key: "reset", value: function() {
        M2.l("".concat(this._n, ".reset")), this._updateCmdFreqLimitMap(La), this._cmdReqInfoMap.clear(), this._serverOverloadInfoMap.clear(), this._incrementalPullContactFlag = true;
      } }]), ba = (t2(Ds, c2), e2(Ds, [{ key: "getCloudConfig", value: function(e3) {
        return N2(e3) ? this._cloudConfig : this._cloudConfig.has(e3) ? this._cloudConfig.get(e3) : void 0;
      } }, { key: "getServerConfig", value: function(e3) {
        var t3 = { code: 0, data: "" };
        return !N2(e3) && this._cloudConfig.has(e3) && (t3.data = this._cloudConfig.get(e3)), Promise.resolve(t3);
      } }, { key: "_canFetch", value: function() {
        return this.isLoggedIn() && !this._isFetching && Date.now() >= this._expiredTime;
      } }, { key: "fetchConfig", value: function() {
        var o3, i3 = this, a3 = "".concat(this._n, ".fetchConfig"), e3 = this._canFetch();
        M2.l("".concat(a3, " canFetch:").concat(e3)), e3 && (o3 = new P2("fetchCloudCtrlConfig"), e3 = this.get(12).getSDKAppID(), this._isFetching = true, this.req({ P: G2.FETCH_CLOUD_CTRL_CONFIG, data: { SDKAppID: e3, version: this._version } }).then(function(e4) {
          i3._isFetching = false;
          var t3 = e4.data, n3 = t3.version, t3 = t3.cloudControlConfig;
          o3.setMessage("version:".concat(i3._version, " newVersion:").concat(n3, " config:").concat(t3)).end(), M2.l("".concat(a3, " ok")), i3._parse(e4.data);
        }).catch(function(e4) {
          i3._isFetching = false, o3.setError(e4).end(), M2.l("".concat(a3, " failed. error:"), e4), i3._setExpiredTime(12e4);
        }));
      } }, { key: "onPushedConfig", value: function(e3) {
        M2.l("".concat(this._n, ".onPushedConfig config:"), e3), new P2("pushedCloudCtrlConfig").setMessage("newVersion:".concat(e3.version, " config:").concat(e3.cloudControlConfig)).end(), this._parse(e3);
      } }, { key: "onCheckTimer", value: function(e3) {
        this._canFetch() && this.fetchConfig();
      } }, { key: "_parse", value: function(e3) {
        var t3 = this, n3 = "".concat(this._n, "._parse"), o3 = e3.errorCode, i3 = e3.errorMessage, a3 = e3.cloudControlConfig, s3 = e3.version, r3 = e3.expiredTime;
        if (0 === o3) {
          if (this._version !== s3) {
            var c3 = null;
            try {
              c3 = JSON.parse(a3);
            } catch (e4) {
              this.isPrivateNetWork() || M2.e("".concat(n3, " failed. config:"), a3);
            }
            c3 && (this._cloudConfig.clear(), Object.keys(c3).forEach(function(e4) {
              t3._cloudConfig.set(e4, c3[e4]);
            }), this._version = s3, this.emitIEvt(U2.CLOUD_CONFIG), this.emitOEvt(h2.SERVER_CONFIG_UPDATED, { config: c3 }));
          }
          this._setExpiredTime(1e3 * r3);
        } else
          N2(o3) ? (M2.l("".concat(n3, " failed. Invalid message format:"), e3), this._setExpiredTime(36e5)) : (M2.e("".concat(n3, " errorCode:").concat(o3, " errorMessage:").concat(i3)), this._setExpiredTime(12e4));
      } }, { key: "_setExpiredTime", value: function(e3) {
        this._expiredTime = Date.now() + e3;
      } }, { key: "reset", value: function() {
        M2.l("".concat(this._n, ".reset")), this._cloudConfig.clear(), this._expiredTime = 0, this._version = 0, this._isFetching = false;
      } }])), wa = (t2(Ts, c2), e2(Ts, [{ key: "start", value: function() {
        this._recoverGroupChat(), this._recoverC2CChat();
      } }, { key: "_recoverGroupChat", value: function() {
        var n3, o3, i3, a3, s3 = this, e3 = this._getLocalConvList().filter(function(e4) {
          return e4.type === R2.CONV_GROUP && e4.groupProfile.type !== R2.GRP_AVCHATROOM;
        }), r3 = this.get(11), c3 = [];
        e3.forEach(function(e4) {
          var t3 = e4.conversationID, e4 = e4.lastMessage;
          n3 = t3.replace(R2.CONV_GROUP, ""), o3 = r3.getLocalLastMessage(t3), e4 && 0 !== e4.lastSequence && o3 && (i3 = e4.lastSequence, o3 = o3.sequence, a3 = i3 - o3, 0 < o3) && 1 <= a3 && a3 < 300 ? s3._recoverGroupMsg({ groupID: n3, localLastMessageSequence: o3, remoteLastMessageSequence: i3 }) : c3.push(n3);
        }), this._getGroupNotice(c3);
      } }, { key: "_recoverC2CChat", value: function() {
        var n3, o3, i3, a3 = this, e3 = this._getLocalConvList().filter(function(e4) {
          return e4.type === R2.CONV_C2C;
        }), s3 = this.get(11), r3 = [Promise.resolve()], c3 = [];
        e3.forEach(function(e4) {
          var t3 = e4.conversationID, e4 = e4.lastMessage;
          n3 = s3.getLocalLastMessage(t3), e4 && 0 !== e4.lastTime && n3 && (o3 = e4.lastTime, n3 = n3.time, i3 = o3 - n3, 0 < n3) && 1 <= i3 && i3 <= 600 && (r3.push(a3._recoverC2CMsg({ conversationID: t3, localLastMessageTime: n3, remoteLastMessageTime: o3 })), c3.push(t3));
        }), Promise.all(r3).then(function() {
          M2.l("".concat(a3._n, "._recoverC2CChat all done, convIDList:"), c3), a3.get(19).syncOnReconnected();
        });
      } }, { key: "_getLocalConvList", value: function() {
        return this.get(11).getLocalConvList();
      } }, { key: "_recoverGroupMsg", value: function(e3) {
        var d3 = this, p3 = "".concat(this._n, ".").concat("_recoverGroupMsg"), _3 = (M2.l("".concat(p3, " options:"), e3), e3.groupID), h3 = e3.localLastMessageSequence, g3 = e3.remoteLastMessageSequence, f3 = JSON.stringify(e3), m3 = new P2("_recoverGroupMsg");
        m3.setMessage(f3), this._getGroupRoamingMsg({ groupID: _3, sequence: h3 }).then(function(e4) {
          var e4 = e4.data, t3 = e4.complete, n3 = e4.messageList;
          if (!N2(n3)) {
            var e4 = n3[0].sequence, o3 = n3.map(function(e5) {
              return e5.sequence;
            }), o3 = "".concat(f3, " complete:").concat(t3, " sequenceList:").concat(o3), i3 = (M2.l("".concat(p3, " ").concat(o3)), e4 !== h3 && e4 < g3 && 2 !== t3 && d3._recoverGroupMsg({ groupID: _3, localLastMessageSequence: e4, remoteLastMessageSequence: g3 }), m3.setMessage(o3).end(), d3.get(7));
            1 < n3.length && n3.sort(function(e5, t4) {
              return e5.sequence - t4.sequence;
            });
            for (var a3 = false, s3 = 0, r3 = n3.length; s3 < r3; s3++)
              if (n3[s3].from === R2.CONV_SYSTEM) {
                a3 = true;
                break;
              }
            if (a3)
              for (var c3 = 0, u3 = n3.length; c3 < u3; c3++) {
                var l3 = n3[c3];
                l3.from !== R2.CONV_SYSTEM ? i3.onNewMessage({ dataList: [l3], isInstantMessage: false, updateUnreadCount: false }) : i3.onNewGroupTips({ event: l3.event, dataList: [l3] });
              }
            else
              i3.onNewMessage({ dataList: n3, isInstantMessage: false, updateUnreadCount: false });
          }
        }).catch(function(e4) {
          m3.setError(e4).end(), M2.w("".concat(p3, " failed. error:"), e4);
        });
      } }, { key: "_getGroupNotice", value: function(e3) {
        var t3 = e3.length;
        if (M2.l("".concat(this._n, "._getGroupNotice length:").concat(t3)), 0 !== t3) {
          var n3 = this.get(7);
          if (t3 <= 10)
            n3.getNotice(e3);
          else {
            var o3 = Math.floor(t3 / 10);
            5 <= o3 && (o3 = 5);
            for (var i3 = 0; i3 <= o3; i3++)
              n3.getNotice(e3.slice(10 * i3, 10 * (i3 + 1)));
          }
        }
      } }, { key: "_getGroupRoamingMsg", value: function(e3) {
        var t3 = e3.groupID, e3 = e3.sequence;
        return this.req({ P: G2.GET_GRP_ROAMING_MSG, data: { groupID: t3, count: this.PULL_LIMIT_COUNT, sequence: e3 + this.PULL_LIMIT_COUNT - 1 } });
      } }, { key: "_recoverC2CMsg", value: function(e3) {
        var o3 = this, i3 = "".concat(this._n, ".").concat("_recoverC2CMsg"), a3 = (M2.l("".concat(i3, " options:"), e3), e3.conversationID), t3 = e3.localLastMessageTime, s3 = e3.remoteLastMessageTime, r3 = JSON.stringify(e3), c3 = new P2("_recoverC2CMsg");
        return c3.setMessage(r3), this._getC2CRoamingMsg({ conversationID: a3, time: t3 }).then(function(e4) {
          var e4 = e4.data, t4 = e4.complete, e4 = e4.messageList;
          if (!N2(e4)) {
            var n3 = e4.length, n3 = (o3.get(6).onNewMessage({ dataList: e4, isInstantMessage: true }), e4[n3 - 1].time), e4 = e4.map(function(e5) {
              return e5.random;
            }), e4 = "".concat(r3, " complete:").concat(t4, " randomList:").concat(e4);
            if (M2.l("".concat(i3, " ").concat(e4)), c3.setMessage(e4).end(), n3 < s3 && 1 !== t4)
              return o3._recoverC2CMsg({ conversationID: a3, localLastMessageTime: n3, remoteLastMessageTime: s3 });
          }
        }).catch(function(e4) {
          c3.setError(e4).end(), M2.w("".concat(i3, " failed. error:"), e4);
        });
      } }, { key: "_getC2CRoamingMsg", value: function(e3) {
        var t3 = e3.conversationID, e3 = e3.time;
        return this.req({ P: G2.GET_C2C_ROAMING_MSG, data: { peerAccount: t3.replace(R2.CONV_C2C, ""), count: this.PULL_LIMIT_COUNT + 1, lastMessageTime: e3, direction: 1 } });
      } }, { key: "reset", value: function() {
        M2.l("".concat(this._n, ".reset"));
      } }])), Fa = e2(function e3() {
        p2(this, e3), this._n = "AvgE2EDelay", this._e2eDelayArray = [];
      }, [{ key: "addMessageDelay", value: function(e3) {
        e3 = He2() - e3;
        0 <= e3 && this._e2eDelayArray.push(e3);
      } }, { key: "_calcAvg", value: function(e3, t3) {
        var n3;
        return 0 === t3 ? 0 : (n3 = 0, e3.forEach(function(e4) {
          n3 += e4;
        }), jt2(n3 / t3, 1));
      } }, { key: "_calcCountWithLimit", value: function(e3) {
        var t3 = e3.e2eDelayArray, n3 = e3.min, o3 = e3.max;
        return t3.filter(function(e4) {
          return n3 <= e4 && e4 < o3;
        }).length;
      } }, { key: "_calcPercent", value: function(e3, t3) {
        e3 = jt2(e3 / t3 * 100, 2);
        return e3 = 100 < e3 ? 100 : e3;
      } }, { key: "_checkE2EDelayException", value: function(e3, t3) {
        var n3, o3, i3, a3 = e3.filter(function(e4) {
          return t3 < e4;
        });
        0 < a3.length && (n3 = a3.length, o3 = Math.min.apply(Math, d2(a3)), i3 = Math.max.apply(Math, d2(a3)), a3 = this._calcAvg(a3, n3), 50 < (e3 = jt2(n3 / e3.length * 100, 2))) && new P2("messageE2EDelayException").setMessage("count:".concat(n3, " min:").concat(o3, " max:").concat(i3, " avg:").concat(a3, " percent:").concat(e3)).setLevel("warning").end();
      } }, { key: "getStatResult", value: function() {
        var e3, t3, n3, o3, i3, a3, s3 = this._e2eDelayArray.length;
        return 0 === s3 ? null : (e3 = d2(this._e2eDelayArray), t3 = this._calcCountWithLimit({ e2eDelayArray: e3, min: 0, max: 1 }), n3 = this._calcCountWithLimit({ e2eDelayArray: e3, min: 1, max: 3 }), o3 = this._calcPercent(t3, s3), i3 = this._calcPercent(n3, s3), a3 = this._calcAvg(e3, s3), this._checkE2EDelayException(e3, 3), e3.length = 0, this.reset(), { totalCount: s3, countLessThan1Second: t3, percentOfCountLessThan1Second: o3, countLessThan3Second: n3, percentOfCountLessThan3Second: i3, avgDelay: a3 });
      } }, { key: "reset", value: function() {
        this._e2eDelayArray.length = 0;
      } }]), qa = e2(function e3() {
        p2(this, e3), this._n = "AvgRTT", this._requestCount = 0, this._rttArray = [];
      }, [{ key: "addRequestCount", value: function() {
        this._requestCount += 1;
      } }, { key: "addRTT", value: function(e3) {
        this._rttArray.push(e3);
      } }, { key: "_calcTotalCount", value: function() {
        return this._requestCount;
      } }, { key: "_calcRTTCount", value: function(e3) {
        return e3.length;
      } }, { key: "_calcSuccessRateOfRequest", value: function(e3, t3) {
        return 0 === t3 ? 0 : 100 < (e3 = jt2(e3 / t3 * 100, 2)) ? 100 : e3;
      } }, { key: "_calcAvg", value: function(e3, t3) {
        var n3;
        return 0 === t3 ? 0 : (n3 = 0, e3.forEach(function(e4) {
          n3 += e4;
        }), parseInt(n3 / t3));
      } }, { key: "_calcMax", value: function() {
        return Math.max.apply(Math, d2(this._rttArray));
      } }, { key: "_calcMin", value: function() {
        return Math.min.apply(Math, d2(this._rttArray));
      } }, { key: "getStatResult", value: function() {
        var e3, t3, n3 = this._calcTotalCount(), o3 = d2(this._rttArray);
        return 0 === n3 ? null : (e3 = this._calcRTTCount(o3), t3 = this._calcSuccessRateOfRequest(e3, n3), o3 = this._calcAvg(o3, e3), M2.l("".concat(this._n, ".getStatResult max:").concat(this._calcMax(), " min:").concat(this._calcMin(), " avg:").concat(o3)), this.reset(), { totalCount: n3, rttCount: e3, successRateOfRequest: t3, avgRTT: o3 });
      } }, { key: "reset", value: function() {
        this._requestCount = 0, this._rttArray.length = 0;
      } }]), xa = e2(function e3() {
        p2(this, e3), this._map = /* @__PURE__ */ new Map();
      }, [{ key: "initMap", value: function(e3) {
        var t3 = this;
        e3.forEach(function(e4) {
          t3._map.set(e4, { totalCount: 0, successCount: 0, failedCountOfUserSide: 0, costArray: [], fileSizeArray: [] });
        });
      } }, { key: "addTotalCount", value: function(e3) {
        return !(N2(e3) || !this._map.has(e3) || (this._map.get(e3).totalCount += 1, 0));
      } }, { key: "addSuccessCount", value: function(e3) {
        return !(N2(e3) || !this._map.has(e3) || (this._map.get(e3).successCount += 1, 0));
      } }, { key: "addFailedCountOfUserSide", value: function(e3) {
        return !(N2(e3) || !this._map.has(e3) || (this._map.get(e3).failedCountOfUserSide += 1, 0));
      } }, { key: "addCost", value: function(e3, t3) {
        return !(N2(e3) || !this._map.has(e3) || (this._map.get(e3).costArray.push(t3), 0));
      } }, { key: "addFileSize", value: function(e3, t3) {
        return !(N2(e3) || !this._map.has(e3) || (this._map.get(e3).fileSizeArray.push(t3), 0));
      } }, { key: "_calcSuccessRateOfBusiness", value: function(e3) {
        return N2(e3) || !this._map.has(e3) ? -1 : 100 < (e3 = jt2((e3 = this._map.get(e3)).successCount / e3.totalCount * 100, 2)) ? 100 : e3;
      } }, { key: "_calcSuccessRateOfPlatform", value: function(e3) {
        var t3;
        return N2(e3) || !this._map.has(e3) ? -1 : (t3 = this._map.get(e3), 100 < (e3 = jt2(e3 = this._calcSuccessCountOfPlatform(e3) / t3.totalCount * 100, 2)) ? 100 : e3);
      } }, { key: "_calcTotalCount", value: function(e3) {
        return N2(e3) || !this._map.has(e3) ? -1 : this._map.get(e3).totalCount;
      } }, { key: "_calcSuccessCountOfBusiness", value: function(e3) {
        return N2(e3) || !this._map.has(e3) ? -1 : this._map.get(e3).successCount;
      } }, { key: "_calcSuccessCountOfPlatform", value: function(e3) {
        return N2(e3) || !this._map.has(e3) ? -1 : (e3 = this._map.get(e3)).successCount + e3.failedCountOfUserSide;
      } }, { key: "_calcAvg", value: function(e3) {
        return N2(e3) || !this._map.has(e3) ? -1 : e3 === Zn ? this._calcAvgSpeed(e3) : this._calcAvgCost(e3);
      } }, { key: "_calcAvgCost", value: function(e3) {
        var t3, n3 = this._map.get(e3).costArray.length;
        return 0 === n3 ? 0 : (t3 = 0, this._map.get(e3).costArray.forEach(function(e4) {
          t3 += e4;
        }), parseInt(t3 / n3));
      } }, { key: "_calcAvgSpeed", value: function(e3) {
        var t3 = 0, n3 = 0;
        return this._map.get(e3).costArray.forEach(function(e4) {
          t3 += e4;
        }), this._map.get(e3).fileSizeArray.forEach(function(e4) {
          n3 += e4;
        }), parseInt(1e3 * n3 / t3);
      } }, { key: "getStatResult", value: function(e3) {
        var t3, n3, o3, i3, a3, s3 = this._calcTotalCount(e3);
        return 0 === s3 ? null : (t3 = this._calcSuccessCountOfBusiness(e3), n3 = this._calcSuccessRateOfBusiness(e3), o3 = this._calcSuccessCountOfPlatform(e3), i3 = this._calcSuccessRateOfPlatform(e3), a3 = this._calcAvg(e3), this.reset(e3), { totalCount: s3, successCountOfBusiness: t3, successRateOfBusiness: n3, successCountOfPlatform: o3, successRateOfPlatform: i3, avgValue: a3 });
      } }, { key: "reset", value: function(e3) {
        N2(e3) ? this._map.clear() : this._map.set(e3, { totalCount: 0, successCount: 0, failedCountOfUserSide: 0, costArray: [], fileSizeArray: [] });
      } }]), Va = e2(function e3() {
        p2(this, e3), this._lastMap = /* @__PURE__ */ new Map(), this._currentMap = /* @__PURE__ */ new Map();
      }, [{ key: "initMap", value: function(e3) {
        var t3 = this;
        e3.forEach(function(e4) {
          t3._lastMap.set(e4, /* @__PURE__ */ new Map()), t3._currentMap.set(e4, /* @__PURE__ */ new Map());
        });
      } }, { key: "addMessageSequence", value: function(e3) {
        var t3, n3, o3, i3 = e3.key, a3 = e3.message;
        return !(N2(i3) || !this._lastMap.has(i3) || !this._currentMap.has(i3) || (t3 = a3.conversationID, a3 = a3.sequence, t3 = t3.replace(R2.CONV_GROUP, ""), 0 !== this._lastMap.get(i3).size && this._lastMap.get(i3).has(t3) && (o3 = (n3 = this._lastMap.get(i3).get(t3)).length - 1, a3 > n3[0]) && a3 < n3[o3] ? (n3.push(a3), n3.sort(), this._lastMap.get(i3).set(t3, n3)) : this._addCurrentMap(e3), 0));
      } }, { key: "_addCurrentMap", value: function(e3) {
        var t3 = e3.key, e3 = e3.message, n3 = e3.conversationID, e3 = e3.sequence, n3 = n3.replace(R2.CONV_GROUP, "");
        this._currentMap.get(t3).has(n3) || this._currentMap.get(t3).set(n3, []), this._currentMap.get(t3).get(n3).push(e3);
      } }, { key: "_copyData", value: function(e3) {
        if (!N2(e3)) {
          this._lastMap.set(e3, /* @__PURE__ */ new Map());
          var t3, n3 = this._lastMap.get(e3), o3 = F2(this._currentMap.get(e3));
          try {
            for (o3.s(); !(t3 = o3.n()).done; ) {
              var i3 = j2(t3.value, 2), a3 = i3[0], s3 = i3[1];
              n3.set(a3, s3);
            }
          } catch (e4) {
            o3.e(e4);
          } finally {
            o3.f();
          }
          n3 = null, this._currentMap.set(e3, /* @__PURE__ */ new Map());
        }
      } }, { key: "getStatResult", value: function(e3) {
        var o3, i3, t3;
        return N2(this._currentMap.get(e3)) || N2(this._lastMap.get(e3)) ? null : 0 === this._lastMap.get(e3).size ? (this._copyData(e3), null) : (i3 = o3 = 0, this._lastMap.get(e3).forEach(function(e4, t4) {
          var e4 = d2(e4.values()), n3 = e4.length, e4 = e4[n3 - 1] - e4[0] + 1;
          o3 += e4, i3 += n3;
        }), 0 === o3 ? null : (100 < (t3 = jt2(i3 / o3 * 100, 2)) && (t3 = 100), this._copyData(e3), { totalCount: o3, successCountOfMessageReceived: i3, successRateOfMessageReceived: t3 }));
      } }, { key: "reset", value: function() {
        this._currentMap.clear(), this._lastMap.clear();
      } }]), Ba = (t2(Cs, c2), e2(Cs, [{ key: "_onLoginSuccess", value: function() {
        var t3 = this, e3 = (this._rateMessageSent.initMap(this._messageSentItems), this._rateMessageReceived.initMap(this._messageReceivedItems), this.get(13)), n3 = e3.getItem(this.TAG, false);
        !S2(n3) && dt2(n3.forEach) && (M2.l("".concat(this._n, "._onLoginSuccess. logs count:").concat(n3.length)), n3.forEach(function(e4) {
          t3._statInfoArr.push(e4);
        }), e3.removeItem(this.TAG, false));
      } }, { key: "_onCloudConfig", value: function() {
        var e3 = this.getCloudConfig("q_rpt_interval"), t3 = this.getCloudConfig("q_rpt_sdkappid_bl"), n3 = this.getCloudConfig("q_rpt_tinyid_wl");
        N2(e3) || (this.REPORT_INTERVAL = Number(e3)), N2(t3) || (this.REPORT_SDKAPPID_BLACKLIST = t3.split(",").map(function(e4) {
          return Number(e4);
        })), N2(n3) || (this.REPORT_TINYID_WHITELIST = n3.split(","));
      } }, { key: "onCheckTimer", value: function(e3) {
        this.isLoggedIn() && e3 % this.REPORT_INTERVAL == 0 && (this.wholePeriod = true, this._report());
      } }, { key: "addRequestCount", value: function() {
        this._avgRTT.addRequestCount();
      } }, { key: "addRTT", value: function(e3) {
        this._avgRTT.addRTT(e3);
      } }, { key: "addMessageDelay", value: function(e3) {
        this._avgE2EDelay.addMessageDelay(e3);
      } }, { key: "addTotalCount", value: function(e3) {
        this._rateMessageSent.addTotalCount(e3) || M2.w("".concat(this._n, ".addTotalCount invalid key:"), e3);
      } }, { key: "addSuccessCount", value: function(e3) {
        this._rateMessageSent.addSuccessCount(e3) || M2.w("".concat(this._n, ".addSuccessCount invalid key:"), e3);
      } }, { key: "addFailedCountOfUserSide", value: function(e3) {
        this._rateMessageSent.addFailedCountOfUserSide(e3) || M2.w("".concat(this._n, ".addFailedCountOfUserSide invalid key:"), e3);
      } }, { key: "addCost", value: function(e3, t3) {
        this._rateMessageSent.addCost(e3, t3) || M2.w("".concat(this._n, ".addCost invalid key or cost:"), e3, t3);
      } }, { key: "addFileSize", value: function(e3, t3) {
        this._rateMessageSent.addFileSize(e3, t3) || M2.w("".concat(this._n, ".addFileSize invalid key or size:"), e3, t3);
      } }, { key: "addMessageSequence", value: function(e3) {
        this._rateMessageReceived.addMessageSequence(e3) || M2.w("".concat(this._n, ".addMessageSequence invalid key:"), e3.key);
      } }, { key: "_getQualityItem", value: function(e3) {
        var t3 = {}, n3 = oo[this.get(15).getNetworkType()], n3 = (N2(n3) && (n3 = 8), { qualityType: to[e3], timestamp: Ye2(), networkType: n3, extension: "" });
        switch (e3) {
          case Wn:
            t3 = this._avgRTT.getStatResult();
            break;
          case Yn:
            t3 = this._avgE2EDelay.getStatResult();
            break;
          case jn:
          case Jn:
          case zn:
          case Xn:
          case Zn:
            t3 = this._rateMessageSent.getStatResult(e3);
            break;
          case Qn:
          case $n:
          case eo:
            t3 = this._rateMessageReceived.getStatResult(e3);
        }
        return null === t3 ? null : y2(y2({}, n3), t3);
      } }, { key: "_report", value: function(e3) {
        var t3 = this, n3 = [], o3 = null, e3 = (N2(e3) ? this._qualityItems.forEach(function(e4) {
          null !== (o3 = t3._getQualityItem(e4)) && (o3.reportIndex = t3.reportIndex, o3.wholePeriod = t3.wholePeriod, n3.push(o3));
        }) : null !== (o3 = this._getQualityItem(e3)) && (o3.reportIndex = this.reportIndex, o3.wholePeriod = this.wholePeriod, n3.push(o3)), M2.d("".concat(this._n, "._report"), n3), 0 < this._statInfoArr.length && (n3 = n3.concat(this._statInfoArr), this._statInfoArr = []), this.get(12)), i3 = e3.getSDKAppID(), e3 = e3.getTinyID();
        0 < (n3 = Jt2(this.REPORT_SDKAPPID_BLACKLIST, i3) && !zt(this.REPORT_TINYID_WHITELIST, e3) ? [] : n3).length && this._doReport(n3);
      } }, { key: "_doReport", value: function(t3) {
        var n3 = this, e3 = { header: ki(this), quality: t3 };
        this.req({ P: G2.SSO_STAT, data: y2({}, e3) }).then(function() {
          n3.reportIndex++, n3.wholePeriod = false;
        }).catch(function(e4) {
          M2.w("".concat(n3._n, "._doReport failed. error:"), e4), n3._statInfoArr = n3._statInfoArr.concat(t3), n3._flushAtOnce();
        });
      } }, { key: "_flushAtOnce", value: function() {
        var e3 = this.get(13), t3 = e3.getItem(this.TAG, false), n3 = this._statInfoArr, o3 = "".concat(this._n, "._flushAtOnce");
        S2(t3) ? (M2.l("".concat(o3, " count:").concat(n3.length)), e3.setItem(this.TAG, n3, true, false)) : (10 < (n3 = n3.concat(t3)).length && (n3 = n3.slice(0, 10)), M2.l("".concat(o3, " count:").concat(n3.length)), e3.setItem(this.TAG, n3, true, false)), this._statInfoArr = [];
      } }, { key: "reset", value: function() {
        M2.l("".concat(this._n, ".reset")), this._report(), this.reportIndex = 0, this.wholePeriod = false, this.REPORT_SDKAPPID_BLACKLIST = [], this.REPORT_TINYID_WHITELIST = [], this._avgRTT.reset(), this._avgE2EDelay.reset(), this._rateMessageSent.reset(), this._rateMessageReceived.reset();
      } }])), Ha = e2(function e3(t3) {
        p2(this, e3), S2(t3) || (this.userID = t3.userID || "", this.nick = t3.nick || "", this.avatar = t3.avatar || "", this.time = t3.time || 0, this.source = t3.source || "", this.wording = t3.wording || "", this.type = t3.type || "");
      }), Ka = e2(function e3(t3) {
        p2(this, e3), this._snsM = t3, this._n = "FriendApplicationHandler", this._startTime = 0, this._maxLimited = 100, this._currentSeq = 0, this._map = /* @__PURE__ */ new Map(), this._unreadCount = 0;
      }, [{ key: "updateCacheOnReconnected", value: function() {
        this._startTime = 0, this._currentSeq = 0, this.getApplicationList();
      } }, { key: "getLocalApplicationList", value: function() {
        return { friendApplicationList: d2(this._map.values()), unreadCount: this._unreadCount };
      } }, { key: "_onApplicationListUpdated", value: function() {
        this._snsM.emitOEvt(h2.FRIEND_APPLICATION_LIST_UPDATED, { friendApplicationList: d2(this._map.values()), unreadCount: this._unreadCount });
      } }, { key: "onApplicationRead", value: function() {
        this._unreadCount = 0, this._onApplicationListUpdated();
      } }, { key: "onApplicationAdded", value: function(e3, t3) {
        var n3, o3, i3 = this;
        S2(e3) || (n3 = "", n3 = t3 === this._snsM.getMyUserID() ? R2.SNS_APPLICATION_SENT_BY_ME : R2.SNS_APPLICATION_SENT_TO_ME, o3 = false, e3.forEach(function(e4) {
          var t4 = "".concat(e4.userID, "_").concat(n3);
          n3 !== R2.SNS_APPLICATION_SENT_TO_ME || i3._map.has(t4) || (i3._unreadCount += 1), i3._map.set(t4, new Ha(y2(y2({}, e4), {}, { type: n3 }))), o3 = true;
        }), o3 && this._onApplicationListUpdated());
      } }, { key: "onApplicationDeleted", value: function(e3) {
        S2(e3) || (this._startTime = 0, this._currentSeq = 0, this.getApplicationList());
      } }, { key: "getApplicationList", value: function() {
        var a3 = this, s3 = "".concat(this._n, ".").concat("getApplicationList"), r3 = new P2("getApplicationList");
        return this._snsM.req({ P: G2.GET_FD_APPLICATION_LIST, data: { applicationType: R2.SNS_APPLICATION_TYPE_BOTH, fromAccount: this._snsM.getMyUserID(), maxLimited: this._maxLimited, startTime: this._startTime, lastSequence: this._currentSeq } }).then(function(e3) {
          var e3 = e3.data, t3 = e3.resultList, n3 = e3.unreadCount, o3 = e3.startTime, e3 = e3.currentSequence, i3 = (a3._startTime = o3, a3._currentSeq = e3, a3._unreadCount = n3, O2(t3) ? t3.length : 0), i3 = "applicationCount:".concat(i3, " unreadCount:").concat(n3, " startTime:").concat(o3, " currentSequence:").concat(e3);
          r3.setMessage(i3).end(), M2.i("".concat(s3, " ok. ").concat(i3)), a3._map.clear(), O2(t3) && t3.forEach(function(e4) {
            var t4 = e4.userID, n4 = e4.type, e4 = new Ha(e4);
            a3._map.set("".concat(t4, "_").concat(n4), e4);
          }), a3._onApplicationListUpdated();
        }).catch(function(e3) {
          return r3.setError(e3).end(), M2.w("".concat(s3, " failed. error:"), e3), E2(e3);
        });
      } }, { key: "deleteApplication", value: function(e3) {
        var i3, a3 = "".concat(this._n, ".").concat("deleteApplication"), s3 = e3.userID, r3 = e3.type;
        return r3 && (r3 === R2.SNS_APPLICATION_SENT_BY_ME || r3 === R2.SNS_APPLICATION_SENT_TO_ME) || (r3 = R2.SNS_APPLICATION_SENT_TO_ME), this._map.has("".concat(s3, "_").concat(r3)) ? ((i3 = new P2("deleteApplication")).setMessage("userID:".concat(s3, " type:").concat(r3)), this._snsM.req({ P: G2.DEL_FD_APPLICATION, data: { fromAccount: this._snsM.getMyUserID(), userIDList: [s3], type: r3 } }).then(function(e4) {
          var e4 = e4.data.resultList, t3 = e4[0], n3 = t3.to, o3 = t3.resultCode, t3 = t3.resultInfo;
          return i3.setMoreMessage("resultList:".concat(JSON.stringify(e4))).end(), M2.i("".concat(a3, " ok. userID:").concat(s3, " type:").concat(r3)), 0 === o3 ? T2() : E2({ userID: n3, code: o3, message: t3 });
        }).catch(function(e4) {
          return i3.setError(e4).end(), M2.w("".concat(a3, " failed. error:"), e4), E2(e4);
        })) : E2({ code: k2.FRIEND_APPLICATION_NOT_EXIST });
      } }, { key: "acceptApplication", value: function(e3) {
        var n3 = "".concat(this._n, ".").concat("acceptApplication"), o3 = e3.userID, t3 = e3.remark, i3 = e3.tag, a3 = e3.type, s3 = (a3 && (a3 === R2.SNS_APPLICATION_AGREE || a3 === R2.SNS_APPLICATION_AGREE_AND_ADD) || (a3 = R2.SNS_APPLICATION_AGREE_AND_ADD), new P2("acceptApplication"));
        return s3.setMessage("userID:".concat(o3, " type:").concat(a3)), this._snsM.req({ P: G2.RESPOND_FD_APPLICATION, data: { fromAccount: this._snsM.getMyUserID(), responseFriendItem: [{ userID: o3, remark: t3, tag: i3, action: a3 }] } }).then(function(e4) {
          s3.end();
          var e4 = e4.data.resultList[0], t4 = e4.resultCode, e4 = e4.resultInfo;
          if (0 !== t4)
            return E2({ code: t4, message: e4 });
          M2.i("".concat(n3, " ok. userID:").concat(o3, " type:").concat(a3));
        }).catch(function(e4) {
          return s3.setError(e4).end(), M2.w("".concat(n3, " failed. error:"), e4), E2(e4);
        });
      } }, { key: "refuseApplication", value: function(e3) {
        var n3 = "".concat(this._n, ".").concat("refuseApplication"), o3 = e3.userID, i3 = new P2("refuseApplication");
        return i3.setMessage("userID:".concat(o3)), this._snsM.req({ P: G2.RESPOND_FD_APPLICATION, data: { fromAccount: this._snsM.getMyUserID(), responseFriendItem: [{ userID: o3, action: "Response_Action_Reject" }] } }).then(function(e4) {
          i3.end();
          var e4 = e4.data.resultList[0], t3 = e4.resultCode, e4 = e4.resultInfo;
          if (0 !== t3)
            return E2({ code: t3, message: e4 });
          M2.i("".concat(n3, " ok. userID:").concat(o3));
        }).catch(function(e4) {
          return i3.setError(e4).end(), M2.w("".concat(n3, " failed. error:"), e4), E2(e4);
        });
      } }, { key: "setApplicationRead", value: function() {
        var t3 = this, n3 = "".concat(this._n, ".").concat("setApplicationRead"), o3 = new P2("setApplicationRead");
        return this._snsM.req({ P: G2.REPORT_FD_APPLICATION, data: { fromAccount: this._snsM.getMyUserID(), latestTimeStamp: jt2(Ye2() / 1e3, 0) } }).then(function(e3) {
          o3.end(), M2.i("".concat(n3, " ok")), t3._unreadCount = 0;
        }).catch(function(e3) {
          return o3.setError(e3).end(), M2.w("".concat(n3, " failed. error:"), e3), E2(e3);
        });
      } }, { key: "reset", value: function() {
        this._maxLimited = 100, this._startTime = 0, this._currentSeq = 0, this._unreadCount = 0, this._map.clear();
      } }]), Wa = e2(function e3(t3, n3) {
        p2(this, e3), this.userID = t3, this.remark = "", this.groupList = [], this.source = "", this.addTime = 0, this.friendCustomField = [], this.timestamp = 0;
        var o3 = {}, i3 = [];
        if (o3.userID = t3, !S2(n3))
          for (var a3, s3 = "", r3 = 0, c3 = n3.length; r3 < c3; r3++)
            if (s3 = n3[r3].tag, a3 = n3[r3].value, -1 < s3.indexOf("Tag_SNS_Custom"))
              this.friendCustomField.push({ key: s3, value: a3 });
            else if (-1 < s3.indexOf("Tag_Profile_Custom"))
              i3.push({ key: s3, value: a3 });
            else
              switch (s3) {
                case f2.NICK:
                  o3.nick = a3;
                  break;
                case f2.GENDER:
                  o3.gender = a3;
                  break;
                case f2.BIRTHDAY:
                  o3.birthday = a3;
                  break;
                case f2.LOCATION:
                  o3.location = a3;
                  break;
                case f2.SELFSIGNATURE:
                  o3.selfSignature = a3;
                  break;
                case f2.ALLOWTYPE:
                  o3.allowType = a3;
                  break;
                case f2.LANGUAGE:
                  o3.language = a3;
                  break;
                case f2.AVATAR:
                  o3.avatar = a3;
                  break;
                case f2.MESSAGESETTINGS:
                  o3.messageSettings = a3;
                  break;
                case f2.ADMINFORBIDTYPE:
                  o3.adminForbidType = a3;
                  break;
                case f2.LEVEL:
                  o3.level = a3;
                  break;
                case f2.ROLE:
                  o3.role = a3;
                  break;
                case Ze2.REMARK:
                  this.remark = a3;
                  break;
                case Ze2.ADDTIME:
                  this.addTime = a3;
                  break;
                case Ze2.GROUP:
                  this.groupList = JSON.parse(JSON.stringify(a3));
                  break;
                case Ze2.ADDSOURCE:
                  this.source = a3;
                  break;
                case Ze2.ADDWORDING:
                  break;
                default:
                  M2.l("snsProfileItem unknown tag->", n3[r3].tag);
              }
        this.profile = new Ho(y2(y2({}, o3), {}, { profileCustomField: i3 }));
      }, [{ key: "validate", value: function(e3) {
        var t3, n3 = true, o3 = "";
        if (S2(e3))
          return { valid: false, tips: "empty options" };
        if (e3.profileCustomField)
          for (var i3 = e3.profileCustomField.length, a3 = null, s3 = 0; s3 < i3; s3++) {
            if (a3 = e3.profileCustomField[s3], !C2(a3.key) || -1 === a3.key.indexOf("Tag_Profile_Custom"))
              return { valid: false, tips: "The prefix of keys of the custom profile key-value pairs (which is profileCustomField) must be Tag_Profile_Custom" };
            if (!C2(a3.value))
              return { valid: false, tips: "The type of values of the custom profile key-value pairs (which is profileCustomField) must be String" };
          }
        for (t3 in e3)
          if (Object.prototype.hasOwnProperty.call(e3, t3)) {
            if ("profileCustomField" === t3)
              continue;
            if (S2(e3[t3]) && !C2(e3[t3]) && !A2(e3[t3])) {
              o3 = "key:" + t3 + ", invalid value:" + e3[t3], n3 = false;
              continue;
            }
            switch (t3) {
              case "nick":
                C2(e3[t3]) || (n3 = !(o3 = "nick must be a string")), 500 < ft2(e3[t3]) && (o3 = "nick name limited: must less than or equal to ".concat(500, " bytes, current size: ").concat(ft2(e3[t3]), " bytes"), n3 = false);
                break;
              case "gender":
                It2(Qe2, e3.gender) || (o3 = "key:gender, invalid value:" + e3.gender, n3 = false);
                break;
              case "birthday":
                A2(e3.birthday) || (n3 = !(o3 = "birthday must be a number"));
                break;
              case "location":
                C2(e3.location) || (n3 = !(o3 = "location must be a string"));
                break;
              case "selfSignature":
                C2(e3.selfSignature) || (n3 = !(o3 = "selfSignature must be a string"));
                break;
              case "allowType":
                It2(et2, e3.allowType) || (o3 = "key:allowType, invalid value:" + e3.allowType, n3 = false);
                break;
              case "language":
                A2(e3.language) || (n3 = !(o3 = "language must be a number"));
                break;
              case "avatar":
                C2(e3.avatar) || (n3 = !(o3 = "avatar must be a string"));
                break;
              case "messageSettings":
                0 !== e3.messageSettings && 1 !== e3.messageSettings && (n3 = !(o3 = "messageSettings must be 0 or 1"));
                break;
              case "adminForbidType":
                It2($e2, e3.adminForbidType) || (o3 = "key:adminForbidType, invalid value:" + e3.adminForbidType, n3 = false);
                break;
              case "level":
                A2(e3.level) || (n3 = !(o3 = "level must be a number"));
                break;
              case "role":
                A2(e3.role) || (n3 = !(o3 = "role must be a number"));
                break;
              default:
                o3 = "unknown key:" + t3 + "  " + e3[t3], n3 = false;
            }
          }
        return { valid: n3, tips: o3 };
      } }, { key: "update", value: function(e3) {
        var n3 = this, o3 = "", i3 = "", a3 = [];
        this.friendCustomField.forEach(function(e4) {
          a3.push(e4.key);
        });
        for (var s3 = 0, t3 = e3.length; s3 < t3; s3++)
          !function() {
            if (o3 = e3[s3].tag, i3 = e3[s3].value, -1 < o3.indexOf("Tag_SNS_Custom"))
              -1 < a3.indexOf(o3) ? n3.friendCustomField.forEach(function(e4) {
                e4.key === o3 && (e4.value = i3);
              }) : n3.friendCustomField.push({ key: o3, value: i3 });
            else if (-1 < o3.indexOf("Tag_Profile_Custom")) {
              var t4 = false;
              n3.profile.profileCustomField.forEach(function(e4) {
                e4.key === o3 && (e4.value = i3, t4 = true);
              }), t4 || n3.profile.profileCustomField.push({ key: o3, value: i3 });
            } else
              switch (o3) {
                case f2.NICK:
                  n3.profile.nick = i3;
                  break;
                case f2.GENDER:
                  n3.profile.gender = i3;
                  break;
                case f2.BIRTHDAY:
                  n3.profile.birthday = i3;
                  break;
                case f2.LOCATION:
                  n3.profile.location = i3;
                  break;
                case f2.SELFSIGNATURE:
                  n3.profile.selfSignature = i3;
                  break;
                case f2.ALLOWTYPE:
                  n3.profile.allowType = i3;
                  break;
                case f2.LANGUAGE:
                  n3.profile.language = i3;
                  break;
                case f2.AVATAR:
                  n3.profile.avatar = i3;
                  break;
                case f2.MESSAGESETTINGS:
                  n3.profile.messageSettings = i3;
                  break;
                case f2.ADMINFORBIDTYPE:
                  n3.profile.adminForbidType = i3;
                  break;
                case f2.LEVEL:
                  n3.profile.level = i3;
                  break;
                case f2.ROLE:
                  n3.profile.role = i3;
                  break;
                case Ze2.REMARK:
                  n3.remark = i3;
                  break;
                case Ze2.ADDTIME:
                  n3.addTime = i3;
                  break;
                case Ze2.GROUP:
                  n3.groupList = JSON.parse(JSON.stringify(i3));
                  break;
                case Ze2.ADDSOURCE:
                  n3.source = i3;
                  break;
                case Ze2.ADDWORDING:
                  break;
                default:
                  M2.d("snsProfileItem unkown tag->", e3[s3].tag);
              }
          }();
        this.timestamp = Date.now(), a3.length = 0;
      } }, { key: "updateProfile", value: function(e3) {
        this.profile = JSON.parse(JSON.stringify(e3)), this.timestamp = Date.now();
      } }, { key: "addToGroupList", value: function(e3) {
        -1 === this.groupList.indexOf(e3) && (this.groupList.push(e3), this.count = this.groupList.length);
      } }, { key: "removeFromGroupList", value: function(e3) {
        e3 = this.groupList.indexOf(e3);
        -1 < e3 && (this.groupList.splice(e3, 1), this.count = this.groupList.length);
      } }]), Ya = e2(function e3(t3) {
        p2(this, e3), this._snsM = t3, this._n = "FriendHandler", this._map = /* @__PURE__ */ new Map(), this._startIdx = 0, this._standardSeq = 0, this._customSeq = 0, this._expirationTime = 18e4;
      }, [{ key: "updateCacheOnReconnected", value: function() {
        this._startIdx = 0, this._standardSeq = 0, this._customSeq = 0, this.pagingGetFriendList();
      } }, { key: "getLocalFriendList", value: function() {
        return d2(this._map.values());
      } }, { key: "getFriendRemark", value: function(e3) {
        return this._map.has(e3) ? this._map.get(e3).remark : "";
      } }, { key: "onFriendProfileModified", value: function(e3) {
        var o3, i3 = this, e3 = e3.dataList;
        S2(e3) || (o3 = this._snsM.get(11), e3.forEach(function(e4) {
          var t3, n3 = e4.userID, e4 = e4.profileList;
          i3.isMyFriend(n3) && (M2.l("".concat(i3._n, ".onFriendProfileModified. friend account:").concat(n3, ", profileList:").concat(JSON.stringify(e4))), (t3 = i3._map.get(n3)).update(e4), o3.modifyMessageSentByPeer({ conversationID: "".concat(R2.CONV_C2C).concat(n3), latestNick: t3.profile.nick, latestAvatar: t3.profile.avatar }));
        }), this._onFriendListUpdated());
      } }, { key: "onFriendAdded", value: function(t3) {
        var n3 = this;
        0 !== t3.length && (M2.l("".concat(this._n, ".onFriendAdded userIDList:").concat(t3)), t3.forEach(function(e3) {
          n3._map.set(e3, new Wa(e3));
        }), this.getFriendProfile({ userIDList: t3 }).then(function(e3) {
          t3.forEach(function(e4) {
            var t4 = n3._map.get(e4);
            0 < t4.groupList.length && n3._snsM.updateWhenFriendAdded({ nameList: t4.groupList, userID: e4 });
          }), n3._onFriendListUpdated();
        }));
      } }, { key: "onFriendDeleted", value: function(e3) {
        var n3 = this;
        0 !== e3.length && (M2.l("".concat(this._n, ".onFriendDeleted userIDList:").concat(e3)), e3.forEach(function(e4) {
          var t3 = n3._map.get(e4);
          0 < t3.groupList.length && n3._snsM.updateWhenFriendDeleted({ nameList: t3.groupList, userID: e4 }), n3._map.delete(e4);
        }), this._onFriendListUpdated());
      } }, { key: "_onFriendListUpdated", value: function() {
        this._snsM.emitOEvt(h2.FRIEND_LIST_UPDATED), this._snsM.get(11).checkAndPatchRemark();
      } }, { key: "getFriendProfile", value: function(e3) {
        var t3, a3 = this, n3 = "".concat(this._n, ".").concat("getFriendProfile"), e3 = e3.userIDList, s3 = [], r3 = [], o3 = [];
        return e3.forEach(function(e4) {
          var t4;
          a3._map.has(e4) ? (t4 = a3._map.get(e4), Date.now() - t4.timestamp < a3._expirationTime ? r3.push(t4) : o3.push(e4)) : s3.push({ userID: e4, code: k2.NOT_MY_FRIEND, message: a3._snsM.getErrMsg(k2.NOT_MY_FRIEND) });
        }), 0 === o3.length ? (M2.i("".concat(n3, " newUserIDList is empty")), D2({ friendList: r3, failureUserIDList: s3 })) : ((t3 = new P2("getFriendProfile")).setMessage("userIDList:".concat(o3)), M2.i("".concat(n3, " userIDList:").concat(o3)), this._snsM.req({ P: G2.GET_FD_PROFILE, data: { fromAccount: this._snsM.getMyUserID(), userIDList: o3 } }).then(function(e4) {
          return t3.end(), M2.i("".concat(n3, " ok")), e4.data.resultList.forEach(function(e5) {
            var t4, n4 = e5.to, o4 = e5.resultCode, i3 = e5.resultInfo, e5 = e5.tagValueList;
            N2(o4) || 0 === o4 ? (a3._map.has(n4) ? (t4 = a3._map.get(n4)).update(e5) : (t4 = new Wa(n4, e5), a3._map.set(n4, t4)), r3.push(t4)) : s3.push({ userID: n4, code: o4, message: i3 });
          }), T2({ friendList: r3, failureUserIDList: s3 });
        }).catch(function(e4) {
          return t3.setError(e4).end(), M2.w("".concat(n3, " failed. error:"), e4), E2(e4);
        }));
      } }, { key: "isMyFriend", value: function(e3) {
        return this._map.has(e3);
      } }, { key: "pagingGetFriendList", value: function() {
        var s3 = this, r3 = "".concat(this._n, ".").concat("getFriendList"), c3 = new P2("getFriendList"), u3 = Date.now();
        this._snsM.req({ P: G2.GET_FD_LIST, data: { fromAccount: this._snsM.getMyUserID(), startIndex: this._startIdx, standardSequence: this._standardSeq, customSequence: this._customSeq } }).then(function(e3) {
          var e3 = e3.data, t3 = e3.friendCount, n3 = e3.resultList, o3 = e3.nextStartIndex, i3 = e3.standardSequence, a3 = e3.customSequence, e3 = e3.completeFlag, t3 = (s3._startIdx = o3, s3._standardSeq = i3, s3._customSeq = a3, "friendCount:".concat(t3, " nextStartIndex:").concat(o3, " standardSequence:").concat(i3, " ") + "customSequence:".concat(a3, " completeFlag:").concat(e3, " cost:").concat(an(u3)));
          c3.setMessage(t3).end(), M2.i("".concat(r3, " ok."), t3), S2(n3) || n3.forEach(function(e4) {
            var t4 = e4.to, e4 = e4.tagValueList;
            s3._map.set(t4, new Wa(t4, e4));
          }), 0 === e3 ? s3.pagingGetFriendList() : (s3._snsM.emitOEvt(h2.FRIEND_LIST_UPDATED), s3._pagingGetFriendProfile());
        }).catch(function(e3) {
          return c3.setError(e3).end(), M2.w("".concat(r3, " failed. error:"), e3), E2(e3);
        });
      } }, { key: "_pagingGetFriendProfile", value: function() {
        var n3 = this, e3 = d2(this._map.keys()), t3 = this._snsM.get(4), o3 = e3.length, i3 = o3 <= 100 ? 1 : Math.ceil(o3 / 100);
        M2.l("".concat(this._n, "._pagingGetFriendProfile friendCount:").concat(o3, " pageCount:").concat(i3));
        for (var a3 = 0; a3 < i3; a3++)
          t3.getUserProfile({ userIDList: e3.slice(100 * a3, 100 * (a3 + 1)) }).then(function(e4) {
            e4.data.forEach(function(e5) {
              var t4 = n3._map.get(e5.userID);
              t4 && t4.updateProfile(e5);
            }), n3._onFriendListUpdated();
          });
      } }, { key: "addFriend", value: function(e3) {
        var t3, n3, o3, i3, a3, s3, r3, c3 = this, u3 = "".concat(this._n, ".").concat("addFriend");
        return e3.wording && false === this._snsM.filterProfanity("wording", e3) ? E2({ code: k2.PROFANITY_FOUND }) : (t3 = e3.to, n3 = e3.source, o3 = e3.type, i3 = e3.wording, a3 = e3.remark, e3 = e3.groupName, (s3 = o3) && (s3 === R2.SNS_ADD_TYPE_SINGLE || s3 === R2.SNS_ADD_TYPE_BOTH) || (s3 = R2.SNS_ADD_TYPE_BOTH), (r3 = new P2("addFriend")).setMessage("to:".concat(t3, " source:").concat(n3, " type:").concat(s3)), this._snsM.req({ P: G2.ADD_FD, data: { fromAccount: this._snsM.getMyUserID(), addFriendItem: [{ to: t3, source: n3, wording: i3, remark: a3, groupName: e3 }], type: s3 } }).then(function(e4) {
          var e4 = e4.data.resultList, e4 = (r3.setMoreMessage("resultList:".concat(JSON.stringify(e4))).end(), e4[0]), t4 = e4.to, n4 = e4.resultCode, e4 = e4.resultInfo;
          return M2.i("".concat(u3, " ok. to:").concat(t4, " type:").concat(s3, " code:").concat(n4)), N2(n4) || 0 === n4 ? T2({ userID: t4, code: 0 }) : 30539 === n4 ? T2({ userID: t4, code: n4, message: c3._snsM.getErrMsg(n4) }) : E2({ userID: t4, code: n4, message: c3._snsM.getErrMsg(n4) || e4 });
        }).catch(function(e4) {
          return r3.setError(e4).end(), M2.w("".concat(u3, " failed. error:"), e4), E2(e4);
        }));
      } }, { key: "deleteFriend", value: function(e3) {
        var t3, n3 = this, o3 = "".concat(this._n, ".").concat("deleteFriend"), i3 = e3.userIDList, e3 = e3.type, a3 = (1e3 < i3.length && (M2.w("".concat(o3, " ").concat(tn(1e3))), i3.length = 1e3), []), s3 = [], r3 = [];
        return i3.forEach(function(e4) {
          n3._map.has(e4) ? r3.push(e4) : a3.push({ userID: e4, code: k2.NOT_MY_FRIEND, message: n3._snsM.getErrMsg(k2.NOT_MY_FRIEND) });
        }), 0 === r3.length ? D2({ successUserIDList: s3, failureUserIDList: a3 }) : ((i3 = e3) && (i3 === R2.SNS_DELETE_TYPE_SINGLE || i3 === R2.SNS_DELETE_TYPE_BOTH) || (i3 = R2.SNS_DELETE_TYPE_BOTH), (t3 = new P2("deleteFriend")).setMessage("userIDList:".concat(r3, " type:").concat(i3)), this._snsM.req({ P: G2.DEL_FD, data: { fromAccount: this._snsM.getMyUserID(), userIDList: r3, type: i3 } }).then(function(e4) {
          t3.end(), M2.i("".concat(o3, " ok"));
          e4 = e4.data.resultList;
          return S2(e4) || e4.forEach(function(e5) {
            var t4 = e5.to, n4 = e5.resultCode, e5 = e5.resultInfo;
            N2(n4) || 0 === n4 ? s3.push({ userID: t4 }) : a3.push({ userID: t4, code: n4, message: e5 });
          }), T2({ successUserIDList: s3, failureUserIDList: a3 });
        }).catch(function(e4) {
          return t3.setError(e4).end(), M2.w("".concat(o3, " error:"), e4), E2(e4);
        }));
      } }, { key: "updateFriend", value: function(e3) {
        var o3, i3, t3, a3 = this, n3 = e3.userID, s3 = e3.remark, r3 = e3.friendCustomField;
        return this._map.has(n3) ? (o3 = "".concat(this._n, ".").concat("updateFriend"), (i3 = new P2("updateFriend")).setMessage("userID:".concat(n3, " remark:").concat(s3, " friendCustomField:").concat(r3)), t3 = [], N2(s3) || t3.push({ tag: Ze2.REMARK, value: s3 }), O2(r3) && 0 < r3.length && r3.forEach(function(e4) {
          t3.push({ tag: e4.key, value: e4.value });
        }), this._snsM.req({ P: G2.UPDATE_FD, data: { fromAccount: this._snsM.getMyUserID(), updateItem: [{ to: n3, snsItem: t3 }] } }).then(function(e4) {
          i3.end(), M2.i("".concat(o3, " ok"));
          var e4 = e4.data.resultList[0], t4 = e4.to, n4 = e4.resultCode, e4 = e4.resultInfo;
          return N2(n4) || 0 === n4 ? ((t4 = a3._map.get(t4)) && (N2(s3) || (t4.remark = s3), O2(r3) && 0 < r3.length && Rt2(t4.friendCustomField, r3), a3._onFriendListUpdated()), T2(t4)) : E2({ code: n4, message: e4 });
        }).catch(function(e4) {
          return i3.setError(e4).end(), M2.w("".concat(o3, " failed. error:"), e4), E2(e4);
        })) : E2({ code: k2.NOT_MY_FRIEND });
      } }, { key: "checkFriend", value: function(e3) {
        var t3 = "".concat(this._n, ".").concat("checkFriend"), n3 = e3.userIDList, o3 = e3.type, s3 = (o3 && (o3 === R2.SNS_CHECK_TYPE_SINGLE || o3 === R2.SNS_CHECK_TYPE_BOTH) || (o3 = R2.SNS_CHECK_TYPE_BOTH), new P2("checkFriend"));
        return s3.setMessage("userIDList:".concat(n3, " type:").concat(o3)), this._snsM.req({ P: G2.CHECK_FD, data: { fromAccount: this._snsM.getMyUserID(), userIDList: n3, type: o3 } }).then(function(e4) {
          s3.end(), M2.i("".concat(t3, " ok. userIDList:").concat(n3, " type:").concat(o3));
          var i3 = [], a3 = [], e4 = e4.data.resultList;
          return O2(e4) && e4.forEach(function(e5) {
            var t4 = e5.to, n4 = e5.relation, o4 = e5.resultCode, e5 = e5.resultInfo;
            N2(o4) || 0 === o4 ? i3.push({ userID: t4, code: 0, relation: n4 }) : a3.push({ userID: t4, code: o4, message: e5 });
          }), T2({ successUserIDList: i3, failureUserIDList: a3 });
        }).catch(function(e4) {
          return s3.setError(e4).end(), M2.w("".concat(t3, " failed. error:"), e4), E2(e4);
        });
      } }, { key: "onAddedToFriendGroup", value: function(e3) {
        var t3 = this, n3 = e3.name, e3 = e3.userIDList;
        M2.l("".concat(this._n, ".onAddedToFriendGroup groupName:").concat(n3, " userIDList:").concat(e3)), n3 && !S2(e3) && e3.forEach(function(e4) {
          t3._map.has(e4) && t3._map.get(e4).addToGroupList(n3);
        });
      } }, { key: "onRemovedFromFriendGroup", value: function(e3) {
        var t3 = this, n3 = e3.name, e3 = e3.userIDList;
        M2.l("".concat(this._n, ".onRemovedFromFriendGroup groupName:").concat(n3, " userIDList:").concat(e3)), n3 && !S2(e3) && e3.forEach(function(e4) {
          t3._map.has(e4) && t3._map.get(e4).removeFromGroupList(n3);
        });
      } }, { key: "reset", value: function() {
        this._map.clear(), this._startIdx = 0, this._standardSeq = 0, this._customSeq = 0;
      } }]), ja = e2(function e3(t3) {
        p2(this, e3), S2(t3) || (this.name = t3.name || "", this.userIDList = t3.userIDList || [], this.count = this.userIDList.length || 0);
      }, [{ key: "addToUserIDList", value: function(e3) {
        -1 === this.userIDList.indexOf(e3) && (this.userIDList.push(e3), this.count = this.userIDList.length);
      } }, { key: "removeFromUserIDList", value: function(e3) {
        e3 = this.userIDList.indexOf(e3);
        -1 < e3 && (this.userIDList.splice(e3, 1), this.count = this.userIDList.length);
      } }]), Ja = e2(function e3(t3) {
        p2(this, e3), this._snsM = t3, this._n = "FriendGroupHandler", this._map = /* @__PURE__ */ new Map();
      }, [{ key: "updateCacheOnReconnected", value: function() {
        this.getGroupList();
      } }, { key: "getLocalGroupList", value: function() {
        return d2(this._map.values());
      } }, { key: "_onGroupListUpdated", value: function() {
        var e3 = d2(this._map.values());
        this._snsM.emitOEvt(h2.FRIEND_GROUP_LIST_UPDATED, e3);
      } }, { key: "getGroupList", value: function() {
        var n3 = this, t3 = "".concat(this._n, ".").concat("getGroupList"), o3 = new P2("getGroupList");
        return this._snsM.req({ P: G2.GET_FD_GRP_LIST, data: { fromAccount: this._snsM.getMyUserID() } }).then(function(e3) {
          o3.end();
          e3 = e3.data.resultList;
          S2(e3) ? M2.i("".concat(t3, " ok. count:0")) : (M2.i("".concat(t3, " ok. count:").concat(e3.length)), n3._map.clear(), e3.forEach(function(e4) {
            var t4 = new ja(e4);
            n3._map.set(e4.name, t4);
          }), n3._onGroupListUpdated());
        }).catch(function(e3) {
          return o3.setError(e3).end(), M2.w("".concat(t3, " error:"), e3), E2(e3);
        });
      } }, { key: "createGroup", value: function(e3) {
        var t3, n3, o3 = this, s3 = "".concat(this._n, ".").concat("createGroup"), r3 = e3.name, e3 = e3.userIDList;
        return this._map.has(r3) ? E2({ code: k2.FRIEND_GRP_EXISTED }) : (t3 = "name:".concat(r3, " userIDList:").concat(e3), (n3 = new P2("createGroup")).setMessage(t3), this._snsM.req({ P: G2.CREATE_FD_GRP, data: { fromAccount: this._snsM.getMyUserID(), groupName: [r3], userIDList: O2(e3) ? e3 : void 0 } }).then(function(e4) {
          n3.end(), M2.l("".concat(s3, " ok. ").concat(t3));
          var e4 = e4.data.resultList, i3 = [], a3 = [], e4 = (e4 && e4.forEach(function(e5) {
            var t4 = e5.to, n4 = e5.resultCode, o4 = e5.resultInfo;
            N2(n4) || 0 === n4 ? i3.push(t4) : (t4 = { userID: e5.to, code: n4, message: o4 }, a3.push(t4));
          }), new ja({ name: r3, userIDList: i3 }));
          return o3._map.set(r3, e4), o3._snsM.onAddedToFriendGroup({ name: r3, userIDList: i3 }), o3._onGroupListUpdated(), T2({ friendGroup: e4, failureUserIDList: a3 });
        }).catch(function(e4) {
          return n3.setError(e4).end(), M2.w("".concat(s3, " failed. error:"), e4), E2(e4);
        }));
      } }, { key: "deleteGroup", value: function(e3) {
        var n3, o3, i3 = this, a3 = "".concat(this._n, ".").concat("deleteGroup"), s3 = e3.name;
        return this._map.has(s3) ? (n3 = "name:".concat(s3), (o3 = new P2("deleteGroup")).setMessage(n3), this._snsM.req({ P: G2.DEL_FD_GRP, data: { fromAccount: this._snsM.getMyUserID(), nameList: [s3] } }).then(function(e4) {
          o3.end(), M2.l("".concat(a3, " ok. ").concat(n3));
          var t3 = i3._map.get(s3);
          return t3 && (i3._snsM.onRemovedFromFriendGroup({ name: s3, userIDList: t3.userIDList }), i3._map.delete(s3), t3.userIDList.length = 0), i3._onGroupListUpdated(), T2(t3);
        }).catch(function(e4) {
          return o3.setError(e4).end(), M2.w("".concat(a3, " failed. error:"), e4), E2(e4);
        })) : this._onGroupNotExist();
      } }, { key: "renameGroup", value: function(e3) {
        var t3, n3, o3 = this, i3 = "".concat(this._n, ".").concat("renameGroup"), a3 = e3.oldName, s3 = e3.newName;
        return this._map.has(a3) ? (t3 = "oldName:".concat(a3, " newName:").concat(s3), (n3 = new P2("renameGroup")).setMessage(t3), this._snsM.req({ P: G2.UPDATE_FD_GRP, data: { fromAccount: this._snsM.getMyUserID(), oldName: a3, newName: s3 } }).then(function() {
          var e4;
          return n3.end(), M2.l("".concat(i3, " ok. ").concat(t3)), o3._map.has(a3) ? ((e4 = o3._map.get(a3)).name = s3, o3._map.delete(a3), o3._map.set(s3, e4), o3._snsM.onRemovedFromFriendGroup({ name: a3, userIDList: e4.userIDList }), o3._snsM.onAddedToFriendGroup({ name: s3, userIDList: e4.userIDList }), o3._onGroupListUpdated(), T2(e4)) : T2();
        }).catch(function(e4) {
          return n3.setError(e4).end(), M2.w("".concat(i3, " failed. error:"), e4), E2(e4);
        })) : this._onGroupNotExist();
      } }, { key: "addToGroup", value: function(e3) {
        var t3, n3, o3 = this, i3 = "".concat(this._n, ".").concat("addToGroup"), a3 = e3.name, e3 = e3.userIDList;
        return this._map.has(a3) ? (t3 = "name:".concat(a3, " userIDList:").concat(e3), (n3 = new P2("addToGroup")).setMessage(t3), this._snsM.req({ P: G2.UPDATE_FD_GRP, data: { fromAccount: this._snsM.getMyUserID(), oldName: a3, updateGroupItem: e3.filter(function(e4) {
          return o3._snsM.isMyFriend(e4);
        }).map(function(e4) {
          return { to: e4, updateType: "Update_Type_Add" };
        }) } }).then(function(e4) {
          return n3.end(), M2.l("".concat(i3, " ok. ").concat(t3)), o3._onGroupUpdated(a3, e4);
        }).catch(function(e4) {
          return n3.setError(e4).end(), M2.w("".concat(i3, " failed. error:"), e4), E2(e4);
        })) : this._onGroupNotExist();
      } }, { key: "removeFromGroup", value: function(e3) {
        var t3, n3, o3 = this, i3 = "".concat(this._n, ".").concat("removeFromGroup"), a3 = e3.name, e3 = e3.userIDList;
        return this._map.has(a3) ? (t3 = "name:".concat(a3, " userIDList:").concat(e3), (n3 = new P2("removeFromGroup")).setMessage(t3), this._snsM.req({ P: G2.UPDATE_FD_GRP, data: { fromAccount: this._snsM.getMyUserID(), oldName: a3, updateGroupItem: e3.filter(function(e4) {
          return o3._snsM.isMyFriend(e4);
        }).map(function(e4) {
          return { to: e4, updateType: "Update_Type_Delete" };
        }) } }).then(function(e4) {
          return n3.end(), M2.l("".concat(i3, " ok. ").concat(t3)), o3._onGroupUpdated(a3, e4);
        }).catch(function(e4) {
          return n3.setError(e4).end(), M2.w("".concat(i3, " failed. error:"), e4), E2(e4);
        })) : this._onGroupNotExist();
      } }, { key: "_onGroupUpdated", value: function(e3, t3) {
        var t3 = t3.data.resultList, a3 = this._map.get(e3), s3 = [], r3 = [], c3 = [];
        return O2(t3) && t3.forEach(function(e4) {
          var t4 = e4.to, n3 = e4.resultCode, o3 = e4.resultInfo, i3 = e4.type;
          0 === n3 ? "Update_Type_Add" === i3 ? a3 && (a3.addToUserIDList(t4), r3.push(t4)) : "Update_Type_Delete" === i3 && a3 && (a3.removeFromUserIDList(t4), c3.push(t4)) : s3.push({ to: e4.to, code: n3, message: o3 });
        }), M2.l("".concat(this._n, "._onGroupUpdated name:").concat(e3, " userIDList:").concat(a3.userIDList)), 0 < r3.length && this._snsM.onAddedToFriendGroup({ name: e3, userIDList: r3 }), 0 < c3.length && this._snsM.onRemovedFromFriendGroup({ name: e3, userIDList: c3 }), T2({ friendGroup: a3, failureUserIDList: s3 });
      } }, { key: "updateWhenFriendAdded", value: function(e3) {
        var t3 = this, n3 = e3.nameList, o3 = e3.userID;
        M2.l("".concat(this._n, ".updateWhenFriendAdded userID:").concat(o3, " nameList:").concat(n3)), S2(n3) || n3.forEach(function(e4) {
          t3._map.has(e4) && t3._map.get(e4).addToUserIDList(o3);
        });
      } }, { key: "updateWhenFriendDeleted", value: function(e3) {
        var t3 = this, n3 = e3.nameList, o3 = e3.userID;
        M2.l("".concat(this._n, ".updateWhenFriendDeleted userID:").concat(o3, " nameList:").concat(n3)), S2(n3) || n3.forEach(function(e4) {
          t3._map.has(e4) && t3._map.get(e4).removeFromUserIDList(o3);
        });
      } }, { key: "_onGroupNotExist", value: function(e3) {
        return E2({ code: k2.FRIEND_GRP_NOT_EXIST });
      } }, { key: "reset", value: function() {
        this._map.clear();
      } }]), za = (t2(ys, c2), e2(ys, [{ key: "onContextUpdated", value: function(e3) {
        this._friendHandler.pagingGetFriendList(), this._friendGroupHandler.getGroupList(), this._friendApplicationHandler.getApplicationList();
      } }, { key: "onRelationChainModified", value: function(e3) {
        var n3, o3, i3, a3, s3, r3, c3 = this, e3 = e3.dataList;
        S2(e3) || (n3 = [], o3 = [], i3 = [], s3 = !(a3 = []), r3 = "", e3.forEach(function(e4) {
          var t3;
          3 !== e4.pushType && 4 !== e4.pushType || !e4.from || (r3 = e4.from), e4.friendAddAccount && (n3.push.apply(n3, d2(e4.friendAddAccount)), a3.push.apply(a3, d2(e4.friendAddAccount))), e4.friendDelAccount && o3.push.apply(o3, d2(e4.friendDelAccount)), e4.friendApplicationAdded && i3.push.apply(i3, d2(e4.friendApplicationAdded)), e4.friendApplicationDeletedUserIDList && a3.push.apply(a3, d2(e4.friendApplicationDeletedUserIDList)), e4.reportTime && 7 === e4.pushType && (s3 = true), e4.friendUpInfo && (t3 = { dataList: [] }, e4.friendUpInfo.forEach(function(e5) {
            t3.dataList.push({ userID: e5.friendAccount, profileList: d2(e5.sns) });
          }), c3.onFriendProfileModified(t3));
        }), s3 && this._friendApplicationHandler.onApplicationRead(), this._friendApplicationHandler.onApplicationAdded(i3, r3), this._friendApplicationHandler.onApplicationDeleted(a3), this._friendHandler.onFriendAdded(n3), this._friendHandler.onFriendDeleted(o3));
      } }, { key: "isMyFriend", value: function(e3) {
        return this._friendHandler.isMyFriend(e3);
      } }, { key: "filterProfanity", value: function(e3, t3) {
        var n3, o3 = this.get(29);
        return !o3 || (n3 = (o3 = o3.filterText(t3[e3], "sns")).isAllowedToSend, o3 = o3.modifiedText, true === n3 && (t3[e3] = o3, true));
      } }, { key: "onFriendProfileModified", value: function(e3) {
        this._friendHandler.onFriendProfileModified(e3);
      } }, { key: "getLocalFriendList", value: function() {
        var e3 = !(0 < arguments.length && void 0 !== arguments[0]) || arguments[0], t3 = this._friendHandler.getLocalFriendList();
        return e3 ? D2(t3) : t3;
      } }, { key: "getFriendRemark", value: function(e3) {
        return this._friendHandler.getFriendRemark(e3);
      } }, { key: "getFriendList", value: function() {
        return this._friendHandler.pagingGetFriendList();
      } }, { key: "addFriend", value: function(e3) {
        return this._friendHandler.addFriend(e3);
      } }, { key: "deleteFriend", value: function(e3) {
        return this._friendHandler.deleteFriend(e3);
      } }, { key: "checkFriend", value: function(e3) {
        return this._friendHandler.checkFriend(e3);
      } }, { key: "getFriendProfile", value: function(e3) {
        return this._friendHandler.getFriendProfile(e3);
      } }, { key: "updateFriend", value: function(e3) {
        return this._friendHandler.updateFriend(e3);
      } }, { key: "onAddedToFriendGroup", value: function(e3) {
        this._friendHandler.onAddedToFriendGroup(e3);
      } }, { key: "onRemovedFromFriendGroup", value: function(e3) {
        this._friendHandler.onRemovedFromFriendGroup(e3);
      } }, { key: "getLocalFriendApplicationList", value: function() {
        var e3 = this._friendApplicationHandler.getLocalApplicationList();
        return D2(e3);
      } }, { key: "deleteFriendApplication", value: function(e3) {
        return this._friendApplicationHandler.deleteApplication(e3);
      } }, { key: "refuseFriendApplication", value: function(e3) {
        return this._friendApplicationHandler.refuseApplication(e3);
      } }, { key: "acceptFriendApplication", value: function(e3) {
        return this._friendApplicationHandler.acceptApplication(e3);
      } }, { key: "setFriendApplicationRead", value: function(e3) {
        return this._friendApplicationHandler.setApplicationRead(e3);
      } }, { key: "getLocalFriendGroupList", value: function() {
        var e3 = this._friendGroupHandler.getLocalGroupList();
        return D2(e3);
      } }, { key: "createFriendGroup", value: function(e3) {
        return this._friendGroupHandler.createGroup(e3);
      } }, { key: "deleteFriendGroup", value: function(e3) {
        return this._friendGroupHandler.deleteGroup(e3);
      } }, { key: "addToFriendGroup", value: function(e3) {
        return this._friendGroupHandler.addToGroup(e3);
      } }, { key: "removeFromFriendGroup", value: function(e3) {
        return this._friendGroupHandler.removeFromGroup(e3);
      } }, { key: "renameFriendGroup", value: function(e3) {
        return this._friendGroupHandler.renameGroup(e3);
      } }, { key: "updateWhenFriendAdded", value: function(e3) {
        this._friendGroupHandler.updateWhenFriendAdded(e3);
      } }, { key: "updateWhenFriendDeleted", value: function(e3) {
        this._friendGroupHandler.updateWhenFriendDeleted(e3);
      } }, { key: "updateCacheOnReconnected", value: function() {
        M2.l("".concat(this._n, ".updateCacheOnReconnected")), this._friendHandler.updateCacheOnReconnected(), this._friendGroupHandler.updateCacheOnReconnected(), this._friendApplicationHandler.updateCacheOnReconnected();
      } }, { key: "reset", value: function() {
        M2.l("".concat(this._n, ".reset")), this._friendHandler.reset(), this._friendGroupHandler.reset(), this._friendApplicationHandler.reset();
      } }])), Xa = (t2(Ms, c2), e2(Ms, [{ key: "isWorkerEnabled", value: function() {
        return this._isWorkerEnabled && Ge2;
      } }, { key: "startWorkerTimer", value: function() {
        M2.l("".concat(this._n, ".startWorkerTimer")), this._workerTimer && this._workerTimer.postMessage("start");
      } }, { key: "stopWorkerTimer", value: function() {
        M2.l("".concat(this._n, ".stopWorkerTimer")), this._workerTimer && this._workerTimer.postMessage("stop");
      } }, { key: "_init", value: function() {
        var e3, t3;
        Ge2 && (e3 = URL.createObjectURL(new Blob(['let interval = -1;onmessage = function(event) {  if (event.data === "start") {    if (interval > 0) {      clearInterval(interval);    }    interval = setInterval(() => {      postMessage("");    }, 1000);    postMessage(interval);  } else if (event.data === "stop") {    clearInterval(interval);    interval = -1;  }};'], { type: "application/javascript; charset=utf-8" })), this._workerTimer = new Worker(e3), (t3 = this)._workerTimer.onmessage = function(e4) {
          e4.data ? (t3._timerID = e4.data, M2.l("".concat(t3._n, "._init seed:").concat(t3._timerID))) : t3._m.onCheckTimer();
        });
      } }, { key: "_onCloudConfig", value: function() {
        var e3 = this.getCloudConfig("enable_worker");
        M2.l("".concat(this._n, "._onCloudConfig enableWorker:").concat(e3)), N2(e3) || "1" === e3 ? !this._isWorkerEnabled && Ge2 && (this._isWorkerEnabled = true, this.startWorkerTimer(), this._m.onWorkerTimerEnabled()) : this._isWorkerEnabled && Ge2 && (this._isWorkerEnabled = false, this.stopWorkerTimer(), this._m.onWorkerTimerDisabled());
      } }, { key: "terminate", value: function() {
        M2.l("".concat(this._n, ".terminate")), this._workerTimer && (this._workerTimer.terminate(), this._workerTimer = null, this._timerID = -1);
      } }, { key: "getTimerID", value: function() {
        return this._timerID;
      } }, { key: "reset", value: function() {
        M2.l("".concat(this._n, ".reset"));
      } }])), Za = e2(function e3(t3) {
        p2(this, e3), this._commercialConfigM = t3, this._n = "PurchasedFeatureHandler", this._isCSPluginReported = false, this._featureMap = /* @__PURE__ */ new Map();
      }, [{ key: "isValidPurchaseBits", value: function(e3) {
        return e3 && "string" == typeof e3 && 1 <= e3.length && e3.length <= 64 && /[01]{1,64}/.test(e3);
      } }, { key: "parsePurchaseBits", value: function(e3) {
        if (this.isValidPurchaseBits(e3)) {
          this._featureMap.clear();
          for (var t3, n3 = e3.length - 1, o3 = 0; 0 <= n3; n3--, o3++)
            t3 = (o3 < 32 ? new $2(0, Math.pow(2, o3)) : new $2(Math.pow(2, o3 - 32), 0)).toString(), "1" === e3[n3] ? this._featureMap.set(t3, true) : this._featureMap.set(t3, false);
        } else
          M2.w("".concat(this._n, ".parsePurchaseBits invalid purchasebits:").concat(e3));
      } }, { key: "hasPurchasedFeature", value: function(e3) {
        return !!this._featureMap.get(e3);
      } }, { key: "isFeatureEnabled", value: function(e3) {
        for (var t3 = parseInt(e3).toString(2), n3 = void 0, o3 = true, i3 = t3.length - 1, a3 = 0; 0 <= i3; i3--, a3++)
          if ("1" === t3.charAt(i3) && (n3 = (a3 < 32 ? new $2(0, Math.pow(2, a3)) : new $2(Math.pow(2, a3 - 32), 0)).toString(), !this._featureMap.get(n3))) {
            o3 = false;
            break;
          }
        return M2.l("".concat(this._n, ".isFeatureEnabled decimalNumber:").concat(e3, " key:").concat(n3, " ret:").concat(o3)), D2({ enabled: o3 });
      } }, { key: "isFeatureEnabledForStat", value: function(e3) {
        for (var t3 = parseInt(e3).toString(2), n3 = t3.length - 1, o3 = 0; 0 <= n3; n3--, o3++)
          if ("1" === t3.charAt(n3)) {
            if (i3 = (o3 < 32 ? new $2(0, Math.pow(2, o3)) : new $2(Math.pow(2, o3 - 32), 0)).toString(), !this._featureMap.get(i3))
              break;
            var i3, a3 = "", s3 = 0;
            i3 === g2.PLUGIN_TRANSLATE ? (a3 = "plugin_translate", s3 = 16) : i3 === g2.PLUGIN_VOICE_TO_TEXT ? (a3 = "plugin_voice_to_text", s3 = 17) : i3 === g2.PLUGIN_CS ? (a3 = "plugin_cs", s3 = 14) : i3 === g2.PLUGIN_PUSH ? (a3 = "plugin_push", s3 = 13) : i3 === g2.PLUGIN_BOT ? (a3 = "plugin_bot", s3 = 15) : i3 === g2.MSG_REACTION && (a3 = "plugin_emoji_reaction", s3 = 18), "" !== a3 && (i3 = this._commercialConfigM.get(12).getUIPlatform(), new P2(a3).setCode(s3).setUIPlatform(i3).end(), M2.l("".concat(this._n, ".isFeatureEnabledForStat ").concat(a3, " code:").concat(s3, " uiPlatform:").concat(i3)));
          }
      } }, { key: "isCSPluginEnabled", value: function() {
        var e3;
        this._isCSPluginReported || (e3 = this._commercialConfigM.get(12).getUIPlatform(), new P2("plugin_search").setCode(6).setUIPlatform(e3).end(), this._isCSPluginReported = true);
      } }, { key: "clear", value: function() {
        this._featureMap.clear(), this._isCSPluginReported = false;
      } }]), Qa = e2(function e3(t3) {
        p2(this, e3), this._m = t3, this._n = "CommercialConfigModule", this._expiredTime = 0, this._isFetching = false, this._purchasedFeatureHandler = new Za(this);
      }, [{ key: "_canFetch", value: function() {
        return this.get(12).isLoggedIn() ? !this._isFetching && Date.now() >= this._expiredTime : (this._expiredTime = Date.now() + 2e3, false);
      } }, { key: "onCheckTimer", value: function(e3) {
        this._canFetch() && this.fetchConfig();
      } }, { key: "fetchConfig", value: function() {
        var t3, e3, n3 = this, o3 = this._canFetch(), i3 = "".concat(this._n, ".fetchConfig");
        M2.l("".concat(i3, " canFetch:").concat(o3)), o3 && (t3 = new P2("fetchCommercialConfig"), o3 = this.get(12).getSDKAppID(), e3 = this.get(20), this._isFetching = true, e3.req({ P: G2.FETCH_COMMERCIAL_CONFIG, data: { SDKAppID: o3 } }).then(function(e4) {
          t3.setMessage("purchaseBits:".concat(e4.data.purchaseBits)).end(), M2.l("".concat(i3, " ok.")), n3._parseConfig(e4.data), n3._isFetching = false;
        }).catch(function(e4) {
          t3.setError(e4).end(), n3._isFetching = false;
        }));
      } }, { key: "onPushedConfig", value: function(e3) {
        var t3 = "".concat(this._n, ".onPushedConfig data:").concat(JSON.stringify(e3));
        M2.l("".concat(t3)), new P2("pushedCommercialConfig").setMessage("purchaseBits:".concat(e3.purchaseBits)).end(), this._parseConfig(e3);
      } }, { key: "_parseConfig", value: function(e3) {
        var t3 = "".concat(this._n, "._parseConfig"), n3 = e3.errorCode, o3 = e3.errorMessage, i3 = e3.purchaseBits, a3 = e3.expiredTime;
        0 === n3 ? (this._purchasedFeatureHandler.parsePurchaseBits(i3), this._expiredTime = Date.now() + 1e3 * a3) : N2(n3) ? (M2.l("".concat(t3, " failed. Invalid message format:"), e3), this._setExpiredTimeOnResponseError(36e5)) : (M2.e("".concat(t3, " errorCode:").concat(n3, " errorMessage:").concat(o3)), this._setExpiredTimeOnResponseError(12e4));
      } }, { key: "_setExpiredTimeOnResponseError", value: function(e3) {
        this._expiredTime = Date.now() + e3;
      } }, { key: "canIUse", value: function(e3) {
        return this._purchasedFeatureHandler.hasPurchasedFeature(e3);
      } }, { key: "isFeatureEnabled", value: function(e3) {
        return this._purchasedFeatureHandler.isFeatureEnabled(e3);
      } }, { key: "isFeatureEnabledForStat", value: function(e3) {
        this._purchasedFeatureHandler.isFeatureEnabledForStat(e3);
      } }, { key: "isCSPluginEnabled", value: function() {
        this._purchasedFeatureHandler.isCSPluginEnabled();
      } }, { key: "get", value: function(e3) {
        return this._m.get(e3);
      } }, { key: "reset", value: function() {
        M2.l("".concat(this._n, ".reset")), this._expiredTime = 0, this._isFetching = false, this._purchasedFeatureHandler.clear();
      } }]), $a = (t2(Is, c2), e2(Is, [{ key: "registerPlugin", value: function(e3) {
        var t3, n3, o3, i3, a3, s3, r3, c3, u3, l3, d3, p3, _3;
        Ie2 ? (this._offlinePushPlugin = e3["tim-offline-push-plugin"], t3 = (_3 = e3.offlinePushConfig || {}).huaweiBusinessID, n3 = _3.xiaomiBusinessID, o3 = _3.xiaomiAppID, i3 = _3.xiaomiAppKey, a3 = _3.meizuBusinessID, s3 = _3.meizuAppID, r3 = _3.meizuAppKey, c3 = _3.vivoBusinessID, u3 = _3.oppoBusinessID, l3 = _3.oppoAppKey, d3 = _3.oppoAppSecret, p3 = _3.honorBusinessID, _3 = _3.iosBusinessID, this._androidPushConfig.huaweiPushBussinessId = t3, this._androidPushConfig.xiaomiPushBussinessId = n3, this._androidPushConfig.xiaomiPushAppId = o3, this._androidPushConfig.xiaomiPushAppKey = i3, this._androidPushConfig.meizuPushBussinessId = a3, this._androidPushConfig.meizuPushAppId = s3, this._androidPushConfig.meizuPushAppKey = r3, this._androidPushConfig.vivoPushBussinessId = c3, this._androidPushConfig.oppoPushBussinessId = u3, this._androidPushConfig.oppoPushAppKey = l3, this._androidPushConfig.oppoPushAppSecret = d3, this._androidPushConfig.honorPushBussinessId = p3, new P2("registerPlugin").setMessage("tim-offline-push-plugin").setMoreMessage("isExist:".concat(!N2(this._offlinePushPlugin))).end(true), M2.l("".concat(this._n, ".").concat("registerPlugin", " ok. offlinePushConfig:").concat(JSON.stringify(e3.offlinePushConfig))), this._iosBusinessID = _3, this._setAppShowListener()) : this.warn("OfflinePushInUniapp");
      } }, { key: "init", value: function() {
        this._isWebUniapp = this.getUniAppPlatform(), this._getDeviceToken();
      } }, { key: "_getDeviceToken", value: function() {
        var c3, u3 = this, l3 = "".concat(this._n, ".").concat("_getDeviceToken");
        dt2(this._offlinePushPlugin.getDeviceToken) ? (c3 = "androidPushConfig:".concat(JSON.stringify(this._androidPushConfig), ", iosBusinessID:").concat(this._iosBusinessID), M2.l("".concat(l3, " start. ").concat(c3)), new P2("_getDeviceToken").setMessage("".concat(c3)).end(true), this._offlinePushPlugin.getDeviceToken(this._androidPushConfig, function(e3) {
          var t3, n3, o3, i3, a3 = new P2("getDeviceTokenRes"), s3 = e3.code, r3 = e3.msg;
          0 === s3 ? (t3 = (i3 = e3.data).deviceToken, n3 = i3.deviceBrand, o3 = i3.deviceType, i3 = i3.bussinessId, u3._deviceToken = t3, u3._businessID = i3 || u3._iosBusinessID, c3 = "deviceToken:".concat(t3, ", deviceBrand:").concat(n3 || o3, ", businessID:").concat(u3._businessID), M2.l("".concat(l3, " ok. ").concat(c3)), a3.setMessage(c3).end(true), u3._setToken()) : (a3.setMessage("code:".concat(s3, ", msg:").concat(r3)).end(true), M2.e("".concat(l3, " failed. error:"), e3));
        })) : M2.e("".concat(l3, " getDeviceToken is not a function"));
      } }, { key: "canIUseOfflinePush", value: function() {
        return Ie2 && !N2(this._offlinePushPlugin);
      } }, { key: "_setAppShowListener", value: function() {
        var t3 = this, n3 = "".concat(this._n, ".").concat("_setAppShowListener");
        N2(this._offlinePushPlugin) ? M2.e("".concat(n3, " offlinePushPlugin is undefined")) : dt2(this._offlinePushPlugin.setAppShowListener) ? (new P2("_setAppShowListener").end(true), M2.l("".concat(n3, " start")), this._offlinePushPlugin.setAppShowListener(function(e3) {
          e3 = (e3 || {}).appShow;
          new P2("setAppShowListenerRes").setMessage("appShow:".concat(e3)).end(true), M2.l("".concat(n3, " ok. appShow:").concat(e3)), t3._m.isReady() && (0 === e3 ? (t3._getConvUnreadCount(), t3._onBackground()) : 1 === e3 && t3._onForeground());
        })) : M2.e("".concat(n3, " setAppShowListener is not a function"));
      } }, { key: "getDeviceBrand", value: function() {
        var e3;
        if (!N2(this._offlinePushPlugin) && dt2(this._offlinePushPlugin.getDeviceType))
          return e3 = (this._offlinePushPlugin.getDeviceType() || {}).deviceType, M2.l("".concat(this._n, ".getDeviceBrand ok. deviceType:").concat(e3)), e3;
      } }, { key: "_setToken", value: function() {
        var t3 = "".concat(this._n, "._setToken"), e3 = this.get(12), n3 = 1, o3 = "", i3 = "", a3 = (S2(this._deviceToken) && (n3 = 0), this.getUniAppPlatform()), s3 = this.getDeviceBrand(), r3 = (a3 === te2.IOS || a3 === te2.IPAD || a3 === te2.MAC ? i3 = this._deviceToken : a3 === te2.ANDROID && (o3 = this._deviceToken), new P2("offlinePushSetToken")), a3 = "deviceToken:".concat(i3 || o3, ", businessID:").concat(this._businessID, ", ") + "deviceBrand:".concat(s3, ", isWebUniapp:").concat(this._isWebUniapp, ", pushMsg:").concat(n3, ", platform:").concat(a3);
        return r3.setMessage("".concat(a3)), M2.l("".concat(t3, " ").concat(a3)), this.req({ P: G2.SET_TOKEN, data: { tokenID: o3, pushMsg: n3, sdkAppID: e3.getSDKAppID(), businessID: parseInt(this._businessID), deviceBrand: s3, deviceToken: i3, isWebUniapp: this._isWebUniapp } }).then(function(e4) {
          return r3.end(), M2.l("".concat(t3, " ok")), e4;
        }).catch(function(e4) {
          return r3.setError(e4).end(), M2.e("".concat(t3, " failed. error:"), e4), E2(e4);
        });
      } }, { key: "_getConvUnreadCount", value: function() {
        var t3 = this;
        this._c2cUnreadCount = 0, this._groupUnreadCount = 0, this.get(11).getLocalConvList().forEach(function(e3) {
          e3.type === R2.CONV_C2C && (t3._c2cUnreadCount += e3.unreadCount), e3.type === R2.CONV_GROUP && (t3._groupUnreadCount += e3.unreadCount);
        });
      } }, { key: "_onBackground", value: function() {
        var t3 = this, n3 = "".concat(this._n, ".").concat("_onBackground"), o3 = new P2("_onBackground");
        this.req({ P: G2.STAT_BACKGROUND, data: { c2cUnreadCount: this._c2cUnreadCount, groupUnreadCount: this._groupUnreadCount, isWebUniapp: this._isWebUniapp } }).then(function(e3) {
          return o3.setMessage("c2cUnreadCount: ".concat(t3._c2cUnreadCount, ", groupUnreadCount: ").concat(t3._groupUnreadCount)).end(), M2.l("".concat(n3, " ok")), e3;
        }).catch(function(e3) {
          o3.setError(e3).end(), M2.e("".concat(n3, " failed. error:"), e3);
        });
      } }, { key: "_onForeground", value: function() {
        var t3 = "".concat(this._n, ".").concat("_onForeground"), n3 = new P2("_onForeground");
        this.req({ P: G2.STAT_FOREGROUND, data: { isWebUniapp: this._isWebUniapp } }).then(function(e3) {
          return n3.end(), M2.l("".concat(t3, " ok")), e3;
        }).catch(function(e3) {
          n3.setError(e3).end(), M2.e("".concat(t3, " failed. error:"), e3);
        });
      } }, { key: "getUniAppPlatform", value: function() {
        var e3 = uni.getSystemInfoSync().platform, t3 = this.getDeviceBrand();
        return "ios" === e3 ? te2.IOS : "android" === e3 ? te2.ANDROID : 1002 === t3 ? te2.IPAD : 1001 === t3 ? te2.MAC : void 0;
      } }, { key: "reset", value: function() {
        this._deviceToken = "", this._businessID = 0, this._c2cUnreadCount = 0, this._groupUnreadCount = 0, this._isWebUniapp = 0, M2.l("".concat(this._n, ".reset"));
      } }])), es2 = (t2(vs, c2), e2(vs, [{ key: "registerPlugin", value: function(e3) {
        var t3, n3, o3;
        Ie2 ? (t3 = "".concat(this._n, ".").concat("registerPlugin"), this._pushPlugin = e3["tim-push"], this._getDeviceInfo(), n3 = (o3 = e3.pushConfig || {}).androidConfig, o3 = o3.iOSConfig, ut2(n3) && (this._androidPushConfig = n3[this._deviceInfo.packageName]), n3 = (o3 || {}).iOSBusinessID, this._iOSBusinessID = n3, o3 = !N2(this._pushPlugin), new P2("registerPlugin").setMessage(this._pluginName).setMoreMessage("isExisted:".concat(o3)).end(true), M2.l("".concat(t3, " ok. pushConfig:").concat(JSON.stringify(e3.pushConfig))), o3 ? (this._setAppShowListener(), this._setPushEventReportListener()) : M2.e("".concat(t3, " ").concat(this._pluginName, " is undefined"))) : this.warn("TIMPushInUniapp");
      } }, { key: "init", value: function() {
        this._isWebUniapp = this.getUniAppPlatform(), this._reportEventCacheList(), this._getDeviceToken(), this.get(27).isFeatureEnabledForStat(Math.pow(2, 41));
      } }, { key: "_reportEventCacheList", value: function() {
        var a3 = this, s3 = "".concat(this._n, ".").concat("_reportEventCacheList");
        dt2(this._pushPlugin.getPushEventCacheList) ? (new P2("_reportEventCacheList").end(true), this._pushPlugin.getPushEventCacheList(function(e3) {
          var t3 = e3.code, n3 = e3.data.eventList, o3 = new P2("getPushEventCacheListRes");
          if (o3.setCode(t3), 0 !== t3)
            o3.setMessage("res:".concat(JSON.stringify(e3))).end(true), M2.e("".concat(s3, " failed. error:").concat(JSON.stringify(e3)));
          else {
            t3 = n3.length < 10 ? "eventList:".concat(JSON.stringify(n3)) : "eventList.length:".concat(n3.length);
            M2.l("".concat(s3, " ok. ").concat(t3)), o3.setMessage(t3).end(true);
            for (var i3 = y2(y2({}, e3.data), {}, { eventList: [] }); 0 < n3.length; )
              i3.eventList = n3.splice(0, 40), a3._pushReport(i3);
          }
        })) : M2.e("".concat(this._pluginName, ".getPushEventCacheList is not a function"));
      } }, { key: "_getDeviceToken", value: function() {
        var r3, c3 = this, u3 = "".concat(this._n, ".").concat("_getDeviceToken");
        dt2(this._pushPlugin.getDeviceToken) ? (r3 = "androidPushConfig:".concat(JSON.stringify(this._androidPushConfig), " iOSBusinessID:").concat(this._iOSBusinessID), M2.l("".concat(u3, " start. ").concat(r3)), new P2("_getDeviceToken").setMessage("".concat(r3)).end(true), this._pushPlugin.getDeviceToken(this._androidPushConfig, function(e3) {
          var t3, n3, o3, i3 = e3.code, a3 = e3.msg, s3 = new P2("getDeviceTokenRes");
          s3.setCode(i3), 0 === i3 ? (t3 = (i3 = e3.data).deviceToken, n3 = i3.deviceBrand, o3 = i3.deviceType, i3 = i3.bussinessId, c3._deviceToken = t3, c3._businessID = i3 || c3._iOSBusinessID, r3 = "deviceToken:".concat(t3, " deviceBrand:").concat(n3 || o3, " businessID:").concat(c3._businessID), M2.l("".concat(u3, " ok. ").concat(r3)), s3.setMessage(r3).end(true), c3._setToken()) : (s3.setMessage(a3).end(true), M2.e("".concat(u3, " failed. error:").concat(JSON.stringify(e3))));
        })) : M2.e("".concat(this._pluginName, ".getDeviceToken is not a function"));
      } }, { key: "_getDeviceInfo", value: function() {
        var e3, t3, n3, o3, i3 = "".concat(this._n, ".").concat("_getDeviceInfo");
        dt2(this._pushPlugin.getDeviceInfo) ? (o3 = (e3 = this._pushPlugin.getDeviceInfo()).code, t3 = e3.data, (n3 = new P2("_getDeviceInfo")).setCode(o3), 0 === o3 ? (this._deviceInfo = y2(y2({}, this._deviceInfo), t3), this._deviceInfo.pushVersion || (this._deviceInfo.pushVersion = "1.0.1"), o3 = "deviceInfo:".concat(JSON.stringify(this._deviceInfo)), M2.l("".concat(i3, " ok. ").concat(o3)), n3.setMessage(o3).end(true)) : (n3.setMessage("deviceInfoRes:".concat(JSON.stringify(e3))).end(true), M2.e("".concat(i3, " failed. error:").concat(JSON.stringify(e3))))) : M2.e("".concat(this._pluginName, ".getDeviceInfo is not a function"));
      } }, { key: "canIUseTIMPush", value: function() {
        return Ie2 && !N2(this._pushPlugin);
      } }, { key: "_setAppShowListener", value: function() {
        var t3 = this, n3 = "".concat(this._n, ".").concat("_setAppShowListener");
        dt2(this._pushPlugin.setAppShowListener) ? (new P2("_setAppShowListener").end(true), M2.l("".concat(n3, " start")), this._pushPlugin.setAppShowListener(function(e3) {
          e3 = (e3 || {}).appShow;
          new P2("setAppShowListenerRes").setMessage("appShow:".concat(e3)).end(true), M2.l("".concat(n3, " ok. appShow:").concat(e3)), t3._m.isReady() && (0 === e3 ? (t3._getConvUnreadCount(), t3._onBackground()) : 1 === e3 && t3._onForeground());
        })) : M2.e("".concat(this._pluginName, ".setAppShowListener is not a function"));
      } }, { key: "_setPushEventReportListener", value: function() {
        var a3 = this, s3 = "".concat(this._n, ".").concat("_setPushEventReportListener");
        dt2(this._pushPlugin.setPushEventReportListener) ? (new P2("_setPushEventReportListener").end(true), this._pushPlugin.setPushEventReportListener(function(e3) {
          var t3 = e3.code, n3 = e3.data, o3 = n3.eventList, i3 = new P2("setPushEventReportListenerRes");
          i3.setCode(t3), 0 === t3 ? (t3 = "eventList:".concat(JSON.stringify(o3)), M2.l("".concat(s3, " ok. ").concat(t3)), i3.setMessage(t3).end(true), a3._m.isReady() && O2(o3) && 0 < o3.length && a3._pushReport(n3)) : (i3.setMessage("res:".concat(JSON.stringify(e3))).end(true), M2.e("".concat(s3, " failed. error:").concat(JSON.stringify(e3))));
        })) : M2.e("".concat(this._pluginName, ".setPushEventReportListener is not a function"));
      } }, { key: "getDeviceBrand", value: function() {
        var e3;
        if (!N2(this._pushPlugin) && dt2(this._pushPlugin.getDeviceType))
          return e3 = (this._pushPlugin.getDeviceType() || {}).deviceType, M2.l("".concat(this._n, ".getDeviceBrand ok. deviceType:").concat(e3)), e3;
      } }, { key: "_setToken", value: function() {
        var t3 = "".concat(this._n, ".").concat("_setToken"), e3 = this.get(12), n3 = 1, o3 = "", i3 = "", a3 = (S2(this._deviceToken) && (n3 = 0), this.getUniAppPlatform()), s3 = this.getDeviceBrand(), a3 = (a3 === te2.IOS || a3 === te2.IPAD || a3 === te2.MAC ? i3 = this._deviceToken : a3 === te2.ANDROID && (o3 = this._deviceToken), y2({ tokenID: o3, pushMsg: n3, sdkAppID: e3.getSDKAppID(), businessID: parseInt(this._businessID), deviceBrand: s3, deviceToken: i3, isWebUniapp: this._isWebUniapp }, this._deviceInfo)), r3 = new P2("_setToken"), o3 = "data:".concat(JSON.stringify(a3));
        r3.setMessage("".concat(o3)), M2.l("".concat(t3, " ").concat(o3)), this.req({ P: G2.SET_TOKEN, data: a3 }).then(function() {
          r3.end(), M2.w("".concat(t3, " ok"));
        }).catch(function(e4) {
          r3.setError(e4).end(), M2.e("".concat(t3, " failed. error:"), e4), E2(e4);
        });
      } }, { key: "_getConvUnreadCount", value: function() {
        var t3 = this;
        this._c2cUnreadCount = 0, this._groupUnreadCount = 0, this.get(11).getLocalConvList().forEach(function(e3) {
          e3.type === R2.CONV_C2C && (t3._c2cUnreadCount += e3.unreadCount), e3.type === R2.CONV_GROUP && (t3._groupUnreadCount += e3.unreadCount);
        });
      } }, { key: "_onBackground", value: function() {
        var e3 = this, t3 = "".concat(this._n, ".").concat("_onBackground"), n3 = new P2("_onBackground");
        this.req({ P: G2.STAT_BACKGROUND, data: { c2cUnreadCount: this._c2cUnreadCount, groupUnreadCount: this._groupUnreadCount, isWebUniapp: this._isWebUniapp } }).then(function() {
          n3.setMessage("c2cUnreadCount:".concat(e3._c2cUnreadCount, " groupUnreadCount:").concat(e3._groupUnreadCount)).end(), M2.l("".concat(t3, " ok"));
        }).catch(function(e4) {
          n3.setError(e4).end(), M2.e("".concat(t3, " failed. error:"), e4);
        });
      } }, { key: "_onForeground", value: function() {
        var t3 = "".concat(this._n, ".").concat("_onForeground"), n3 = new P2("_onForeground");
        this.req({ P: G2.STAT_FOREGROUND, data: { isWebUniapp: this._isWebUniapp } }).then(function() {
          n3.end(), M2.l("".concat(t3, " ok"));
        }).catch(function(e3) {
          n3.setError(e3).end(), M2.e("".concat(t3, " failed. error:"), e3);
        });
      } }, { key: "_pushReport", value: function(e3) {
        var t3 = this, n3 = "".concat(this._n, ".").concat("_pushReport"), o3 = new P2("_pushReport");
        this.req({ P: G2.PUSH_REPORT, data: { eventList: e3.eventList } }).then(function() {
          o3.end(), t3._notifyReportSuccess(e3);
        }).catch(function(e4) {
          o3.setError(e4).end(), M2.e("".concat(n3, " failed. error:"), e4);
        });
      } }, { key: "_notifyReportSuccess", value: function(e3) {
        !N2(this._pushPlugin) && dt2(this._pushPlugin.notifyReportSuccess) && (this._pushPlugin.notifyReportSuccess(e3), M2.l("".concat(this._n, "._notifyReportSuccess ok")));
      } }, { key: "getUniAppPlatform", value: function() {
        var e3 = uni.getSystemInfoSync().platform, t3 = this.getDeviceBrand();
        return "ios" === e3 ? te2.IOS : "android" === e3 ? te2.ANDROID : 1002 === t3 ? te2.IPAD : 1001 === t3 ? te2.MAC : void 0;
      } }, { key: "reset", value: function() {
        this._deviceToken = "", this._businessID = 0, this._c2cUnreadCount = 0, this._groupUnreadCount = 0, this._isWebUniapp = 0, M2.l("".concat(this._n, ".reset"));
      } }])), ts2 = (t2(ms, c2), e2(ms, [{ key: "init", value: function() {
        var e3 = this.get(18).getPlugin("tim-profanity-filter-plugin");
        e3 && (this._plugin = new e3({ logger: M2, isArray: O2, isMap: st2, isDevMode: this.isDevMode() }), this._getLexicon());
      } }, { key: "onCheckTimer", value: function() {
        this._plugin && this._canIUseLexicon && this.isLoggedIn() && !this._isFetching && Date.now() >= this._expiredTime && this._getLexicon();
      } }, { key: "filterMessage", value: function(e3, t3) {
        var n3 = true;
        if (this._plugin && this._canIUseLexicon && (!t3 || !t3.messageControlInfo || true !== t3.messageControlInfo.excludedFromContentModeration)) {
          var t3 = e3.type, o3 = e3.conversationType;
          if (t3 === R2.MSG_TEXT || t3 === R2.MSG_CUSTOM) {
            var i3, a3 = "".concat(this._n, ".filterMessage");
            if (M2.l("".concat(a3)), t3 === R2.MSG_TEXT) {
              if (o3 === R2.CONV_C2C ? i3 = "c2c_text_message" : o3 === R2.CONV_GROUP && (i3 = "group_text_message"), !this._isConfigOn(i3))
                return n3;
              var s3 = this._plugin.filter(e3.payload.text), r3 = s3.type, s3 = s3.modifiedText;
              1 === r3 ? n3 = false : 2 === r3 && (e3.payload.text = s3);
            } else if (t3 === R2.MSG_CUSTOM) {
              if (o3 === R2.CONV_C2C ? i3 = "c2c_custom_message" : o3 === R2.CONV_GROUP && (i3 = "group_custom_message"), !this._isConfigOn(i3))
                return n3;
              r3 = this._plugin.filter(e3.payload.data), s3 = this._plugin.filter(e3.payload.description), t3 = this._plugin.filter(e3.payload.extension);
              1 === r3.type || 1 === s3.type || 1 === t3.type ? n3 = false : (2 === r3.type && (e3.payload.data = r3.modifiedText), 2 === s3.type && (e3.payload.description = s3.modifiedText), 2 === t3.type && (e3.payload.extension = t3.modifiedText));
            }
            M2.l("".concat(a3, " done. isAllowedToSend:").concat(n3));
          }
        }
        return n3;
      } }, { key: "filterText", value: function(e3, t3) {
        var n3 = "".concat(this._n, ".filterText"), o3 = { isAllowedToSend: true, modifiedText: e3 };
        return this._plugin && this._canIUseLexicon && this._isConfigOn(t3) && (M2.l("".concat(n3)), e3 = (t3 = this._plugin.filter(e3)).type, t3 = t3.modifiedText, 1 === e3 ? o3.isAllowedToSend = false : 2 === e3 && (o3.modifiedText = t3), M2.l("".concat(n3, " done. ret:"), o3)), o3;
      } }, { key: "_getLexicon", value: function() {
        var l3 = this, d3 = new P2("profanityFilter"), p3 = "".concat(this._n, "._getLexicon");
        this._isFetching = true, this.req({ P: G2.GET_PROFANITY_LIST, data: { startIndex: this._startIndex, version: this._version } }).then(function(e3) {
          var e3 = e3.data, t3 = e3.errorInfo, n3 = e3.filterConfig, o3 = e3.lexicon, i3 = e3.strToken, a3 = e3.completeFlag, s3 = e3.nextStartIndex, r3 = e3.version, e3 = e3.expiredTime, c3 = t3.errorCode, u3 = t3.errorMessage;
          return 0 !== c3 ? (l3._isFetching = false, M2.w("".concat(p3, " failed. error:"), t3), void d3.setCode(c3).setMessage(u3).end()) : (l3._onFilterConfig(n3), l3._getToken(i3), 1 === a3 ? (M2.l("".concat(p3, " done. version:").concat(r3, " expiredTime:").concat(e3)), l3._version = r3, l3._canIUseLexicon = true, l3._isFetching = false, l3._expiredTime = Date.now() + 1e3 * e3, void l3._plugin.onLexiconCompleted(o3)) : (l3._startIndex = s3, l3._plugin.onLexiconSliced(o3), void l3._getLexicon()));
        }).catch(function(e3) {
          d3.setError(e3).end(), l3._isFetching = false, M2.l("".concat(p3, " failed. error:"), e3);
        });
      } }, { key: "_onFilterConfig", value: function(t3) {
        var n3 = this;
        S2(t3) || (this._filterConfigMap.clear(), Object.keys(t3).forEach(function(e3) {
          n3._filterConfigMap.set(e3, t3[e3]);
        }), M2.l("".concat(this._n, "._onFilterConfig. keys:").concat(Array.from(this._filterConfigMap.keys()), " values:").concat(Array.from(this._filterConfigMap.values()))));
      } }, { key: "_isConfigOn", value: function(e3) {
        return 1 === this._filterConfigMap.get(e3);
      } }, { key: "_getToken", value: function(e3) {
        if (C2(e3)) {
          var t3 = e3.length, n3 = "";
          if (t3 % 2 == 0)
            for (var o3 = 0; o3 <= t3 - 1; o3 += 2)
              n3 = (n3 += e3[o3 + 1]) + e3[o3];
          else {
            for (var i3 = 0; i3 < t3 - 1; i3 += 2)
              n3 = (n3 += e3[i3 + 1]) + e3[i3];
            n3 += e3[t3 - 1];
          }
          this._plugin.onToken(n3);
        }
      } }, { key: "reset", value: function() {
        M2.l("".concat(this._n, ".reset")), this._plugin && (this._plugin.reset(), this._plugin = null), this._filterConfigMap.clear(), this._startIndex = 0, this._version = 0, this._canIUseLexicon = false, this._isFetching = false, this._expiredTime = 0;
      } }])), ns = e2(function e3(t3) {
        p2(this, e3), this._m = t3, this._n = "TransCmdModule", this._TRTCCommandList = ["tui_room_svr.*", "callkit_records_svr.*", "room_engine_srv.*", "room_engine_http_srv.*", "room_engine_mic.*", "live_engine_srv.*", "live_engine_http_srv.*", "live_engine_pk.*", "trtc_ai_service.*", "call_engine_srv.*"], this._TRTCCommandMap = /* @__PURE__ */ new Map(), this._setTRTCCommandMap(), this._m.getIEmitInst().on(U2.CLOUD_CONFIG, this._onCloudConfig, this);
      }, [{ key: "_onCloudConfig", value: function() {
        var t3 = this, e3 = this._m.get(23).getCloudConfig("rtc_cmd");
        N2(e3) || ((e3 = JSON.parse(e3)).forEach(function(e4) {
          t3._TRTCCommandList.includes(e4) || t3._TRTCCommandList.push(e4);
        }), this._setTRTCCommandMap());
      } }, { key: "_setTRTCCommandMap", value: function() {
        for (var e3, t3 = 0, n3 = this._TRTCCommandList.length; t3 < n3; t3++)
          e3 = this._TRTCCommandList[t3].split(".")[0], this._TRTCCommandMap.set(e3, 1);
      } }, { key: "onRoomCustomDataReceived", value: function(e3) {
        this._m.getOEmitInst().emit(h2.ROOM_CUSTOM_DATA_RECEIVED, e3);
      } }, { key: "sendTRTCCustomData", value: function(e3) {
        var t3 = e3.serviceCommand, e3 = e3.data, n3 = "".concat(a2.NAME.TUIROOM_SVR, ".*");
        return N2(t3) || (n3 = t3), this._isValidServiceCommand(n3) ? this._trans({ servcmd: n3, data: e3 }) : E2({ code: k2.INVALID_TRTC_CMD });
      } }, { key: "_trans", value: function(e3) {
        M2.d("".concat(this._n, "._trans. options:").concat(JSON.stringify(e3)));
        var t3 = e3.servcmd, e3 = e3.data;
        return this._m.get(20).trans({ servcmd: t3, data: C2(e3) ? JSON.parse(e3) : e3 });
      } }, { key: "_isValidServiceCommand", value: function(e3) {
        return e3.endsWith(".*") ? this._TRTCCommandList.includes(e3) : (e3 = e3.split(".")[0], this._TRTCCommandMap.has(e3));
      } }, { key: "isTRTCCommand", value: function(e3) {
        e3 = e3.split(".")[0];
        return this._TRTCCommandMap.has(e3);
      } }, { key: "reset", value: function() {
        M2.l("".concat(this._n, ".reset"));
      } }]), os2 = e2(function e3(t3) {
        p2(this, e3), this._m = t3, this._n = "ErrMsgModule", this.TIM_ERROR_ASSISTANCE = "tim_error_assistance", this.STORAGE_EXPIRES_TIME = 6048e5, this.CURRENT_DOMAIN = ue2, this._map = /* @__PURE__ */ new Map(), this._init();
      }, [{ key: "_init", value: function() {
        var e3, t3 = this._getStorageModule().getItem(this.TIM_ERROR_ASSISTANCE, false);
        if (t3) {
          try {
            e3 = JSON.parse(t3);
          } catch (e4) {
            this._getStorageModule().removeItem(this.TIM_ERROR_ASSISTANCE, false), M2.w("".concat(this._n, "._init error:"), e4);
          }
          e3 && (this._needToUpdate(e3) ? this._fetch() : this._fillMap(e3.message));
        } else
          this._fetch();
      } }, { key: "_needToUpdate", value: function(e3) {
        var t3 = e3.localSavedTime, e3 = e3.localSavedVersion, t3 = t3 && (/* @__PURE__ */ new Date()).getTime() - t3 >= this.STORAGE_EXPIRES_TIME, e3 = !e3 || "3.5.5" !== e3;
        return M2.l("".concat(this._n, "._needToUpdate isTimeout:").concat(t3, " isDifferentVersion:").concat(e3)), t3 || e3;
      } }, { key: "_fetch", value: function() {
        this._m.get(12).isPrivateNetWork() || this._fetchWithRetry();
      } }, { key: "_fetchWithRetry", value: function() {
        var e3 = this;
        this._fetchAdapter().catch(function() {
          e3.CURRENT_DOMAIN !== de2 && (e3._generateCurrentDomain(), e3._fetchWithRetry());
        });
      } }, { key: "_generateCurrentDomain", value: function() {
        this.CURRENT_DOMAIN === ue2 ? this.CURRENT_DOMAIN = le2 : this.CURRENT_DOMAIN === le2 && (this.CURRENT_DOMAIN = de2);
      } }, { key: "_fetchAdapter", value: function() {
        var i3 = "https://".concat(this.CURRENT_DOMAIN, "/im/download/error-message/v3/0.0.7/tim-error-message.txt"), a3 = "application/x-www-form-urlencoded;charset=UTF-8", s3 = "".concat(this._n, "._fetchAdapter ok in"), r3 = this;
        return new Promise(function(t3, n3) {
          var e3, o3;
          v2 ? I2.request({ url: i3, method: "GET", timeout: 3e3, header: { "content-type": a3 }, dataType: "text", success: function(e4) {
            r3._fillAndSave(e4.data), M2.l("".concat(s3, " mini program.")), t3();
          }, fail: function(e4) {
            n3(e4);
          } }) : (e3 = new XMLHttpRequest(), o3 = setTimeout(function() {
            e3.abort();
          }, 3e3), e3.onreadystatechange = function() {
            4 === e3.readyState && (o3 && clearTimeout(o3), 200 === e3.status || 304 === e3.status ? (M2.l("".concat(s3, " browser.")), r3._fillAndSave(e3.responseText), t3()) : n3(e3.status));
          }, e3.onerror = function(e4) {
            n3(e4);
          }, e3.open("GET", i3, true), e3.setRequestHeader("Content-type", a3), e3.send());
        });
      } }, { key: "_fillAndSave", value: function(e3) {
        this._fillMap(e3), this._getStorageModule().setItem(this.TIM_ERROR_ASSISTANCE, JSON.stringify({ message: e3, localSavedTime: (/* @__PURE__ */ new Date()).getTime(), localSavedVersion: "3.5.5" }), true, false);
      } }, { key: "_getStorageModule", value: function() {
        return this._m.get(13);
      } }, { key: "_fillMap", value: function(e3) {
        this._map.clear();
        for (var t3, n3, o3 = e3.split(";\n"), i3 = o3.length, a3 = new RegExp(/'/g), s3 = 0; s3 < i3; s3++)
          if (n3 = o3[s3].indexOf(":"), t3 = o3[s3].slice(0, n3), n3 = o3[s3].slice(n3 + 1, o3[s3].length), !t3.startsWith("//")) {
            if (N2(n3))
              continue;
            this._map.set(t3, n3.replace(a3, ""));
          }
      } }, { key: "get", value: function(e3) {
        var t3 = e3.isIntl, n3 = e3.key, o3 = e3.replacement1, e3 = e3.replacement2, t3 = "".concat(n3, t3 ? "_en" : "_cn"), n3 = (!this._map.has(t3) && this._map.has(n3) && (t3 = n3), "");
        return this._map.has(t3) && (n3 = this._map.get(t3), N2(o3) || (n3 = n3.replace("$replacement1", o3)), N2(e3) || (n3 = n3.replace("$replacement2", e3))), n3;
      } }, { key: "reset", value: function() {
        M2.l("".concat(this._n, ".reset"));
      } }]), is = e2(function e3(t3) {
        p2(this, e3), this._n = "RemoteSignalingHandler", this._sigM = t3;
      }, [{ key: "onNewMessageList", value: function(e3) {
        var n3 = this;
        e3.forEach(function(e4) {
          var t3 = n3.getPayloadData(e4);
          t3 && n3._handleActionType(t3, e4);
        });
      } }, { key: "onMessageModified", value: function(e3) {
        var n3 = this;
        e3.forEach(function(e4) {
          var t3 = n3.getPayloadData(e4);
          t3 && n3._onInvitationModified(t3, e4);
        });
      } }, { key: "getPayloadData", value: function(t3) {
        var n3 = "".concat(this._n, ".getPayloadData"), t3 = t3.payload.data;
        try {
          return JSON.parse(t3);
        } catch (e3) {
          return M2.e("".concat(n3, " JSON parse error. signalingData:").concat(t3)), null;
        }
      } }, { key: "_handleActionType", value: function(e3, t3) {
        switch (e3.actionType) {
          case _2.ACTION_TYPE_INVITE:
            this._onNewInvitationReceived(e3, t3);
            break;
          case _2.ACTION_TYPE_REJECT_INVITE:
            this._onInviteeRejected(e3);
            break;
          case _2.ACTION_TYPE_ACCEPT_INVITE:
            this._onInviteeAccepted(e3);
            break;
          case _2.ACTION_TYPE_CANCEL_INVITE:
            this._onInvitationCancelled(e3);
            break;
          case _2.ACTION_TYPE_INVITE_TIMEOUT:
            this._onInvitationTimeout(e3);
        }
      } }, { key: "_genBaseEmitData", value: function(e3) {
        return { inviteID: e3.inviteID, inviter: e3.inviter, groupID: e3.groupID, data: e3.data || "" };
      } }, { key: "_onNewInvitationReceived", value: function(e3, t3) {
        var n3 = "".concat(this._n, "._onNewInvitationReceived"), o3 = e3.inviteID, i3 = e3.inviteeList, a3 = e3.groupID, s3 = e3.inviter, r3 = this._sigM.getMyUserID(), c3 = i3.includes(r3), u3 = e3.timeout, l3 = (Ve2().getTime() - 1e3 * t3.time) / 1e3, n3 = (0 < u3 && 0 < l3 && l3 < u3 && (u3 -= l3), "".concat(n3, " myselfIncluded:").concat(c3, " groupID:").concat(a3, " signalObj:").concat(JSON.stringify(e3)));
        M2.l("".concat(n3, " timeout:").concat(u3, "s delta:").concat(l3, "s")), !(a3 && c3 || !a3) || (n3 = this._sigM.getInviteInfo(o3)) && n3 === e3 || (n3 || this._sigM.setInviteInfo(o3, y2(y2({}, e3), {}, { message: t3 })), this._sigM.emitEvent(_2.NEW_INVITATION_RECEIVED, y2(y2({}, this._genBaseEmitData(e3)), {}, { inviteeList: i3 })), s3 !== r3 && this._sigM.startTimer(y2(y2({}, e3), {}, { timeout: u3 })));
      } }, { key: "_onInviteeRejected", value: function(e3) {
        var t3 = "".concat(this._n, "._onInviteeRejected"), n3 = e3.inviteID, o3 = e3.inviter, i3 = e3.groupID, a3 = this._sigM.hasInviteInfo(n3);
        M2.l("".concat(t3, " inviteID:").concat(n3, " hasInviteID:").concat(a3, " inviter:").concat(o3, " groupID:").concat(i3)), a3 && (this._sigM.updateInviteInfo(e3), this._sigM.emitEvent(_2.INVITEE_REJECTED, y2(y2({}, this._genBaseEmitData(e3)), {}, { invitee: e3.inviteeList[0] })));
      } }, { key: "_onInviteeAccepted", value: function(e3) {
        var t3 = "".concat(this._n, "._onInviteeAccepted"), n3 = e3.inviteID, o3 = e3.inviter, i3 = e3.groupID, a3 = this._sigM.hasInviteInfo(n3);
        M2.l("".concat(t3, " inviteID:").concat(n3, " hasInviteID:").concat(a3, " inviter:").concat(o3, " groupID:").concat(i3)), a3 && (this._sigM.updateInviteInfo(e3), this._sigM.emitEvent(_2.INVITEE_ACCEPTED, y2(y2({}, this._genBaseEmitData(e3)), {}, { invitee: e3.inviteeList[0] })));
      } }, { key: "_onInvitationCancelled", value: function(e3) {
        var t3 = "".concat(this._n, "._onInvitationCancelled"), n3 = e3.inviteID, o3 = e3.inviter, i3 = e3.groupID, a3 = this._sigM.hasInviteInfo(n3);
        M2.l("".concat(t3, " inviteID:").concat(n3, " hasInviteID:").concat(a3, " inviter:").concat(o3, " groupID:").concat(i3)), a3 && (this._sigM.deleteInviteInfo(n3), this._sigM.emitEvent(_2.INVITATION_CANCELLED, this._genBaseEmitData(e3)));
      } }, { key: "_onInvitationTimeout", value: function(e3) {
        var t3 = "".concat(this._n, "._onInvitationTimeout"), n3 = e3.inviteID, o3 = e3.inviter, i3 = e3.groupID, a3 = e3.inviteeList, s3 = this._sigM.hasInviteInfo(n3);
        M2.l("".concat(t3, " inviteID:").concat(n3, " hasInviteID:").concat(s3, " inviter:").concat(o3, " groupID:").concat(i3, "  data:").concat(e3.data)), s3 && (this._sigM.updateInviteInfo(e3), this._sigM.emitEvent(_2.INVITATION_TIMEOUT, y2(y2({}, this._genBaseEmitData(e3)), {}, { inviteeList: a3, isSelfTimeout: false })));
      } }, { key: "_onInvitationModified", value: function(e3, t3) {
        var n3 = "".concat(this._n, "._onInvitationModified"), o3 = e3.inviteID, i3 = e3.data, a3 = this._sigM.hasInviteInfo(o3);
        M2.l("".concat(n3, " inviteID:").concat(o3, " hasInviteID:").concat(a3, " data:").concat(i3)), a3 && (this._sigM.setInviteInfo(o3, y2(y2({}, e3), {}, { message: t3 })), this._sigM.emitEvent(_2.INVITATION_MODIFIED, { inviteID: o3, data: i3 }));
      } }]), as = e2(function e3(t3) {
        p2(this, e3), this._n = "LocalSignalingHandler", this._sigM = t3;
      }, [{ key: "generateInviteID", value: function() {
        var e3, t3 = (t3 = Pa)((e3 = Ga)(32), 8) + "-" + t3(e3(16), 4) + "-" + t3(16384 | e3(12), 4) + "-" + t3(32768 | e3(14), 4) + "-" + t3(e3(48), 12);
        return M2.l("".concat(this._n, ".generateInviteID inviteID:").concat(t3)), t3;
      } }, { key: "createInviteInfo", value: function(e3) {
        var t3 = this.generateInviteID(), e3 = this.createInviteCustomData(y2(y2({}, e3), {}, { inviteID: t3 })), n3 = e3.groupID, o3 = e3.inviteeList, n3 = n3 || o3[0];
        return { customData: e3, message: this._sigM.createSignaling(e3, n3), inviteID: t3 };
      } }, { key: "_genBaseCustomData", value: function(e3) {
        var t3 = e3.data, n3 = e3.inviteID, e3 = e3.groupID;
        return { businessID: 1, timeout: 0, data: void 0 === t3 ? "" : t3, inviteID: void 0 === n3 ? "" : n3, groupID: void 0 === e3 ? "" : e3 };
      } }, { key: "createInviteCustomData", value: function(e3) {
        var t3 = e3.userID, n3 = e3.timeout, n3 = void 0 === n3 ? 0 : n3, o3 = e3.groupID, o3 = void 0 === o3 ? "" : o3, i3 = this._sigM.getMyUserID(), i3 = y2(y2({}, this._genBaseCustomData(e3)), {}, { actionType: _2.ACTION_TYPE_INVITE, inviter: i3, inviteeList: o3 ? e3.inviteeList : [t3], timeout: n3 });
        return M2.l("".concat(this._n, ".createInviteCustomData customData:"), i3), i3;
      } }, { key: "createCancelCustomData", value: function(e3) {
        var t3, n3 = "".concat(this._n, ".createCancelCustomData"), o3 = e3.inviteID, i3 = this._sigM.getMyUserID(), o3 = this._sigM.getInviteInfo(o3), a3 = o3.inviteeList, s3 = o3.groupID, o3 = o3.inviter;
        return o3 === i3 ? t3 = y2(y2({}, this._genBaseCustomData(e3)), {}, { actionType: _2.ACTION_TYPE_CANCEL_INVITE, groupID: s3, inviter: i3, inviteeList: a3 }) : M2.e("".concat(n3, " unmatched inviter:").concat(o3, " and my userID:").concat(i3)), M2.l("".concat(n3, " customData:"), t3), t3;
      } }, { key: "createAcceptCustomData", value: function(e3) {
        var t3, n3 = "".concat(this._n, ".createAcceptCustomData"), o3 = e3.inviteID, i3 = this._sigM.getMyUserID(), a3 = this._sigM.getInviteInfo(o3), s3 = a3.inviter, r3 = a3.groupID;
        return a3.inviteeList.includes(i3) ? t3 = y2(y2({}, this._genBaseCustomData(e3)), {}, { actionType: _2.ACTION_TYPE_ACCEPT_INVITE, groupID: r3, inviter: s3, inviteeList: [i3] }) : M2.e("".concat(n3, " userID:").concat(i3, " not in inviteeList. inviteID:").concat(o3, " groupID:").concat(r3)), M2.l("".concat(n3, " customData:"), t3), t3;
      } }, { key: "createRejectCustomData", value: function(e3) {
        var t3, n3 = "".concat(this._n, ".createRejectCustomData"), o3 = e3.inviteID, i3 = this._sigM.getMyUserID(), a3 = this._sigM.getInviteInfo(o3), s3 = a3.inviter, r3 = a3.groupID;
        return a3.inviteeList.includes(i3) ? t3 = y2(y2({}, this._genBaseCustomData(e3)), {}, { actionType: _2.ACTION_TYPE_REJECT_INVITE, groupID: r3, inviter: s3, inviteeList: [i3] }) : M2.e("".concat(n3, " userID:").concat(i3, " not in inviteeList. inviteID:").concat(o3, " groupID:").concat(r3)), M2.l("".concat(n3, " customData:"), t3), t3;
      } }, { key: "createTimeoutCustomData", value: function(e3) {
        var t3 = "".concat(this._n, ".createTimeoutCustomData"), n3 = e3.inviteeList, o3 = e3.inviter, i3 = e3.isInviter, i3 = void 0 !== i3 && i3, a3 = this._sigM.getMyUserID(), e3 = y2(y2({}, this._genBaseCustomData(e3)), {}, { actionType: _2.ACTION_TYPE_INVITE_TIMEOUT, inviter: o3, inviteeList: i3 ? n3 : [a3] });
        return M2.l("".concat(t3, " customData:"), e3), e3;
      } }]), ss2 = e2(function e3(t3) {
        p2(this, e3), this._n = "HistorySignalingHandler", this._sigM = t3, this.COUNT = 20, this.EXPIRED_TIME = 300, this._map = /* @__PURE__ */ new Map(), this._relatedToMeMap = /* @__PURE__ */ new Map();
      }, [{ key: "setCloudConfig", value: function() {
        var e3 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 20, t3 = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 300;
        this.COUNT = e3, this.EXPIRED_TIME = t3, M2.l("".concat(this._n, ".setCloudConfig count:").concat(e3, ", time:").concat(t3));
      } }, { key: "getHistorySignaling", value: function() {
        var t3 = this, e3 = this._sigM.get(11).getLocalConvList();
        S2(e3) || (this._getC2CSignalingList(), e3 = this._getValidGroupConvList(e3), this._getGroupSignalingList(e3).then(function(e4) {
          t3._handleSignalingList(e4);
        }));
      } }, { key: "_getC2CSignalingList", value: function() {
        var e3 = this._sigM.get(6).getMessageListFromUnreadDB(), e3 = this._sigM.filterMessageList(e3);
        this._getRelatedToMeMap(e3);
      } }, { key: "_getGroupSignalingList", value: function(e3) {
        var n3 = this, e3 = this._createPromiseList(e3);
        return 0 === e3.length ? Promise.resolve(this._sortSignaling(this._relatedToMeMap)) : this._concurrentGetMessageList(e3).then(function(e4) {
          var t3 = /* @__PURE__ */ new Map();
          return e4.forEach(function(e5) {
            e5 = e5.list, e5 = n3._getRelatedToMeMap(e5);
            t3 = new Map([].concat(d2(t3), d2(e5)));
          }), n3._sortSignaling(t3);
        });
      } }, { key: "_handleSignalingList", value: function(e3) {
        S2(e3) || this._sigM.onNewMessageList(e3);
      } }, { key: "_getValidGroupConvList", value: function(e3) {
        for (var t3 = [], n3 = 0, o3 = e3.length; n3 < o3; n3++) {
          var i3 = e3[n3], a3 = i3.type, s3 = i3.unreadCount, i3 = i3.lastMessage, a3 = a3 === R2.CONV_GROUP, i3 = this._isNotExpired(i3);
          a3 && s3 && i3 && t3.push(e3[n3]);
        }
        return t3;
      } }, { key: "_isNotExpired", value: function(e3) {
        return !(!e3 || !e3.lastTime) && e3.lastTime > He2() - this.EXPIRED_TIME;
      } }, { key: "_createPromiseList", value: function(e3) {
        for (var t3 = [], n3 = 0; n3 < e3.length; n3++) {
          var o3 = e3[n3], i3 = o3.conversationID, o3 = o3.unreadCount, o3 = o3 < this.COUNT ? o3 : this.COUNT, o3 = (this._map.set(i3, { msgCount: o3, list: [] }), this._sigM.get(11).getMessageList({ conversationID: i3 }));
          t3.push(o3);
        }
        return t3;
      } }, { key: "_concurrentGetMessageList", value: function(e3) {
        var i3 = this, a3 = [];
        return Promise.all(e3).then(function(e4) {
          for (var t3 = 0; t3 < e4.length; t3++) {
            var n3 = e4[t3], o3 = n3.code, n3 = n3.data;
            0 === o3 && 0 !== n3.messageList.length && (i3._handleMessageList(n3.messageList), o3 = i3._relayGetMessageList(n3)) && a3.push(o3);
          }
          return 0 < a3.length ? i3._concurrentGetMessageList(a3) : i3._map;
        });
      } }, { key: "_relayGetMessageList", value: function(e3) {
        var t3, n3 = e3.messageList, o3 = e3.nextReqMessageID, e3 = e3.isCompleted;
        return 0 === n3.length || (n3 = n3[0].conversationID, 0 === (t3 = this._map.get(n3).msgCount)) || e3 ? null : this._sigM.get(11).getMessageList({ conversationID: n3, nextReqMessageID: o3, count: t3 });
      } }, { key: "_handleMessageList", value: function(e3) {
        var t3 = e3.length, n3 = e3[0].conversationID, o3 = this._map.get(n3), i3 = o3.msgCount, o3 = o3.list;
        this._map.set(n3, { msgCount: 0 < i3 - t3 ? i3 - t3 : 0, list: o3.concat(this._sigM.filterMessageList(e3)) });
      } }, { key: "_getRelatedToMeMap", value: function(e3) {
        for (var t3 = 0; t3 < e3.length; t3++) {
          var n3 = e3[t3];
          this._saveRelatedToMe(n3);
        }
        return this._relatedToMeMap;
      } }, { key: "_saveRelatedToMe", value: function(e3) {
        var t3 = this._sigM.getPayloadData(e3) || {}, n3 = t3.actionType, t3 = t3.inviteID, o3 = void 0 === t3 ? "" : t3;
        switch (void 0 === n3 ? "" : n3) {
          case _2.ACTION_TYPE_INVITE:
            this._setHistoryInvite(e3);
            break;
          case _2.ACTION_TYPE_REJECT_INVITE:
          case _2.ACTION_TYPE_ACCEPT_INVITE:
            this._updateHistoryInvite(e3);
            break;
          case _2.ACTION_TYPE_CANCEL_INVITE:
            this._delHistoryInvite(o3);
            break;
          case _2.ACTION_TYPE_INVITE_TIMEOUT:
            this._updateHistoryInvite(e3);
        }
      } }, { key: "_setHistoryInvite", value: function(e3) {
        var t3 = this._sigM.getPayloadData(e3) || {}, n3 = t3.inviteID, n3 = void 0 === n3 ? "" : n3, o3 = t3.inviteeList, o3 = void 0 === o3 ? [] : o3, i3 = t3.timeout, i3 = void 0 === i3 ? 0 : i3, a3 = this._sigM.getMyUserID();
        o3.includes(a3) && (o3 = He2() - e3.time, 0 < i3 && i3 < o3 && 0 !== i3 || this._relatedToMeMap.set(n3, y2(y2({}, t3), {}, { messageList: [e3] })));
      } }, { key: "_delHistoryInvite", value: function(e3) {
        this._relatedToMeMap.has(e3) && this._relatedToMeMap.delete(e3);
      } }, { key: "_updateHistoryInvite", value: function(e3) {
        var t3 = this._sigM.getPayloadData(e3) || {}, n3 = t3.inviteID, n3 = void 0 === n3 ? "" : n3, t3 = t3.inviteeList, o3 = void 0 === t3 ? [] : t3;
        if (this._relatedToMeMap.has(n3)) {
          for (var t3 = this._relatedToMeMap.get(n3), i3 = t3.inviteeList, t3 = t3.messageList, a3 = 0; a3 < o3.length; a3++) {
            var s3 = o3[a3];
            i3.includes(s3) && i3.splice(i3.indexOf(s3), 1);
          }
          0 === i3.length ? this._delHistoryInvite(n3) : t3.push(e3);
        } else
          this._delHistoryInvite(n3);
      } }, { key: "_sortSignaling", value: function(e3) {
        var t3 = [];
        return e3.forEach(function(e4) {
          t3 = [].concat(d2(t3), d2(e4.messageList));
        }), t3.sort(function(e4, t4) {
          return e4.time - t4.time;
        });
      } }, { key: "reset", value: function() {
        this._map.clear(), this._relatedToMeMap.clear();
      } }]), rs = e2(function e3(t3, n3) {
        p2(this, e3), this.businessID = t3.businessID || 1, this.inviteID = t3.inviteID, this.groupID = t3.groupID || "", this.inviter = t3.inviter || "", this.inviteeList = t3.inviteeList || [], this.data = t3.data || "", this.actionType = t3.actionType || _2.ACTION_TYPE_INVITE, this.timeout = t3.timeout || 0;
      }), cs = ["message"], us = ["message"], ls = (t2(fs, c2), e2(fs, [{ key: "onC2CUnreadHandleCompleted", value: function() {
        this._isC2CUnreadHandleCompleted = true, this._isCloudConfigCompleted && this._isConvSyncCompleted && !this._isSyncCompleted && this.onReady();
      } }, { key: "onConvSyncCompleted", value: function() {
        this._isConvSyncCompleted = true, this._isC2CUnreadHandleCompleted && this._isCloudConfigCompleted && !this._isSyncCompleted && this.onReady();
      } }, { key: "onCloudConfig", value: function() {
        this._isCloudConfigCompleted = true;
        var e3 = this.getCloudConfig("history_s_count"), t3 = this.getCloudConfig("history_s_time");
        N2(e3) || (e3 = Number(e3)), N2(t3) || (t3 = Number(t3)), this._historySignalingHandler.setCloudConfig(e3, t3), this._isC2CUnreadHandleCompleted && this._isConvSyncCompleted && !this._isSyncCompleted && this.onReady();
      } }, { key: "_isListenerExisted", value: function() {
        return -1 < this._m.getOEmitInst().eventNames().indexOf(_2.NEW_INVITATION_RECEIVED);
      } }, { key: "onReady", value: function() {
        this._isSyncCompleted = true;
        var e3 = this._isListenerExisted();
        M2.l("".concat(this._n, ".onReady. isListenerExisted: ").concat(e3)), e3 && this._historySignalingHandler.getHistorySignaling();
      } }, { key: "onNewMessageList", value: function(e3) {
        e3 = this.filterMessageList(e3);
        if (0 < e3.length)
          return this._remoteSignalingHandler.onNewMessageList(e3);
      } }, { key: "onMessageModified", value: function(e3) {
        e3 = this.filterMessageList(e3);
        if (0 < e3.length)
          return this._remoteSignalingHandler.onMessageModified(e3);
      } }, { key: "hasInviteInfo", value: function(e3) {
        return this._inviteInfoMap.has(e3);
      } }, { key: "getInviteInfo", value: function(e3) {
        return this._inviteInfoMap.get(e3);
      } }, { key: "setInviteInfo", value: function(e3, t3) {
        var n3 = t3.message, t3 = W2(t3, cs);
        M2.l("".concat(this._n, ".setInviteInfo inviteID:").concat(e3, " data:"), t3), this._inviteInfoMap.set(e3, y2(y2({}, t3), {}, { message: n3 }));
      } }, { key: "deleteInviteInfo", value: function(e3) {
        this.hasInviteInfo(e3) && (M2.l("".concat(this._n, ".deleteInviteInfo inviteID:").concat(e3, ".")), this._inviteInfoMap.delete(e3));
      } }, { key: "updateInviteInfo", value: function(e3) {
        var t3 = "".concat(this._n, ".updateInviteInfo"), n3 = e3.inviteID, o3 = e3.inviter, i3 = e3.inviteeList, e3 = e3.groupID;
        M2.l("".concat(t3, " inviteID:").concat(n3, " inviter:").concat(o3, " groupID:").concat(e3)), e3 && this.hasInviteInfo(n3) && (o3 = i3[0], (e3 = this.getInviteInfo(n3).inviteeList).includes(o3) && (e3.splice(e3.indexOf(o3), 1), M2.l("".concat(t3, " remove ").concat(o3, ". localInviteeList.length:").concat(e3.length))), 0 !== e3.length) || this.deleteInviteInfo(n3);
      } }, { key: "canIUseSignaling", value: function() {
        return this._canIUseSignaling;
      } }, { key: "emitEvent", value: function(e3, t3) {
        this.emitOEvt(e3, t3);
      } }, { key: "addSignalingListener", value: function(e3, t3, n3) {
        this._canIUseSignaling || (this._canIUseSignaling = true), this._m.getOEmitInst().on(e3, t3, n3);
      } }, { key: "removeSignalingListener", value: function(e3, t3, n3) {
        this._m.getOEmitInst().off(e3, t3, n3), this._isListenerExisted() || (this._canIUseSignaling = false);
      } }, { key: "invite", value: function(e3) {
        var t3 = this, n3 = "".concat(this._n, ".").concat("invite"), o3 = this._localSignalingHandler.createInviteInfo(e3), i3 = o3.message, a3 = o3.customData, s3 = o3.inviteID;
        return M2.l("".concat(n3, " options:").concat(JSON.stringify(e3), " inviteID:").concat(s3)), this.sendSignaling(i3, e3).then(function(e4) {
          return e4 && 0 === e4.code ? (t3.setInviteInfo(s3, y2(y2({}, a3), {}, { message: i3 })), t3.startTimer(y2(y2({}, a3), {}, { inviteID: s3 })), y2(y2({}, e4), {}, { inviteID: s3 })) : e4;
        }).catch(function(e4) {
          return E2(e4);
        });
      } }, { key: "inviteSync", value: function(e3, t3, n3) {
        var o3 = this, i3 = "".concat(this._n, ".").concat("inviteSync"), a3 = this._localSignalingHandler.createInviteInfo(e3), s3 = a3.message, r3 = a3.customData, c3 = a3.inviteID;
        return M2.l("".concat(i3, " options:").concat(JSON.stringify(e3), " inviteID:").concat(c3)), this.sendSignaling(s3, e3).then(function(e4) {
          if (e4 && 0 === e4.code)
            return o3.setInviteInfo(c3, y2(y2({}, r3), {}, { message: s3 })), o3.startTimer(y2(y2({}, r3), {}, { inviteID: c3 })), t3 && t3({ inviteID: c3 }), { inviteID: c3 };
          n3 && n3(0 === e4.code, e4.message || "");
        }).catch(function(e4) {
          return n3 && n3(e4.code, e4.message), E2(e4);
        }), c3;
      } }, { key: "_handleImResponse", value: function(e3, t3, n3) {
        t3 && 0 === t3.code && (this._isHandling = false, n3 ? this.deleteInviteInfo(e3.inviteID) : this.updateInviteInfo(e3));
      } }, { key: "cancel", value: function(t3) {
        var n3 = this, e3 = "".concat(this._n, ".").concat("cancel");
        if (M2.l("".concat(e3, " options:").concat(JSON.stringify(t3))), !this.hasInviteInfo(t3.inviteID) || this._isHandling)
          return E2({ code: k2.INVALID_CANCEL_MESSAGE });
        this._isHandling = true;
        var o3, i3 = this._localSignalingHandler.createCancelCustomData(t3);
        return i3 ? (e3 = i3.groupID, o3 = i3.inviteeList, e3 = e3 || o3[0], o3 = this.createSignaling(i3, e3), this.sendSignaling(o3, t3).then(function(e4) {
          return n3._handleImResponse(i3, e4, true), 0 === e4.code ? y2(y2({}, e4), {}, { inviteID: t3.inviteID }) : e4;
        }).catch(function(e4) {
          return E2(e4);
        })) : (this._isHandling = false, E2({ code: k2.SIGNALING_NO_PERMISSION }));
      } }, { key: "accept", value: function(t3) {
        var n3 = this, e3 = "".concat(this._n, ".").concat("accept");
        if (M2.l("".concat(e3, " options:").concat(JSON.stringify(t3))), !this.hasInviteInfo(t3.inviteID) || this._isHandling)
          return E2({ code: k2.SIGNALING_INVALID_INVITE_ID });
        this._isHandling = true;
        var o3 = this._localSignalingHandler.createAcceptCustomData(t3);
        return o3 ? (e3 = this.createSignaling(o3), this.sendSignaling(e3, t3).then(function(e4) {
          return n3._handleImResponse(o3, e4), 0 === e4.code ? y2(y2({}, e4), {}, { inviteID: t3.inviteID }) : e4;
        }).catch(function(e4) {
          return E2(e4);
        })) : (this._isHandling = false, E2({ code: k2.SIGNALING_NO_PERMISSION }));
      } }, { key: "reject", value: function(t3) {
        var n3 = this, e3 = "".concat(this._n, ".").concat("reject");
        if (M2.l("".concat(e3, " options:").concat(JSON.stringify(t3))), !this.hasInviteInfo(t3.inviteID) || this._isHandling)
          return E2({ code: k2.SIGNALING_INVALID_INVITE_ID });
        this._isHandling = true;
        var o3 = this._localSignalingHandler.createRejectCustomData(t3);
        return o3 ? (e3 = this.createSignaling(o3), this.sendSignaling(e3, t3).then(function(e4) {
          return n3._handleImResponse(o3, e4, true), 0 === e4.code ? y2(y2({}, e4), {}, { inviteID: t3.inviteID }) : e4;
        }).catch(function(e4) {
          return E2(e4);
        })) : (this._isHandling = false, E2({ code: k2.SIGNALING_NO_PERMISSION }));
      } }, { key: "getSignalingInfo", value: function(e3) {
        var t3 = "".concat(this._n, ".getSignalingInfo"), n3 = e3.ID, o3 = e3.from, i3 = e3.to, a3 = this._filterSignaling(e3), s3 = null, e3 = (a3 && (e3 = this.getPayloadData(e3), s3 = new rs(e3)), a3 ? "actionType:".concat(s3.actionType) : "");
        return M2.l("".concat(t3, " messageID:").concat(n3, " from:").concat(o3, " to:").concat(i3, " ") + "".concat(e3, " isSignaling:").concat(a3)), s3;
      } }, { key: "modifyInvitation", value: function(e3) {
        var t3, n3, o3, i3, a3 = this, s3 = e3.inviteID, e3 = e3.data;
        return this.hasInviteInfo(s3) ? (t3 = this.getInviteInfo(s3), n3 = t3.message, o3 = W2(t3, us), i3 = n3.payload.data, o3.data = e3, n3.payload.data = JSON.stringify(o3), this.get(2).modifyRemoteMessage(n3).then(function(e4) {
          return a3.hasInviteInfo(s3) && a3.setInviteInfo(s3, y2(y2({}, o3), {}, { message: n3 })), e4;
        }).catch(function(e4) {
          return n3.payload.data = i3, E2(e4);
        })) : E2({ code: k2.SIGNALING_INVALID_INVITE_ID });
      } }, { key: "_genMsgCtrlInfo", value: function() {
        var e3 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {}, t3 = e3.data, t3 = void 0 === t3 ? "" : t3, n3 = e3.onlineUserOnly, o3 = e3.inviteID, o3 = void 0 === o3 ? "" : o3, i3 = e3.offlinePushInfo, e3 = e3.actionType, a3 = { _onlineOnlyFlag: false }, o3 = { onlineUserOnly: (a3 = o3 && this.getInviteInfo(o3) ? this.getInviteInfo(o3).message : a3)._onlineOnlyFlag || n3 || false, offlinePushInfo: i3, messageControlInfo: { excludedFromContentModeration: true, excludedFromUnreadCount: false, excludedFromLastMessage: false } };
        return e3 === _2.ACTION_TYPE_INVITE_TIMEOUT ? (a3 = !!t3.match(/excludeTimeoutSignalingFromHistoryMessage/), o3.messageControlInfo.excludedFromUnreadCount = a3, o3.messageControlInfo.excludedFromLastMessage = a3) : (n3 = !!t3.match(/excludeFromHistoryMessage/), i3 = !!t3.match(/excludeOriginalSignalingFromHistoryMessage/), o3.messageControlInfo.excludedFromUnreadCount = n3 || i3, o3.messageControlInfo.excludedFromLastMessage = n3 || i3), o3;
      } }, { key: "sendSignaling", value: function(e3, t3) {
        var n3 = this;
        return this.get(2).sendMessageInstance(e3, this._genMsgCtrlInfo(t3)).catch(function(e4) {
          return n3._isHandling = false, E2(e4);
        });
      } }, { key: "filterMessageList", value: function(e3) {
        var t3 = this;
        return e3.filter(function(e4) {
          return t3._filterSignaling(e4);
        });
      } }, { key: "getPayloadData", value: function(e3) {
        return this._remoteSignalingHandler.getPayloadData(e3);
      } }, { key: "createSignaling", value: function(e3, t3) {
        var n3 = e3.groupID, o3 = e3.inviter, t3 = { to: t3 || n3 || o3, conversationType: n3 ? R2.CONV_GROUP : R2.CONV_C2C, priority: R2.MSG_PRIORITY_HIGH, payload: { data: JSON.stringify(e3) } }, o3 = this.get(2).createCustomMessage(t3);
        return M2.l("".concat(this._n, ".createSignaling. message:"), o3), o3;
      } }, { key: "_filterSignaling", value: function(e3) {
        var t3, n3, o3 = false;
        return e3.type && e3.type === R2.MSG_CUSTOM && (t3 = e3.cloudCustomData, e3 = void 0 === (e3 = e3.payload.data) ? "" : e3, t3 = (void 0 === t3 ? "" : t3).match(/"type":"tsignaling"/), n3 = e3.match(/inviteID/), e3 = e3.match(/actionType/), o3 = t3 || n3 && e3), !!o3;
      } }, { key: "startTimer", value: function(t3) {
        var n3, o3, i3, a3 = this, s3 = "".concat(this._n, ".startTimer"), e3 = t3.timeout, r3 = t3.inviteID, c3 = t3.inviter, u3 = t3.groupID, l3 = c3 === this.getMyUserID();
        M2.l("".concat(s3, " timeout:").concat(e3, " isInviter:").concat(l3, " groupID:").concat(u3)), e3 <= 0 || (n3 = l3 ? e3 + 5 : e3, o3 = 1, i3 = setInterval(function() {
          var e4 = a3._hasLocalInviteInfo(t3, l3);
          o3 < n3 && e4 ? ++o3 : (e4 && a3._sendTimeoutNotice(r3, l3), M2.l("".concat(s3, " end.")), clearInterval(i3));
        }, 1e3));
      } }, { key: "_hasLocalInviteInfo", value: function(e3, t3) {
        var n3, o3, i3 = e3.inviteID, e3 = e3.groupID;
        return !!this.hasInviteInfo(i3) && (n3 = "".concat(this._n, "._hasLocalInviteInfo"), o3 = this.getInviteInfo(i3).inviteeList, M2.l("".concat(n3, " inviteID:").concat(i3, " inviteeList:").concat(o3, " groupID:").concat(e3)), !e3 || (t3 ? 0 < o3.length : 0 < o3.length && o3.includes(this.getMyUserID())));
      } }, { key: "_getReceiver", value: function(e3, t3) {
        var n3 = t3.groupID, o3 = t3.inviteeList, t3 = t3.inviter;
        return e3 ? n3 || o3[0] : n3 || t3;
      } }, { key: "_sendTimeoutNotice", value: function(i3, a3) {
        var s3 = this, e3 = this.getInviteInfo(i3), t3 = this._getReceiver(a3, e3), r3 = (M2.l("".concat(this._n, "._sendTimeoutNotice inviteID:").concat(i3, " to:").concat(t3, " isInviter:").concat(a3)), this._localSignalingHandler.createTimeoutCustomData(y2(y2({}, e3), {}, { isInviter: a3 }))), c3 = this.createSignaling(r3, t3);
        return this.sendSignaling(c3, r3).then(function(e4) {
          var t4, n3, o3;
          e4 && 0 === e4.code && (e4 = r3.data, t4 = r3.groupID, n3 = r3.inviteeList, o3 = r3.inviter, s3.emitEvent(_2.INVITATION_TIMEOUT, { data: e4, groupID: t4, inviteID: i3, inviteeList: n3, inviter: o3, isSelfTimeout: true, message: c3 }), a3 ? s3.deleteInviteInfo(i3) : s3.updateInviteInfo(r3));
        });
      } }, { key: "reset", value: function() {
        M2.l("".concat(this._n, ".reset")), this._inviteInfoMap.clear(), this._canIUseSignaling = false, this._isHandling = false, this._historySignalingHandler.reset(), this._isC2CUnreadHandleCompleted = false, this._isConvSyncCompleted = false, this._isSyncCompleted = false, this._isCloudConfigCompleted = false;
      } }])), ds = ["followDiffList"], ps = ["from"], _s = { NONE: 0, FOLLOWERS: 1, FOLLOWING: 2, MUTUAL: 3 }, hs = (t2(gs, c2), e2(gs, [{ key: "_onCloudConfig", value: function() {
        var e3 = this.getCloudConfig("follow_req_count");
        N2(e3) || (e3 = Number(e3), this.DEFAULT_COUNT = e3 > this.MAX_COUNT ? this.MAX_COUNT : e3, this._clearFollowList());
      } }, { key: "clearCacheOnReconnected", value: function() {
        this._clearFollowList();
      } }, { key: "onFollowNotify", value: function(e3) {
        var a3 = this, e3 = e3.dataList || [];
        M2.l("".concat(this._n, ".onFollowNotify followChangeList:").concat(e3.length)), e3.forEach(function(e4) {
          var t3 = e4.followDiffList, t3 = void 0 === t3 ? [] : t3, e4 = W2(e4, ds), o3 = e4.from, i3 = W2(e4, ps);
          t3.forEach(function(e5) {
            var t4 = e5.isAdd, e5 = e5.followType, e5 = void 0 === e5 ? 0 : e5, n3 = a3._initFollowInfo();
            1 === t4 ? (i3.userID = o3, n3[e5].userInfoList.push(i3), n3[e5].isAdd = true) : (n3[e5].userInfoList.push(o3), n3[e5].isAdd = false), a3._emitEvent(n3);
          });
        });
      } }, { key: "_initFollowInfo", value: function() {
        var t3 = {};
        return Object.values(_s).forEach(function(e3) {
          e3 !== _s.NONE && (t3[e3] = { userInfoList: [], isAdd: false });
        }), t3;
      } }, { key: "_emitEvent", value: function(n3) {
        var o3 = this;
        Object.keys(n3).forEach(function(e3) {
          var e3 = Number(e3), t3 = n3[e3];
          0 < t3.userInfoList.length && (e3 === _s.FOLLOWERS && (o3._clearFollowList(_s.FOLLOWERS), o3.emitOEvt(h2.MY_FOLLOWERS_LIST_UPDATED, t3)), e3 === _s.FOLLOWING && (o3._clearFollowList(_s.FOLLOWING), o3.emitOEvt(h2.MY_FOLLOWING_LIST_UPDATED, t3)), e3 === _s.MUTUAL) && (o3._clearFollowList(_s.MUTUAL), o3.emitOEvt(h2.MUTUAL_FOLLOWERS_LIST_UPDATED, t3));
        });
      } }, { key: "followUser", value: function(e3) {
        var t3, n3, o3;
        return this.canIUse(g2.FOLLOW) ? (t3 = "".concat(this._n, ".").concat("followUser"), n3 = "userIDList:".concat(e3.length), (o3 = new P2("followUser")).setMessage(n3), M2.l("".concat(t3, " ").concat(n3)), this.req({ P: G2.FOLLOW, data: { fromAccount: this.getMyUserID(), userIDList: e3.map(function(e4) {
          return { userID: e4 };
        }) } }).then(function(e4) {
          return o3.end(), M2.l("".concat(t3, " ok.")), T2(e4.data.resultList);
        }).catch(function(e4) {
          return o3.setError(e4).end(), M2.e("".concat(t3, " failed. error:"), e4), E2(e4);
        })) : this.noUse("followUser");
      } }, { key: "unfollowUser", value: function(e3) {
        var t3, n3, o3;
        return this.canIUse(g2.FOLLOW) ? (t3 = "".concat(this._n, ".").concat("unfollowUser"), n3 = "userIDList:".concat(e3.length), (o3 = new P2("unfollowUser")).setMessage(n3), M2.l("".concat(t3, " ").concat(n3)), this.req({ P: G2.UNFOLLOW, data: { fromAccount: this.getMyUserID(), userIDList: e3 } }).then(function(e4) {
          return o3.end(), M2.l("".concat(t3, " ok.")), T2(e4.data.resultList);
        }).catch(function(e4) {
          return o3.setError(e4).end(), M2.e("".concat(t3, " failed. error:"), e4), E2(e4);
        })) : this.noUse("unfollowUser");
      } }, { key: "getMyFollowersList", value: function() {
        var t3 = this, n3 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : "", o3 = "getMyFollowersList";
        if (!this.canIUse(g2.FOLLOW))
          return this.noUse(o3);
        var i3 = n3 || this.FIRST_PAGE_INDEX;
        if (this._myFollowersList.has(i3)) {
          var e3 = this._myFollowersList.get(i3), a3 = e3.resultList, s3 = e3.nextCursor, e3 = e3.lastUpdateTime;
          if (Date.now() - e3 < this.MAX_CATCH_TIME && 0 < a3.length)
            return M2.l("".concat(this._n, ".").concat(o3, " nextCursor:").concat(n3, " from local.")), D2({ resultList: a3, nextCursor: s3 });
        }
        return this._getFollowList(n3, _s.FOLLOWERS).then(function(e4) {
          return t3._myFollowersList.set(i3, y2(y2({}, e4), {}, { lastUpdateTime: Date.now() })), M2.l("".concat(t3._n, ".").concat(o3, " nextCursor:").concat(n3, " from remote.")), T2(e4);
        });
      } }, { key: "getMyFollowingList", value: function() {
        var t3 = this, n3 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : "", o3 = "getMyFollowingList";
        if (!this.canIUse(g2.FOLLOW))
          return this.noUse(o3);
        var i3 = n3 || this.FIRST_PAGE_INDEX;
        if (this._myFollowingList.has(i3)) {
          var e3 = this._myFollowingList.get(i3), a3 = e3.resultList, s3 = e3.nextCursor, e3 = e3.lastUpdateTime;
          if (Date.now() - e3 < this.MAX_CATCH_TIME && 0 < a3.length)
            return M2.l("".concat(this._n, ".").concat(o3, " nextCursor:").concat(n3, " from local.")), D2({ resultList: a3, nextCursor: s3 });
        }
        return this._getFollowList(n3, _s.FOLLOWING).then(function(e4) {
          return t3._myFollowingList.set(i3, y2(y2({}, e4), {}, { lastUpdateTime: Date.now() })), M2.l("".concat(t3._n, ".").concat(o3, " nextCursor:").concat(n3, " from remote.")), T2(e4);
        });
      } }, { key: "getMutualFollowersList", value: function() {
        var t3 = this, n3 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : "", o3 = "getMutualFollowersList";
        if (!this.canIUse(g2.FOLLOW))
          return this.noUse(o3);
        var i3 = n3 || this.FIRST_PAGE_INDEX;
        if (this._myMutualFollowersList.has(i3)) {
          var e3 = this._myMutualFollowersList.get(i3), a3 = e3.resultList, s3 = e3.nextCursor, e3 = e3.lastUpdateTime;
          if (Date.now() - e3 < this.MAX_CATCH_TIME && 0 < a3.length)
            return M2.l("".concat(this._n, ".").concat(o3, " nextCursor:").concat(n3, " from local.")), D2({ resultList: a3, nextCursor: s3 });
        }
        return this._getFollowList(n3, _s.MUTUAL).then(function(e4) {
          return t3._myMutualFollowersList.set(i3, y2(y2({}, e4), {}, { lastUpdateTime: Date.now() })), M2.l("".concat(t3._n, ".").concat(o3, " nextCursor:").concat(n3, " from remote.")), T2(e4);
        });
      } }, { key: "_getFollowList", value: function(e3, t3) {
        var i3 = this, n3 = new P2("_getFollowList");
        return n3.setMessage("nextCursor:".concat(e3, " type:").concat(t3)), this.req({ P: G2.GET_FOLLOW, data: { fromAccount: this.getMyUserID(), count: this.DEFAULT_COUNT, nextCursor: e3, type: t3 } }).then(function(e4) {
          n3.end();
          var e4 = e4.data, t4 = e4.resultList, t4 = void 0 === t4 ? [] : t4, e4 = e4.nextCursor, e4 = void 0 === e4 ? "" : e4, o3 = [];
          return t4.forEach(function(e5) {
            var t5 = e5.userID, n4 = e5.followTime, e5 = e5.profileList;
            o3.push(y2({ userID: t5, followTime: n4 }, i3._handleProfileItem(void 0 === e5 ? [] : e5)));
          }), { resultList: o3, nextCursor: e4 };
        }).catch(function(e4) {
          return n3.setError(e4).end(), M2.e("".concat(i3._n, "._getFollowList failed. error:"), e4), E2(e4);
        });
      } }, { key: "_handleProfileItem", value: function(e3) {
        var t3 = {};
        return e3.forEach(function(e4) {
          switch (e4.tag) {
            case f2.NICK:
              t3.nick = e4.value;
              break;
            case f2.GENDER:
              t3.gender = e4.value;
              break;
            case f2.BIRTHDAY:
              t3.birthday = e4.value;
              break;
            case f2.LOCATION:
              t3.location = e4.value;
              break;
            case f2.SELFSIGNATURE:
              t3.selfSignature = e4.value;
              break;
            case f2.ALLOWTYPE:
              t3.allowType = e4.value;
              break;
            case f2.LANGUAGE:
              t3.language = e4.value;
              break;
            case f2.AVATAR:
              t3.avatar = e4.value;
              break;
            case f2.MESSAGESETTINGS:
              t3.messageSettings = e4.value;
              break;
            case f2.ADMINFORBIDTYPE:
              t3.adminForbidType = e4.value;
              break;
            case f2.LEVEL:
              t3.level = e4.value;
              break;
            case f2.ROLE:
              t3.role = e4.value;
              break;
            default:
              t3[e4.tag] = e4.value;
          }
        }), t3;
      } }, { key: "getUserFollowInfo", value: function(e3) {
        var t3, n3, i3;
        return this.canIUse(g2.FOLLOW) ? (n3 = false, N2(e3 = e3) && (e3 = [this.getMyUserID()], n3 = true), t3 = "".concat(this._n, ".").concat("getUserFollowInfo"), n3 = "userIDList:".concat(e3.length, " isGetMyFollowInfo:").concat(n3), (i3 = new P2("getUserFollowInfo")).setMessage(n3), M2.l("".concat(t3, " ").concat(n3)), this.req({ P: G2.GET_FOLLOW_INFO, data: { fromAccount: this.getMyUserID(), userIDList: e3 } }).then(function(e4) {
          i3.end(), M2.l("".concat(t3, " ok."));
          var e4 = e4.data.followInfoList, o3 = [];
          return (void 0 === e4 ? [] : e4).forEach(function(e5) {
            var t4 = e5.followersCount, n4 = e5.followingCount, e5 = e5.mutualFollowersCount;
            o3.push({ followersCount: t4, followingCount: n4, mutualFollowersCount: e5 });
          }), T2(o3);
        }).catch(function(e4) {
          return i3.setError(e4).end(), M2.e("".concat(t3, " failed. error:"), e4), E2(e4);
        })) : this.noUse("getUserFollowInfo");
      } }, { key: "checkFollowType", value: function(e3) {
        if (!this.canIUse(g2.FOLLOW))
          return this.noUse("checkFollowType");
        100 < e3.length && (e3 = e3.slice(0, 100), M2.w("".concat(t3, " ").concat(tn(100))));
        var t3 = "".concat(this._n, ".").concat("checkFollowType"), n3 = "userIDList length:".concat(e3.length, " "), o3 = new P2("checkFollowType");
        return o3.setMessage(n3), M2.l("".concat(t3, " ").concat(n3)), this.req({ P: G2.CHECK_FOLLOW_TYPE, data: { fromAccount: this.getMyUserID(), userIDList: e3 } }).then(function(e4) {
          o3.end(), M2.l("".concat(t3, " ok."));
          var e4 = e4.data.resultList, n4 = [];
          return (void 0 === e4 ? [] : e4).forEach(function(e5) {
            var t4 = e5.userID, e5 = e5.followType;
            n4.push({ userID: t4, followType: e5 });
          }), T2(n4);
        }).catch(function(e4) {
          return o3.setError(e4).end(), M2.e("".concat(t3, " failed. error:"), e4), E2(e4);
        });
      } }, { key: "_clearFollowList", value: function(e3) {
        N2(e3) ? (this._myFollowersList.clear(), this._myFollowingList.clear(), this._myMutualFollowersList.clear()) : e3 !== _s.FOLLOWERS ? e3 !== _s.FOLLOWING ? e3 === _s.MUTUAL && this._myMutualFollowersList.clear() : this._myFollowingList.clear() : this._myFollowersList.clear();
      } }, { key: "reset", value: function() {
        M2.l("".concat(this._n, ".reset")), this._clearFollowList();
      } }])), ie2 = bi(function(e3, t3) {
        var n3 = "undefined" != typeof Uint8Array && "undefined" != typeof Uint16Array && "undefined" != typeof Int32Array;
        t3.assign = function(e4) {
          for (var t4, n4, o4 = Array.prototype.slice.call(arguments, 1); o4.length; ) {
            var i4 = o4.shift();
            if (i4) {
              if ("object" !== z2(i4))
                throw new TypeError(i4 + "must be non-object");
              for (var a3 in i4)
                t4 = i4, n4 = a3, Object.prototype.hasOwnProperty.call(t4, n4) && (e4[a3] = i4[a3]);
            }
          }
          return e4;
        }, t3.shrinkBuf = function(e4, t4) {
          return e4.length === t4 ? e4 : e4.subarray ? e4.subarray(0, t4) : (e4.length = t4, e4);
        };
        var o3 = { arraySet: function(e4, t4, n4, o4, i4) {
          if (t4.subarray && e4.subarray)
            e4.set(t4.subarray(n4, n4 + o4), i4);
          else
            for (var a3 = 0; a3 < o4; a3++)
              e4[i4 + a3] = t4[n4 + a3];
        }, flattenChunks: function(e4) {
          for (var t4, n4, o4, i4 = 0, a3 = 0, s3 = e4.length; a3 < s3; a3++)
            i4 += e4[a3].length;
          for (o4 = new Uint8Array(i4), a3 = t4 = 0, s3 = e4.length; a3 < s3; a3++)
            n4 = e4[a3], o4.set(n4, t4), t4 += n4.length;
          return o4;
        } }, i3 = { arraySet: function(e4, t4, n4, o4, i4) {
          for (var a3 = 0; a3 < o4; a3++)
            e4[i4 + a3] = t4[n4 + a3];
        }, flattenChunks: function(e4) {
          return [].concat.apply([], e4);
        } };
        t3.setTyped = function(e4) {
          e4 ? (t3.Buf8 = Uint8Array, t3.Buf16 = Uint16Array, t3.Buf32 = Int32Array, t3.assign(t3, o3)) : (t3.Buf8 = Array, t3.Buf16 = Array, t3.Buf32 = Array, t3.assign(t3, i3));
        }, t3.setTyped(n3);
      });
      function gs(e3) {
        return p2(this, gs), (e3 = i2(this, gs, [e3]))._n = "FollowModule", e3._myFollowersList = /* @__PURE__ */ new Map(), e3._myFollowingList = /* @__PURE__ */ new Map(), e3._myMutualFollowersList = /* @__PURE__ */ new Map(), e3.MAX_CATCH_TIME = 6e5, e3.FIRST_PAGE_INDEX = vt2(), e3.DEFAULT_COUNT = 500, e3.MAX_COUNT = 1e3, e3.getIEmitInst().on(U2.CLOUD_CONFIG, e3._onCloudConfig, e3), e3;
      }
      function fs(e3) {
        p2(this, fs), (e3 = i2(this, fs, [e3]))._n = "SignalingModule", e3._inviteInfoMap = /* @__PURE__ */ new Map(), e3._canIUseSignaling = false, e3._isHandling = false, e3._remoteSignalingHandler = new is(e3), e3._localSignalingHandler = new as(e3), e3._historySignalingHandler = new ss2(e3), e3._isC2CUnreadHandleCompleted = false, e3._isConvSyncCompleted = false, e3._isSyncCompleted = false, e3._isCloudConfigCompleted = false;
        var t3 = e3.getIEmitInst();
        return t3.on(U2.C2C_UNREAD_HANDLE_COMPLETED, e3.onC2CUnreadHandleCompleted, e3), t3.on(U2.CONV_SYNC_COMPLETED, e3.onConvSyncCompleted, e3), t3.on(U2.CLOUD_CONFIG, e3.onCloudConfig, e3), e3;
      }
      function ms(e3) {
        return p2(this, ms), (e3 = i2(this, ms, [e3]))._n = "ProfanityFilterModule", e3._plugin = null, e3._filterConfigMap = /* @__PURE__ */ new Map(), e3._startIndex = 0, e3._version = 0, e3._canIUseLexicon = false, e3._isFetching = false, e3._expiredTime = 0, e3;
      }
      function vs(e3) {
        var t3;
        return p2(this, vs), (t3 = i2(this, vs, [e3]))._m = e3, t3._n = "TIMPushModule", t3._pluginName = "TIMPush", t3._pushPlugin = void 0, t3._androidPushConfig = {}, t3._deviceToken = "", t3._businessID = 0, t3._iOSBusinessID = 0, t3._c2cUnreadCount = 0, t3._groupUnreadCount = 0, t3._isWebUniapp = 0, t3._deviceInfo = { notificationStatus: 0, deviceModel: "", systemVersion: "", pushVersion: "1.0.1", packageName: "" }, t3;
      }
      function Is(e3) {
        var t3;
        return p2(this, Is), (t3 = i2(this, Is, [e3]))._m = e3, t3._n = "OfflinePushModule", t3._offlinePushPlugin = void 0, t3._androidPushConfig = { huaweiPushBussinessId: "", xiaomiPushBussinessId: "", xiaomiPushAppId: "", xiaomiPushAppKey: "", meizuPushBussinessId: "", meizuPushAppId: "", meizuPushAppKey: "", vivoPushBussinessId: "", fcmPushBussinessId: "", oppoPushBussinessId: "", oppoPushAppKey: "", oppoPushAppSecret: "", honorPushBussinessId: "" }, t3._deviceToken = "", t3._businessID = 0, t3._iosBusinessID = 0, t3._c2cUnreadCount = 0, t3._groupUnreadCount = 0, t3._isWebUniapp = 0, t3;
      }
      function Ms(e3) {
        return p2(this, Ms), (e3 = i2(this, Ms, [e3]))._n = "WorkerTimerModule", e3._isWorkerEnabled = true, e3._workerTimer = null, e3._timerID = -1, e3._init(), e3.getIEmitInst().on(U2.CLOUD_CONFIG, e3._onCloudConfig, e3), e3;
      }
      function ys(e3) {
        return p2(this, ys), (e3 = i2(this, ys, [e3]))._n = "SnsModule", e3._friendHandler = new Ya(e3), e3._friendApplicationHandler = new Ka(e3), e3._friendGroupHandler = new Ja(e3), e3.getIEmitInst().on(U2.A2KEY_AND_TINYID_UPDATED, e3.onContextUpdated, e3), e3;
      }
      function Cs(e3) {
        p2(this, Cs), (e3 = i2(this, Cs, [e3]))._n = "QualityStatModule", e3.TAG = "im-ssolog-quality-stat", e3.reportIndex = 0, e3.wholePeriod = false, e3._qualityItems = [Wn, Yn, jn, Jn, zn, Xn, Zn, Qn, $n, eo], e3._messageSentItems = [jn, Jn, zn, Xn, Zn], e3._messageReceivedItems = [Qn, $n, eo], e3.REPORT_INTERVAL = 120, e3.REPORT_SDKAPPID_BLACKLIST = [], e3.REPORT_TINYID_WHITELIST = [], e3._statInfoArr = [], e3._avgRTT = new qa(), e3._avgE2EDelay = new Fa(), e3._rateMessageSent = new xa(), e3._rateMessageReceived = new Va();
        var t3 = e3.getIEmitInst();
        return t3.on(U2.A2KEY_AND_TINYID_UPDATED, e3._onLoginSuccess, e3), t3.on(U2.CLOUD_CONFIG, e3._onCloudConfig, e3), e3;
      }
      function Ts(e3) {
        return p2(this, Ts), (e3 = i2(this, Ts, [e3]))._n = "RecoverMsgModule", e3.PULL_LIMIT_COUNT = 15, e3;
      }
      function Ds(e3) {
        return p2(this, Ds), (e3 = i2(this, Ds, [e3]))._n = "CloudControlModule", e3._cloudConfig = /* @__PURE__ */ new Map(), e3._expiredTime = 0, e3._version = 0, e3._isFetching = false, e3;
      }
      function Es(e3) {
        return p2(this, Es), (e3 = i2(this, Es, [e3]))._n = "SessionModule", e3._platform = e3.getPlatform(), e3._pHandler = new Ta(e3), e3._msgDispatcher = new Ea(e3), e3._cmdFreqLimitMap = /* @__PURE__ */ new Map(), e3._cmdReqInfoMap = /* @__PURE__ */ new Map(), e3._serverOverloadInfoMap = /* @__PURE__ */ new Map(), e3._incrementalPullContactFlag = true, e3._init(), e3.getIEmitInst().on(U2.CLOUD_CONFIG, e3._onCloudConfig, e3), e3;
      }
      ie2.assign, ie2.shrinkBuf, ie2.setTyped, ie2.Buf8, ie2.Buf16, ie2.Buf32;
      function Ls(e3, t3, n3, o3) {
        for (var i3 = 65535 & e3 | 0, a3 = e3 >>> 16 & 65535 | 0, s3 = 0; 0 !== n3; ) {
          for (n3 -= s3 = 2e3 < n3 ? 2e3 : n3; a3 = a3 + (i3 = i3 + t3[o3++] | 0) | 0, --s3; )
            ;
          i3 %= 65521, a3 %= 65521;
        }
        return i3 | a3 << 16 | 0;
      }
      function Ss(e3, t3, n3, o3) {
        var i3 = Rs, a3 = o3 + n3;
        e3 ^= -1;
        for (var s3 = o3; s3 < a3; s3++)
          e3 = e3 >>> 8 ^ i3[255 & (e3 ^ t3[s3])];
        return -1 ^ e3;
      }
      function ks(e3, t3, n3, o3, i3, a3, s3, r3) {
        for (var c3, u3, l3, d3, p3, _3, h3, g3, f3, m3 = r3.bits, v3 = 0, I3 = 0, M3 = 0, y3 = 0, C3 = 0, T3 = 0, D3 = 0, E3 = 0, L3 = 0, S3 = 0, k3 = null, R3 = 0, A3 = new ie2.Buf16(16), O3 = new ie2.Buf16(16), N3 = null, G3 = 0, v3 = 0; v3 <= 15; v3++)
          A3[v3] = 0;
        for (I3 = 0; I3 < o3; I3++)
          A3[t3[n3 + I3]]++;
        for (C3 = m3, y3 = 15; 1 <= y3 && 0 === A3[y3]; y3--)
          ;
        if (y3 < C3 && (C3 = y3), 0 === y3)
          i3[a3++] = 20971520, i3[a3++] = 20971520, r3.bits = 1;
        else {
          for (M3 = 1; M3 < y3 && 0 === A3[M3]; M3++)
            ;
          for (C3 < M3 && (C3 = M3), v3 = E3 = 1; v3 <= 15; v3++)
            if ((E3 = (E3 << 1) - A3[v3]) < 0)
              return -1;
          if (0 < E3 && (0 === e3 || 1 !== y3))
            return -1;
          for (O3[1] = 0, v3 = 1; v3 < 15; v3++)
            O3[v3 + 1] = O3[v3] + A3[v3];
          for (I3 = 0; I3 < o3; I3++)
            0 !== t3[n3 + I3] && (s3[O3[t3[n3 + I3]]++] = I3);
          if (_3 = 0 === e3 ? (k3 = N3 = s3, 19) : 1 === e3 ? (k3 = As, R3 -= 257, N3 = Os, G3 -= 257, 256) : (k3 = Ns, N3 = Gs, -1), v3 = M3, p3 = a3, D3 = I3 = S3 = 0, l3 = -1, d3 = (L3 = 1 << (T3 = C3)) - 1, 1 === e3 && 852 < L3 || 2 === e3 && 592 < L3)
            return 1;
          for (; ; ) {
            for (f3 = s3[I3] < _3 ? (g3 = 0, s3[I3]) : s3[I3] > _3 ? (g3 = N3[G3 + s3[I3]], k3[R3 + s3[I3]]) : (g3 = 96, 0), c3 = 1 << (h3 = v3 - D3), M3 = u3 = 1 << T3; i3[p3 + (S3 >> D3) + (u3 -= c3)] = h3 << 24 | g3 << 16 | f3 | 0, 0 !== u3; )
              ;
            for (c3 = 1 << v3 - 1; S3 & c3; )
              c3 >>= 1;
            if (0 !== c3 ? S3 = (S3 & c3 - 1) + c3 : S3 = 0, I3++, 0 == --A3[v3]) {
              if (v3 === y3)
                break;
              v3 = t3[n3 + s3[I3]];
            }
            if (C3 < v3 && (S3 & d3) !== l3) {
              for (p3 += M3, E3 = 1 << (T3 = v3 - (D3 = 0 === D3 ? C3 : D3)); T3 + D3 < y3 && !((E3 -= A3[T3 + D3]) <= 0); )
                T3++, E3 <<= 1;
              if (L3 += 1 << T3, 1 === e3 && 852 < L3 || 2 === e3 && 592 < L3)
                return 1;
              i3[l3 = S3 & d3] = C3 << 24 | T3 << 16 | p3 - a3 | 0;
            }
          }
          0 !== S3 && (i3[p3 + S3] = v3 - D3 << 24 | 64 << 16 | 0), r3.bits = C3;
        }
        return 0;
      }
      var Rs = function() {
        for (var e3 = [], t3 = 0; t3 < 256; t3++) {
          for (var n3 = t3, o3 = 0; o3 < 8; o3++)
            n3 = 1 & n3 ? 3988292384 ^ n3 >>> 1 : n3 >>> 1;
          e3[t3] = n3;
        }
        return e3;
      }(), As = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0], Os = [16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78], Ns = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0], Gs = [16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];
      function Ps(e3) {
        return (e3 >>> 24 & 255) + (e3 >>> 8 & 65280) + ((65280 & e3) << 8) + ((255 & e3) << 24);
      }
      function Us() {
        this.mode = 0, this.last = false, this.wrap = 0, this.havedict = false, this.flags = 0, this.dmax = 0, this.check = 0, this.total = 0, this.head = null, this.wbits = 0, this.wsize = 0, this.whave = 0, this.wnext = 0, this.window = null, this.hold = 0, this.bits = 0, this.length = 0, this.offset = 0, this.extra = 0, this.lencode = null, this.distcode = null, this.lenbits = 0, this.distbits = 0, this.ncode = 0, this.nlen = 0, this.ndist = 0, this.have = 0, this.next = null, this.lens = new ie2.Buf16(320), this.work = new ie2.Buf16(288), this.lendyn = null, this.distdyn = null, this.sane = 0, this.back = 0, this.was = 0;
      }
      function bs(e3) {
        var t3;
        return e3 && e3.state ? (t3 = e3.state, e3.total_in = e3.total_out = t3.total = 0, e3.msg = "", t3.wrap && (e3.adler = 1 & t3.wrap), t3.mode = 1, t3.last = 0, t3.havedict = 0, t3.dmax = 32768, t3.head = null, t3.hold = 0, t3.bits = 0, t3.lencode = t3.lendyn = new ie2.Buf32(852), t3.distcode = t3.distdyn = new ie2.Buf32(592), t3.sane = 1, t3.back = -1, 0) : -2;
      }
      function ws(e3) {
        var t3;
        return e3 && e3.state ? ((t3 = e3.state).wsize = 0, t3.whave = 0, t3.wnext = 0, bs(e3)) : -2;
      }
      function Fs(e3, t3) {
        var n3, o3;
        return !e3 || !e3.state || (o3 = e3.state, t3 < 0 ? (n3 = 0, t3 = -t3) : (n3 = 1 + (t3 >> 4), t3 < 48 && (t3 &= 15)), t3 && (t3 < 8 || 15 < t3)) ? -2 : (null !== o3.window && o3.wbits !== t3 && (o3.window = null), o3.wrap = n3, o3.wbits = t3, ws(e3));
      }
      function qs(e3, t3) {
        var n3;
        return e3 ? (n3 = new Us(), (e3.state = n3).window = null, 0 !== (n3 = Fs(e3, t3)) && (e3.state = null), n3) : -2;
      }
      var xs, Vs, Bs = true;
      function Hs(e3, t3, n3, o3) {
        var i3, e3 = e3.state;
        return null === e3.window && (e3.wsize = 1 << e3.wbits, e3.wnext = 0, e3.whave = 0, e3.window = new ie2.Buf8(e3.wsize)), o3 >= e3.wsize ? (ie2.arraySet(e3.window, t3, n3 - e3.wsize, e3.wsize, 0), e3.wnext = 0, e3.whave = e3.wsize) : ((i3 = e3.wsize - e3.wnext) > o3 && (i3 = o3), ie2.arraySet(e3.window, t3, n3 - o3, i3, e3.wnext), (o3 -= i3) ? (ie2.arraySet(e3.window, t3, n3 - o3, o3, 0), e3.wnext = o3, e3.whave = e3.wsize) : (e3.wnext += i3, e3.wnext === e3.wsize && (e3.wnext = 0), e3.whave < e3.wsize && (e3.whave += i3))), 0;
      }
      var Ks = { inflateReset: ws, inflateReset2: Fs, inflateResetKeep: bs, inflateInit: function(e3) {
        return qs(e3, 15);
      }, inflateInit2: qs, inflate: function(e3, b3) {
        var t3, n3, w3, o3, i3, a3, s3, r3, c3, F3, u3, l3, q3, x3, d3, p3, _3, h3, V3, B3, g3, f3, m3, v3, I3 = 0, M3 = new ie2.Buf8(4), H3 = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
        if (!e3 || !e3.state || !e3.output || !e3.input && 0 !== e3.avail_in)
          return -2;
        12 === (t3 = e3.state).mode && (t3.mode = 13), i3 = e3.next_out, w3 = e3.output, s3 = e3.avail_out, o3 = e3.next_in, n3 = e3.input, a3 = e3.avail_in, r3 = t3.hold, c3 = t3.bits, F3 = a3, u3 = s3, f3 = 0;
        e:
          for (; ; )
            switch (t3.mode) {
              case 1:
                if (0 === t3.wrap)
                  t3.mode = 13;
                else {
                  for (; c3 < 16; ) {
                    if (0 === a3)
                      break e;
                    a3--, r3 += n3[o3++] << c3, c3 += 8;
                  }
                  if (2 & t3.wrap && 35615 === r3)
                    M3[t3.check = 0] = 255 & r3, M3[1] = r3 >>> 8 & 255, t3.check = Ss(t3.check, M3, 2, 0), c3 = r3 = 0, t3.mode = 2;
                  else if (t3.flags = 0, t3.head && (t3.head.done = false), !(1 & t3.wrap) || (((255 & r3) << 8) + (r3 >> 8)) % 31)
                    e3.msg = "incorrect header check", t3.mode = 30;
                  else if (8 != (15 & r3))
                    e3.msg = "unknown compression method", t3.mode = 30;
                  else {
                    if (c3 -= 4, g3 = 8 + (15 & (r3 >>>= 4)), 0 === t3.wbits)
                      t3.wbits = g3;
                    else if (g3 > t3.wbits) {
                      e3.msg = "invalid window size", t3.mode = 30;
                      break;
                    }
                    t3.dmax = 1 << g3, e3.adler = t3.check = 1, t3.mode = 512 & r3 ? 10 : 12, c3 = r3 = 0;
                  }
                }
                break;
              case 2:
                for (; c3 < 16; ) {
                  if (0 === a3)
                    break e;
                  a3--, r3 += n3[o3++] << c3, c3 += 8;
                }
                if (t3.flags = r3, 8 != (255 & t3.flags)) {
                  e3.msg = "unknown compression method", t3.mode = 30;
                  break;
                }
                if (57344 & t3.flags) {
                  e3.msg = "unknown header flags set", t3.mode = 30;
                  break;
                }
                t3.head && (t3.head.text = r3 >> 8 & 1), 512 & t3.flags && (M3[0] = 255 & r3, M3[1] = r3 >>> 8 & 255, t3.check = Ss(t3.check, M3, 2, 0)), c3 = r3 = 0, t3.mode = 3;
              case 3:
                for (; c3 < 32; ) {
                  if (0 === a3)
                    break e;
                  a3--, r3 += n3[o3++] << c3, c3 += 8;
                }
                t3.head && (t3.head.time = r3), 512 & t3.flags && (M3[0] = 255 & r3, M3[1] = r3 >>> 8 & 255, M3[2] = r3 >>> 16 & 255, M3[3] = r3 >>> 24 & 255, t3.check = Ss(t3.check, M3, 4, 0)), c3 = r3 = 0, t3.mode = 4;
              case 4:
                for (; c3 < 16; ) {
                  if (0 === a3)
                    break e;
                  a3--, r3 += n3[o3++] << c3, c3 += 8;
                }
                t3.head && (t3.head.xflags = 255 & r3, t3.head.os = r3 >> 8), 512 & t3.flags && (M3[0] = 255 & r3, M3[1] = r3 >>> 8 & 255, t3.check = Ss(t3.check, M3, 2, 0)), c3 = r3 = 0, t3.mode = 5;
              case 5:
                if (1024 & t3.flags) {
                  for (; c3 < 16; ) {
                    if (0 === a3)
                      break e;
                    a3--, r3 += n3[o3++] << c3, c3 += 8;
                  }
                  t3.length = r3, t3.head && (t3.head.extra_len = r3), 512 & t3.flags && (M3[0] = 255 & r3, M3[1] = r3 >>> 8 & 255, t3.check = Ss(t3.check, M3, 2, 0)), c3 = r3 = 0;
                } else
                  t3.head && (t3.head.extra = null);
                t3.mode = 6;
              case 6:
                if (1024 & t3.flags && ((l3 = (l3 = t3.length) > a3 ? a3 : l3) && (t3.head && (g3 = t3.head.extra_len - t3.length, t3.head.extra || (t3.head.extra = new Array(t3.head.extra_len)), ie2.arraySet(t3.head.extra, n3, o3, l3, g3)), 512 & t3.flags && (t3.check = Ss(t3.check, n3, l3, o3)), a3 -= l3, o3 += l3, t3.length -= l3), t3.length))
                  break e;
                t3.length = 0, t3.mode = 7;
              case 7:
                if (2048 & t3.flags) {
                  if (0 === a3)
                    break e;
                  for (l3 = 0; g3 = n3[o3 + l3++], t3.head && g3 && t3.length < 65536 && (t3.head.name += String.fromCharCode(g3)), g3 && l3 < a3; )
                    ;
                  if (512 & t3.flags && (t3.check = Ss(t3.check, n3, l3, o3)), a3 -= l3, o3 += l3, g3)
                    break e;
                } else
                  t3.head && (t3.head.name = null);
                t3.length = 0, t3.mode = 8;
              case 8:
                if (4096 & t3.flags) {
                  if (0 === a3)
                    break e;
                  for (l3 = 0; g3 = n3[o3 + l3++], t3.head && g3 && t3.length < 65536 && (t3.head.comment += String.fromCharCode(g3)), g3 && l3 < a3; )
                    ;
                  if (512 & t3.flags && (t3.check = Ss(t3.check, n3, l3, o3)), a3 -= l3, o3 += l3, g3)
                    break e;
                } else
                  t3.head && (t3.head.comment = null);
                t3.mode = 9;
              case 9:
                if (512 & t3.flags) {
                  for (; c3 < 16; ) {
                    if (0 === a3)
                      break e;
                    a3--, r3 += n3[o3++] << c3, c3 += 8;
                  }
                  if (r3 !== (65535 & t3.check)) {
                    e3.msg = "header crc mismatch", t3.mode = 30;
                    break;
                  }
                  c3 = r3 = 0;
                }
                t3.head && (t3.head.hcrc = t3.flags >> 9 & 1, t3.head.done = true), e3.adler = t3.check = 0, t3.mode = 12;
                break;
              case 10:
                for (; c3 < 32; ) {
                  if (0 === a3)
                    break e;
                  a3--, r3 += n3[o3++] << c3, c3 += 8;
                }
                e3.adler = t3.check = Ps(r3), c3 = r3 = 0, t3.mode = 11;
              case 11:
                if (0 === t3.havedict)
                  return e3.next_out = i3, e3.avail_out = s3, e3.next_in = o3, e3.avail_in = a3, t3.hold = r3, t3.bits = c3, 2;
                e3.adler = t3.check = 1, t3.mode = 12;
              case 12:
                if (5 === b3 || 6 === b3)
                  break e;
              case 13:
                if (t3.last)
                  r3 >>>= 7 & c3, c3 -= 7 & c3, t3.mode = 27;
                else {
                  for (; c3 < 3; ) {
                    if (0 === a3)
                      break e;
                    a3--, r3 += n3[o3++] << c3, c3 += 8;
                  }
                  switch (t3.last = 1 & r3, --c3, 3 & (r3 >>>= 1)) {
                    case 0:
                      t3.mode = 14;
                      break;
                    case 1:
                      y3 = C3 = void 0;
                      var y3, C3 = t3;
                      if (Bs) {
                        for (xs = new ie2.Buf32(512), Vs = new ie2.Buf32(32), y3 = 0; y3 < 144; )
                          C3.lens[y3++] = 8;
                        for (; y3 < 256; )
                          C3.lens[y3++] = 9;
                        for (; y3 < 280; )
                          C3.lens[y3++] = 7;
                        for (; y3 < 288; )
                          C3.lens[y3++] = 8;
                        for (ks(1, C3.lens, 0, 288, xs, 0, C3.work, { bits: 9 }), y3 = 0; y3 < 32; )
                          C3.lens[y3++] = 5;
                        ks(2, C3.lens, 0, 32, Vs, 0, C3.work, { bits: 5 }), Bs = false;
                      }
                      if (C3.lencode = xs, C3.lenbits = 9, C3.distcode = Vs, C3.distbits = 5, t3.mode = 20, 6 !== b3)
                        break;
                      r3 >>>= 2, c3 -= 2;
                      break e;
                    case 2:
                      t3.mode = 17;
                      break;
                    case 3:
                      e3.msg = "invalid block type", t3.mode = 30;
                  }
                  r3 >>>= 2, c3 -= 2;
                }
                break;
              case 14:
                for (r3 >>>= 7 & c3, c3 -= 7 & c3; c3 < 32; ) {
                  if (0 === a3)
                    break e;
                  a3--, r3 += n3[o3++] << c3, c3 += 8;
                }
                if ((65535 & r3) != (r3 >>> 16 ^ 65535)) {
                  e3.msg = "invalid stored block lengths", t3.mode = 30;
                  break;
                }
                if (t3.length = 65535 & r3, c3 = r3 = 0, t3.mode = 15, 6 === b3)
                  break e;
              case 15:
                t3.mode = 16;
              case 16:
                if (l3 = t3.length) {
                  if (0 === (l3 = s3 < (l3 = a3 < l3 ? a3 : l3) ? s3 : l3))
                    break e;
                  ie2.arraySet(w3, n3, o3, l3, i3), a3 -= l3, o3 += l3, s3 -= l3, i3 += l3, t3.length -= l3;
                } else
                  t3.mode = 12;
                break;
              case 17:
                for (; c3 < 14; ) {
                  if (0 === a3)
                    break e;
                  a3--, r3 += n3[o3++] << c3, c3 += 8;
                }
                if (t3.nlen = 257 + (31 & r3), r3 >>>= 5, c3 -= 5, t3.ndist = 1 + (31 & r3), r3 >>>= 5, c3 -= 5, t3.ncode = 4 + (15 & r3), r3 >>>= 4, c3 -= 4, 286 < t3.nlen || 30 < t3.ndist) {
                  e3.msg = "too many length or distance symbols", t3.mode = 30;
                  break;
                }
                t3.have = 0, t3.mode = 18;
              case 18:
                for (; t3.have < t3.ncode; ) {
                  for (; c3 < 3; ) {
                    if (0 === a3)
                      break e;
                    a3--, r3 += n3[o3++] << c3, c3 += 8;
                  }
                  t3.lens[H3[t3.have++]] = 7 & r3, r3 >>>= 3, c3 -= 3;
                }
                for (; t3.have < 19; )
                  t3.lens[H3[t3.have++]] = 0;
                if (t3.lencode = t3.lendyn, t3.lenbits = 7, m3 = { bits: t3.lenbits }, f3 = ks(0, t3.lens, 0, 19, t3.lencode, 0, t3.work, m3), t3.lenbits = m3.bits, f3) {
                  e3.msg = "invalid code lengths set", t3.mode = 30;
                  break;
                }
                t3.have = 0, t3.mode = 19;
              case 19:
                for (; t3.have < t3.nlen + t3.ndist; ) {
                  for (; p3 = (I3 = t3.lencode[r3 & (1 << t3.lenbits) - 1]) >>> 16 & 255, _3 = 65535 & I3, !((d3 = I3 >>> 24) <= c3); ) {
                    if (0 === a3)
                      break e;
                    a3--, r3 += n3[o3++] << c3, c3 += 8;
                  }
                  if (_3 < 16)
                    r3 >>>= d3, c3 -= d3, t3.lens[t3.have++] = _3;
                  else {
                    if (16 === _3) {
                      for (v3 = d3 + 2; c3 < v3; ) {
                        if (0 === a3)
                          break e;
                        a3--, r3 += n3[o3++] << c3, c3 += 8;
                      }
                      if (r3 >>>= d3, c3 -= d3, 0 === t3.have) {
                        e3.msg = "invalid bit length repeat", t3.mode = 30;
                        break;
                      }
                      g3 = t3.lens[t3.have - 1], l3 = 3 + (3 & r3), r3 >>>= 2, c3 -= 2;
                    } else if (17 === _3) {
                      for (v3 = d3 + 3; c3 < v3; ) {
                        if (0 === a3)
                          break e;
                        a3--, r3 += n3[o3++] << c3, c3 += 8;
                      }
                      g3 = 0, l3 = 3 + (7 & (r3 >>>= d3)), r3 >>>= 3, c3 = c3 - d3 - 3;
                    } else {
                      for (v3 = d3 + 7; c3 < v3; ) {
                        if (0 === a3)
                          break e;
                        a3--, r3 += n3[o3++] << c3, c3 += 8;
                      }
                      g3 = 0, l3 = 11 + (127 & (r3 >>>= d3)), r3 >>>= 7, c3 = c3 - d3 - 7;
                    }
                    if (t3.have + l3 > t3.nlen + t3.ndist) {
                      e3.msg = "invalid bit length repeat", t3.mode = 30;
                      break;
                    }
                    for (; l3--; )
                      t3.lens[t3.have++] = g3;
                  }
                }
                if (30 === t3.mode)
                  break;
                if (0 === t3.lens[256]) {
                  e3.msg = "invalid code -- missing end-of-block", t3.mode = 30;
                  break;
                }
                if (t3.lenbits = 9, m3 = { bits: t3.lenbits }, f3 = ks(1, t3.lens, 0, t3.nlen, t3.lencode, 0, t3.work, m3), t3.lenbits = m3.bits, f3) {
                  e3.msg = "invalid literal/lengths set", t3.mode = 30;
                  break;
                }
                if (t3.distbits = 6, t3.distcode = t3.distdyn, m3 = { bits: t3.distbits }, f3 = ks(2, t3.lens, t3.nlen, t3.ndist, t3.distcode, 0, t3.work, m3), t3.distbits = m3.bits, f3) {
                  e3.msg = "invalid distances set", t3.mode = 30;
                  break;
                }
                if (t3.mode = 20, 6 === b3)
                  break e;
              case 20:
                t3.mode = 21;
              case 21:
                if (6 <= a3 && 258 <= s3) {
                  e3.next_out = i3, e3.avail_out = s3, e3.next_in = o3, e3.avail_in = a3, t3.hold = r3, t3.bits = c3, G3 = W3 = k3 = S3 = L3 = E3 = D3 = T3 = oe3 = ne3 = te3 = ee3 = U3 = P3 = $3 = Q3 = Z3 = X3 = z3 = J3 = j3 = N3 = Y3 = O3 = A3 = void 0;
                  var T3, D3, E3, L3, S3, k3, R3 = e3, K3 = u3, A3 = R3.state, O3 = R3.next_in, W3 = R3.input, Y3 = O3 + (R3.avail_in - 5), N3 = R3.next_out, G3 = R3.output, j3 = N3 - (K3 - R3.avail_out), J3 = N3 + (R3.avail_out - 257), z3 = A3.dmax, X3 = A3.wsize, Z3 = A3.whave, Q3 = A3.wnext, $3 = A3.window, P3 = A3.hold, U3 = A3.bits, ee3 = A3.lencode, te3 = A3.distcode, ne3 = (1 << A3.lenbits) - 1, oe3 = (1 << A3.distbits) - 1;
                  t:
                    do {
                      for (U3 < 15 && (P3 += W3[O3++] << U3, U3 += 8, P3 += W3[O3++] << U3, U3 += 8), T3 = ee3[P3 & ne3]; ; ) {
                        if (P3 >>>= D3 = T3 >>> 24, U3 -= D3, 0 == (D3 = T3 >>> 16 & 255))
                          G3[N3++] = 65535 & T3;
                        else {
                          if (!(16 & D3)) {
                            if (0 == (64 & D3)) {
                              T3 = ee3[(65535 & T3) + (P3 & (1 << D3) - 1)];
                              continue;
                            }
                            if (32 & D3) {
                              A3.mode = 12;
                              break t;
                            }
                            R3.msg = "invalid literal/length code", A3.mode = 30;
                            break t;
                          }
                          for (E3 = 65535 & T3, (D3 &= 15) && (U3 < D3 && (P3 += W3[O3++] << U3, U3 += 8), E3 += P3 & (1 << D3) - 1, P3 >>>= D3, U3 -= D3), U3 < 15 && (P3 += W3[O3++] << U3, U3 += 8, P3 += W3[O3++] << U3, U3 += 8), T3 = te3[P3 & oe3]; ; ) {
                            if (P3 >>>= D3 = T3 >>> 24, U3 -= D3, !(16 & (D3 = T3 >>> 16 & 255))) {
                              if (0 == (64 & D3)) {
                                T3 = te3[(65535 & T3) + (P3 & (1 << D3) - 1)];
                                continue;
                              }
                              R3.msg = "invalid distance code", A3.mode = 30;
                              break t;
                            }
                            if (L3 = 65535 & T3, U3 < (D3 &= 15) && (P3 += W3[O3++] << U3, (U3 += 8) < D3) && (P3 += W3[O3++] << U3, U3 += 8), (L3 += P3 & (1 << D3) - 1) > z3) {
                              R3.msg = "invalid distance too far back", A3.mode = 30;
                              break t;
                            }
                            if (P3 >>>= D3, U3 -= D3, L3 > (D3 = N3 - j3)) {
                              if ((D3 = L3 - D3) > Z3 && A3.sane) {
                                R3.msg = "invalid distance too far back", A3.mode = 30;
                                break t;
                              }
                              if (k3 = $3, (S3 = 0) === Q3) {
                                if (S3 += X3 - D3, D3 < E3) {
                                  for (E3 -= D3; G3[N3++] = $3[S3++], --D3; )
                                    ;
                                  S3 = N3 - L3, k3 = G3;
                                }
                              } else if (Q3 < D3) {
                                if (S3 += X3 + Q3 - D3, (D3 -= Q3) < E3) {
                                  for (E3 -= D3; G3[N3++] = $3[S3++], --D3; )
                                    ;
                                  if (S3 = 0, Q3 < E3) {
                                    for (E3 -= D3 = Q3; G3[N3++] = $3[S3++], --D3; )
                                      ;
                                    S3 = N3 - L3, k3 = G3;
                                  }
                                }
                              } else if (S3 += Q3 - D3, D3 < E3) {
                                for (E3 -= D3; G3[N3++] = $3[S3++], --D3; )
                                  ;
                                S3 = N3 - L3, k3 = G3;
                              }
                              for (; 2 < E3; )
                                G3[N3++] = k3[S3++], G3[N3++] = k3[S3++], G3[N3++] = k3[S3++], E3 -= 3;
                              E3 && (G3[N3++] = k3[S3++], 1 < E3) && (G3[N3++] = k3[S3++]);
                            } else {
                              for (S3 = N3 - L3; G3[N3++] = G3[S3++], G3[N3++] = G3[S3++], G3[N3++] = G3[S3++], 2 < (E3 -= 3); )
                                ;
                              E3 && (G3[N3++] = G3[S3++], 1 < E3) && (G3[N3++] = G3[S3++]);
                            }
                            break;
                          }
                        }
                        break;
                      }
                    } while (O3 < Y3 && N3 < J3);
                  O3 -= E3 = U3 >> 3, P3 &= (1 << (U3 -= E3 << 3)) - 1, R3.next_in = O3, R3.next_out = N3, R3.avail_in = O3 < Y3 ? Y3 - O3 + 5 : 5 - (O3 - Y3), R3.avail_out = N3 < J3 ? J3 - N3 + 257 : 257 - (N3 - J3), A3.hold = P3, A3.bits = U3, i3 = e3.next_out, w3 = e3.output, s3 = e3.avail_out, o3 = e3.next_in, n3 = e3.input, a3 = e3.avail_in, r3 = t3.hold, c3 = t3.bits, 12 === t3.mode && (t3.back = -1);
                  break;
                }
                for (t3.back = 0; p3 = (I3 = t3.lencode[r3 & (1 << t3.lenbits) - 1]) >>> 16 & 255, _3 = 65535 & I3, !((d3 = I3 >>> 24) <= c3); ) {
                  if (0 === a3)
                    break e;
                  a3--, r3 += n3[o3++] << c3, c3 += 8;
                }
                if (p3 && 0 == (240 & p3)) {
                  for (h3 = d3, V3 = p3, B3 = _3; p3 = (I3 = t3.lencode[B3 + ((r3 & (1 << h3 + V3) - 1) >> h3)]) >>> 16 & 255, _3 = 65535 & I3, !(h3 + (d3 = I3 >>> 24) <= c3); ) {
                    if (0 === a3)
                      break e;
                    a3--, r3 += n3[o3++] << c3, c3 += 8;
                  }
                  r3 >>>= h3, c3 -= h3, t3.back += h3;
                }
                if (r3 >>>= d3, c3 -= d3, t3.back += d3, t3.length = _3, 0 === p3) {
                  t3.mode = 26;
                  break;
                }
                if (32 & p3) {
                  t3.back = -1, t3.mode = 12;
                  break;
                }
                if (64 & p3) {
                  e3.msg = "invalid literal/length code", t3.mode = 30;
                  break;
                }
                t3.extra = 15 & p3, t3.mode = 22;
              case 22:
                if (t3.extra) {
                  for (v3 = t3.extra; c3 < v3; ) {
                    if (0 === a3)
                      break e;
                    a3--, r3 += n3[o3++] << c3, c3 += 8;
                  }
                  t3.length += r3 & (1 << t3.extra) - 1, r3 >>>= t3.extra, c3 -= t3.extra, t3.back += t3.extra;
                }
                t3.was = t3.length, t3.mode = 23;
              case 23:
                for (; p3 = (I3 = t3.distcode[r3 & (1 << t3.distbits) - 1]) >>> 16 & 255, _3 = 65535 & I3, !((d3 = I3 >>> 24) <= c3); ) {
                  if (0 === a3)
                    break e;
                  a3--, r3 += n3[o3++] << c3, c3 += 8;
                }
                if (0 == (240 & p3)) {
                  for (h3 = d3, V3 = p3, B3 = _3; p3 = (I3 = t3.distcode[B3 + ((r3 & (1 << h3 + V3) - 1) >> h3)]) >>> 16 & 255, _3 = 65535 & I3, !(h3 + (d3 = I3 >>> 24) <= c3); ) {
                    if (0 === a3)
                      break e;
                    a3--, r3 += n3[o3++] << c3, c3 += 8;
                  }
                  r3 >>>= h3, c3 -= h3, t3.back += h3;
                }
                if (r3 >>>= d3, c3 -= d3, t3.back += d3, 64 & p3) {
                  e3.msg = "invalid distance code", t3.mode = 30;
                  break;
                }
                t3.offset = _3, t3.extra = 15 & p3, t3.mode = 24;
              case 24:
                if (t3.extra) {
                  for (v3 = t3.extra; c3 < v3; ) {
                    if (0 === a3)
                      break e;
                    a3--, r3 += n3[o3++] << c3, c3 += 8;
                  }
                  t3.offset += r3 & (1 << t3.extra) - 1, r3 >>>= t3.extra, c3 -= t3.extra, t3.back += t3.extra;
                }
                if (t3.offset > t3.dmax) {
                  e3.msg = "invalid distance too far back", t3.mode = 30;
                  break;
                }
                t3.mode = 25;
              case 25:
                if (0 === s3)
                  break e;
                if (t3.offset > (l3 = u3 - s3)) {
                  if ((l3 = t3.offset - l3) > t3.whave && t3.sane) {
                    e3.msg = "invalid distance too far back", t3.mode = 30;
                    break;
                  }
                  q3 = l3 > t3.wnext ? (l3 -= t3.wnext, t3.wsize - l3) : t3.wnext - l3, l3 > t3.length && (l3 = t3.length), x3 = t3.window;
                } else
                  x3 = w3, q3 = i3 - t3.offset, l3 = t3.length;
                for (s3 -= l3 = s3 < l3 ? s3 : l3, t3.length -= l3; w3[i3++] = x3[q3++], --l3; )
                  ;
                0 === t3.length && (t3.mode = 21);
                break;
              case 26:
                if (0 === s3)
                  break e;
                w3[i3++] = t3.length, s3--, t3.mode = 21;
                break;
              case 27:
                if (t3.wrap) {
                  for (; c3 < 32; ) {
                    if (0 === a3)
                      break e;
                    a3--, r3 |= n3[o3++] << c3, c3 += 8;
                  }
                  if (u3 -= s3, e3.total_out += u3, t3.total += u3, u3 && (e3.adler = t3.check = (t3.flags ? Ss : Ls)(t3.check, w3, u3, i3 - u3)), u3 = s3, (t3.flags ? r3 : Ps(r3)) !== t3.check) {
                    e3.msg = "incorrect data check", t3.mode = 30;
                    break;
                  }
                  c3 = r3 = 0;
                }
                t3.mode = 28;
              case 28:
                if (t3.wrap && t3.flags) {
                  for (; c3 < 32; ) {
                    if (0 === a3)
                      break e;
                    a3--, r3 += n3[o3++] << c3, c3 += 8;
                  }
                  if (r3 !== (4294967295 & t3.total)) {
                    e3.msg = "incorrect length check", t3.mode = 30;
                    break;
                  }
                  c3 = r3 = 0;
                }
                t3.mode = 29;
              case 29:
                f3 = 1;
                break e;
              case 30:
                f3 = -3;
                break e;
              case 31:
                return -4;
              default:
                return -2;
            }
        return e3.next_out = i3, e3.avail_out = s3, e3.next_in = o3, e3.avail_in = a3, t3.hold = r3, t3.bits = c3, (t3.wsize || u3 !== e3.avail_out && t3.mode < 30 && (t3.mode < 27 || 4 !== b3)) && Hs(e3, e3.output, e3.next_out, u3 - e3.avail_out), F3 -= e3.avail_in, u3 -= e3.avail_out, e3.total_in += F3, e3.total_out += u3, t3.total += u3, t3.wrap && u3 && (e3.adler = t3.check = (t3.flags ? Ss : Ls)(t3.check, w3, u3, e3.next_out - u3)), e3.data_type = t3.bits + (t3.last ? 64 : 0) + (12 === t3.mode ? 128 : 0) + (20 === t3.mode || 15 === t3.mode ? 256 : 0), f3 = (0 == F3 && 0 === u3 || 4 === b3) && 0 === f3 ? -5 : f3;
      }, inflateEnd: function(e3) {
        var t3;
        return e3 && e3.state ? ((t3 = e3.state).window && (t3.window = null), e3.state = null, 0) : -2;
      }, inflateGetHeader: function(e3, t3) {
        return !e3 || !e3.state || 0 == (2 & (e3 = e3.state).wrap) ? -2 : ((e3.head = t3).done = false, 0);
      }, inflateSetDictionary: function(e3, t3) {
        var n3, o3 = t3.length;
        return !e3 || !e3.state || 0 !== (n3 = e3.state).wrap && 11 !== n3.mode ? -2 : 11 === n3.mode && Ls(1, t3, o3, 0) !== n3.check ? -3 : Hs(e3, t3, o3, o3) ? (n3.mode = 31, -4) : (n3.havedict = 1, 0);
      }, inflateInfo: "pako inflate (from Nodeca project)" }, Ws = true, Ys = true;
      try {
        String.fromCharCode.apply(null, [0]);
      } catch (e3) {
        Ws = false;
      }
      try {
        String.fromCharCode.apply(null, new Uint8Array(1));
      } catch (e3) {
        Ys = false;
      }
      for (var js = new ie2.Buf8(256), Js = 0; Js < 256; Js++)
        js[Js] = 252 <= Js ? 6 : 248 <= Js ? 5 : 240 <= Js ? 4 : 224 <= Js ? 3 : 192 <= Js ? 2 : 1;
      js[254] = js[254] = 1;
      function zs(e3, t3) {
        for (var n3, o3, i3 = t3 || e3.length, a3 = new Array(2 * i3), s3 = 0, r3 = 0; r3 < i3; )
          if ((n3 = e3[r3++]) < 128)
            a3[s3++] = n3;
          else if (4 < (o3 = js[n3]))
            a3[s3++] = 65533, r3 += o3 - 1;
          else {
            for (n3 &= 2 === o3 ? 31 : 3 === o3 ? 15 : 7; 1 < o3 && r3 < i3; )
              n3 = n3 << 6 | 63 & e3[r3++], o3--;
            1 < o3 ? a3[s3++] = 65533 : n3 < 65536 ? a3[s3++] = n3 : (n3 -= 65536, a3[s3++] = 55296 | n3 >> 10 & 1023, a3[s3++] = 56320 | 1023 & n3);
          }
        var c3 = a3, u3 = s3;
        if (u3 < 65534 && (c3.subarray && Ys || !c3.subarray && Ws))
          return String.fromCharCode.apply(null, ie2.shrinkBuf(c3, u3));
        for (var l3 = "", d3 = 0; d3 < u3; d3++)
          l3 += String.fromCharCode(c3[d3]);
        return l3;
      }
      function Xs() {
        this.input = null, this.next_in = 0, this.avail_in = 0, this.total_in = 0, this.output = null, this.next_out = 0, this.avail_out = 0, this.total_out = 0, this.msg = "", this.state = null, this.data_type = 2, this.adler = 0;
      }
      function Zs() {
        this.text = 0, this.time = 0, this.xflags = 0, this.os = 0, this.extra = null, this.extra_len = 0, this.name = "", this.comment = "", this.hcrc = 0, this.done = false;
      }
      var Qs = { Z_NO_FLUSH: 0, Z_PARTIAL_FLUSH: 1, Z_SYNC_FLUSH: 2, Z_FULL_FLUSH: 3, Z_FINISH: 4, Z_BLOCK: 5, Z_TREES: 6, Z_OK: 0, Z_STREAM_END: 1, Z_NEED_DICT: 2, Z_ERRNO: -1, Z_STREAM_ERROR: -2, Z_DATA_ERROR: -3, Z_BUF_ERROR: -5, Z_NO_COMPRESSION: 0, Z_BEST_SPEED: 1, Z_BEST_COMPRESSION: 9, Z_DEFAULT_COMPRESSION: -1, Z_FILTERED: 1, Z_HUFFMAN_ONLY: 2, Z_RLE: 3, Z_FIXED: 4, Z_DEFAULT_STRATEGY: 0, Z_BINARY: 0, Z_TEXT: 1, Z_UNKNOWN: 2, Z_DEFLATED: 8 }, $s = { 2: "need dictionary", 1: "stream end", 0: "", "-1": "file error", "-2": "stream error", "-3": "data error", "-4": "insufficient memory", "-5": "buffer error", "-6": "incompatible version" }, er = Object.prototype.toString;
      function tr(e3) {
        if (!(this instanceof tr))
          return new tr(e3);
        this.options = ie2.assign({ chunkSize: 16384, windowBits: 0, to: "" }, e3 || {});
        var t3 = this.options, e3 = (t3.raw && 0 <= t3.windowBits && t3.windowBits < 16 && (t3.windowBits = -t3.windowBits, 0 === t3.windowBits) && (t3.windowBits = -15), !(0 <= t3.windowBits && t3.windowBits < 16) || e3 && e3.windowBits || (t3.windowBits += 32), 15 < t3.windowBits && t3.windowBits < 48 && 0 == (15 & t3.windowBits) && (t3.windowBits |= 15), this.err = 0, this.msg = "", this.ended = false, this.chunks = [], this.strm = new Xs(), this.strm.avail_out = 0, Ks.inflateInit2(this.strm, t3.windowBits));
        if (e3 !== Qs.Z_OK)
          throw new Error($s[e3]);
        if (this.header = new Zs(), Ks.inflateGetHeader(this.strm, this.header), t3.dictionary && ("string" == typeof t3.dictionary ? t3.dictionary = function(e4) {
          for (var t4, n3, o3, i3, a3 = e4.length, s3 = 0, r3 = 0; r3 < a3; r3++)
            55296 == (64512 & (n3 = e4.charCodeAt(r3))) && r3 + 1 < a3 && 56320 == (64512 & (o3 = e4.charCodeAt(r3 + 1))) && (n3 = 65536 + (n3 - 55296 << 10) + (o3 - 56320), r3++), s3 += n3 < 128 ? 1 : n3 < 2048 ? 2 : n3 < 65536 ? 3 : 4;
          for (t4 = new ie2.Buf8(s3), r3 = i3 = 0; i3 < s3; r3++)
            55296 == (64512 & (n3 = e4.charCodeAt(r3))) && r3 + 1 < a3 && 56320 == (64512 & (o3 = e4.charCodeAt(r3 + 1))) && (n3 = 65536 + (n3 - 55296 << 10) + (o3 - 56320), r3++), n3 < 128 ? t4[i3++] = n3 : (n3 < 2048 ? t4[i3++] = 192 | n3 >>> 6 : (n3 < 65536 ? t4[i3++] = 224 | n3 >>> 12 : (t4[i3++] = 240 | n3 >>> 18, t4[i3++] = 128 | n3 >>> 12 & 63), t4[i3++] = 128 | n3 >>> 6 & 63), t4[i3++] = 128 | 63 & n3);
          return t4;
        }(t3.dictionary) : "[object ArrayBuffer]" === er.call(t3.dictionary) && (t3.dictionary = new Uint8Array(t3.dictionary)), t3.raw) && (e3 = Ks.inflateSetDictionary(this.strm, t3.dictionary)) !== Qs.Z_OK)
          throw new Error($s[e3]);
      }
      function nr(e3, t3) {
        t3 = new tr(t3);
        if (t3.push(e3, true), t3.err)
          throw t3.msg || $s[t3.err];
        return t3.result;
      }
      tr.prototype.push = function(e3, t3) {
        var n3, o3, i3, a3, s3, r3 = this.strm, c3 = this.options.chunkSize, u3 = this.options.dictionary, l3 = false;
        if (this.ended)
          return false;
        o3 = t3 === ~~t3 ? t3 : true === t3 ? Qs.Z_FINISH : Qs.Z_NO_FLUSH, "string" == typeof e3 ? r3.input = function(e4) {
          for (var t4 = new ie2.Buf8(e4.length), n4 = 0, o4 = t4.length; n4 < o4; n4++)
            t4[n4] = e4.charCodeAt(n4);
          return t4;
        }(e3) : "[object ArrayBuffer]" === er.call(e3) ? r3.input = new Uint8Array(e3) : r3.input = e3, r3.next_in = 0, r3.avail_in = r3.input.length;
        do {
          if (0 === r3.avail_out && (r3.output = new ie2.Buf8(c3), r3.next_out = 0, r3.avail_out = c3), (n3 = (n3 = Ks.inflate(r3, Qs.Z_NO_FLUSH)) === Qs.Z_NEED_DICT && u3 ? Ks.inflateSetDictionary(this.strm, u3) : n3) === Qs.Z_BUF_ERROR && true === l3 && (n3 = Qs.Z_OK, l3 = false), n3 !== Qs.Z_STREAM_END && n3 !== Qs.Z_OK)
            return this.onEnd(n3), !(this.ended = true);
          !r3.next_out || 0 !== r3.avail_out && n3 !== Qs.Z_STREAM_END && (0 !== r3.avail_in || o3 !== Qs.Z_FINISH && o3 !== Qs.Z_SYNC_FLUSH) || ("string" === this.options.to ? (i3 = function(e4, t4) {
            for (var n4 = (t4 = (t4 = t4 || e4.length) > e4.length ? e4.length : t4) - 1; 0 <= n4 && 128 == (192 & e4[n4]); )
              n4--;
            return !(n4 < 0 || 0 === n4) && n4 + js[e4[n4]] > t4 ? n4 : t4;
          }(r3.output, r3.next_out), a3 = r3.next_out - i3, s3 = zs(r3.output, i3), r3.next_out = a3, r3.avail_out = c3 - a3, a3 && ie2.arraySet(r3.output, r3.output, i3, a3, 0), this.onData(s3)) : this.onData(ie2.shrinkBuf(r3.output, r3.next_out))), 0 === r3.avail_in && 0 === r3.avail_out && (l3 = true);
        } while ((0 < r3.avail_in || 0 === r3.avail_out) && n3 !== Qs.Z_STREAM_END);
        return (o3 = n3 === Qs.Z_STREAM_END ? Qs.Z_FINISH : o3) === Qs.Z_FINISH ? (n3 = Ks.inflateEnd(this.strm), this.onEnd(n3), this.ended = true, n3 === Qs.Z_OK) : o3 !== Qs.Z_SYNC_FLUSH || (this.onEnd(Qs.Z_OK), !(r3.avail_out = 0));
      }, tr.prototype.onData = function(e3) {
        this.chunks.push(e3);
      }, tr.prototype.onEnd = function(e3) {
        e3 === Qs.Z_OK && ("string" === this.options.to ? this.result = this.chunks.join("") : this.result = ie2.flattenChunks(this.chunks)), this.chunks = [], this.err = e3, this.msg = this.strm.msg;
      };
      var xn = {}, or = ((0, ie2.assign)(xn, { Inflate: tr, inflate: nr, inflateRaw: function(e3, t3) {
        return (t3 = t3 || {}).raw = true, nr(e3, t3);
      }, ungzip: nr }, Qs), xn), ir = e2(function e3(t3) {
        p2(this, e3), this._m = t3, this._n = "InflateModule", this._bLogForInflateOK = false, this._bLogForInflateError = false;
      }, [{ key: "inflate", value: function(e3) {
        var t3, e3 = new Uint8Array(e3).slice(4), n3 = Date.now();
        try {
          t3 = or.inflate(e3, { to: "string" }), this._bLogForInflateOK || (this._bLogForInflateOK = true, new P2("inflateOK").end());
        } catch (e4) {
          return this._bLogForInflateError ? void 0 : (this._bLogForInflateError = true, void new P2("inflateError").setMessage(e4).end());
        }
        var e3 = e3.length + 4, o3 = t3.length;
        return M2.d("inflate ok. zipped:".concat(e3, " unzipped:").concat(o3) + " compression ratio:".concat(Math.round(100 * (o3 - e3) / o3), "% cost:").concat(Date.now() - n3)), t3;
      } }, { key: "reset", value: function() {
        M2.l("".concat(this._n, ".reset")), this._bLogForInflateOK = false, this._bLogForInflateError = false;
      } }]), ar = "Message", sr = "User", rr = "Group", cr = "GroupMember", ur = ["count"], lr = ["conversationID", "timePosition", "timePeriod"], dr = ["miniBirthday", "maxBirthday"], pr = q2(q2(q2(q2({}, ar, G2.CS), sr, G2.USER_CS), rr, G2.GRP_CS), cr, G2.MBR_CS), _r = (t2(vr, c2), e2(vr, [{ key: "searchCloudMessages", value: function(e3) {
        return this.search(ar, e3);
      } }, { key: "searchCloudUsers", value: function(e3) {
        return this.search(sr, e3);
      } }, { key: "searchCloudGroups", value: function(e3) {
        return this.search(rr, e3);
      } }, { key: "searchCloudGroupMembers", value: function(e3) {
        return this.search(cr, e3);
      } }, { key: "search", value: function(i3, a3) {
        var s3 = this, e3 = "searchCloud".concat(i3, "s"), r3 = "".concat(this._n, ".").concat(e3);
        if (!a3)
          return E2({ code: k2.OPTIONS_IS_EMPTY, message: this.getErrMsg(k2.OPTIONS_IS_EMPTY, e3) });
        var t3 = a3.keywordList, n3 = lt2(t3), o3 = a3.count;
        if (a3.count && (o3 = parseInt(o3)), i3 === ar && !n3 && !lt2(a3.senderUserIDList) && !lt2(a3.messageTypeList) || i3 !== ar && !n3)
          throw M2.e("[".concat(e3, '] Missing required params: "keywordList".')), new Error("Params validate failed.");
        var c3 = Date.now(), u3 = new P2(e3), l3 = "keywordList:".concat(t3, " keywordListMatchType:").concat(a3.keywordListMatchType, " cursor:").concat(a3.cursor, " count:").concat(o3);
        return M2.l("".concat(r3, " ").concat(l3)), this.req({ P: pr[i3], data: this._genParams(i3, a3) }).then(function(e4) {
          var t4 = e4.data, n4 = t4.code, t4 = t4.message;
          if (0 !== n4)
            return 60020 === (o4 = n4) ? o4 = "SearchUnable" : i3 !== ar && 27003 === n4 ? o4 = "SearchParamsError" : i3 !== ar && 60018 === n4 && (o4 = "SearchOverLimit"), o4 = s3.getErrMsg(o4) || t4, t4 = new L2({ code: n4, message: o4 }), u3.setMessage(l3).setError(t4).end(), E2(t4);
          s3.get(27).isCSPluginEnabled();
          var n4 = e4.data, o4 = n4.cursor, t4 = void 0 === o4 ? "" : o4, o4 = n4.totalCount, n4 = "totalCount:".concat(o4, " cost:").concat(an(c3)), n4 = (M2.l("".concat(r3, " ok. cursor:").concat(t4, " ").concat(n4)), u3.setMessage("".concat(l3, " ").concat(n4)).end(), s3._genRes(i3, a3, e4.data));
          return T2({ searchResultList: n4, cursor: t4, totalCount: o4 });
        }).catch(function(e4) {
          return u3.setMessage(l3).setError(e4).end(), E2(e4);
        });
      } }, { key: "_genParams", value: function(e3, t3) {
        var n3 = t3.count, o3 = W2(t3, ur);
        return n3 && (o3.count = parseInt(n3)), e3 === ar ? this._genMsgParams(o3) : (n3 = t3.keywordList, t3 = t3.keywordListMatchType, o3.keywords = n3, o3.keywordMatchType = "and" === t3 ? 1 : 0, e3 === sr ? this._genUserParams(o3) : o3);
      } }, { key: "_genMsgParams", value: function(e3) {
        var t3 = e3.conversationID, n3 = e3.timePosition, o3 = e3.timePeriod, e3 = W2(e3, lr);
        return N2(t3) || (bt2(t3) && (e3.account = t3.replace(R2.CONV_C2C, "")), wt2(t3) && (e3.groupID = t3.replace(R2.CONV_GROUP, ""))), A2(o3) && 0 < o3 && (A2(n3) && 0 < n3 ? e3.startTime = n3 - o3 : e3.startTime = He2() - o3), e3.startTime && e3.startTime < 0 && (e3.startTime = void 0), A2(n3) && 0 < n3 && (e3.endTime = n3), e3;
      } }, { key: "_genUserParams", value: function(e3) {
        var t3 = e3.miniBirthday, n3 = e3.maxBirthday, e3 = W2(e3, dr);
        return A2(t3) && (e3.miniBirthday = parseInt(t3), A2(n3) || (e3.maxBirthday = 4294967295)), A2(n3) && (e3.maxBirthday = parseInt(n3)), e3;
      } }, { key: "_genRes", value: function(e3, t3, n3) {
        switch (e3) {
          case ar:
            return this._genMsgRes(n3.searchResult, !t3.conversationID);
          case sr:
            return this._genUserRes(n3.userList);
          case rr:
            return this._genGrpRes(n3.groupList);
          case cr:
            return this._genMemberRes(n3.groupMemberList);
          default:
            return [];
        }
      } }, { key: "_genMsgRes", value: function(e3, a3) {
        var s3 = this.get(11);
        return O2(e3) && 0 !== e3.length ? e3.map(function(e4) {
          var t3 = e4.groupID, n3 = e4.userID, o3 = e4.messageCount, e4 = e4.messageList, e4 = void 0 === e4 ? [] : e4, n3 = t3 ? "".concat(R2.CONV_GROUP).concat(t3) : "".concat(R2.CONV_C2C).concat(n3), i3 = { conversationID: n3, messageCount: o3, messageList: [] };
          return a3 && 1 < o3 || 0 < (o3 = e4.filter(function(e5) {
            return !!e5;
          })).length && (e4 = s3.onRoamingMessage(o3, n3, false), t3 && e4.reverse(), i3.messageList = e4, i3.messageCount = e4.length), i3;
        }) : [];
      } }, { key: "_genUserRes", value: function(e3) {
        var t3 = this.get(4)._profileHandler;
        if (!O2(e3))
          return [];
        for (var n3 = [], o3 = 0, i3 = e3.length; o3 < i3; o3++) {
          var a3 = e3[o3], s3 = a3.userID, a3 = a3.profileItems;
          "@TLS#NOT_FOUND" !== s3 && "" !== s3 && (s3 = t3._update(s3, t3._getLatestProfileFromResponse(s3, a3)).latestProfile, n3.push(s3));
        }
        return n3;
      } }, { key: "_genGrpRes", value: function(e3) {
        if (!O2(e3))
          return [];
        for (var t3 = [], n3 = 0, o3 = e3.length; n3 < o3; n3++)
          e3[n3] && e3[n3].groupID && t3.push(new Yo(e3[n3]));
        return t3;
      } }, { key: "_genMemberRes", value: function(e3) {
        if (!O2(e3))
          return [];
        for (var t3, n3, o3, i3, a3, s3, r3 = /* @__PURE__ */ new Map(), c3 = 0, u3 = e3.length; c3 < u3; c3++)
          e3[c3] && e3[c3].userID && e3[c3].groupID && (n3 = (t3 = e3[c3]).groupID, i3 = t3.name, a3 = t3.type, s3 = t3.avatar, o3 = t3.nick, i3 = { groupID: n3, name: i3, type: a3, avatar: s3 }, a3 = { userID: t3.userID, nick: o3, nameCard: t3.nameCard }, r3.has(n3) ? ((s3 = r3.get(n3)).memberList.push(a3), r3.set(n3, s3)) : r3.set(n3, { groupInfo: i3, memberList: [a3] }));
        return d2(r3.values());
      } }])), hr = e2(function e3(t3) {
        var n3 = this;
        p2(this, e3);
        var o3, i3 = new P2("sdkConstruct"), a3 = (this._n = "ModuleManager", this._isReady = false, this._reason = k2.USER_NOT_LOGGED_IN, this._startLoginTs = 0, this._map = /* @__PURE__ */ new Map(), this._optionalModuleMap = /* @__PURE__ */ new Map(), this._codeMsgForTUIMap = /* @__PURE__ */ new Map(), this._iEmitter = null, this._oEmitter = null, this._checkCount = 0, this._checkTimer = -1, this._map.set(12, new Ii(this, t3)), this._map.set(37, new ir(this)), this._map.set(15, new Pi(this)), this._map.set(27, new Qa(this)), this._map.set(23, new ba(this)), this._map.set(24, new Xa(this)), this._map.set(26, new Ba(this)), this._map.set(21, new Ma(this)), this._map.set(20, new Ua(this)), this._map.set(1, new yi(this)), this._map.set(2, new ji(this)), this._map.set(3, new Ji(this)), this._map.set(34, new zi(this)), this._map.set(31, new Xi(this)), this._map.set(4, new vi(this)), this._map.set(6, new Po(this)), this._map.set(11, new Zo(this)), this._map.set(7, new li(this)), this._map.set(10, new _i(this)), this._map.set(13, new Ri(this)), this._map.set(32, new os2(this)), this._map.set(14, new Oi(this)), this._map.set(17, new xi(this)), this._map.set(18, new Zi(this)), this._map.set(19, new Qi(this)), this._map.set(25, new wa(this)), this._map.set(8, new za(this)), this._map.set(28, new $a(this)), this._map.set(36, new es2(this)), this._map.set(29, new ts2(this)), this._map.set(30, new ns(this)), this._map.set(33, new ls(this)), this._map.set(35, new hs(this)), this._map.set(38, new _r(this)), this._eventThrottleMap = /* @__PURE__ */ new Map(), this._eventThrottling = t3.eventThrottling, this._map.get(12).isPartialUpdatedConvs() && (this._eventThrottling = false), m2(t3.modules) ? (Object.keys(t3.modules).forEach(function(e4) {
          o3 = t3.modules[e4], "group-module" === e4 ? n3._map.set(7, new o3(n3)) : "relationship-module" === e4 ? n3._map.set(8, new o3(n3)) : "signaling-module" === e4 ? n3._map.set(33, new o3(n3)) : "follow-module" === e4 ? n3._map.set(35, new o3(n3)) : "cloud-search-module" === e4 && n3._map.set(38, new o3(n3)), n3._optionalModuleMap.set(e4, 1);
        }), this._map.get(12).setUsingChatCore(true)) : this._map.has(7) || this._map.get(12).setUsingChatCore(true), t3.instanceID), s3 = t3.SDKAppID, r3 = this._map.get(12).isIntl(), c3 = this._map.get(12).isUsingChatCore(), a3 = "instanceID:".concat(a3, " SDKAppID:").concat(s3, " isIntl:").concat(r3, " isUsingChatCore:").concat(c3, " host:").concat(Bt2()) + " isIOSWebView:".concat(be2, " platform:").concat(De2, " canIUseInflate:").concat(this.canIUseInflate()) + " workerAvailable:".concat(Ge2, " eventThrottling:").concat(this._eventThrottling, " UserAgent:").concat(Te2);
        P2.bindEventStatModule(this._map.get(14)), P2.bindNetMonitorModule(this._map.get(15)), i3.setMessage("".concat(a3, " ").concat(function() {
          var t4 = "";
          if (v2)
            try {
              var e4 = I2.getSystemInfoSync(), n4 = e4.model, o4 = e4.version, i4 = e4.system, a4 = e4.platform, s4 = e4.SDKVersion, t4 = "model:".concat(n4, " version:").concat(o4, " system:").concat(i4, " platform:").concat(a4, " SDKVersion:").concat(s4);
            } catch (e5) {
              t4 = "";
            }
          return t4;
        }())).end(), M2.i("SDK ".concat(a3)), L2.prototype._getErrMsg = this.getErrMsg.bind(this), this._readyList = void 0, this._ssoLogForReady = null, this._initReadyList();
      }, [{ key: "_startTimer", value: function() {
        var e3 = this._map.get(24), t3 = e3.isWorkerEnabled();
        M2.l("".concat(this._n, ".startTimer isWorkerEnabled:").concat(t3, " seed:").concat(this._checkTimer)), t3 ? e3.startWorkerTimer() : this._startMainThreadTimer();
      } }, { key: "_startMainThreadTimer", value: function() {
        this._checkTimer < 0 && (this._checkTimer = setInterval(this.onCheckTimer.bind(this), 1e3)), M2.l("".concat(this._n, "._startMainThreadTimer seed:").concat(this._checkTimer));
      } }, { key: "stopTimer", value: function() {
        var e3 = this._map.get(24), t3 = e3.isWorkerEnabled();
        M2.l("".concat(this._n, ".stopTimer isWorkerEnabled:").concat(t3, " seed:").concat(this._checkTimer)), t3 ? e3.stopWorkerTimer() : this._stopMainThreadTimer();
      } }, { key: "_stopMainThreadTimer", value: function() {
        M2.l("".concat(this._n, "._stopMainThreadTimer")), 0 < this._checkTimer && (clearInterval(this._checkTimer), this._checkTimer = -1, this._checkCount = 0);
      } }, { key: "_stopMainThreadSocket", value: function() {
        M2.l("".concat(this._n, "._stopMainThreadSocket"));
        var e3 = this._map.get(21);
        e3.setIsWorkerEnabled(true), e3.reConnect();
      } }, { key: "_startMainThreadSocket", value: function() {
        M2.l("".concat(this._n, "._startMainThreadSocket"));
        var e3 = this._map.get(21);
        e3.setIsWorkerEnabled(false), e3.reConnect();
      } }, { key: "onWorkerTimerEnabled", value: function() {
        M2.l("".concat(this._n, ".onWorkerTimerEnabled, disable main thread timer and socket")), this._stopMainThreadTimer(), this._stopMainThreadSocket();
      } }, { key: "onWorkerTimerDisabled", value: function() {
        M2.l("".concat(this._n, ".onWorkerTimerDisabled, enable main thread timer and socket")), this._startMainThreadTimer(), this._startMainThreadSocket();
      } }, { key: "onCheckTimer", value: function() {
        this._checkCount += 1;
        var e3, t3 = F2(this._map);
        try {
          for (t3.s(); !(e3 = t3.n()).done; ) {
            var n3 = j2(e3.value, 2)[1];
            n3.onCheckTimer && n3.onCheckTimer(this._checkCount);
          }
        } catch (e4) {
          t3.e(e4);
        } finally {
          t3.f();
        }
      } }, { key: "_initReadyList", value: function() {
        var t3 = this;
        this._readyList = [this._map.get(1)], this._readyList.forEach(function(e3) {
          e3.ready(function() {
            return t3._onModuleReady();
          });
        });
      } }, { key: "_onModuleReady", value: function() {
        var e3, t3, n3 = true;
        this._readyList.forEach(function(e4) {
          e4.isReady() || (n3 = false);
        }), n3 && !this._isReady && (this._isReady = true, this._oEmitter.emit(h2.SDK_READY), e3 = Date.now() - this._startLoginTs, M2.w("SDK is ready. cost ".concat(e3, " ms")), this._startLoginTs = Date.now(), t3 = this._ssoLogForReady.getStartTs() + We2, this._ssoLogForReady.setMessage(e3).start(t3).end());
      } }, { key: "login", value: function() {
        0 === this._startLoginTs && (Be2(), this._startLoginTs = Date.now(), this._startTimer(), this._map.get(15).start(), this._ssoLogForReady = new P2("sdkReady"), this._reason = k2.LOGGING_IN);
      } }, { key: "onLoginFailed", value: function() {
        this._startLoginTs = 0;
      } }, { key: "getOEmitInst", value: function() {
        return null === this._oEmitter && (this._oEmitter = new wi(), e3 = this._oEmitter, Kn = e3, this._oEmitter._emit = this._oEmitter.emit, this._oEmitter.emit = (function(e4, t3) {
          var n3, o3, i3 = this;
          this._canIUseSignaling() && (e4 === h2.MESSAGE_RECEIVED && this.get(33).onNewMessageList(t3), e4 === h2.MESSAGE_MODIFIED) && this.get(33).onMessageModified(t3), e4 === h2.CONVERSATION_LIST_UPDATED || e4 === h2.FRIEND_LIST_UPDATED || e4 === h2.GROUP_LIST_UPDATED || e4 === h2.TOTAL_UNREAD_MESSAGE_COUNT_UPDATED ? false !== this._eventThrottling ? this._eventThrottleMap.has(e4) ? (n3 = Date.now()) - (o3 = this._eventThrottleMap.get(e4)).last <= 1e3 ? (-1 < o3.timeoutID && clearTimeout(o3.timeoutID), o3.timeoutID = setTimeout(function() {
            o3.last = Date.now(), i3._oEmitter._emit.apply(i3._oEmitter, [e4, { name: e4, data: i3._getEventData(e4) }]);
          }, 1e3)) : (o3.last = n3, this._oEmitter._emit.apply(this._oEmitter, [e4, { name: e4, data: this._getEventData(e4) }])) : (this._eventThrottleMap.set(e4, { last: Date.now(), timeoutID: -1 }), this._oEmitter._emit.apply(this._oEmitter, [e4, { name: e4, data: this._getEventData(e4) }])) : this._oEmitter._emit.apply(this._oEmitter, [e4, { name: e4, data: this._getEventData(e4) }]) : this._oEmitter._emit.apply(this._oEmitter, [e4, { name: e4, data: t3 }]);
        }).bind(this)), this._oEmitter;
        var e3;
      } }, { key: "_canIUseSignaling", value: function() {
        var e3 = this.get(33);
        return !!e3 && e3.canIUseSignaling();
      } }, { key: "_getEventData", value: function(e3) {
        return e3 === h2.CONVERSATION_LIST_UPDATED ? this._map.get(12).isPartialUpdatedConvs() ? this._map.get(11).getPartialUpdatedConvs() : this._map.get(11).getLocalConvList() : e3 === h2.FRIEND_LIST_UPDATED ? this._map.get(8).getLocalFriendList(false) : e3 === h2.GROUP_LIST_UPDATED ? this._map.get(7).getLocalGroupList() : e3 === h2.TOTAL_UNREAD_MESSAGE_COUNT_UPDATED ? this._map.get(11).getTotalUnreadCount() : e3 === h2.CONVERSATION_ID_LIST_UPDATED ? this._map.get(11).getUpdatedConvIDList() : void 0;
      } }, { key: "getIEmitInst", value: function() {
        return null === this._iEmitter && (this._iEmitter = new wi(), this._iEmitter._emit = this._iEmitter.emit, this._iEmitter.emit = (function(e3, t3) {
          e3 = m2(t3) && t3.data ? [e3, { name: e3, data: t3.data }] : [e3, { name: e3, data: t3 }];
          this._iEmitter._emit.apply(this._iEmitter, e3);
        }).bind(this)), this._iEmitter;
      } }, { key: "hasModule", value: function(e3) {
        return this._map.has(e3);
      } }, { key: "get", value: function(e3) {
        return this._map.get(e3);
      } }, { key: "canIUseModule", value: function(e3) {
        return !this._map.get(12).isUsingChatCore() || this._optionalModuleMap.has(e3);
      } }, { key: "canIUseInflate", value: function() {
        return !!this._map.get(37);
      } }, { key: "isReady", value: function() {
        return this._isReady;
      } }, { key: "isIntl", value: function() {
        return this.get(12).isIntl();
      } }, { key: "getNotReadyReason", value: function() {
        return this._reason;
      } }, { key: "setNotReadyReason", value: function(e3) {
        this._reason = e3;
      } }, { key: "getErrMsg", value: function(e3, t3, n3) {
        return this._map.get(32).get({ key: e3, replacement1: t3, replacement2: n3, isIntl: this.isIntl() });
      } }, { key: "warn", value: function(e3, t3, n3) {
        e3 = this.getErrMsg(e3, t3, n3);
        e3 && M2.w(e3);
      } }, { key: "onError", value: function(e3) {
        var t3 = "code:".concat(e3.code, " message:").concat(e3.message);
        M2.w("Oops! ".concat(t3)), new P2("error").setMessage(t3).setLevel("error").end(), this.getOEmitInst().emit(h2.ERROR, e3);
      } }, { key: "restartTimer", value: function() {
        M2.l("".concat(this._n, ".restartTimer")), this.stopTimer(), this._startTimer();
        var e3 = this.get(7);
        e3 && e3.restartPolling();
      } }, { key: "getTimerID", value: function() {
        var e3 = this._map.get(24);
        return e3.isWorkerEnabled() ? e3.getTimerID() : this._checkTimer;
      } }, { key: "getPollingTimerID", value: function(e3) {
        return this._map.get(7).getPollingTimerID(e3);
      } }, { key: "statTUIKeyFeatures", value: function(e3) {
        var t3 = e3.code, e3 = e3.msg, e3 = void 0 === e3 ? "" : e3, n3 = t3 + e3;
        this._codeMsgForTUIMap.has(n3) || (this._codeMsgForTUIMap.set(n3, 1), n3 = this.get(12).getUIPlatform(), new P2("tui_key_features").setCode(t3).setMessage(e3).setUIPlatform(n3).end());
      } }, { key: "reset", value: function() {
        M2.l("".concat(this._n, ".reset")), Be2();
        var e3, t3 = F2(this._map);
        try {
          for (t3.s(); !(e3 = t3.n()).done; ) {
            var n3 = j2(e3.value, 2)[1];
            n3.reset && n3.reset();
          }
        } catch (e4) {
          t3.e(e4);
        } finally {
          t3.f();
        }
        this._startLoginTs = 0, this._initReadyList(), this._isReady = false, this.stopTimer(), this._oEmitter.emit(h2.SDK_NOT_READY);
        var o3, i3 = F2(this._eventThrottleMap);
        try {
          for (i3.s(); !(o3 = i3.n()).done; ) {
            var a3 = j2(o3.value, 2)[1];
            -1 < a3.timeoutID && clearTimeout(a3.timeoutID);
          }
        } catch (e4) {
          i3.e(e4);
        } finally {
          i3.f();
        }
        this._eventThrottleMap.clear(), this._codeMsgForTUIMap.clear();
      } }]), gr = e2(function e3(t3) {
        p2(this, e3), this._funcMap = /* @__PURE__ */ new Map(), this._m = t3, this._n = "SafetyCallback", this._reportCount = 0;
      }, [{ key: "defense", value: function(e3, t3) {
        var n3 = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : void 0;
        if ("string" != typeof e3)
          return null;
        if (0 === e3.length)
          return null;
        if ("function" != typeof t3)
          return null;
        if (this._funcMap.has(e3) && this._funcMap.get(e3).has(t3))
          return this._funcMap.get(e3).get(t3);
        this._funcMap.has(e3) || this._funcMap.set(e3, /* @__PURE__ */ new Map());
        var o3 = null;
        return this._funcMap.get(e3).has(t3) ? o3 = this._funcMap.get(e3).get(t3) : (o3 = this._pack(e3, t3, n3), this._funcMap.get(e3).set(t3, o3)), o3;
      } }, { key: "defenseOnce", value: function(e3, t3) {
        return "function" != typeof t3 ? null : this._pack(e3, t3, 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : void 0);
      } }, { key: "find", value: function(e3, t3) {
        return "string" != typeof e3 || 0 === e3.length || "function" != typeof t3 ? null : this._funcMap.has(e3) && this._funcMap.get(e3).has(t3) ? this._funcMap.get(e3).get(t3) : (this._m.warn("ListenerFnNotFound", e3), null);
      } }, { key: "delete", value: function(e3, t3) {
        return "function" == typeof t3 && !!this._funcMap.has(e3) && !!this._funcMap.get(e3).has(t3) && (this._funcMap.get(e3).delete(t3), 0 === this._funcMap.get(e3).size && this._funcMap.delete(e3), true);
      } }, { key: "_pack", value: function(o3, e3, i3) {
        var a3 = this;
        return function() {
          try {
            e3.apply(i3, Array.from(arguments));
          } catch (e4) {
            var t3 = Object.values(h2).indexOf(o3), n3 = "CallbackError";
            -1 !== t3 && (t3 = Object.keys(h2)[t3], a3._m.warn(n3, t3, e4)), a3._reportCount < 5 && (new P2(n3).setMessage("eventName:".concat(o3)).setMoreMessage(e4.message).end(), a3._reportCount += 1);
          }
        };
      } }, { key: "destroy", value: function() {
        this._funcMap.clear();
      } }, { key: "reset", value: function() {
        M2.l("".concat(this._n, ".reset")), this._reportCount = 0;
      } }]), fr = e2(function e3(t3) {
        p2(this, e3);
        t3 = { SDKAppID: t3.SDKAppID, unlimitedAVChatRoom: t3.unlimitedAVChatRoom || false, scene: t3.scene || "", oversea: t3.oversea || false, instanceID: Vt2(), devMode: t3.devMode || false, testEnv: t3.testEnv || false, proxyServer: t3.proxyServer || void 0, fileUploadProxy: t3.fileUploadProxy || void 0, fileDownloadProxy: t3.fileDownloadProxy || t3.fileUploadProxy || void 0, eventThrottling: false !== t3.eventThrottling, partialUpdatedConversations: true === t3.partialUpdatedConversations, disableIndependentDomain: true === t3.disableIndependentDomain, modules: t3.modules || void 0 };
        this._m = new hr(t3), this._safetyCallbackFactory = new gr(this._m);
      }, [{ key: "onError", value: function(e3) {
        this._m.onError(e3);
      } }, { key: "login", value: function(e3) {
        return this._m.login(), this._get(1).login(e3);
      } }, { key: "logout", value: function() {
        var t3 = this;
        return this._get(1).logout().then(function(e3) {
          return t3._safetyCallbackFactory.reset(), t3._m.reset(), e3;
        });
      } }, { key: "getLoginUser", value: function() {
        return this._get(1).getLoginUser();
      } }, { key: "getServerTime", value: function() {
        return Ye2();
      } }, { key: "isReady", value: function() {
        return this._m.isReady();
      } }, { key: "isIntl", value: function() {
        return this._m.isIntl();
      } }, { key: "getNotReadyReason", value: function() {
        return this._m.getNotReadyReason();
      } }, { key: "getErrMsg", value: function(e3, t3, n3) {
        return this._m.getErrMsg(e3, t3, n3);
      } }, { key: "_get", value: function(e3) {
        return this._m.get(e3);
      } }, { key: "destroy", value: function() {
        var e3 = this, t3 = this._get(12), n3 = t3.getSDKAppID();
        return M2.w("destroy ".concat(n3, " ").concat(t3.getInstanceID())), this.logout().finally(function() {
          e3._safetyCallbackFactory.destroy(), e3._m.stopTimer(), e3._get(24).terminate(), e3._get(21).dealloc(), e3._m.getOEmitInst().emit(h2.SDK_DESTROY, { SDKAppID: n3 });
        });
      } }, { key: "on", value: function(e3, t3, n3) {
        M2.d("on", "eventName:".concat(e3)), this._m.getOEmitInst().on(e3, this._safetyCallbackFactory.defense(e3, t3, n3), n3);
      } }, { key: "once", value: function(e3, t3, n3) {
        M2.d("once", "eventName:".concat(e3)), this._m.getOEmitInst().once(e3, this._safetyCallbackFactory.defenseOnce(e3, t3, n3), n3 || this);
      } }, { key: "off", value: function(e3, t3, n3, o3) {
        M2.d("off", "eventName:".concat(e3));
        var i3 = this._safetyCallbackFactory.find(e3, t3);
        null !== i3 && (this._m.getOEmitInst().off(e3, i3, n3, o3), this._safetyCallbackFactory.delete(e3, t3));
      } }, { key: "registerPlugin", value: function(e3) {
        (N2(e3["tim-push"]) ? N2(e3["tim-offline-push-plugin"]) ? this._get(18) : this._get(28) : this._get(36)).registerPlugin(e3);
      } }, { key: "setLogLevel", value: function(e3) {
        var t3;
        e3 <= 0 && ((t3 = this.getErrMsg("TIM_ASCII_ART")) && formatAppLog("log", "at node_modules/@tencentcloud/chat/index.js:1", t3), (t3 = this.getErrMsg("API_REFER")) && (en() ? formatAppLog("log", "at node_modules/@tencentcloud/chat/index.js:1", "%c ".concat("IM SDK API ->", " %c"), "background:#ff9d00; padding:1px; border-radius:3px; color: #fff", "background:transparent", t3) : formatAppLog("log", "at node_modules/@tencentcloud/chat/index.js:1", "IM SDK API ->", t3)), (t3 = this.getErrMsg("DOCS_GUIDE")) && formatAppLog("log", "at node_modules/@tencentcloud/chat/index.js:1", t3), t3 = this.getErrMsg("IOS_WEBVIEW_WARNING"), be2) && t3 && formatAppLog("warn", "at node_modules/@tencentcloud/chat/index.js:1", t3), M2.setLevel(e3);
      } }, { key: "createTextMessage", value: function(e3) {
        return this._get(2).createTextMessage(e3);
      } }, { key: "createTextAtMessage", value: function(e3) {
        return this._get(2).createTextMessage(e3);
      } }, { key: "createImageMessage", value: function(e3) {
        return this._get(2).createImageMessage(e3);
      } }, { key: "createAudioMessage", value: function(e3) {
        return this._get(2).createAudioMessage(e3);
      } }, { key: "createVideoMessage", value: function(e3) {
        return this._get(2).createVideoMessage(e3);
      } }, { key: "createCustomMessage", value: function(e3) {
        return this._get(2).createCustomMessage(e3);
      } }, { key: "createFaceMessage", value: function(e3) {
        return this._get(2).createFaceMessage(e3);
      } }, { key: "createFileMessage", value: function(e3) {
        return this._get(2).createFileMessage(e3);
      } }, { key: "createLocationMessage", value: function(e3) {
        return this._get(2).createLocationMessage(e3);
      } }, { key: "createMergerMessage", value: function(e3) {
        return this._get(2).createMergerMessage(e3);
      } }, { key: "downloadMergerMessage", value: function(e3) {
        return e3.type !== R2.MSG_MERGER ? E2({ code: k2.MSG_MERGER_TYPE_INVALID }) : S2(e3.payload.downloadKey) ? E2({ code: k2.MSG_MERGER_KEY_INVALID }) : this._get(2).downloadMergerMessage(e3).catch(function(e4) {
          return E2({ code: k2.MSG_MERGER_DOWNLOAD_FAIL });
        });
      } }, { key: "createForwardMessage", value: function(e3) {
        return this._get(2).createForwardMessage(e3);
      } }, { key: "sendMessage", value: function(e3, t3) {
        return e3 instanceof So ? this._get(2).sendMessageInstance(e3, t3) : E2({ code: k2.MSG_INSTANCE_REQUIRED });
      } }, { key: "callExperimentalAPI", value: function(e3, t3) {
        return "sendComboMessage" === e3 ? this._get(31).sendMessage(t3) : "handleGroupInvitation" === e3 ? this._get(7).handleGroupInvitation(t3) : "isCommercialAbilityEnabled" === e3 ? this._get(27).isFeatureEnabled(t3) : "isFeatureEnabledForStat" === e3 ? this._get(27).isFeatureEnabledForStat(t3) : "isIntl" === e3 ? this.isIntl() : "sendTRTCCustomData" === e3 || "sendRoomCustomData" === e3 ? this._get(30).sendTRTCCustomData(t3) : "getTimerID" === e3 ? this._m.getTimerID() : "getPollingTimerID" === e3 ? this._m.getPollingTimerID(t3) : "setApplicationID" === e3 ? (this._get(12).setApplicationID(t3), void this._get(20).updateProtocolConfig()) : "getServerConfig" === e3 ? this._get(23).getServerConfig(t3) : "canIUseModule" === e3 ? this._m.canIUseModule(t3) : "startMessageLongPolling" === e3 ? this._get(7).startMessageLongPolling(t3) : "stopMessageLongPolling" === e3 ? this._get(7).stopMessageLongPolling(t3) : "disableMessagePullOnInvite" === e3 ? this._get(11).disableMsgPullOnInvite(t3) : "clearLocalMessage" === e3 ? this._get(11).clearMemMsg(t3, false) : "setCustomLoginInfo" === e3 ? this._get(12).setCustomLoginInfo(t3) : "statTUIKeyFeatures" === e3 ? this._m.statTUIKeyFeatures(t3) : "getGroupReceiptsByUsers" === e3 ? this._get(7).getGroupReceiptsByUsers(t3) : E2({ code: k2.INVALID_OPERATION });
      } }, { key: "revokeMessage", value: function(e3) {
        return this._get(2).revokeMessage(e3);
      } }, { key: "resendMessage", value: function(e3, t3) {
        return e3 instanceof So ? this._get(2).resendMessage(e3, t3) : E2({ code: k2.MSG_INSTANCE_REQUIRED });
      } }, { key: "deleteMessage", value: function(e3) {
        return this._get(2).deleteMessage(e3);
      } }, { key: "translateText", value: function(e3) {
        return this._get(2).translateText(e3);
      } }, { key: "convertVoiceToText", value: function(e3) {
        return this._get(2).convertVoiceToText(e3);
      } }, { key: "setMessageExtensions", value: function(e3, t3) {
        return this._get(3).setMessageExtensions(e3, t3);
      } }, { key: "getMessageExtensions", value: function(e3) {
        return this._get(3).getMessageExtensions(e3);
      } }, { key: "deleteMessageExtensions", value: function(e3, t3) {
        return this._get(3).deleteMessageExtensions(e3, t3);
      } }, { key: "addMessageReaction", value: function(e3, t3) {
        return this._get(34).addMessageReaction(e3, t3);
      } }, { key: "removeMessageReaction", value: function(e3, t3) {
        return this._get(34).removeMessageReaction(e3, t3);
      } }, { key: "getMessageReactions", value: function(e3) {
        return this._get(34).getMessageReactions(e3);
      } }, { key: "getAllUserListOfMessageReaction", value: function(e3) {
        return this._get(34).getAllUserListOfMessageReaction(e3);
      } }, { key: "modifyMessage", value: function(e3) {
        return this._get(2).modifyRemoteMessage(e3);
      } }, { key: "getMessageList", value: function(e3) {
        return this._get(11).getMessageList(e3);
      } }, { key: "getMessageListHopping", value: function(e3) {
        return this._get(11).getMessageListHopping(e3);
      } }, { key: "sendMessageReadReceipt", value: function(e3) {
        return this._get(11).sendReadReceipt(e3);
      } }, { key: "getMessageReadReceiptList", value: function(e3) {
        return this._get(11).getReadReceiptList(e3);
      } }, { key: "getGroupMessageReadMemberList", value: function(e3) {
        var t3 = this._get(7);
        return t3 ? t3.getReadReceiptDetail(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "findMessage", value: function(e3) {
        return this._get(11).findMessage(e3);
      } }, { key: "setMessageRead", value: function(e3) {
        return this._get(11).setMessageRead(e3);
      } }, { key: "getConversationList", value: function(e3) {
        return this._get(11).getConvList(e3);
      } }, { key: "getConversationProfile", value: function(e3) {
        return this._get(11).getConversationProfile(e3);
      } }, { key: "deleteConversation", value: function(e3) {
        return this._get(11).deleteConversation(e3);
      } }, { key: "setConversationDraft", value: function(e3) {
        return this._get(11).setConvDraft(e3);
      } }, { key: "clearHistoryMessage", value: function(e3) {
        return this._get(11).clearHistoryMessage(e3);
      } }, { key: "pinConversation", value: function(e3) {
        return this._get(11).pinConversation(e3);
      } }, { key: "setAllMessageRead", value: function(e3) {
        return this._get(11).setAllMessageRead(e3);
      } }, { key: "setMessageRemindType", value: function(e3) {
        return this._get(11).setMessageRemindType(e3);
      } }, { key: "setAllReceiveMessageOpt", value: function(e3) {
        return this._get(11).setAllRcvMsgOpt(e3);
      } }, { key: "getAllReceiveMessageOpt", value: function() {
        return this._get(11).getAllRcvMsgOpt();
      } }, { key: "getTotalUnreadMessageCount", value: function() {
        return this._get(11).getTotalUnreadCount();
      } }, { key: "setConversationCustomData", value: function(e3) {
        return this._get(11).setConvCustomData(e3);
      } }, { key: "markConversation", value: function(e3) {
        return this._get(11).markConv(e3);
      } }, { key: "getConversationGroupList", value: function() {
        return this._get(11).getConvGroupList();
      } }, { key: "createConversationGroup", value: function(e3) {
        return this._get(11).createConvGroup(e3);
      } }, { key: "deleteConversationGroup", value: function(e3) {
        return this._get(11).deleteConvGroup(e3);
      } }, { key: "renameConversationGroup", value: function(e3) {
        return this._get(11).renameConvGroup(e3);
      } }, { key: "addConversationsToGroup", value: function(e3) {
        return this._get(11).addConvsToGroup(e3);
      } }, { key: "deleteConversationsFromGroup", value: function(e3) {
        return this._get(11).deleteConvsFromGroup(e3);
      } }, { key: "searchCloudMessages", value: function(e3) {
        var t3 = this._get(38);
        return t3 ? t3.searchCloudMessages(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "searchCloudUsers", value: function(e3) {
        var t3 = this._get(38);
        return t3 ? t3.searchCloudUsers(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "searchCloudGroups", value: function(e3) {
        var t3 = this._get(38);
        return t3 ? t3.searchCloudGroups(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "searchCloudGroupMembers", value: function(e3) {
        var t3 = this._get(38);
        return t3 ? t3.searchCloudGroupMembers(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "getMyProfile", value: function() {
        return this._get(4).getMyProfile();
      } }, { key: "getUserProfile", value: function(e3) {
        return this._get(4).getUserProfile(e3);
      } }, { key: "updateMyProfile", value: function(e3) {
        return this._get(4).updateMyProfile(e3);
      } }, { key: "getBlacklist", value: function() {
        return this._get(4).getLocalBlacklist();
      } }, { key: "addToBlacklist", value: function(e3) {
        return this._get(4).addBlacklist(e3);
      } }, { key: "removeFromBlacklist", value: function(e3) {
        return this._get(4).deleteBlacklist(e3);
      } }, { key: "setSelfStatus", value: function(e3) {
        return this._get(4).setSelfStatus(e3);
      } }, { key: "getUserStatus", value: function(e3) {
        return this._get(4).getUserStatus(e3);
      } }, { key: "subscribeUserStatus", value: function(e3) {
        return this._get(4).subscribeUserStatus(e3);
      } }, { key: "unsubscribeUserStatus", value: function(e3) {
        return this._get(4).unsubscribeUserStatus(e3);
      } }, { key: "getFriendList", value: function() {
        var e3 = this._get(8);
        return e3 ? e3.getLocalFriendList() : E2({ code: k2.NO_MODULE });
      } }, { key: "addFriend", value: function(e3) {
        var t3 = this._get(8);
        return t3 ? t3.addFriend(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "deleteFriend", value: function(e3) {
        var t3 = this._get(8);
        return t3 ? t3.deleteFriend(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "checkFriend", value: function(e3) {
        var t3 = this._get(8);
        return t3 ? t3.checkFriend(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "getFriendProfile", value: function(e3) {
        var t3 = this._get(8);
        return t3 ? t3.getFriendProfile(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "updateFriend", value: function(e3) {
        var t3 = this._get(8);
        return t3 ? t3.updateFriend(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "getFriendApplicationList", value: function() {
        var e3 = this._get(8);
        return e3 ? e3.getLocalFriendApplicationList() : E2({ code: k2.NO_MODULE });
      } }, { key: "acceptFriendApplication", value: function(e3) {
        var t3 = this._get(8);
        return t3 ? t3.acceptFriendApplication(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "refuseFriendApplication", value: function(e3) {
        var t3 = this._get(8);
        return t3 ? t3.refuseFriendApplication(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "deleteFriendApplication", value: function(e3) {
        var t3 = this._get(8);
        return t3 ? t3.deleteFriendApplication(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "setFriendApplicationRead", value: function() {
        var e3 = this._get(8);
        return e3 ? e3.setFriendApplicationRead() : E2({ code: k2.NO_MODULE });
      } }, { key: "getFriendGroupList", value: function() {
        var e3 = this._get(8);
        return e3 ? e3.getLocalFriendGroupList() : E2({ code: k2.NO_MODULE });
      } }, { key: "createFriendGroup", value: function(e3) {
        var t3 = this._get(8);
        return t3 ? t3.createFriendGroup(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "deleteFriendGroup", value: function(e3) {
        var t3 = this._get(8);
        return t3 ? t3.deleteFriendGroup(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "addToFriendGroup", value: function(e3) {
        var t3 = this._get(8);
        return t3 ? t3.addToFriendGroup(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "removeFromFriendGroup", value: function(e3) {
        var t3 = this._get(8);
        return t3 ? t3.removeFromFriendGroup(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "renameFriendGroup", value: function(e3) {
        var t3 = this._get(8);
        return t3 ? t3.renameFriendGroup(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "followUser", value: function(e3) {
        var t3 = this._get(35);
        return t3 ? t3.followUser(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "unfollowUser", value: function(e3) {
        var t3 = this._get(35);
        return t3 ? t3.unfollowUser(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "getMyFollowersList", value: function(e3) {
        var t3 = this._get(35);
        return t3 ? t3.getMyFollowersList(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "getMyFollowingList", value: function(e3) {
        var t3 = this._get(35);
        return t3 ? t3.getMyFollowingList(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "getMutualFollowersList", value: function(e3) {
        var t3 = this._get(35);
        return t3 ? t3.getMutualFollowersList(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "getUserFollowInfo", value: function(e3) {
        var t3 = this._get(35);
        return t3 ? t3.getUserFollowInfo(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "checkFollowType", value: function(e3) {
        var t3 = this._get(35);
        return t3 ? t3.checkFollowType(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "getGroupList", value: function() {
        var e3 = this._get(7);
        return e3 ? e3.getGroupList() : E2({ code: k2.NO_MODULE });
      } }, { key: "getGroupProfile", value: function(e3) {
        var t3 = this._get(7);
        return t3 ? t3.getGroupProfile(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "createGroup", value: function(e3) {
        var t3 = this._get(7);
        return t3 ? t3.createGroup(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "dismissGroup", value: function(e3) {
        var t3 = this._get(7);
        return t3 ? t3.dismissGroup(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "updateGroupProfile", value: function(e3) {
        var t3 = this._get(7);
        return t3 ? t3.updateGroupProfile(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "joinGroup", value: function(e3) {
        var t3 = this._get(7);
        return t3 ? t3.joinGroup(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "quitGroup", value: function(e3) {
        var t3 = this._get(7);
        return t3 ? t3.quitGroup(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "searchGroupByID", value: function(e3) {
        var t3 = this._get(7);
        return t3 ? t3.searchGroupByID(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "getGroupOnlineMemberCount", value: function(e3) {
        var t3 = this._get(7);
        return t3 ? t3.getGroupOnlineMemberCount(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "changeGroupOwner", value: function(e3) {
        var t3 = this._get(7);
        return t3 ? t3.changeGroupOwner(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "getGroupApplicationList", value: function() {
        var e3 = this._get(7);
        return e3 ? e3.getGroupApplicationList() : E2({ code: k2.NO_MODULE });
      } }, { key: "handleGroupApplication", value: function(e3) {
        var t3 = this._get(7);
        return t3 ? t3.handleGroupApplication(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "initGroupAttributes", value: function(e3) {
        var t3 = this._get(7);
        return t3 ? t3.initGroupAttributes(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "setGroupAttributes", value: function(e3) {
        var t3 = this._get(7);
        return t3 ? t3.setGroupAttributes(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "deleteGroupAttributes", value: function(e3) {
        var t3 = this._get(7);
        return t3 ? t3.deleteGroupAttributes(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "getGroupAttributes", value: function(e3) {
        var t3 = this._get(7);
        return t3 ? t3.getGroupAttributes(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "setGroupCounters", value: function(e3) {
        var t3 = this._get(7);
        return t3 ? t3.setGroupCounters(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "increaseGroupCounter", value: function(e3) {
        var t3 = this._get(7);
        return t3 ? t3.increaseGroupCounter(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "decreaseGroupCounter", value: function(e3) {
        var t3 = this._get(7);
        return t3 ? t3.decreaseGroupCounter(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "getGroupCounters", value: function(e3) {
        var t3 = this._get(7);
        return t3 ? t3.getGroupCounters(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "getGroupMemberList", value: function(e3) {
        var t3 = this._get(7);
        return t3 ? t3.getGroupMemberList(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "getGroupMemberProfile", value: function(e3) {
        var t3 = this._get(7);
        return t3 ? t3.getGroupMemberProfile(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "addGroupMember", value: function(e3) {
        var t3 = this._get(7);
        return t3 ? t3.addGroupMember(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "deleteGroupMember", value: function(e3) {
        var t3 = this._get(7);
        return t3 ? t3.deleteGroupMember(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "setGroupMemberMuteTime", value: function(e3) {
        var t3 = this._get(7);
        return t3 ? t3.setGroupMemberMuteTime(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "setGroupMemberRole", value: function(e3) {
        var t3 = this._get(7);
        return t3 ? t3.setGroupMemberRole(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "setGroupMemberNameCard", value: function(e3) {
        var t3 = this._get(7);
        return t3 ? t3.setGroupMemberNameCard(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "setGroupMemberCustomField", value: function(e3) {
        var t3 = this._get(7);
        return t3 ? t3.setGroupMemberCustomField(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "markGroupMemberList", value: function(e3) {
        var t3 = this._get(7);
        return t3 ? t3.markGroupMemberList(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "getJoinedCommunityList", value: function() {
        return this._get(10).getJoinedCommunityList();
      } }, { key: "createTopicInCommunity", value: function(e3) {
        return this._get(10).createTopicInCommunity(e3);
      } }, { key: "deleteTopicFromCommunity", value: function(e3) {
        return this._get(10).deleteTopicFromCommunity(e3);
      } }, { key: "updateTopicProfile", value: function(e3) {
        return this._get(10).updateTopicProfile(e3);
      } }, { key: "getTopicList", value: function(e3) {
        return this._get(10).getTopicList(e3);
      } }, { key: "addSignalingListener", value: function(e3, t3, n3) {
        var o3 = this._get(33);
        o3 && o3.addSignalingListener(e3, this._safetyCallbackFactory.defense(e3, t3, n3), n3);
      } }, { key: "removeSignalingListener", value: function(e3, t3, n3) {
        var o3, i3 = this._safetyCallbackFactory.find(e3, t3);
        null !== i3 && (o3 = this._get(33)) && (o3.removeSignalingListener(e3, i3, n3), this._safetyCallbackFactory.delete(e3, t3));
      } }, { key: "invite", value: function(e3) {
        var t3 = this._get(33);
        return t3 ? t3.invite(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "inviteSync", value: function(e3, t3, n3) {
        var o3 = this._get(33);
        return o3 ? o3.inviteSync(e3, t3, n3) : "";
      } }, { key: "inviteInGroup", value: function(e3) {
        var t3 = this._get(33);
        return t3 ? t3.invite(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "inviteInGroupSync", value: function(e3, t3, n3) {
        var o3 = this._get(33);
        return o3 ? o3.inviteSync(e3, t3, n3) : "";
      } }, { key: "cancel", value: function(e3) {
        var t3 = this._get(33);
        return t3 ? t3.cancel(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "accept", value: function(e3) {
        var t3 = this._get(33);
        return t3 ? t3.accept(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "reject", value: function(e3) {
        var t3 = this._get(33);
        return t3 ? t3.reject(e3) : E2({ code: k2.NO_MODULE });
      } }, { key: "getSignalingInfo", value: function(e3) {
        var t3 = this._get(33);
        return t3 ? t3.getSignalingInfo(e3) : null;
      } }, { key: "modifyInvitation", value: function(e3) {
        var t3 = this._get(33);
        return t3 ? t3.modifyInvitation(e3) : E2({ code: k2.NO_MODULE });
      } }]), mr = { login: 1, logout: 1, getLoginUser: 1, destroy: 1, on: 1, off: 1, ready: 1, setLogLevel: 1, joinGroup: 1, quitGroup: 1, registerPlugin: 1, getGroupOnlineMemberCount: 1, isReady: 1, addSignalingListener: 1, removeSignalingListener: 1, callExperimentalAPI: 1 };
      function vr(e3) {
        return p2(this, vr), (e3 = i2(this, vr, [e3]))._n = "CSModule", e3;
      }
      var Ir = {}, Vn = {};
      return Vn.create = function(e3) {
        var t3 = "TencentCloudChat.create", n3 = 0, o3 = e3.SDKAppID;
        if (A2(o3))
          n3 = o3;
        else if (n3 = parseInt(o3), isNaN(o3))
          return M2.e("".concat(t3, " failed. Failed to parse the SDKAppID, please check the arguments")), null;
        if (n3 && Ir[n3])
          return Ir[n3];
        M2.l("".concat(t3));
        var s3, i3, o3 = new fr(y2(y2({}, e3), {}, { SDKAppID: n3 })), e3 = (o3.on(h2.SDK_DESTROY, function(e4) {
          Ir[e4.data.SDKAppID] = null, delete Ir[e4.data.SDKAppID];
        }), s3 = o3, i3 = /* @__PURE__ */ Object.create(null), Object.keys(Hn).forEach(function(a3) {
          var t4;
          s3[a3] && (t4 = new Q2(), i3[a3] = function() {
            var e4 = Array.from(arguments);
            return t4.use(function(e5, t5) {
              i4 = a3;
              var n4, o4, i4 = !(!(n4 = s3).isReady() && 1 !== mr[i4]) || (o4 = { code: o4 = n4.getNotReadyReason(), message: "".concat(n4.getErrMsg(o4), " | ").concat(i4, " | ").concat(n4.getErrMsg(k2.SDK_IS_NOT_READY)) }, n4.onError(o4), o4);
              return true === i4 ? t5() : E2(i4);
            }).use(function(e5, t5) {
              if (true === function(n4, o4, i4) {
                if (void 0 === o4)
                  return true;
                var a4 = true;
                if (m2(o4))
                  Object.keys(o4).forEach(function(e7) {
                    var t6 = 1 === n4.length ? n4[0][e7] : void 0;
                    a4 = !!rn(t6, o4[e7], i4, e7) && a4;
                  });
                else if (O2(o4))
                  for (var e6 = 0; e6 < o4.length; e6++)
                    a4 = !!rn(n4[e6], o4[e6], i4, o4[e6].name) && a4;
                if (a4)
                  return a4;
                throw new Error("Params validate failed.");
              }(e5, Bn[a3], a3))
                return t5();
            }).use(function(e5, t5) {
              return s3[a3].apply(s3, e5);
            }), t4.run(e4);
          });
        }), i3);
        return Ir[n3] = e3, Bn.hookGetAPITips(o3.getErrMsg.bind(o3)), M2.l("".concat(t3, " ok")), e3;
      }, Vn.TYPES = R2, Vn.EVENT = h2, Vn.TSignaling = _2, Vn.VERSION = "3.5.5", M2.l("TencentCloudChat.VERSION:".concat(Vn.VERSION)), Vn;
    });
  })(chat);
  var chatExports = chat.exports;
  const e$1 = /* @__PURE__ */ getDefaultExportFromCjs(chatExports);
  var timUploadPlugin = { exports: {} };
  (function(module, exports) {
    !function(e2, t2) {
      module.exports = t2();
    }(commonjsGlobal, function() {
      function e2(e3, t3) {
        var o3 = Object.keys(e3);
        if (Object.getOwnPropertySymbols) {
          var n3 = Object.getOwnPropertySymbols(e3);
          t3 && (n3 = n3.filter(function(t4) {
            return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
          })), o3.push.apply(o3, n3);
        }
        return o3;
      }
      function t2(t3) {
        for (var o3 = 1; o3 < arguments.length; o3++) {
          var n3 = null != arguments[o3] ? arguments[o3] : {};
          o3 % 2 ? e2(Object(n3), true).forEach(function(e3) {
            s2(t3, e3, n3[e3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t3, Object.getOwnPropertyDescriptors(n3)) : e2(Object(n3)).forEach(function(e3) {
            Object.defineProperty(t3, e3, Object.getOwnPropertyDescriptor(n3, e3));
          });
        }
        return t3;
      }
      function o2(e3) {
        return (o2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
          return typeof e4;
        } : function(e4) {
          return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
        })(e3);
      }
      function n2(e3, t3) {
        if (!(e3 instanceof t3))
          throw new TypeError("Cannot call a class as a function");
      }
      function r2(e3, t3) {
        for (var o3 = 0; o3 < t3.length; o3++) {
          var n3 = t3[o3];
          n3.enumerable = n3.enumerable || false, n3.configurable = true, "value" in n3 && (n3.writable = true), Object.defineProperty(e3, n3.key, n3);
        }
      }
      function a2(e3, t3, o3) {
        return t3 && r2(e3.prototype, t3), o3 && r2(e3, o3), Object.defineProperty(e3, "prototype", { writable: false }), e3;
      }
      function s2(e3, t3, o3) {
        return t3 in e3 ? Object.defineProperty(e3, t3, { value: o3, enumerable: true, configurable: true, writable: true }) : e3[t3] = o3, e3;
      }
      function i2(e3, t3) {
        if (null == e3)
          return {};
        var o3, n3, r3 = function(e4, t4) {
          if (null == e4)
            return {};
          var o4, n4, r4 = {}, a4 = Object.keys(e4);
          for (n4 = 0; n4 < a4.length; n4++)
            o4 = a4[n4], t4.indexOf(o4) >= 0 || (r4[o4] = e4[o4]);
          return r4;
        }(e3, t3);
        if (Object.getOwnPropertySymbols) {
          var a3 = Object.getOwnPropertySymbols(e3);
          for (n3 = 0; n3 < a3.length; n3++)
            o3 = a3[n3], t3.indexOf(o3) >= 0 || Object.prototype.propertyIsEnumerable.call(e3, o3) && (r3[o3] = e3[o3]);
        }
        return r3;
      }
      var u2 = "undefined" != typeof commonjsGlobal ? commonjsGlobal : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, l2 = "undefined" != typeof wx && "function" == typeof wx.getSystemInfoSync && Boolean(wx.getSystemInfoSync().fontSizeSetting), f2 = "undefined" != typeof qq && "function" == typeof qq.getSystemInfoSync && Boolean(qq.getSystemInfoSync().fontSizeSetting), c2 = "undefined" != typeof tt && "function" == typeof tt.getSystemInfoSync && Boolean(tt.getSystemInfoSync().fontSizeSetting), d2 = "undefined" != typeof swan && "function" == typeof swan.getSystemInfoSync && Boolean(swan.getSystemInfoSync().fontSizeSetting), p2 = "undefined" != typeof my && "function" == typeof my.getSystemInfoSync && Boolean(my.getSystemInfoSync().fontSizeSetting), y2 = "undefined" != typeof uni && "undefined" == typeof window && "function" == typeof requireNativePlugin, h2 = y2 && "ios" === uni.getDeviceInfo().platform.toLocaleLowerCase(), g2 = (y2 && uni.getDeviceInfo().platform.toLocaleLowerCase(), l2 || f2 || c2 || d2 || p2 || y2), m2 = void 0 !== u2 && (void 0 !== u2.nativeModuleProxy || void 0 !== u2.ReactNative), v2 = f2 ? qq : c2 ? tt : d2 ? swan : p2 ? my : l2 ? wx : y2 ? uni : {}, b2 = function(e3) {
        if ("object" !== o2(e3) || null === e3)
          return false;
        var t3 = Object.getPrototypeOf(e3);
        if (null === t3)
          return true;
        for (var n3 = t3; null !== Object.getPrototypeOf(n3); )
          n3 = Object.getPrototypeOf(n3);
        return t3 === n3;
      };
      function w2(e3) {
        if (null == e3)
          return true;
        if ("boolean" == typeof e3)
          return false;
        if ("number" == typeof e3)
          return 0 === e3;
        if ("string" == typeof e3)
          return 0 === e3.length;
        if ("function" == typeof e3)
          return 0 === e3.length;
        if (Array.isArray(e3))
          return 0 === e3.length;
        if (e3 instanceof Error)
          return "" === e3.message;
        if (b2(e3)) {
          for (var t3 in e3)
            if (Object.prototype.hasOwnProperty.call(e3, t3))
              return false;
          return true;
        }
        return false;
      }
      var O2 = function() {
        function e3() {
          n2(this, e3), this._n = "WebRequest";
        }
        return a2(e3, [{ key: "request", value: function(e4, o3) {
          var n3 = this, r3 = "".concat(this._n, ".request"), a3 = e4.downloadUrl || "", s3 = (e4.method || "PUT").toUpperCase(), i3 = e4.url;
          if (formatAppLog("log", "at node_modules/tim-upload-plugin/index.js:1", "%c tim-upload-plugin %c", "background:#0abf5b; padding:1px; border-radius:3px; color: #fff", "background:transparent", "".concat(r3, " URL:").concat(i3)), e4.qs) {
            var u3 = function(e5) {
              var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "&", o4 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "=";
              return w2(e5) ? "" : b2(e5) ? Object.keys(e5).map(function(n4) {
                var r4 = encodeURIComponent(n4) + o4;
                return Array.isArray(e5[n4]) ? e5[n4].map(function(e6) {
                  return r4 + encodeURIComponent(e6);
                }).join(t3) : r4 + encodeURIComponent(e5[n4]);
              }).filter(Boolean).join(t3) : void 0;
            }(e4.qs);
            u3 && (i3 += "".concat(-1 === i3.indexOf("?") ? "?" : "&").concat(u3));
          }
          var l3 = new XMLHttpRequest();
          l3.open(s3, i3, true), l3.responseType = e4.dataType || "text";
          var f3 = e4.headers || {};
          if (e4.uploadByIP && (f3 = t2(t2({}, f3), {}, { host: e4.uploadIP })), !w2(f3))
            for (var c3 in f3)
              f3.hasOwnProperty(c3) && "content-length" !== c3.toLowerCase() && "user-agent" !== c3.toLowerCase() && "origin" !== c3.toLowerCase() && "host" !== c3.toLowerCase() && l3.setRequestHeader(c3, f3[c3]);
          return l3.onload = function() {
            if (200 === l3.status)
              o3(null, n3._xhrRes(l3, n3._xhrBody(l3, a3, e4.uploadByIP && e4.uploadIP), f3));
            else {
              if (e4.uploadIP && -1 === e4.url.indexOf(e4.uploadIP))
                return e4.url = function(e5, t4) {
                  return e5.replace(/^http(s)?:\/\/(.*?)\//, "https://".concat(t4, "/"));
                }(e4.url, e4.uploadIP), e4.uploadByIP = true, n3.request(e4, o3);
              var t3 = { code: l3.status, message: JSON.stringify(l3.responseText) };
              o3(t3, n3._xhrRes(l3, n3._xhrBody(l3, a3, e4.uploadByIP && e4.uploadIP), f3));
            }
          }, l3.onerror = function(t3) {
            var r4 = n3._xhrBody(l3, a3, e4.uploadByIP && e4.uploadIP), s4 = { code: l3.status, message: JSON.stringify(l3.responseText) };
            r4 || l3.statusText || 0 !== l3.status || (t3.message = "CORS blocked or network error"), o3(s4, n3._xhrRes(l3, r4)), s4 = null;
          }, e4.onProgress && l3.upload && (l3.upload.onprogress = function(t3) {
            var o4 = t3.total, n4 = t3.loaded, r4 = Math.floor(100 * n4 / o4);
            e4.onProgress({ total: o4, loaded: n4, percent: (r4 >= 100 ? 100 : r4) / 100 });
          }), l3.send(e4.resources), l3;
        } }, { key: "_xhrRes", value: function(e4, t3) {
          var o3 = {};
          return e4.getAllResponseHeaders().trim().split("\n").forEach(function(e5) {
            if (e5) {
              var t4 = e5.indexOf(":"), n3 = e5.substr(0, t4).trim().toLowerCase(), r3 = e5.substr(t4 + 1).trim();
              o3[n3] = r3;
            }
          }), { statusCode: e4.status, statusMessage: e4.statusText, headers: o3, data: t3 };
        } }, { key: "_xhrBody", value: function(e4, t3, o3) {
          return 200 === e4.status && t3 ? { location: t3, uploadIP: o3 } : { response: e4.responseText, uploadIP: o3 };
        } }]), e3;
      }(), S2 = ["unknown", "image", "video", "audio", "log"], P2 = ["name"], I2 = function() {
        function e3() {
          n2(this, e3);
        }
        return a2(e3, [{ key: "request", value: function(e4, o3) {
          var n3 = this, r3 = e4.resources, a3 = void 0 === r3 ? "" : r3, s3 = e4.headers, u3 = void 0 === s3 ? {} : s3, l3 = e4.url, f3 = e4.downloadUrl, c3 = void 0 === f3 ? "" : f3, d3 = l3, y3 = null, g3 = c3.match(/^(https?:\/\/[^/]+\/)([^/]*\/?)(.*)$/), m3 = decodeURIComponent(g3[3]), b3 = m3.indexOf("?") > -1 ? m3.split("?")[0] : m3, w3 = { key: e4.fileKey ? e4.fileKey : b3, success_action_status: 200, "Content-Type": "" }, O3 = {};
          if (h2) {
            var I3 = l3.split("?sign=");
            if (I3.length > 1) {
              var C3 = I3[1];
              d3 = "".concat(I3[0], "?sign=").concat(encodeURIComponent("".concat(C3))), O3.sign = decodeURIComponent(C3), O3.signature = decodeURIComponent(C3);
            }
          }
          var k2 = { url: d3, header: u3, name: "file", filePath: a3, formData: t2(t2({}, w3), O3), timeout: e4.timeout || 3e5 };
          if (p2) {
            var x2 = k2;
            x2.name;
            k2 = t2(t2({}, i2(x2, P2)), {}, { fileName: "file", fileType: S2[e4.fileType] });
          }
          return (y3 = v2.uploadFile(t2(t2({}, k2), {}, { success: function(e5) {
            n3._handleResponse({ response: e5, downloadUrl: c3, callback: o3 });
          }, fail: function(e5) {
            n3._handleResponse({ response: e5, downloadUrl: c3, callback: o3 });
          } }))).onProgressUpdate && y3.onProgressUpdate(function(t3) {
            e4.onProgress && e4.onProgress({ total: t3.totalBytesExpectedToSend, loaded: t3.totalBytesSent, percent: Math.floor(t3.progress) / 100 });
          }), y3;
        } }, { key: "_handleResponse", value: function(e4) {
          var o3 = e4.downloadUrl, n3 = e4.response, r3 = e4.callback, a3 = n3.header, s3 = {};
          if (a3)
            for (var i3 in a3)
              a3.hasOwnProperty(i3) && (s3[i3.toLowerCase()] = a3[i3]);
          var u3 = +n3.statusCode;
          200 === u3 ? r3(null, { statusCode: u3, headers: s3, data: t2(t2({}, n3.data), {}, { location: o3 }) }) : r3({ code: u3, message: JSON.stringify(n3.data) }, { statusCode: u3, headers: s3, data: void 0 });
        } }]), e3;
      }(), C2 = function() {
        function e3() {
          n2(this, e3);
        }
        return a2(e3, [{ key: "request", value: function(e4, t3) {
          var o3 = this, n3 = e4.resources, r3 = void 0 === n3 ? "" : n3, a3 = e4.fileKey, s3 = void 0 === a3 ? "" : a3, i3 = e4.url, u3 = e4.downloadUrl, l3 = void 0 === u3 ? "" : u3, f3 = new FormData();
          f3.append("key", s3), f3.append("success_action_status", 200), f3.append("file", { uri: r3, type: "application/octet-stream", name: "uploaded_file" }), fetch(i3, { method: "POST", headers: { "Content-Type": "multipart/form-data" }, body: f3 }).then(function(e5) {
            o3._handleResponse({ response: e5, downloadUrl: l3, callback: t3 });
          }).catch(function(e5) {
            o3._handleResponse({ response: e5, downloadUrl: l3, callback: t3 });
          });
        } }, { key: "_handleResponse", value: function(e4) {
          var t3 = e4.downloadUrl, o3 = e4.response, n3 = e4.callback, r3 = o3.headers, a3 = o3.status, s3 = r3 && r3.map || {};
          200 === a3 ? n3(null, { statusCode: 200, headers: s3, data: { location: t3 } }) : n3({ code: a3, message: JSON.stringify(o3) }, { statusCode: a3, headers: s3, data: void 0 });
        } }]), e3;
      }();
      return function() {
        function e3() {
          n2(this, e3), this.retry = 1, this.tryCount = 0, this.systemClockOffset = 0, this.httpRequest = g2 ? new I2() : m2 ? new C2() : new O2(), formatAppLog("log", "at node_modules/tim-upload-plugin/index.js:1", "TIMUploadPlugin.VERSION: ".concat("1.4.2"));
        }
        return a2(e3, [{ key: "uploadFile", value: function(e4, t3) {
          var o3 = this;
          return this.httpRequest.request(e4, function(n3, r3) {
            n3 && o3.tryCount < o3.retry && o3.allowRetry(n3) ? (o3.tryCount++, o3.uploadFile(e4, t3)) : (o3.tryCount = 0, t3(n3, r3));
          });
        } }, { key: "allowRetry", value: function(e4) {
          var t3 = false, o3 = false;
          if (e4) {
            var n3 = e4.headers && (e4.headers.date || e4.headers.Date) || e4.error && e4.error.ServerTime;
            try {
              var r3 = e4.error && e4.error.Code, a3 = e4.error && e4.error.Message;
              ("RequestTimeTooSkewed" === r3 || "AccessDenied" === r3 && "Request has expired" === a3) && (o3 = true);
            } catch (u3) {
            }
            if (o3 && n3) {
              var s3 = Date.now(), i3 = Date.parse(n3);
              Math.abs(s3 + this.systemClockOffset - i3) >= 3e4 && (this.systemClockOffset = i3 - s3, t3 = true);
            } else
              5 === Math.floor(e4.statusCode / 100) && (t3 = true);
          }
          return t3;
        } }], [{ key: "getVersion", value: function() {
          return "1.4.2";
        } }]), e3;
      }();
    });
  })(timUploadPlugin);
  var timUploadPluginExports = timUploadPlugin.exports;
  const t$1 = /* @__PURE__ */ getDefaultExportFromCjs(timUploadPluginExports);
  var lookup = [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    62,
    0,
    62,
    0,
    63,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    0,
    0,
    0,
    0,
    63,
    0,
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51
  ];
  function base64Decode(source, target) {
    var sourceLength = source.length;
    var paddingLength = source[sourceLength - 2] === "=" ? 2 : source[sourceLength - 1] === "=" ? 1 : 0;
    var tmp;
    var byteIndex = 0;
    var baseLength = sourceLength - paddingLength & 4294967292;
    for (var i2 = 0; i2 < baseLength; i2 += 4) {
      tmp = lookup[source.charCodeAt(i2)] << 18 | lookup[source.charCodeAt(i2 + 1)] << 12 | lookup[source.charCodeAt(i2 + 2)] << 6 | lookup[source.charCodeAt(i2 + 3)];
      target[byteIndex++] = tmp >> 16 & 255;
      target[byteIndex++] = tmp >> 8 & 255;
      target[byteIndex++] = tmp & 255;
    }
    if (paddingLength === 1) {
      tmp = lookup[source.charCodeAt(i2)] << 10 | lookup[source.charCodeAt(i2 + 1)] << 4 | lookup[source.charCodeAt(i2 + 2)] >> 2;
      target[byteIndex++] = tmp >> 8 & 255;
      target[byteIndex++] = tmp & 255;
    }
    if (paddingLength === 2) {
      tmp = lookup[source.charCodeAt(i2)] << 2 | lookup[source.charCodeAt(i2 + 1)] >> 4;
      target[byteIndex++] = tmp & 255;
    }
  }
  const $inject_window_crypto = {
    getRandomValues(arr) {
      if (!(arr instanceof Int8Array || arr instanceof Uint8Array || arr instanceof Int16Array || arr instanceof Uint16Array || arr instanceof Int32Array || arr instanceof Uint32Array || arr instanceof Uint8ClampedArray)) {
        throw new Error("Expected an integer array");
      }
      if (arr.byteLength > 65536) {
        throw new Error("Can only request a maximum of 65536 bytes");
      }
      var crypto = requireNativePlugin("DCloud-Crypto");
      base64Decode(crypto.getRandomValues(arr.byteLength), new Uint8Array(
        arr.buffer,
        arr.byteOffset,
        arr.byteLength
      ));
      return arr;
    }
  };
  var timProfanityFilterPlugin = { exports: {} };
  (function(module, exports) {
    !function(t2, e2) {
      module.exports = e2();
    }(commonjsGlobal, function() {
      function t2(t3, e3) {
        if (!(t3 instanceof e3))
          throw new TypeError("Cannot call a class as a function");
      }
      function e2(t3, e3) {
        for (var r3 = 0; r3 < e3.length; r3++) {
          var i3 = e3[r3];
          i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(t3, (n3 = i3.key, o3 = void 0, "symbol" == typeof (o3 = function(t4, e4) {
            if ("object" != typeof t4 || null === t4)
              return t4;
            var r4 = t4[Symbol.toPrimitive];
            if (void 0 !== r4) {
              var i4 = r4.call(t4, e4 || "default");
              if ("object" != typeof i4)
                return i4;
              throw new TypeError("@@toPrimitive must return a primitive value.");
            }
            return ("string" === e4 ? String : Number)(t4);
          }(n3, "string")) ? o3 : String(o3)), i3);
        }
        var n3, o3;
      }
      function r2(t3, r3, i3) {
        return r3 && e2(t3.prototype, r3), i3 && e2(t3, i3), Object.defineProperty(t3, "prototype", { writable: false }), t3;
      }
      function i2(t3, e3) {
        return function(t4) {
          if (Array.isArray(t4))
            return t4;
        }(t3) || function(t4, e4) {
          var r3 = null == t4 ? null : "undefined" != typeof Symbol && t4[Symbol.iterator] || t4["@@iterator"];
          if (null != r3) {
            var i3, n3, o3, s3, a3 = [], c3 = true, h3 = false;
            try {
              if (o3 = (r3 = r3.call(t4)).next, 0 === e4) {
                if (Object(r3) !== r3)
                  return;
                c3 = false;
              } else
                for (; !(c3 = (i3 = o3.call(r3)).done) && (a3.push(i3.value), a3.length !== e4); c3 = true)
                  ;
            } catch (t5) {
              h3 = true, n3 = t5;
            } finally {
              try {
                if (!c3 && null != r3.return && (s3 = r3.return(), Object(s3) !== s3))
                  return;
              } finally {
                if (h3)
                  throw n3;
              }
            }
            return a3;
          }
        }(t3, e3) || o2(t3, e3) || function() {
          throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }();
      }
      function n2(t3) {
        return function(t4) {
          if (Array.isArray(t4))
            return s2(t4);
        }(t3) || function(t4) {
          if ("undefined" != typeof Symbol && null != t4[Symbol.iterator] || null != t4["@@iterator"])
            return Array.from(t4);
        }(t3) || o2(t3) || function() {
          throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }();
      }
      function o2(t3, e3) {
        if (t3) {
          if ("string" == typeof t3)
            return s2(t3, e3);
          var r3 = Object.prototype.toString.call(t3).slice(8, -1);
          return "Object" === r3 && t3.constructor && (r3 = t3.constructor.name), "Map" === r3 || "Set" === r3 ? Array.from(t3) : "Arguments" === r3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r3) ? s2(t3, e3) : void 0;
        }
      }
      function s2(t3, e3) {
        (null == e3 || e3 > t3.length) && (e3 = t3.length);
        for (var r3 = 0, i3 = new Array(e3); r3 < e3; r3++)
          i3[r3] = t3[r3];
        return i3;
      }
      function a2(t3, e3) {
        var r3 = "undefined" != typeof Symbol && t3[Symbol.iterator] || t3["@@iterator"];
        if (!r3) {
          if (Array.isArray(t3) || (r3 = o2(t3)) || e3 && t3 && "number" == typeof t3.length) {
            r3 && (t3 = r3);
            var i3 = 0, n3 = function() {
            };
            return { s: n3, n: function() {
              return i3 >= t3.length ? { done: true } : { done: false, value: t3[i3++] };
            }, e: function(t4) {
              throw t4;
            }, f: n3 };
          }
          throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var s3, a3 = true, c3 = false;
        return { s: function() {
          r3 = r3.call(t3);
        }, n: function() {
          var t4 = r3.next();
          return a3 = t4.done, t4;
        }, e: function(t4) {
          c3 = true, s3 = t4;
        }, f: function() {
          try {
            a3 || null == r3.return || r3.return();
          } finally {
            if (c3)
              throw s3;
          }
        } };
      }
      var c2 = function() {
        for (var t3 = ` 	\r
~!@#$%^&*()_+-=【】、{}|;':"，。、《》？αβγδεζηθικλμνξοπρστυφχψωΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ。，、；：？！…—·ˉ¨‘’“”々～‖∶＂＇｀｜〃〔〕〈〉《》「」『』．〖〗【】（）［］｛｝ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫ⒈⒉⒊⒋⒌⒍⒎⒏⒐⒑⒒⒓⒔⒕⒖⒗⒘⒙⒚⒛㈠㈡㈢㈣㈤㈥㈦㈧㈨㈩①②③④⑤⑥⑦⑧⑨⑩⑴⑵⑶⑷⑸⑹⑺⑻⑼⑽⑾⑿⒀⒁⒂⒃⒄⒅⒆⒇≈≡≠＝≤≥＜＞≮≯∷±＋－×÷／∫∮∝∞∧∨∑∏∪∩∈∵∴⊥∥∠⌒⊙≌∽√§№☆★○●◎◇◆□℃‰€■△▲※→←↑↓〓¤°＃＆＠＼︿＿￣―♂♀┌┍┎┐┑┒┓─┄┈├┝┞┟┠┡┢┣│┆┊┬┭┮┯┰┱┲┳┼┽┾┿╀╁╂╃└┕┖┗┘┙┚┛━┅┉┤┥┦┧┨┩┪┫┃┇┋┴┵┶┷┸┹┺┻╋╊╉╈╇╆╅╄`, e3 = /* @__PURE__ */ new Map(), r3 = 0, i3 = t3.length; r3 < i3; r3++)
          e3.set(t3.charCodeAt(0), true);
        return e3;
      }(), h2 = function() {
        function e3(r3) {
          t2(this, e3);
          var i3, o3 = r3.input, s3 = r3.isArray, a3 = r3.isMap;
          this._trieTree = {}, s3(o3) ? i3 = o3 : a3(o3) && (i3 = n2(o3.keys()), this._map = o3);
          for (var c3 = 0, h3 = i3.length; c3 < h3; c3++)
            if (i3[c3]) {
              for (var l3 = this._trieTree, f3 = i3[c3], u3 = 0, d2 = f3.length; u3 < d2; u3++)
                l3[f3[u3]] || (l3[f3[u3]] = {}), l3 = l3[f3[u3]];
              l3.isEnd = true;
            }
        }
        return r2(e3, [{ key: "filter", value: function(t3) {
          var e4 = t3.text, r3 = t3.replacingEnabled;
          if (0 === Object.keys(this._trieTree).length)
            return { isMatched: false, modifiedText: e4 };
          for (var i3 = this._trieTree, n3 = e4.toLowerCase(), o3 = "", s3 = false, a3 = n3.length, h3 = 0; h3 < a3; h3++)
            if (true !== c2.get(n3.charCodeAt(h3))) {
              for (var l3 = 0, f3 = "", u3 = false, d2 = h3; d2 < a3; d2++) {
                if (!i3[n3[d2]]) {
                  i3 = this._trieTree;
                  break;
                }
                if (f3 += n3[d2], i3[n3[d2]].isEnd) {
                  u3 = true, l3 = d2 - h3, i3 = this._trieTree;
                  break;
                }
                i3 = i3[n3[d2]];
              }
              if (l3 > 1 && (h3 += l3), u3) {
                if (s3 = true, !r3)
                  break;
                var p2 = this._map.get(f3) || "*";
                o3 = e4.replace(new RegExp(f3, "gi"), p2);
              }
            }
          return { isMatched: s3, modifiedText: o3 };
        } }, { key: "reset", value: function() {
          this._trieTree = {}, this._map = null;
        } }]), e3;
      }(), l2 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof commonjsGlobal ? commonjsGlobal : "undefined" != typeof self ? self : {};
      var f2 = {}, u2 = function(t3, e3) {
        return t3(e3 = { exports: {} }, e3.exports), e3.exports;
      }(function(t3, e3) {
        var r3, i3, n3, o3, s3, a3;
        t3.exports = (a3 = a3 || function(t4, e4) {
          var r4;
          if ("undefined" != typeof window && $inject_window_crypto && (r4 = $inject_window_crypto), !r4 && "undefined" != typeof window && window.msCrypto && (r4 = window.msCrypto), !r4 && void 0 !== l2 && l2.crypto && (r4 = l2.crypto), !r4)
            try {
              r4 = f2;
            } catch (v2) {
            }
          var i4 = function() {
            if (r4) {
              if ("function" == typeof r4.getRandomValues)
                try {
                  return r4.getRandomValues(new Uint32Array(1))[0];
                } catch (v2) {
                }
              if ("function" == typeof r4.randomBytes)
                try {
                  return r4.randomBytes(4).readInt32LE();
                } catch (v2) {
                }
            }
            throw new Error("Native crypto module could not be used to get secure random number.");
          }, n4 = Object.create || /* @__PURE__ */ function() {
            function t5() {
            }
            return function(e5) {
              var r5;
              return t5.prototype = e5, r5 = new t5(), t5.prototype = null, r5;
            };
          }(), o4 = {}, s4 = o4.lib = {}, a4 = s4.Base = { extend: function(t5) {
            var e5 = n4(this);
            return t5 && e5.mixIn(t5), e5.hasOwnProperty("init") && this.init !== e5.init || (e5.init = function() {
              e5.$super.init.apply(this, arguments);
            }), e5.init.prototype = e5, e5.$super = this, e5;
          }, create: function() {
            var t5 = this.extend();
            return t5.init.apply(t5, arguments), t5;
          }, init: function() {
          }, mixIn: function(t5) {
            for (var e5 in t5)
              t5.hasOwnProperty(e5) && (this[e5] = t5[e5]);
            t5.hasOwnProperty("toString") && (this.toString = t5.toString);
          }, clone: function() {
            return this.init.prototype.extend(this);
          } }, c3 = s4.WordArray = a4.extend({ init: function(t5, e5) {
            t5 = this.words = t5 || [], this.sigBytes = null != e5 ? e5 : 4 * t5.length;
          }, toString: function(t5) {
            return (t5 || u3).stringify(this);
          }, concat: function(t5) {
            var e5 = this.words, r5 = t5.words, i5 = this.sigBytes, n5 = t5.sigBytes;
            if (this.clamp(), i5 % 4)
              for (var o5 = 0; o5 < n5; o5++) {
                var s5 = r5[o5 >>> 2] >>> 24 - o5 % 4 * 8 & 255;
                e5[i5 + o5 >>> 2] |= s5 << 24 - (i5 + o5) % 4 * 8;
              }
            else
              for (o5 = 0; o5 < n5; o5 += 4)
                e5[i5 + o5 >>> 2] = r5[o5 >>> 2];
            return this.sigBytes += n5, this;
          }, clamp: function() {
            var e5 = this.words, r5 = this.sigBytes;
            e5[r5 >>> 2] &= 4294967295 << 32 - r5 % 4 * 8, e5.length = t4.ceil(r5 / 4);
          }, clone: function() {
            var t5 = a4.clone.call(this);
            return t5.words = this.words.slice(0), t5;
          }, random: function(t5) {
            for (var e5 = [], r5 = 0; r5 < t5; r5 += 4)
              e5.push(i4());
            return new c3.init(e5, t5);
          } }), h3 = o4.enc = {}, u3 = h3.Hex = { stringify: function(t5) {
            for (var e5 = t5.words, r5 = t5.sigBytes, i5 = [], n5 = 0; n5 < r5; n5++) {
              var o5 = e5[n5 >>> 2] >>> 24 - n5 % 4 * 8 & 255;
              i5.push((o5 >>> 4).toString(16)), i5.push((15 & o5).toString(16));
            }
            return i5.join("");
          }, parse: function(t5) {
            for (var e5 = t5.length, r5 = [], i5 = 0; i5 < e5; i5 += 2)
              r5[i5 >>> 3] |= parseInt(t5.substr(i5, 2), 16) << 24 - i5 % 8 * 4;
            return new c3.init(r5, e5 / 2);
          } }, d2 = h3.Latin1 = { stringify: function(t5) {
            for (var e5 = t5.words, r5 = t5.sigBytes, i5 = [], n5 = 0; n5 < r5; n5++) {
              var o5 = e5[n5 >>> 2] >>> 24 - n5 % 4 * 8 & 255;
              i5.push(String.fromCharCode(o5));
            }
            return i5.join("");
          }, parse: function(t5) {
            for (var e5 = t5.length, r5 = [], i5 = 0; i5 < e5; i5++)
              r5[i5 >>> 2] |= (255 & t5.charCodeAt(i5)) << 24 - i5 % 4 * 8;
            return new c3.init(r5, e5);
          } }, p2 = h3.Utf8 = { stringify: function(t5) {
            try {
              return decodeURIComponent(escape(d2.stringify(t5)));
            } catch (e5) {
              throw new Error("Malformed UTF-8 data");
            }
          }, parse: function(t5) {
            return d2.parse(unescape(encodeURIComponent(t5)));
          } }, _2 = s4.BufferedBlockAlgorithm = a4.extend({ reset: function() {
            this._data = new c3.init(), this._nDataBytes = 0;
          }, _append: function(t5) {
            "string" == typeof t5 && (t5 = p2.parse(t5)), this._data.concat(t5), this._nDataBytes += t5.sigBytes;
          }, _process: function(e5) {
            var r5, i5 = this._data, n5 = i5.words, o5 = i5.sigBytes, s5 = this.blockSize, a5 = o5 / (4 * s5), h4 = (a5 = e5 ? t4.ceil(a5) : t4.max((0 | a5) - this._minBufferSize, 0)) * s5, l3 = t4.min(4 * h4, o5);
            if (h4) {
              for (var f3 = 0; f3 < h4; f3 += s5)
                this._doProcessBlock(n5, f3);
              r5 = n5.splice(0, h4), i5.sigBytes -= l3;
            }
            return new c3.init(r5, l3);
          }, clone: function() {
            var t5 = a4.clone.call(this);
            return t5._data = this._data.clone(), t5;
          }, _minBufferSize: 0 }), y2 = (s4.Hasher = _2.extend({ cfg: a4.extend(), init: function(t5) {
            this.cfg = this.cfg.extend(t5), this.reset();
          }, reset: function() {
            _2.reset.call(this), this._doReset();
          }, update: function(t5) {
            return this._append(t5), this._process(), this;
          }, finalize: function(t5) {
            return t5 && this._append(t5), this._doFinalize();
          }, blockSize: 16, _createHelper: function(t5) {
            return function(e5, r5) {
              return new t5.init(r5).finalize(e5);
            };
          }, _createHmacHelper: function(t5) {
            return function(e5, r5) {
              return new y2.HMAC.init(t5, r5).finalize(e5);
            };
          } }), o4.algo = {});
          return o4;
        }(Math), s3 = (o3 = a3).lib.WordArray, o3.enc.Base64 = { stringify: function(t4) {
          var e4 = t4.words, r4 = t4.sigBytes, i4 = this._map;
          t4.clamp();
          for (var n4 = [], o4 = 0; o4 < r4; o4 += 3)
            for (var s4 = (e4[o4 >>> 2] >>> 24 - o4 % 4 * 8 & 255) << 16 | (e4[o4 + 1 >>> 2] >>> 24 - (o4 + 1) % 4 * 8 & 255) << 8 | e4[o4 + 2 >>> 2] >>> 24 - (o4 + 2) % 4 * 8 & 255, a4 = 0; a4 < 4 && o4 + 0.75 * a4 < r4; a4++)
              n4.push(i4.charAt(s4 >>> 6 * (3 - a4) & 63));
          var c3 = i4.charAt(64);
          if (c3)
            for (; n4.length % 4; )
              n4.push(c3);
          return n4.join("");
        }, parse: function(t4) {
          var e4 = t4.length, r4 = this._map, i4 = this._reverseMap;
          if (!i4) {
            i4 = this._reverseMap = [];
            for (var n4 = 0; n4 < r4.length; n4++)
              i4[r4.charCodeAt(n4)] = n4;
          }
          var o4 = r4.charAt(64);
          if (o4) {
            var a4 = t4.indexOf(o4);
            -1 !== a4 && (e4 = a4);
          }
          return function(t5, e5, r5) {
            for (var i5 = [], n5 = 0, o5 = 0; o5 < e5; o5++)
              if (o5 % 4) {
                var a5 = r5[t5.charCodeAt(o5 - 1)] << o5 % 4 * 2, c3 = r5[t5.charCodeAt(o5)] >>> 6 - o5 % 4 * 2, h3 = a5 | c3;
                i5[n5 >>> 2] |= h3 << 24 - n5 % 4 * 8, n5++;
              }
            return s3.create(i5, n5);
          }(t4, e4, i4);
        }, _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=" }, function(t4) {
          var e4 = a3, r4 = e4.lib, i4 = r4.WordArray, n4 = r4.Hasher, o4 = e4.algo, s4 = [];
          !function() {
            for (var e5 = 0; e5 < 64; e5++)
              s4[e5] = 4294967296 * t4.abs(t4.sin(e5 + 1)) | 0;
          }();
          var c3 = o4.MD5 = n4.extend({ _doReset: function() {
            this._hash = new i4.init([1732584193, 4023233417, 2562383102, 271733878]);
          }, _doProcessBlock: function(t5, e5) {
            for (var r5 = 0; r5 < 16; r5++) {
              var i5 = e5 + r5, n5 = t5[i5];
              t5[i5] = 16711935 & (n5 << 8 | n5 >>> 24) | 4278255360 & (n5 << 24 | n5 >>> 8);
            }
            var o5 = this._hash.words, a4 = t5[e5 + 0], c4 = t5[e5 + 1], d2 = t5[e5 + 2], p2 = t5[e5 + 3], _2 = t5[e5 + 4], y2 = t5[e5 + 5], v2 = t5[e5 + 6], g2 = t5[e5 + 7], w2 = t5[e5 + 8], B2 = t5[e5 + 9], k2 = t5[e5 + 10], m2 = t5[e5 + 11], b2 = t5[e5 + 12], x2 = t5[e5 + 13], S2 = t5[e5 + 14], A2 = t5[e5 + 15], H2 = o5[0], C2 = o5[1], z2 = o5[2], E2 = o5[3];
            H2 = h3(H2, C2, z2, E2, a4, 7, s4[0]), E2 = h3(E2, H2, C2, z2, c4, 12, s4[1]), z2 = h3(z2, E2, H2, C2, d2, 17, s4[2]), C2 = h3(C2, z2, E2, H2, p2, 22, s4[3]), H2 = h3(H2, C2, z2, E2, _2, 7, s4[4]), E2 = h3(E2, H2, C2, z2, y2, 12, s4[5]), z2 = h3(z2, E2, H2, C2, v2, 17, s4[6]), C2 = h3(C2, z2, E2, H2, g2, 22, s4[7]), H2 = h3(H2, C2, z2, E2, w2, 7, s4[8]), E2 = h3(E2, H2, C2, z2, B2, 12, s4[9]), z2 = h3(z2, E2, H2, C2, k2, 17, s4[10]), C2 = h3(C2, z2, E2, H2, m2, 22, s4[11]), H2 = h3(H2, C2, z2, E2, b2, 7, s4[12]), E2 = h3(E2, H2, C2, z2, x2, 12, s4[13]), z2 = h3(z2, E2, H2, C2, S2, 17, s4[14]), H2 = l3(H2, C2 = h3(C2, z2, E2, H2, A2, 22, s4[15]), z2, E2, c4, 5, s4[16]), E2 = l3(E2, H2, C2, z2, v2, 9, s4[17]), z2 = l3(z2, E2, H2, C2, m2, 14, s4[18]), C2 = l3(C2, z2, E2, H2, a4, 20, s4[19]), H2 = l3(H2, C2, z2, E2, y2, 5, s4[20]), E2 = l3(E2, H2, C2, z2, k2, 9, s4[21]), z2 = l3(z2, E2, H2, C2, A2, 14, s4[22]), C2 = l3(C2, z2, E2, H2, _2, 20, s4[23]), H2 = l3(H2, C2, z2, E2, B2, 5, s4[24]), E2 = l3(E2, H2, C2, z2, S2, 9, s4[25]), z2 = l3(z2, E2, H2, C2, p2, 14, s4[26]), C2 = l3(C2, z2, E2, H2, w2, 20, s4[27]), H2 = l3(H2, C2, z2, E2, x2, 5, s4[28]), E2 = l3(E2, H2, C2, z2, d2, 9, s4[29]), z2 = l3(z2, E2, H2, C2, g2, 14, s4[30]), H2 = f3(H2, C2 = l3(C2, z2, E2, H2, b2, 20, s4[31]), z2, E2, y2, 4, s4[32]), E2 = f3(E2, H2, C2, z2, w2, 11, s4[33]), z2 = f3(z2, E2, H2, C2, m2, 16, s4[34]), C2 = f3(C2, z2, E2, H2, S2, 23, s4[35]), H2 = f3(H2, C2, z2, E2, c4, 4, s4[36]), E2 = f3(E2, H2, C2, z2, _2, 11, s4[37]), z2 = f3(z2, E2, H2, C2, g2, 16, s4[38]), C2 = f3(C2, z2, E2, H2, k2, 23, s4[39]), H2 = f3(H2, C2, z2, E2, x2, 4, s4[40]), E2 = f3(E2, H2, C2, z2, a4, 11, s4[41]), z2 = f3(z2, E2, H2, C2, p2, 16, s4[42]), C2 = f3(C2, z2, E2, H2, v2, 23, s4[43]), H2 = f3(H2, C2, z2, E2, B2, 4, s4[44]), E2 = f3(E2, H2, C2, z2, b2, 11, s4[45]), z2 = f3(z2, E2, H2, C2, A2, 16, s4[46]), H2 = u3(H2, C2 = f3(C2, z2, E2, H2, d2, 23, s4[47]), z2, E2, a4, 6, s4[48]), E2 = u3(E2, H2, C2, z2, g2, 10, s4[49]), z2 = u3(z2, E2, H2, C2, S2, 15, s4[50]), C2 = u3(C2, z2, E2, H2, y2, 21, s4[51]), H2 = u3(H2, C2, z2, E2, b2, 6, s4[52]), E2 = u3(E2, H2, C2, z2, p2, 10, s4[53]), z2 = u3(z2, E2, H2, C2, k2, 15, s4[54]), C2 = u3(C2, z2, E2, H2, c4, 21, s4[55]), H2 = u3(H2, C2, z2, E2, w2, 6, s4[56]), E2 = u3(E2, H2, C2, z2, A2, 10, s4[57]), z2 = u3(z2, E2, H2, C2, v2, 15, s4[58]), C2 = u3(C2, z2, E2, H2, x2, 21, s4[59]), H2 = u3(H2, C2, z2, E2, _2, 6, s4[60]), E2 = u3(E2, H2, C2, z2, m2, 10, s4[61]), z2 = u3(z2, E2, H2, C2, d2, 15, s4[62]), C2 = u3(C2, z2, E2, H2, B2, 21, s4[63]), o5[0] = o5[0] + H2 | 0, o5[1] = o5[1] + C2 | 0, o5[2] = o5[2] + z2 | 0, o5[3] = o5[3] + E2 | 0;
          }, _doFinalize: function() {
            var e5 = this._data, r5 = e5.words, i5 = 8 * this._nDataBytes, n5 = 8 * e5.sigBytes;
            r5[n5 >>> 5] |= 128 << 24 - n5 % 32;
            var o5 = t4.floor(i5 / 4294967296), s5 = i5;
            r5[15 + (n5 + 64 >>> 9 << 4)] = 16711935 & (o5 << 8 | o5 >>> 24) | 4278255360 & (o5 << 24 | o5 >>> 8), r5[14 + (n5 + 64 >>> 9 << 4)] = 16711935 & (s5 << 8 | s5 >>> 24) | 4278255360 & (s5 << 24 | s5 >>> 8), e5.sigBytes = 4 * (r5.length + 1), this._process();
            for (var a4 = this._hash, c4 = a4.words, h4 = 0; h4 < 4; h4++) {
              var l4 = c4[h4];
              c4[h4] = 16711935 & (l4 << 8 | l4 >>> 24) | 4278255360 & (l4 << 24 | l4 >>> 8);
            }
            return a4;
          }, clone: function() {
            var t5 = n4.clone.call(this);
            return t5._hash = this._hash.clone(), t5;
          } });
          function h3(t5, e5, r5, i5, n5, o5, s5) {
            var a4 = t5 + (e5 & r5 | ~e5 & i5) + n5 + s5;
            return (a4 << o5 | a4 >>> 32 - o5) + e5;
          }
          function l3(t5, e5, r5, i5, n5, o5, s5) {
            var a4 = t5 + (e5 & i5 | r5 & ~i5) + n5 + s5;
            return (a4 << o5 | a4 >>> 32 - o5) + e5;
          }
          function f3(t5, e5, r5, i5, n5, o5, s5) {
            var a4 = t5 + (e5 ^ r5 ^ i5) + n5 + s5;
            return (a4 << o5 | a4 >>> 32 - o5) + e5;
          }
          function u3(t5, e5, r5, i5, n5, o5, s5) {
            var a4 = t5 + (r5 ^ (e5 | ~i5)) + n5 + s5;
            return (a4 << o5 | a4 >>> 32 - o5) + e5;
          }
          e4.MD5 = n4._createHelper(c3), e4.HmacMD5 = n4._createHmacHelper(c3);
        }(Math), function() {
          var t4 = a3, e4 = t4.lib, r4 = e4.WordArray, i4 = e4.Hasher, n4 = t4.algo, o4 = [], s4 = n4.SHA1 = i4.extend({ _doReset: function() {
            this._hash = new r4.init([1732584193, 4023233417, 2562383102, 271733878, 3285377520]);
          }, _doProcessBlock: function(t5, e5) {
            for (var r5 = this._hash.words, i5 = r5[0], n5 = r5[1], s5 = r5[2], a4 = r5[3], c3 = r5[4], h3 = 0; h3 < 80; h3++) {
              if (h3 < 16)
                o4[h3] = 0 | t5[e5 + h3];
              else {
                var l3 = o4[h3 - 3] ^ o4[h3 - 8] ^ o4[h3 - 14] ^ o4[h3 - 16];
                o4[h3] = l3 << 1 | l3 >>> 31;
              }
              var f3 = (i5 << 5 | i5 >>> 27) + c3 + o4[h3];
              f3 += h3 < 20 ? 1518500249 + (n5 & s5 | ~n5 & a4) : h3 < 40 ? 1859775393 + (n5 ^ s5 ^ a4) : h3 < 60 ? (n5 & s5 | n5 & a4 | s5 & a4) - 1894007588 : (n5 ^ s5 ^ a4) - 899497514, c3 = a4, a4 = s5, s5 = n5 << 30 | n5 >>> 2, n5 = i5, i5 = f3;
            }
            r5[0] = r5[0] + i5 | 0, r5[1] = r5[1] + n5 | 0, r5[2] = r5[2] + s5 | 0, r5[3] = r5[3] + a4 | 0, r5[4] = r5[4] + c3 | 0;
          }, _doFinalize: function() {
            var t5 = this._data, e5 = t5.words, r5 = 8 * this._nDataBytes, i5 = 8 * t5.sigBytes;
            return e5[i5 >>> 5] |= 128 << 24 - i5 % 32, e5[14 + (i5 + 64 >>> 9 << 4)] = Math.floor(r5 / 4294967296), e5[15 + (i5 + 64 >>> 9 << 4)] = r5, t5.sigBytes = 4 * e5.length, this._process(), this._hash;
          }, clone: function() {
            var t5 = i4.clone.call(this);
            return t5._hash = this._hash.clone(), t5;
          } });
          t4.SHA1 = i4._createHelper(s4), t4.HmacSHA1 = i4._createHmacHelper(s4);
        }(), function(t4) {
          var e4 = a3, r4 = e4.lib, i4 = r4.WordArray, n4 = r4.Hasher, o4 = e4.algo, s4 = [], c3 = [];
          !function() {
            function e5(e6) {
              for (var r6 = t4.sqrt(e6), i6 = 2; i6 <= r6; i6++)
                if (!(e6 % i6))
                  return false;
              return true;
            }
            function r5(t5) {
              return 4294967296 * (t5 - (0 | t5)) | 0;
            }
            for (var i5 = 2, n5 = 0; n5 < 64; )
              e5(i5) && (n5 < 8 && (s4[n5] = r5(t4.pow(i5, 0.5))), c3[n5] = r5(t4.pow(i5, 1 / 3)), n5++), i5++;
          }();
          var h3 = [], l3 = o4.SHA256 = n4.extend({ _doReset: function() {
            this._hash = new i4.init(s4.slice(0));
          }, _doProcessBlock: function(t5, e5) {
            for (var r5 = this._hash.words, i5 = r5[0], n5 = r5[1], o5 = r5[2], s5 = r5[3], a4 = r5[4], l4 = r5[5], f3 = r5[6], u3 = r5[7], d2 = 0; d2 < 64; d2++) {
              if (d2 < 16)
                h3[d2] = 0 | t5[e5 + d2];
              else {
                var p2 = h3[d2 - 15], _2 = (p2 << 25 | p2 >>> 7) ^ (p2 << 14 | p2 >>> 18) ^ p2 >>> 3, y2 = h3[d2 - 2], v2 = (y2 << 15 | y2 >>> 17) ^ (y2 << 13 | y2 >>> 19) ^ y2 >>> 10;
                h3[d2] = _2 + h3[d2 - 7] + v2 + h3[d2 - 16];
              }
              var g2 = i5 & n5 ^ i5 & o5 ^ n5 & o5, w2 = (i5 << 30 | i5 >>> 2) ^ (i5 << 19 | i5 >>> 13) ^ (i5 << 10 | i5 >>> 22), B2 = u3 + ((a4 << 26 | a4 >>> 6) ^ (a4 << 21 | a4 >>> 11) ^ (a4 << 7 | a4 >>> 25)) + (a4 & l4 ^ ~a4 & f3) + c3[d2] + h3[d2];
              u3 = f3, f3 = l4, l4 = a4, a4 = s5 + B2 | 0, s5 = o5, o5 = n5, n5 = i5, i5 = B2 + (w2 + g2) | 0;
            }
            r5[0] = r5[0] + i5 | 0, r5[1] = r5[1] + n5 | 0, r5[2] = r5[2] + o5 | 0, r5[3] = r5[3] + s5 | 0, r5[4] = r5[4] + a4 | 0, r5[5] = r5[5] + l4 | 0, r5[6] = r5[6] + f3 | 0, r5[7] = r5[7] + u3 | 0;
          }, _doFinalize: function() {
            var e5 = this._data, r5 = e5.words, i5 = 8 * this._nDataBytes, n5 = 8 * e5.sigBytes;
            return r5[n5 >>> 5] |= 128 << 24 - n5 % 32, r5[14 + (n5 + 64 >>> 9 << 4)] = t4.floor(i5 / 4294967296), r5[15 + (n5 + 64 >>> 9 << 4)] = i5, e5.sigBytes = 4 * r5.length, this._process(), this._hash;
          }, clone: function() {
            var t5 = n4.clone.call(this);
            return t5._hash = this._hash.clone(), t5;
          } });
          e4.SHA256 = n4._createHelper(l3), e4.HmacSHA256 = n4._createHmacHelper(l3);
        }(Math), function() {
          var t4 = a3, e4 = t4.lib.WordArray, r4 = t4.enc;
          function i4(t5) {
            return t5 << 8 & 4278255360 | t5 >>> 8 & 16711935;
          }
          r4.Utf16 = r4.Utf16BE = { stringify: function(t5) {
            for (var e5 = t5.words, r5 = t5.sigBytes, i5 = [], n4 = 0; n4 < r5; n4 += 2) {
              var o4 = e5[n4 >>> 2] >>> 16 - n4 % 4 * 8 & 65535;
              i5.push(String.fromCharCode(o4));
            }
            return i5.join("");
          }, parse: function(t5) {
            for (var r5 = t5.length, i5 = [], n4 = 0; n4 < r5; n4++)
              i5[n4 >>> 1] |= t5.charCodeAt(n4) << 16 - n4 % 2 * 16;
            return e4.create(i5, 2 * r5);
          } }, r4.Utf16LE = { stringify: function(t5) {
            for (var e5 = t5.words, r5 = t5.sigBytes, n4 = [], o4 = 0; o4 < r5; o4 += 2) {
              var s4 = i4(e5[o4 >>> 2] >>> 16 - o4 % 4 * 8 & 65535);
              n4.push(String.fromCharCode(s4));
            }
            return n4.join("");
          }, parse: function(t5) {
            for (var r5 = t5.length, n4 = [], o4 = 0; o4 < r5; o4++)
              n4[o4 >>> 1] |= i4(t5.charCodeAt(o4) << 16 - o4 % 2 * 16);
            return e4.create(n4, 2 * r5);
          } };
        }(), function() {
          if ("function" == typeof ArrayBuffer) {
            var t4 = a3.lib.WordArray, e4 = t4.init;
            (t4.init = function(t5) {
              if (t5 instanceof ArrayBuffer && (t5 = new Uint8Array(t5)), (t5 instanceof Int8Array || "undefined" != typeof Uint8ClampedArray && t5 instanceof Uint8ClampedArray || t5 instanceof Int16Array || t5 instanceof Uint16Array || t5 instanceof Int32Array || t5 instanceof Uint32Array || t5 instanceof Float32Array || t5 instanceof Float64Array) && (t5 = new Uint8Array(t5.buffer, t5.byteOffset, t5.byteLength)), t5 instanceof Uint8Array) {
                for (var r4 = t5.byteLength, i4 = [], n4 = 0; n4 < r4; n4++)
                  i4[n4 >>> 2] |= t5[n4] << 24 - n4 % 4 * 8;
                e4.call(this, i4, r4);
              } else
                e4.apply(this, arguments);
            }).prototype = t4;
          }
        }(), /** @preserve
              (c) 2012 by C��dric Mesnil. All rights reserved.
               Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
                   - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
                  - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
               THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
              */
        function(t4) {
          var e4 = a3, r4 = e4.lib, i4 = r4.WordArray, n4 = r4.Hasher, o4 = e4.algo, s4 = i4.create([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13]), c3 = i4.create([5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11]), h3 = i4.create([11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6]), l3 = i4.create([8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11]), f3 = i4.create([0, 1518500249, 1859775393, 2400959708, 2840853838]), u3 = i4.create([1352829926, 1548603684, 1836072691, 2053994217, 0]), d2 = o4.RIPEMD160 = n4.extend({ _doReset: function() {
            this._hash = i4.create([1732584193, 4023233417, 2562383102, 271733878, 3285377520]);
          }, _doProcessBlock: function(t5, e5) {
            for (var r5 = 0; r5 < 16; r5++) {
              var i5 = e5 + r5, n5 = t5[i5];
              t5[i5] = 16711935 & (n5 << 8 | n5 >>> 24) | 4278255360 & (n5 << 24 | n5 >>> 8);
            }
            var o5, a4, d3, B2, k2, m2, b2, x2, S2, A2, H2, C2 = this._hash.words, z2 = f3.words, E2 = u3.words, M2 = s4.words, R2 = c3.words, D2 = h3.words, P2 = l3.words;
            for (m2 = o5 = C2[0], b2 = a4 = C2[1], x2 = d3 = C2[2], S2 = B2 = C2[3], A2 = k2 = C2[4], r5 = 0; r5 < 80; r5 += 1)
              H2 = o5 + t5[e5 + M2[r5]] | 0, H2 += r5 < 16 ? p2(a4, d3, B2) + z2[0] : r5 < 32 ? _2(a4, d3, B2) + z2[1] : r5 < 48 ? y2(a4, d3, B2) + z2[2] : r5 < 64 ? v2(a4, d3, B2) + z2[3] : g2(a4, d3, B2) + z2[4], H2 = (H2 = w2(H2 |= 0, D2[r5])) + k2 | 0, o5 = k2, k2 = B2, B2 = w2(d3, 10), d3 = a4, a4 = H2, H2 = m2 + t5[e5 + R2[r5]] | 0, H2 += r5 < 16 ? g2(b2, x2, S2) + E2[0] : r5 < 32 ? v2(b2, x2, S2) + E2[1] : r5 < 48 ? y2(b2, x2, S2) + E2[2] : r5 < 64 ? _2(b2, x2, S2) + E2[3] : p2(b2, x2, S2) + E2[4], H2 = (H2 = w2(H2 |= 0, P2[r5])) + A2 | 0, m2 = A2, A2 = S2, S2 = w2(x2, 10), x2 = b2, b2 = H2;
            H2 = C2[1] + d3 + S2 | 0, C2[1] = C2[2] + B2 + A2 | 0, C2[2] = C2[3] + k2 + m2 | 0, C2[3] = C2[4] + o5 + b2 | 0, C2[4] = C2[0] + a4 + x2 | 0, C2[0] = H2;
          }, _doFinalize: function() {
            var t5 = this._data, e5 = t5.words, r5 = 8 * this._nDataBytes, i5 = 8 * t5.sigBytes;
            e5[i5 >>> 5] |= 128 << 24 - i5 % 32, e5[14 + (i5 + 64 >>> 9 << 4)] = 16711935 & (r5 << 8 | r5 >>> 24) | 4278255360 & (r5 << 24 | r5 >>> 8), t5.sigBytes = 4 * (e5.length + 1), this._process();
            for (var n5 = this._hash, o5 = n5.words, s5 = 0; s5 < 5; s5++) {
              var a4 = o5[s5];
              o5[s5] = 16711935 & (a4 << 8 | a4 >>> 24) | 4278255360 & (a4 << 24 | a4 >>> 8);
            }
            return n5;
          }, clone: function() {
            var t5 = n4.clone.call(this);
            return t5._hash = this._hash.clone(), t5;
          } });
          function p2(t5, e5, r5) {
            return t5 ^ e5 ^ r5;
          }
          function _2(t5, e5, r5) {
            return t5 & e5 | ~t5 & r5;
          }
          function y2(t5, e5, r5) {
            return (t5 | ~e5) ^ r5;
          }
          function v2(t5, e5, r5) {
            return t5 & r5 | e5 & ~r5;
          }
          function g2(t5, e5, r5) {
            return t5 ^ (e5 | ~r5);
          }
          function w2(t5, e5) {
            return t5 << e5 | t5 >>> 32 - e5;
          }
          e4.RIPEMD160 = n4._createHelper(d2), e4.HmacRIPEMD160 = n4._createHmacHelper(d2);
        }(), function() {
          var t4 = a3, e4 = t4.lib.Base, r4 = t4.enc.Utf8;
          t4.algo.HMAC = e4.extend({ init: function(t5, e5) {
            t5 = this._hasher = new t5.init(), "string" == typeof e5 && (e5 = r4.parse(e5));
            var i4 = t5.blockSize, n4 = 4 * i4;
            e5.sigBytes > n4 && (e5 = t5.finalize(e5)), e5.clamp();
            for (var o4 = this._oKey = e5.clone(), s4 = this._iKey = e5.clone(), a4 = o4.words, c3 = s4.words, h3 = 0; h3 < i4; h3++)
              a4[h3] ^= 1549556828, c3[h3] ^= 909522486;
            o4.sigBytes = s4.sigBytes = n4, this.reset();
          }, reset: function() {
            var t5 = this._hasher;
            t5.reset(), t5.update(this._iKey);
          }, update: function(t5) {
            return this._hasher.update(t5), this;
          }, finalize: function(t5) {
            var e5 = this._hasher, r5 = e5.finalize(t5);
            return e5.reset(), e5.finalize(this._oKey.clone().concat(r5));
          } });
        }(), function() {
          var t4 = a3, e4 = t4.lib, r4 = e4.Base, i4 = e4.WordArray, n4 = t4.algo, o4 = n4.SHA1, s4 = n4.HMAC, c3 = n4.PBKDF2 = r4.extend({ cfg: r4.extend({ keySize: 4, hasher: o4, iterations: 1 }), init: function(t5) {
            this.cfg = this.cfg.extend(t5);
          }, compute: function(t5, e5) {
            for (var r5 = this.cfg, n5 = s4.create(r5.hasher, t5), o5 = i4.create(), a4 = i4.create([1]), c4 = o5.words, h3 = a4.words, l3 = r5.keySize, f3 = r5.iterations; c4.length < l3; ) {
              var u3 = n5.update(e5).finalize(a4);
              n5.reset();
              for (var d2 = u3.words, p2 = d2.length, _2 = u3, y2 = 1; y2 < f3; y2++) {
                _2 = n5.finalize(_2), n5.reset();
                for (var v2 = _2.words, g2 = 0; g2 < p2; g2++)
                  d2[g2] ^= v2[g2];
              }
              o5.concat(u3), h3[0]++;
            }
            return o5.sigBytes = 4 * l3, o5;
          } });
          t4.PBKDF2 = function(t5, e5, r5) {
            return c3.create(r5).compute(t5, e5);
          };
        }(), function() {
          var t4 = a3, e4 = t4.lib, r4 = e4.Base, i4 = e4.WordArray, n4 = t4.algo, o4 = n4.MD5, s4 = n4.EvpKDF = r4.extend({ cfg: r4.extend({ keySize: 4, hasher: o4, iterations: 1 }), init: function(t5) {
            this.cfg = this.cfg.extend(t5);
          }, compute: function(t5, e5) {
            for (var r5, n5 = this.cfg, o5 = n5.hasher.create(), s5 = i4.create(), a4 = s5.words, c3 = n5.keySize, h3 = n5.iterations; a4.length < c3; ) {
              r5 && o5.update(r5), r5 = o5.update(t5).finalize(e5), o5.reset();
              for (var l3 = 1; l3 < h3; l3++)
                r5 = o5.finalize(r5), o5.reset();
              s5.concat(r5);
            }
            return s5.sigBytes = 4 * c3, s5;
          } });
          t4.EvpKDF = function(t5, e5, r5) {
            return s4.create(r5).compute(t5, e5);
          };
        }(), function() {
          var t4 = a3, e4 = t4.lib.WordArray, r4 = t4.algo, i4 = r4.SHA256, n4 = r4.SHA224 = i4.extend({ _doReset: function() {
            this._hash = new e4.init([3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428]);
          }, _doFinalize: function() {
            var t5 = i4._doFinalize.call(this);
            return t5.sigBytes -= 4, t5;
          } });
          t4.SHA224 = i4._createHelper(n4), t4.HmacSHA224 = i4._createHmacHelper(n4);
        }(), function(t4) {
          var e4 = a3, r4 = e4.lib, i4 = r4.Base, n4 = r4.WordArray, o4 = e4.x64 = {};
          o4.Word = i4.extend({ init: function(t5, e5) {
            this.high = t5, this.low = e5;
          } }), o4.WordArray = i4.extend({ init: function(t5, e5) {
            t5 = this.words = t5 || [], this.sigBytes = null != e5 ? e5 : 8 * t5.length;
          }, toX32: function() {
            for (var t5 = this.words, e5 = t5.length, r5 = [], i5 = 0; i5 < e5; i5++) {
              var o5 = t5[i5];
              r5.push(o5.high), r5.push(o5.low);
            }
            return n4.create(r5, this.sigBytes);
          }, clone: function() {
            for (var t5 = i4.clone.call(this), e5 = t5.words = this.words.slice(0), r5 = e5.length, n5 = 0; n5 < r5; n5++)
              e5[n5] = e5[n5].clone();
            return t5;
          } });
        }(), function(t4) {
          var e4 = a3, r4 = e4.lib, i4 = r4.WordArray, n4 = r4.Hasher, o4 = e4.x64.Word, s4 = e4.algo, c3 = [], h3 = [], l3 = [];
          !function() {
            for (var t5 = 1, e5 = 0, r5 = 0; r5 < 24; r5++) {
              c3[t5 + 5 * e5] = (r5 + 1) * (r5 + 2) / 2 % 64;
              var i5 = (2 * t5 + 3 * e5) % 5;
              t5 = e5 % 5, e5 = i5;
            }
            for (t5 = 0; t5 < 5; t5++)
              for (e5 = 0; e5 < 5; e5++)
                h3[t5 + 5 * e5] = e5 + (2 * t5 + 3 * e5) % 5 * 5;
            for (var n5 = 1, s5 = 0; s5 < 24; s5++) {
              for (var a4 = 0, f4 = 0, u4 = 0; u4 < 7; u4++) {
                if (1 & n5) {
                  var d2 = (1 << u4) - 1;
                  d2 < 32 ? f4 ^= 1 << d2 : a4 ^= 1 << d2 - 32;
                }
                128 & n5 ? n5 = n5 << 1 ^ 113 : n5 <<= 1;
              }
              l3[s5] = o4.create(a4, f4);
            }
          }();
          var f3 = [];
          !function() {
            for (var t5 = 0; t5 < 25; t5++)
              f3[t5] = o4.create();
          }();
          var u3 = s4.SHA3 = n4.extend({ cfg: n4.cfg.extend({ outputLength: 512 }), _doReset: function() {
            for (var t5 = this._state = [], e5 = 0; e5 < 25; e5++)
              t5[e5] = new o4.init();
            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
          }, _doProcessBlock: function(t5, e5) {
            for (var r5 = this._state, i5 = this.blockSize / 2, n5 = 0; n5 < i5; n5++) {
              var o5 = t5[e5 + 2 * n5], s5 = t5[e5 + 2 * n5 + 1];
              o5 = 16711935 & (o5 << 8 | o5 >>> 24) | 4278255360 & (o5 << 24 | o5 >>> 8), s5 = 16711935 & (s5 << 8 | s5 >>> 24) | 4278255360 & (s5 << 24 | s5 >>> 8), (C2 = r5[n5]).high ^= s5, C2.low ^= o5;
            }
            for (var a4 = 0; a4 < 24; a4++) {
              for (var u4 = 0; u4 < 5; u4++) {
                for (var d2 = 0, p2 = 0, _2 = 0; _2 < 5; _2++)
                  d2 ^= (C2 = r5[u4 + 5 * _2]).high, p2 ^= C2.low;
                var y2 = f3[u4];
                y2.high = d2, y2.low = p2;
              }
              for (u4 = 0; u4 < 5; u4++) {
                var v2 = f3[(u4 + 4) % 5], g2 = f3[(u4 + 1) % 5], w2 = g2.high, B2 = g2.low;
                for (d2 = v2.high ^ (w2 << 1 | B2 >>> 31), p2 = v2.low ^ (B2 << 1 | w2 >>> 31), _2 = 0; _2 < 5; _2++)
                  (C2 = r5[u4 + 5 * _2]).high ^= d2, C2.low ^= p2;
              }
              for (var k2 = 1; k2 < 25; k2++) {
                var m2 = (C2 = r5[k2]).high, b2 = C2.low, x2 = c3[k2];
                x2 < 32 ? (d2 = m2 << x2 | b2 >>> 32 - x2, p2 = b2 << x2 | m2 >>> 32 - x2) : (d2 = b2 << x2 - 32 | m2 >>> 64 - x2, p2 = m2 << x2 - 32 | b2 >>> 64 - x2);
                var S2 = f3[h3[k2]];
                S2.high = d2, S2.low = p2;
              }
              var A2 = f3[0], H2 = r5[0];
              for (A2.high = H2.high, A2.low = H2.low, u4 = 0; u4 < 5; u4++)
                for (_2 = 0; _2 < 5; _2++) {
                  var C2 = r5[k2 = u4 + 5 * _2], z2 = f3[k2], E2 = f3[(u4 + 1) % 5 + 5 * _2], M2 = f3[(u4 + 2) % 5 + 5 * _2];
                  C2.high = z2.high ^ ~E2.high & M2.high, C2.low = z2.low ^ ~E2.low & M2.low;
                }
              C2 = r5[0];
              var R2 = l3[a4];
              C2.high ^= R2.high, C2.low ^= R2.low;
            }
          }, _doFinalize: function() {
            var e5 = this._data, r5 = e5.words, n5 = (this._nDataBytes, 8 * e5.sigBytes), o5 = 32 * this.blockSize;
            r5[n5 >>> 5] |= 1 << 24 - n5 % 32, r5[(t4.ceil((n5 + 1) / o5) * o5 >>> 5) - 1] |= 128, e5.sigBytes = 4 * r5.length, this._process();
            for (var s5 = this._state, a4 = this.cfg.outputLength / 8, c4 = a4 / 8, h4 = [], l4 = 0; l4 < c4; l4++) {
              var f4 = s5[l4], u4 = f4.high, d2 = f4.low;
              u4 = 16711935 & (u4 << 8 | u4 >>> 24) | 4278255360 & (u4 << 24 | u4 >>> 8), d2 = 16711935 & (d2 << 8 | d2 >>> 24) | 4278255360 & (d2 << 24 | d2 >>> 8), h4.push(d2), h4.push(u4);
            }
            return new i4.init(h4, a4);
          }, clone: function() {
            for (var t5 = n4.clone.call(this), e5 = t5._state = this._state.slice(0), r5 = 0; r5 < 25; r5++)
              e5[r5] = e5[r5].clone();
            return t5;
          } });
          e4.SHA3 = n4._createHelper(u3), e4.HmacSHA3 = n4._createHmacHelper(u3);
        }(Math), function() {
          var t4 = a3, e4 = t4.lib.Hasher, r4 = t4.x64, i4 = r4.Word, n4 = r4.WordArray, o4 = t4.algo;
          function s4() {
            return i4.create.apply(i4, arguments);
          }
          var c3 = [s4(1116352408, 3609767458), s4(1899447441, 602891725), s4(3049323471, 3964484399), s4(3921009573, 2173295548), s4(961987163, 4081628472), s4(1508970993, 3053834265), s4(2453635748, 2937671579), s4(2870763221, 3664609560), s4(3624381080, 2734883394), s4(310598401, 1164996542), s4(607225278, 1323610764), s4(1426881987, 3590304994), s4(1925078388, 4068182383), s4(2162078206, 991336113), s4(2614888103, 633803317), s4(3248222580, 3479774868), s4(3835390401, 2666613458), s4(4022224774, 944711139), s4(264347078, 2341262773), s4(604807628, 2007800933), s4(770255983, 1495990901), s4(1249150122, 1856431235), s4(1555081692, 3175218132), s4(1996064986, 2198950837), s4(2554220882, 3999719339), s4(2821834349, 766784016), s4(2952996808, 2566594879), s4(3210313671, 3203337956), s4(3336571891, 1034457026), s4(3584528711, 2466948901), s4(113926993, 3758326383), s4(338241895, 168717936), s4(666307205, 1188179964), s4(773529912, 1546045734), s4(1294757372, 1522805485), s4(1396182291, 2643833823), s4(1695183700, 2343527390), s4(1986661051, 1014477480), s4(2177026350, 1206759142), s4(2456956037, 344077627), s4(2730485921, 1290863460), s4(2820302411, 3158454273), s4(3259730800, 3505952657), s4(3345764771, 106217008), s4(3516065817, 3606008344), s4(3600352804, 1432725776), s4(4094571909, 1467031594), s4(275423344, 851169720), s4(430227734, 3100823752), s4(506948616, 1363258195), s4(659060556, 3750685593), s4(883997877, 3785050280), s4(958139571, 3318307427), s4(1322822218, 3812723403), s4(1537002063, 2003034995), s4(1747873779, 3602036899), s4(1955562222, 1575990012), s4(2024104815, 1125592928), s4(2227730452, 2716904306), s4(2361852424, 442776044), s4(2428436474, 593698344), s4(2756734187, 3733110249), s4(3204031479, 2999351573), s4(3329325298, 3815920427), s4(3391569614, 3928383900), s4(3515267271, 566280711), s4(3940187606, 3454069534), s4(4118630271, 4000239992), s4(116418474, 1914138554), s4(174292421, 2731055270), s4(289380356, 3203993006), s4(460393269, 320620315), s4(685471733, 587496836), s4(852142971, 1086792851), s4(1017036298, 365543100), s4(1126000580, 2618297676), s4(1288033470, 3409855158), s4(1501505948, 4234509866), s4(1607167915, 987167468), s4(1816402316, 1246189591)], h3 = [];
          !function() {
            for (var t5 = 0; t5 < 80; t5++)
              h3[t5] = s4();
          }();
          var l3 = o4.SHA512 = e4.extend({ _doReset: function() {
            this._hash = new n4.init([new i4.init(1779033703, 4089235720), new i4.init(3144134277, 2227873595), new i4.init(1013904242, 4271175723), new i4.init(2773480762, 1595750129), new i4.init(1359893119, 2917565137), new i4.init(2600822924, 725511199), new i4.init(528734635, 4215389547), new i4.init(1541459225, 327033209)]);
          }, _doProcessBlock: function(t5, e5) {
            for (var r5 = this._hash.words, i5 = r5[0], n5 = r5[1], o5 = r5[2], s5 = r5[3], a4 = r5[4], l4 = r5[5], f3 = r5[6], u3 = r5[7], d2 = i5.high, p2 = i5.low, _2 = n5.high, y2 = n5.low, v2 = o5.high, g2 = o5.low, w2 = s5.high, B2 = s5.low, k2 = a4.high, m2 = a4.low, b2 = l4.high, x2 = l4.low, S2 = f3.high, A2 = f3.low, H2 = u3.high, C2 = u3.low, z2 = d2, E2 = p2, M2 = _2, R2 = y2, D2 = v2, P2 = g2, F2 = w2, O2 = B2, L2 = k2, T2 = m2, I2 = b2, W2 = x2, j2 = S2, U2 = A2, K2 = H2, X2 = C2, N2 = 0; N2 < 80; N2++) {
              var q2, V2, Z2 = h3[N2];
              if (N2 < 16)
                V2 = Z2.high = 0 | t5[e5 + 2 * N2], q2 = Z2.low = 0 | t5[e5 + 2 * N2 + 1];
              else {
                var $2 = h3[N2 - 15], G2 = $2.high, J2 = $2.low, Q2 = (G2 >>> 1 | J2 << 31) ^ (G2 >>> 8 | J2 << 24) ^ G2 >>> 7, Y2 = (J2 >>> 1 | G2 << 31) ^ (J2 >>> 8 | G2 << 24) ^ (J2 >>> 7 | G2 << 25), tt2 = h3[N2 - 2], et2 = tt2.high, rt2 = tt2.low, it2 = (et2 >>> 19 | rt2 << 13) ^ (et2 << 3 | rt2 >>> 29) ^ et2 >>> 6, nt2 = (rt2 >>> 19 | et2 << 13) ^ (rt2 << 3 | et2 >>> 29) ^ (rt2 >>> 6 | et2 << 26), ot2 = h3[N2 - 7], st2 = ot2.high, at2 = ot2.low, ct2 = h3[N2 - 16], ht2 = ct2.high, lt2 = ct2.low;
                V2 = (V2 = (V2 = Q2 + st2 + ((q2 = Y2 + at2) >>> 0 < Y2 >>> 0 ? 1 : 0)) + it2 + ((q2 += nt2) >>> 0 < nt2 >>> 0 ? 1 : 0)) + ht2 + ((q2 += lt2) >>> 0 < lt2 >>> 0 ? 1 : 0), Z2.high = V2, Z2.low = q2;
              }
              var ft2, ut2 = L2 & I2 ^ ~L2 & j2, dt2 = T2 & W2 ^ ~T2 & U2, pt2 = z2 & M2 ^ z2 & D2 ^ M2 & D2, _t2 = E2 & R2 ^ E2 & P2 ^ R2 & P2, yt2 = (z2 >>> 28 | E2 << 4) ^ (z2 << 30 | E2 >>> 2) ^ (z2 << 25 | E2 >>> 7), vt2 = (E2 >>> 28 | z2 << 4) ^ (E2 << 30 | z2 >>> 2) ^ (E2 << 25 | z2 >>> 7), gt2 = (L2 >>> 14 | T2 << 18) ^ (L2 >>> 18 | T2 << 14) ^ (L2 << 23 | T2 >>> 9), wt2 = (T2 >>> 14 | L2 << 18) ^ (T2 >>> 18 | L2 << 14) ^ (T2 << 23 | L2 >>> 9), Bt2 = c3[N2], kt2 = Bt2.high, mt2 = Bt2.low, bt2 = K2 + gt2 + ((ft2 = X2 + wt2) >>> 0 < X2 >>> 0 ? 1 : 0), xt2 = vt2 + _t2;
              K2 = j2, X2 = U2, j2 = I2, U2 = W2, I2 = L2, W2 = T2, L2 = F2 + (bt2 = (bt2 = (bt2 = bt2 + ut2 + ((ft2 += dt2) >>> 0 < dt2 >>> 0 ? 1 : 0)) + kt2 + ((ft2 += mt2) >>> 0 < mt2 >>> 0 ? 1 : 0)) + V2 + ((ft2 += q2) >>> 0 < q2 >>> 0 ? 1 : 0)) + ((T2 = O2 + ft2 | 0) >>> 0 < O2 >>> 0 ? 1 : 0) | 0, F2 = D2, O2 = P2, D2 = M2, P2 = R2, M2 = z2, R2 = E2, z2 = bt2 + (yt2 + pt2 + (xt2 >>> 0 < vt2 >>> 0 ? 1 : 0)) + ((E2 = ft2 + xt2 | 0) >>> 0 < ft2 >>> 0 ? 1 : 0) | 0;
            }
            p2 = i5.low = p2 + E2, i5.high = d2 + z2 + (p2 >>> 0 < E2 >>> 0 ? 1 : 0), y2 = n5.low = y2 + R2, n5.high = _2 + M2 + (y2 >>> 0 < R2 >>> 0 ? 1 : 0), g2 = o5.low = g2 + P2, o5.high = v2 + D2 + (g2 >>> 0 < P2 >>> 0 ? 1 : 0), B2 = s5.low = B2 + O2, s5.high = w2 + F2 + (B2 >>> 0 < O2 >>> 0 ? 1 : 0), m2 = a4.low = m2 + T2, a4.high = k2 + L2 + (m2 >>> 0 < T2 >>> 0 ? 1 : 0), x2 = l4.low = x2 + W2, l4.high = b2 + I2 + (x2 >>> 0 < W2 >>> 0 ? 1 : 0), A2 = f3.low = A2 + U2, f3.high = S2 + j2 + (A2 >>> 0 < U2 >>> 0 ? 1 : 0), C2 = u3.low = C2 + X2, u3.high = H2 + K2 + (C2 >>> 0 < X2 >>> 0 ? 1 : 0);
          }, _doFinalize: function() {
            var t5 = this._data, e5 = t5.words, r5 = 8 * this._nDataBytes, i5 = 8 * t5.sigBytes;
            return e5[i5 >>> 5] |= 128 << 24 - i5 % 32, e5[30 + (i5 + 128 >>> 10 << 5)] = Math.floor(r5 / 4294967296), e5[31 + (i5 + 128 >>> 10 << 5)] = r5, t5.sigBytes = 4 * e5.length, this._process(), this._hash.toX32();
          }, clone: function() {
            var t5 = e4.clone.call(this);
            return t5._hash = this._hash.clone(), t5;
          }, blockSize: 32 });
          t4.SHA512 = e4._createHelper(l3), t4.HmacSHA512 = e4._createHmacHelper(l3);
        }(), function() {
          var t4 = a3, e4 = t4.x64, r4 = e4.Word, i4 = e4.WordArray, n4 = t4.algo, o4 = n4.SHA512, s4 = n4.SHA384 = o4.extend({ _doReset: function() {
            this._hash = new i4.init([new r4.init(3418070365, 3238371032), new r4.init(1654270250, 914150663), new r4.init(2438529370, 812702999), new r4.init(355462360, 4144912697), new r4.init(1731405415, 4290775857), new r4.init(2394180231, 1750603025), new r4.init(3675008525, 1694076839), new r4.init(1203062813, 3204075428)]);
          }, _doFinalize: function() {
            var t5 = o4._doFinalize.call(this);
            return t5.sigBytes -= 16, t5;
          } });
          t4.SHA384 = o4._createHelper(s4), t4.HmacSHA384 = o4._createHmacHelper(s4);
        }(), a3.lib.Cipher || function(t4) {
          var e4 = a3, r4 = e4.lib, i4 = r4.Base, n4 = r4.WordArray, o4 = r4.BufferedBlockAlgorithm, s4 = e4.enc, c3 = (s4.Utf8, s4.Base64), h3 = e4.algo.EvpKDF, l3 = r4.Cipher = o4.extend({ cfg: i4.extend(), createEncryptor: function(t5, e5) {
            return this.create(this._ENC_XFORM_MODE, t5, e5);
          }, createDecryptor: function(t5, e5) {
            return this.create(this._DEC_XFORM_MODE, t5, e5);
          }, init: function(t5, e5, r5) {
            this.cfg = this.cfg.extend(r5), this._xformMode = t5, this._key = e5, this.reset();
          }, reset: function() {
            o4.reset.call(this), this._doReset();
          }, process: function(t5) {
            return this._append(t5), this._process();
          }, finalize: function(t5) {
            return t5 && this._append(t5), this._doFinalize();
          }, keySize: 4, ivSize: 4, _ENC_XFORM_MODE: 1, _DEC_XFORM_MODE: 2, _createHelper: /* @__PURE__ */ function() {
            function t5(t6) {
              return "string" == typeof t6 ? w2 : v2;
            }
            return function(e5) {
              return { encrypt: function(r5, i5, n5) {
                return t5(i5).encrypt(e5, r5, i5, n5);
              }, decrypt: function(r5, i5, n5) {
                return t5(i5).decrypt(e5, r5, i5, n5);
              } };
            };
          }() }), f3 = (r4.StreamCipher = l3.extend({ _doFinalize: function() {
            return this._process(true);
          }, blockSize: 1 }), e4.mode = {}), u3 = r4.BlockCipherMode = i4.extend({ createEncryptor: function(t5, e5) {
            return this.Encryptor.create(t5, e5);
          }, createDecryptor: function(t5, e5) {
            return this.Decryptor.create(t5, e5);
          }, init: function(t5, e5) {
            this._cipher = t5, this._iv = e5;
          } }), d2 = f3.CBC = function() {
            var t5 = u3.extend();
            function e5(t6, e6, r5) {
              var i5, n5 = this._iv;
              n5 ? (i5 = n5, this._iv = void 0) : i5 = this._prevBlock;
              for (var o5 = 0; o5 < r5; o5++)
                t6[e6 + o5] ^= i5[o5];
            }
            return t5.Encryptor = t5.extend({ processBlock: function(t6, r5) {
              var i5 = this._cipher, n5 = i5.blockSize;
              e5.call(this, t6, r5, n5), i5.encryptBlock(t6, r5), this._prevBlock = t6.slice(r5, r5 + n5);
            } }), t5.Decryptor = t5.extend({ processBlock: function(t6, r5) {
              var i5 = this._cipher, n5 = i5.blockSize, o5 = t6.slice(r5, r5 + n5);
              i5.decryptBlock(t6, r5), e5.call(this, t6, r5, n5), this._prevBlock = o5;
            } }), t5;
          }(), p2 = (e4.pad = {}).Pkcs7 = { pad: function(t5, e5) {
            for (var r5 = 4 * e5, i5 = r5 - t5.sigBytes % r5, o5 = i5 << 24 | i5 << 16 | i5 << 8 | i5, s5 = [], a4 = 0; a4 < i5; a4 += 4)
              s5.push(o5);
            var c4 = n4.create(s5, i5);
            t5.concat(c4);
          }, unpad: function(t5) {
            var e5 = 255 & t5.words[t5.sigBytes - 1 >>> 2];
            t5.sigBytes -= e5;
          } }, _2 = (r4.BlockCipher = l3.extend({ cfg: l3.cfg.extend({ mode: d2, padding: p2 }), reset: function() {
            var t5;
            l3.reset.call(this);
            var e5 = this.cfg, r5 = e5.iv, i5 = e5.mode;
            this._xformMode == this._ENC_XFORM_MODE ? t5 = i5.createEncryptor : (t5 = i5.createDecryptor, this._minBufferSize = 1), this._mode && this._mode.__creator == t5 ? this._mode.init(this, r5 && r5.words) : (this._mode = t5.call(i5, this, r5 && r5.words), this._mode.__creator = t5);
          }, _doProcessBlock: function(t5, e5) {
            this._mode.processBlock(t5, e5);
          }, _doFinalize: function() {
            var t5, e5 = this.cfg.padding;
            return this._xformMode == this._ENC_XFORM_MODE ? (e5.pad(this._data, this.blockSize), t5 = this._process(true)) : (t5 = this._process(true), e5.unpad(t5)), t5;
          }, blockSize: 4 }), r4.CipherParams = i4.extend({ init: function(t5) {
            this.mixIn(t5);
          }, toString: function(t5) {
            return (t5 || this.formatter).stringify(this);
          } })), y2 = (e4.format = {}).OpenSSL = { stringify: function(t5) {
            var e5 = t5.ciphertext, r5 = t5.salt;
            return (r5 ? n4.create([1398893684, 1701076831]).concat(r5).concat(e5) : e5).toString(c3);
          }, parse: function(t5) {
            var e5, r5 = c3.parse(t5), i5 = r5.words;
            return 1398893684 == i5[0] && 1701076831 == i5[1] && (e5 = n4.create(i5.slice(2, 4)), i5.splice(0, 4), r5.sigBytes -= 16), _2.create({ ciphertext: r5, salt: e5 });
          } }, v2 = r4.SerializableCipher = i4.extend({ cfg: i4.extend({ format: y2 }), encrypt: function(t5, e5, r5, i5) {
            i5 = this.cfg.extend(i5);
            var n5 = t5.createEncryptor(r5, i5), o5 = n5.finalize(e5), s5 = n5.cfg;
            return _2.create({ ciphertext: o5, key: r5, iv: s5.iv, algorithm: t5, mode: s5.mode, padding: s5.padding, blockSize: t5.blockSize, formatter: i5.format });
          }, decrypt: function(t5, e5, r5, i5) {
            return i5 = this.cfg.extend(i5), e5 = this._parse(e5, i5.format), t5.createDecryptor(r5, i5).finalize(e5.ciphertext);
          }, _parse: function(t5, e5) {
            return "string" == typeof t5 ? e5.parse(t5, this) : t5;
          } }), g2 = (e4.kdf = {}).OpenSSL = { execute: function(t5, e5, r5, i5) {
            i5 || (i5 = n4.random(8));
            var o5 = h3.create({ keySize: e5 + r5 }).compute(t5, i5), s5 = n4.create(o5.words.slice(e5), 4 * r5);
            return o5.sigBytes = 4 * e5, _2.create({ key: o5, iv: s5, salt: i5 });
          } }, w2 = r4.PasswordBasedCipher = v2.extend({ cfg: v2.cfg.extend({ kdf: g2 }), encrypt: function(t5, e5, r5, i5) {
            var n5 = (i5 = this.cfg.extend(i5)).kdf.execute(r5, t5.keySize, t5.ivSize);
            i5.iv = n5.iv;
            var o5 = v2.encrypt.call(this, t5, e5, n5.key, i5);
            return o5.mixIn(n5), o5;
          }, decrypt: function(t5, e5, r5, i5) {
            i5 = this.cfg.extend(i5), e5 = this._parse(e5, i5.format);
            var n5 = i5.kdf.execute(r5, t5.keySize, t5.ivSize, e5.salt);
            return i5.iv = n5.iv, v2.decrypt.call(this, t5, e5, n5.key, i5);
          } });
        }(), a3.mode.CFB = function() {
          var t4 = a3.lib.BlockCipherMode.extend();
          function e4(t5, e5, r4, i4) {
            var n4, o4 = this._iv;
            o4 ? (n4 = o4.slice(0), this._iv = void 0) : n4 = this._prevBlock, i4.encryptBlock(n4, 0);
            for (var s4 = 0; s4 < r4; s4++)
              t5[e5 + s4] ^= n4[s4];
          }
          return t4.Encryptor = t4.extend({ processBlock: function(t5, r4) {
            var i4 = this._cipher, n4 = i4.blockSize;
            e4.call(this, t5, r4, n4, i4), this._prevBlock = t5.slice(r4, r4 + n4);
          } }), t4.Decryptor = t4.extend({ processBlock: function(t5, r4) {
            var i4 = this._cipher, n4 = i4.blockSize, o4 = t5.slice(r4, r4 + n4);
            e4.call(this, t5, r4, n4, i4), this._prevBlock = o4;
          } }), t4;
        }(), a3.mode.ECB = ((n3 = a3.lib.BlockCipherMode.extend()).Encryptor = n3.extend({ processBlock: function(t4, e4) {
          this._cipher.encryptBlock(t4, e4);
        } }), n3.Decryptor = n3.extend({ processBlock: function(t4, e4) {
          this._cipher.decryptBlock(t4, e4);
        } }), n3), a3.pad.AnsiX923 = { pad: function(t4, e4) {
          var r4 = t4.sigBytes, i4 = 4 * e4, n4 = i4 - r4 % i4, o4 = r4 + n4 - 1;
          t4.clamp(), t4.words[o4 >>> 2] |= n4 << 24 - o4 % 4 * 8, t4.sigBytes += n4;
        }, unpad: function(t4) {
          var e4 = 255 & t4.words[t4.sigBytes - 1 >>> 2];
          t4.sigBytes -= e4;
        } }, a3.pad.Iso10126 = { pad: function(t4, e4) {
          var r4 = 4 * e4, i4 = r4 - t4.sigBytes % r4;
          t4.concat(a3.lib.WordArray.random(i4 - 1)).concat(a3.lib.WordArray.create([i4 << 24], 1));
        }, unpad: function(t4) {
          var e4 = 255 & t4.words[t4.sigBytes - 1 >>> 2];
          t4.sigBytes -= e4;
        } }, a3.pad.Iso97971 = { pad: function(t4, e4) {
          t4.concat(a3.lib.WordArray.create([2147483648], 1)), a3.pad.ZeroPadding.pad(t4, e4);
        }, unpad: function(t4) {
          a3.pad.ZeroPadding.unpad(t4), t4.sigBytes--;
        } }, a3.mode.OFB = (r3 = a3.lib.BlockCipherMode.extend(), i3 = r3.Encryptor = r3.extend({ processBlock: function(t4, e4) {
          var r4 = this._cipher, i4 = r4.blockSize, n4 = this._iv, o4 = this._keystream;
          n4 && (o4 = this._keystream = n4.slice(0), this._iv = void 0), r4.encryptBlock(o4, 0);
          for (var s4 = 0; s4 < i4; s4++)
            t4[e4 + s4] ^= o4[s4];
        } }), r3.Decryptor = i3, r3), a3.pad.NoPadding = { pad: function() {
        }, unpad: function() {
        } }, function(t4) {
          var e4 = a3, r4 = e4.lib.CipherParams, i4 = e4.enc.Hex;
          e4.format.Hex = { stringify: function(t5) {
            return t5.ciphertext.toString(i4);
          }, parse: function(t5) {
            var e5 = i4.parse(t5);
            return r4.create({ ciphertext: e5 });
          } };
        }(), function() {
          var t4 = a3, e4 = t4.lib.BlockCipher, r4 = t4.algo, i4 = [], n4 = [], o4 = [], s4 = [], c3 = [], h3 = [], l3 = [], f3 = [], u3 = [], d2 = [];
          !function() {
            for (var t5 = [], e5 = 0; e5 < 256; e5++)
              t5[e5] = e5 < 128 ? e5 << 1 : e5 << 1 ^ 283;
            var r5 = 0, a4 = 0;
            for (e5 = 0; e5 < 256; e5++) {
              var p3 = a4 ^ a4 << 1 ^ a4 << 2 ^ a4 << 3 ^ a4 << 4;
              p3 = p3 >>> 8 ^ 255 & p3 ^ 99, i4[r5] = p3, n4[p3] = r5;
              var _3 = t5[r5], y2 = t5[_3], v2 = t5[y2], g2 = 257 * t5[p3] ^ 16843008 * p3;
              o4[r5] = g2 << 24 | g2 >>> 8, s4[r5] = g2 << 16 | g2 >>> 16, c3[r5] = g2 << 8 | g2 >>> 24, h3[r5] = g2, g2 = 16843009 * v2 ^ 65537 * y2 ^ 257 * _3 ^ 16843008 * r5, l3[p3] = g2 << 24 | g2 >>> 8, f3[p3] = g2 << 16 | g2 >>> 16, u3[p3] = g2 << 8 | g2 >>> 24, d2[p3] = g2, r5 ? (r5 = _3 ^ t5[t5[t5[v2 ^ _3]]], a4 ^= t5[t5[a4]]) : r5 = a4 = 1;
            }
          }();
          var p2 = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54], _2 = r4.AES = e4.extend({ _doReset: function() {
            if (!this._nRounds || this._keyPriorReset !== this._key) {
              for (var t5 = this._keyPriorReset = this._key, e5 = t5.words, r5 = t5.sigBytes / 4, n5 = 4 * ((this._nRounds = r5 + 6) + 1), o5 = this._keySchedule = [], s5 = 0; s5 < n5; s5++)
                s5 < r5 ? o5[s5] = e5[s5] : (h4 = o5[s5 - 1], s5 % r5 ? r5 > 6 && s5 % r5 == 4 && (h4 = i4[h4 >>> 24] << 24 | i4[h4 >>> 16 & 255] << 16 | i4[h4 >>> 8 & 255] << 8 | i4[255 & h4]) : (h4 = i4[(h4 = h4 << 8 | h4 >>> 24) >>> 24] << 24 | i4[h4 >>> 16 & 255] << 16 | i4[h4 >>> 8 & 255] << 8 | i4[255 & h4], h4 ^= p2[s5 / r5 | 0] << 24), o5[s5] = o5[s5 - r5] ^ h4);
              for (var a4 = this._invKeySchedule = [], c4 = 0; c4 < n5; c4++) {
                if (s5 = n5 - c4, c4 % 4)
                  var h4 = o5[s5];
                else
                  h4 = o5[s5 - 4];
                a4[c4] = c4 < 4 || s5 <= 4 ? h4 : l3[i4[h4 >>> 24]] ^ f3[i4[h4 >>> 16 & 255]] ^ u3[i4[h4 >>> 8 & 255]] ^ d2[i4[255 & h4]];
              }
            }
          }, encryptBlock: function(t5, e5) {
            this._doCryptBlock(t5, e5, this._keySchedule, o4, s4, c3, h3, i4);
          }, decryptBlock: function(t5, e5) {
            var r5 = t5[e5 + 1];
            t5[e5 + 1] = t5[e5 + 3], t5[e5 + 3] = r5, this._doCryptBlock(t5, e5, this._invKeySchedule, l3, f3, u3, d2, n4), r5 = t5[e5 + 1], t5[e5 + 1] = t5[e5 + 3], t5[e5 + 3] = r5;
          }, _doCryptBlock: function(t5, e5, r5, i5, n5, o5, s5, a4) {
            for (var c4 = this._nRounds, h4 = t5[e5] ^ r5[0], l4 = t5[e5 + 1] ^ r5[1], f4 = t5[e5 + 2] ^ r5[2], u4 = t5[e5 + 3] ^ r5[3], d3 = 4, p3 = 1; p3 < c4; p3++) {
              var _3 = i5[h4 >>> 24] ^ n5[l4 >>> 16 & 255] ^ o5[f4 >>> 8 & 255] ^ s5[255 & u4] ^ r5[d3++], y2 = i5[l4 >>> 24] ^ n5[f4 >>> 16 & 255] ^ o5[u4 >>> 8 & 255] ^ s5[255 & h4] ^ r5[d3++], v2 = i5[f4 >>> 24] ^ n5[u4 >>> 16 & 255] ^ o5[h4 >>> 8 & 255] ^ s5[255 & l4] ^ r5[d3++], g2 = i5[u4 >>> 24] ^ n5[h4 >>> 16 & 255] ^ o5[l4 >>> 8 & 255] ^ s5[255 & f4] ^ r5[d3++];
              h4 = _3, l4 = y2, f4 = v2, u4 = g2;
            }
            _3 = (a4[h4 >>> 24] << 24 | a4[l4 >>> 16 & 255] << 16 | a4[f4 >>> 8 & 255] << 8 | a4[255 & u4]) ^ r5[d3++], y2 = (a4[l4 >>> 24] << 24 | a4[f4 >>> 16 & 255] << 16 | a4[u4 >>> 8 & 255] << 8 | a4[255 & h4]) ^ r5[d3++], v2 = (a4[f4 >>> 24] << 24 | a4[u4 >>> 16 & 255] << 16 | a4[h4 >>> 8 & 255] << 8 | a4[255 & l4]) ^ r5[d3++], g2 = (a4[u4 >>> 24] << 24 | a4[h4 >>> 16 & 255] << 16 | a4[l4 >>> 8 & 255] << 8 | a4[255 & f4]) ^ r5[d3++], t5[e5] = _3, t5[e5 + 1] = y2, t5[e5 + 2] = v2, t5[e5 + 3] = g2;
          }, keySize: 8 });
          t4.AES = e4._createHelper(_2);
        }(), function() {
          var t4 = a3, e4 = t4.lib, r4 = e4.WordArray, i4 = e4.BlockCipher, n4 = t4.algo, o4 = [57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4], s4 = [14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32], c3 = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28], h3 = [{ 0: 8421888, 268435456: 32768, 536870912: 8421378, 805306368: 2, 1073741824: 512, 1342177280: 8421890, 1610612736: 8389122, 1879048192: 8388608, 2147483648: 514, 2415919104: 8389120, 2684354560: 33280, 2952790016: 8421376, 3221225472: 32770, 3489660928: 8388610, 3758096384: 0, 4026531840: 33282, 134217728: 0, 402653184: 8421890, 671088640: 33282, 939524096: 32768, 1207959552: 8421888, 1476395008: 512, 1744830464: 8421378, 2013265920: 2, 2281701376: 8389120, 2550136832: 33280, 2818572288: 8421376, 3087007744: 8389122, 3355443200: 8388610, 3623878656: 32770, 3892314112: 514, 4160749568: 8388608, 1: 32768, 268435457: 2, 536870913: 8421888, 805306369: 8388608, 1073741825: 8421378, 1342177281: 33280, 1610612737: 512, 1879048193: 8389122, 2147483649: 8421890, 2415919105: 8421376, 2684354561: 8388610, 2952790017: 33282, 3221225473: 514, 3489660929: 8389120, 3758096385: 32770, 4026531841: 0, 134217729: 8421890, 402653185: 8421376, 671088641: 8388608, 939524097: 512, 1207959553: 32768, 1476395009: 8388610, 1744830465: 2, 2013265921: 33282, 2281701377: 32770, 2550136833: 8389122, 2818572289: 514, 3087007745: 8421888, 3355443201: 8389120, 3623878657: 0, 3892314113: 33280, 4160749569: 8421378 }, { 0: 1074282512, 16777216: 16384, 33554432: 524288, 50331648: 1074266128, 67108864: 1073741840, 83886080: 1074282496, 100663296: 1073758208, 117440512: 16, 134217728: 540672, 150994944: 1073758224, 167772160: 1073741824, 184549376: 540688, 201326592: 524304, 218103808: 0, 234881024: 16400, 251658240: 1074266112, 8388608: 1073758208, 25165824: 540688, 41943040: 16, 58720256: 1073758224, 75497472: 1074282512, 92274688: 1073741824, 109051904: 524288, 125829120: 1074266128, 142606336: 524304, 159383552: 0, 176160768: 16384, 192937984: 1074266112, 209715200: 1073741840, 226492416: 540672, 243269632: 1074282496, 260046848: 16400, 268435456: 0, 285212672: 1074266128, 301989888: 1073758224, 318767104: 1074282496, 335544320: 1074266112, 352321536: 16, 369098752: 540688, 385875968: 16384, 402653184: 16400, 419430400: 524288, 436207616: 524304, 452984832: 1073741840, 469762048: 540672, 486539264: 1073758208, 503316480: 1073741824, 520093696: 1074282512, 276824064: 540688, 293601280: 524288, 310378496: 1074266112, 327155712: 16384, 343932928: 1073758208, 360710144: 1074282512, 377487360: 16, 394264576: 1073741824, 411041792: 1074282496, 427819008: 1073741840, 444596224: 1073758224, 461373440: 524304, 478150656: 0, 494927872: 16400, 511705088: 1074266128, 528482304: 540672 }, { 0: 260, 1048576: 0, 2097152: 67109120, 3145728: 65796, 4194304: 65540, 5242880: 67108868, 6291456: 67174660, 7340032: 67174400, 8388608: 67108864, 9437184: 67174656, 10485760: 65792, 11534336: 67174404, 12582912: 67109124, 13631488: 65536, 14680064: 4, 15728640: 256, 524288: 67174656, 1572864: 67174404, 2621440: 0, 3670016: 67109120, 4718592: 67108868, 5767168: 65536, 6815744: 65540, 7864320: 260, 8912896: 4, 9961472: 256, 11010048: 67174400, 12058624: 65796, 13107200: 65792, 14155776: 67109124, 15204352: 67174660, 16252928: 67108864, 16777216: 67174656, 17825792: 65540, 18874368: 65536, 19922944: 67109120, 20971520: 256, 22020096: 67174660, 23068672: 67108868, 24117248: 0, 25165824: 67109124, 26214400: 67108864, 27262976: 4, 28311552: 65792, 29360128: 67174400, 30408704: 260, 31457280: 65796, 32505856: 67174404, 17301504: 67108864, 18350080: 260, 19398656: 67174656, 20447232: 0, 21495808: 65540, 22544384: 67109120, 23592960: 256, 24641536: 67174404, 25690112: 65536, 26738688: 67174660, 27787264: 65796, 28835840: 67108868, 29884416: 67109124, 30932992: 67174400, 31981568: 4, 33030144: 65792 }, { 0: 2151682048, 65536: 2147487808, 131072: 4198464, 196608: 2151677952, 262144: 0, 327680: 4198400, 393216: 2147483712, 458752: 4194368, 524288: 2147483648, 589824: 4194304, 655360: 64, 720896: 2147487744, 786432: 2151678016, 851968: 4160, 917504: 4096, 983040: 2151682112, 32768: 2147487808, 98304: 64, 163840: 2151678016, 229376: 2147487744, 294912: 4198400, 360448: 2151682112, 425984: 0, 491520: 2151677952, 557056: 4096, 622592: 2151682048, 688128: 4194304, 753664: 4160, 819200: 2147483648, 884736: 4194368, 950272: 4198464, 1015808: 2147483712, 1048576: 4194368, 1114112: 4198400, 1179648: 2147483712, 1245184: 0, 1310720: 4160, 1376256: 2151678016, 1441792: 2151682048, 1507328: 2147487808, 1572864: 2151682112, 1638400: 2147483648, 1703936: 2151677952, 1769472: 4198464, 1835008: 2147487744, 1900544: 4194304, 1966080: 64, 2031616: 4096, 1081344: 2151677952, 1146880: 2151682112, 1212416: 0, 1277952: 4198400, 1343488: 4194368, 1409024: 2147483648, 1474560: 2147487808, 1540096: 64, 1605632: 2147483712, 1671168: 4096, 1736704: 2147487744, 1802240: 2151678016, 1867776: 4160, 1933312: 2151682048, 1998848: 4194304, 2064384: 4198464 }, { 0: 128, 4096: 17039360, 8192: 262144, 12288: 536870912, 16384: 537133184, 20480: 16777344, 24576: 553648256, 28672: 262272, 32768: 16777216, 36864: 537133056, 40960: 536871040, 45056: 553910400, 49152: 553910272, 53248: 0, 57344: 17039488, 61440: 553648128, 2048: 17039488, 6144: 553648256, 10240: 128, 14336: 17039360, 18432: 262144, 22528: 537133184, 26624: 553910272, 30720: 536870912, 34816: 537133056, 38912: 0, 43008: 553910400, 47104: 16777344, 51200: 536871040, 55296: 553648128, 59392: 16777216, 63488: 262272, 65536: 262144, 69632: 128, 73728: 536870912, 77824: 553648256, 81920: 16777344, 86016: 553910272, 90112: 537133184, 94208: 16777216, 98304: 553910400, 102400: 553648128, 106496: 17039360, 110592: 537133056, 114688: 262272, 118784: 536871040, 122880: 0, 126976: 17039488, 67584: 553648256, 71680: 16777216, 75776: 17039360, 79872: 537133184, 83968: 536870912, 88064: 17039488, 92160: 128, 96256: 553910272, 100352: 262272, 104448: 553910400, 108544: 0, 112640: 553648128, 116736: 16777344, 120832: 262144, 124928: 537133056, 129024: 536871040 }, { 0: 268435464, 256: 8192, 512: 270532608, 768: 270540808, 1024: 268443648, 1280: 2097152, 1536: 2097160, 1792: 268435456, 2048: 0, 2304: 268443656, 2560: 2105344, 2816: 8, 3072: 270532616, 3328: 2105352, 3584: 8200, 3840: 270540800, 128: 270532608, 384: 270540808, 640: 8, 896: 2097152, 1152: 2105352, 1408: 268435464, 1664: 268443648, 1920: 8200, 2176: 2097160, 2432: 8192, 2688: 268443656, 2944: 270532616, 3200: 0, 3456: 270540800, 3712: 2105344, 3968: 268435456, 4096: 268443648, 4352: 270532616, 4608: 270540808, 4864: 8200, 5120: 2097152, 5376: 268435456, 5632: 268435464, 5888: 2105344, 6144: 2105352, 6400: 0, 6656: 8, 6912: 270532608, 7168: 8192, 7424: 268443656, 7680: 270540800, 7936: 2097160, 4224: 8, 4480: 2105344, 4736: 2097152, 4992: 268435464, 5248: 268443648, 5504: 8200, 5760: 270540808, 6016: 270532608, 6272: 270540800, 6528: 270532616, 6784: 8192, 7040: 2105352, 7296: 2097160, 7552: 0, 7808: 268435456, 8064: 268443656 }, { 0: 1048576, 16: 33555457, 32: 1024, 48: 1049601, 64: 34604033, 80: 0, 96: 1, 112: 34603009, 128: 33555456, 144: 1048577, 160: 33554433, 176: 34604032, 192: 34603008, 208: 1025, 224: 1049600, 240: 33554432, 8: 34603009, 24: 0, 40: 33555457, 56: 34604032, 72: 1048576, 88: 33554433, 104: 33554432, 120: 1025, 136: 1049601, 152: 33555456, 168: 34603008, 184: 1048577, 200: 1024, 216: 34604033, 232: 1, 248: 1049600, 256: 33554432, 272: 1048576, 288: 33555457, 304: 34603009, 320: 1048577, 336: 33555456, 352: 34604032, 368: 1049601, 384: 1025, 400: 34604033, 416: 1049600, 432: 1, 448: 0, 464: 34603008, 480: 33554433, 496: 1024, 264: 1049600, 280: 33555457, 296: 34603009, 312: 1, 328: 33554432, 344: 1048576, 360: 1025, 376: 34604032, 392: 33554433, 408: 34603008, 424: 0, 440: 34604033, 456: 1049601, 472: 1024, 488: 33555456, 504: 1048577 }, { 0: 134219808, 1: 131072, 2: 134217728, 3: 32, 4: 131104, 5: 134350880, 6: 134350848, 7: 2048, 8: 134348800, 9: 134219776, 10: 133120, 11: 134348832, 12: 2080, 13: 0, 14: 134217760, 15: 133152, 2147483648: 2048, 2147483649: 134350880, 2147483650: 134219808, 2147483651: 134217728, 2147483652: 134348800, 2147483653: 133120, 2147483654: 133152, 2147483655: 32, 2147483656: 134217760, 2147483657: 2080, 2147483658: 131104, 2147483659: 134350848, 2147483660: 0, 2147483661: 134348832, 2147483662: 134219776, 2147483663: 131072, 16: 133152, 17: 134350848, 18: 32, 19: 2048, 20: 134219776, 21: 134217760, 22: 134348832, 23: 131072, 24: 0, 25: 131104, 26: 134348800, 27: 134219808, 28: 134350880, 29: 133120, 30: 2080, 31: 134217728, 2147483664: 131072, 2147483665: 2048, 2147483666: 134348832, 2147483667: 133152, 2147483668: 32, 2147483669: 134348800, 2147483670: 134217728, 2147483671: 134219808, 2147483672: 134350880, 2147483673: 134217760, 2147483674: 134219776, 2147483675: 0, 2147483676: 133120, 2147483677: 2080, 2147483678: 131104, 2147483679: 134350848 }], l3 = [4160749569, 528482304, 33030144, 2064384, 129024, 8064, 504, 2147483679], f3 = n4.DES = i4.extend({ _doReset: function() {
            for (var t5 = this._key.words, e5 = [], r5 = 0; r5 < 56; r5++) {
              var i5 = o4[r5] - 1;
              e5[r5] = t5[i5 >>> 5] >>> 31 - i5 % 32 & 1;
            }
            for (var n5 = this._subKeys = [], a4 = 0; a4 < 16; a4++) {
              var h4 = n5[a4] = [], l4 = c3[a4];
              for (r5 = 0; r5 < 24; r5++)
                h4[r5 / 6 | 0] |= e5[(s4[r5] - 1 + l4) % 28] << 31 - r5 % 6, h4[4 + (r5 / 6 | 0)] |= e5[28 + (s4[r5 + 24] - 1 + l4) % 28] << 31 - r5 % 6;
              for (h4[0] = h4[0] << 1 | h4[0] >>> 31, r5 = 1; r5 < 7; r5++)
                h4[r5] = h4[r5] >>> 4 * (r5 - 1) + 3;
              h4[7] = h4[7] << 5 | h4[7] >>> 27;
            }
            var f4 = this._invSubKeys = [];
            for (r5 = 0; r5 < 16; r5++)
              f4[r5] = n5[15 - r5];
          }, encryptBlock: function(t5, e5) {
            this._doCryptBlock(t5, e5, this._subKeys);
          }, decryptBlock: function(t5, e5) {
            this._doCryptBlock(t5, e5, this._invSubKeys);
          }, _doCryptBlock: function(t5, e5, r5) {
            this._lBlock = t5[e5], this._rBlock = t5[e5 + 1], u3.call(this, 4, 252645135), u3.call(this, 16, 65535), d2.call(this, 2, 858993459), d2.call(this, 8, 16711935), u3.call(this, 1, 1431655765);
            for (var i5 = 0; i5 < 16; i5++) {
              for (var n5 = r5[i5], o5 = this._lBlock, s5 = this._rBlock, a4 = 0, c4 = 0; c4 < 8; c4++)
                a4 |= h3[c4][((s5 ^ n5[c4]) & l3[c4]) >>> 0];
              this._lBlock = s5, this._rBlock = o5 ^ a4;
            }
            var f4 = this._lBlock;
            this._lBlock = this._rBlock, this._rBlock = f4, u3.call(this, 1, 1431655765), d2.call(this, 8, 16711935), d2.call(this, 2, 858993459), u3.call(this, 16, 65535), u3.call(this, 4, 252645135), t5[e5] = this._lBlock, t5[e5 + 1] = this._rBlock;
          }, keySize: 2, ivSize: 2, blockSize: 2 });
          function u3(t5, e5) {
            var r5 = (this._lBlock >>> t5 ^ this._rBlock) & e5;
            this._rBlock ^= r5, this._lBlock ^= r5 << t5;
          }
          function d2(t5, e5) {
            var r5 = (this._rBlock >>> t5 ^ this._lBlock) & e5;
            this._lBlock ^= r5, this._rBlock ^= r5 << t5;
          }
          t4.DES = i4._createHelper(f3);
          var p2 = n4.TripleDES = i4.extend({ _doReset: function() {
            var t5 = this._key.words;
            if (2 !== t5.length && 4 !== t5.length && t5.length < 6)
              throw new Error("Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.");
            var e5 = t5.slice(0, 2), i5 = t5.length < 4 ? t5.slice(0, 2) : t5.slice(2, 4), n5 = t5.length < 6 ? t5.slice(0, 2) : t5.slice(4, 6);
            this._des1 = f3.createEncryptor(r4.create(e5)), this._des2 = f3.createEncryptor(r4.create(i5)), this._des3 = f3.createEncryptor(r4.create(n5));
          }, encryptBlock: function(t5, e5) {
            this._des1.encryptBlock(t5, e5), this._des2.decryptBlock(t5, e5), this._des3.encryptBlock(t5, e5);
          }, decryptBlock: function(t5, e5) {
            this._des3.decryptBlock(t5, e5), this._des2.encryptBlock(t5, e5), this._des1.decryptBlock(t5, e5);
          }, keySize: 6, ivSize: 2, blockSize: 2 });
          t4.TripleDES = i4._createHelper(p2);
        }(), function() {
          var t4 = a3, e4 = t4.lib.StreamCipher, r4 = t4.algo, i4 = r4.RC4 = e4.extend({ _doReset: function() {
            for (var t5 = this._key, e5 = t5.words, r5 = t5.sigBytes, i5 = this._S = [], n5 = 0; n5 < 256; n5++)
              i5[n5] = n5;
            n5 = 0;
            for (var o5 = 0; n5 < 256; n5++) {
              var s4 = n5 % r5, a4 = e5[s4 >>> 2] >>> 24 - s4 % 4 * 8 & 255;
              o5 = (o5 + i5[n5] + a4) % 256;
              var c3 = i5[n5];
              i5[n5] = i5[o5], i5[o5] = c3;
            }
            this._i = this._j = 0;
          }, _doProcessBlock: function(t5, e5) {
            t5[e5] ^= n4.call(this);
          }, keySize: 8, ivSize: 0 });
          function n4() {
            for (var t5 = this._S, e5 = this._i, r5 = this._j, i5 = 0, n5 = 0; n5 < 4; n5++) {
              r5 = (r5 + t5[e5 = (e5 + 1) % 256]) % 256;
              var o5 = t5[e5];
              t5[e5] = t5[r5], t5[r5] = o5, i5 |= t5[(t5[e5] + t5[r5]) % 256] << 24 - 8 * n5;
            }
            return this._i = e5, this._j = r5, i5;
          }
          t4.RC4 = e4._createHelper(i4);
          var o4 = r4.RC4Drop = i4.extend({ cfg: i4.cfg.extend({ drop: 192 }), _doReset: function() {
            i4._doReset.call(this);
            for (var t5 = this.cfg.drop; t5 > 0; t5--)
              n4.call(this);
          } });
          t4.RC4Drop = e4._createHelper(o4);
        }(), /** @preserve
               * Counter block mode compatible with  Dr Brian Gladman fileenc.c
               * derived from CryptoJS.mode.CTR
               * Jan Hruby jhruby.web@gmail.com
               */
        a3.mode.CTRGladman = function() {
          var t4 = a3.lib.BlockCipherMode.extend();
          function e4(t5) {
            if (255 == (t5 >> 24 & 255)) {
              var e5 = t5 >> 16 & 255, r5 = t5 >> 8 & 255, i4 = 255 & t5;
              255 === e5 ? (e5 = 0, 255 === r5 ? (r5 = 0, 255 === i4 ? i4 = 0 : ++i4) : ++r5) : ++e5, t5 = 0, t5 += e5 << 16, t5 += r5 << 8, t5 += i4;
            } else
              t5 += 1 << 24;
            return t5;
          }
          var r4 = t4.Encryptor = t4.extend({ processBlock: function(t5, r5) {
            var i4 = this._cipher, n4 = i4.blockSize, o4 = this._iv, s4 = this._counter;
            o4 && (s4 = this._counter = o4.slice(0), this._iv = void 0), function(t6) {
              0 === (t6[0] = e4(t6[0])) && (t6[1] = e4(t6[1]));
            }(s4);
            var a4 = s4.slice(0);
            i4.encryptBlock(a4, 0);
            for (var c3 = 0; c3 < n4; c3++)
              t5[r5 + c3] ^= a4[c3];
          } });
          return t4.Decryptor = r4, t4;
        }(), function() {
          var t4 = a3, e4 = t4.lib.StreamCipher, r4 = t4.algo, i4 = [], n4 = [], o4 = [], s4 = r4.Rabbit = e4.extend({ _doReset: function() {
            for (var t5 = this._key.words, e5 = this.cfg.iv, r5 = 0; r5 < 4; r5++)
              t5[r5] = 16711935 & (t5[r5] << 8 | t5[r5] >>> 24) | 4278255360 & (t5[r5] << 24 | t5[r5] >>> 8);
            var i5 = this._X = [t5[0], t5[3] << 16 | t5[2] >>> 16, t5[1], t5[0] << 16 | t5[3] >>> 16, t5[2], t5[1] << 16 | t5[0] >>> 16, t5[3], t5[2] << 16 | t5[1] >>> 16], n5 = this._C = [t5[2] << 16 | t5[2] >>> 16, 4294901760 & t5[0] | 65535 & t5[1], t5[3] << 16 | t5[3] >>> 16, 4294901760 & t5[1] | 65535 & t5[2], t5[0] << 16 | t5[0] >>> 16, 4294901760 & t5[2] | 65535 & t5[3], t5[1] << 16 | t5[1] >>> 16, 4294901760 & t5[3] | 65535 & t5[0]];
            for (this._b = 0, r5 = 0; r5 < 4; r5++)
              c3.call(this);
            for (r5 = 0; r5 < 8; r5++)
              n5[r5] ^= i5[r5 + 4 & 7];
            if (e5) {
              var o5 = e5.words, s5 = o5[0], a4 = o5[1], h3 = 16711935 & (s5 << 8 | s5 >>> 24) | 4278255360 & (s5 << 24 | s5 >>> 8), l3 = 16711935 & (a4 << 8 | a4 >>> 24) | 4278255360 & (a4 << 24 | a4 >>> 8), f3 = h3 >>> 16 | 4294901760 & l3, u3 = l3 << 16 | 65535 & h3;
              for (n5[0] ^= h3, n5[1] ^= f3, n5[2] ^= l3, n5[3] ^= u3, n5[4] ^= h3, n5[5] ^= f3, n5[6] ^= l3, n5[7] ^= u3, r5 = 0; r5 < 4; r5++)
                c3.call(this);
            }
          }, _doProcessBlock: function(t5, e5) {
            var r5 = this._X;
            c3.call(this), i4[0] = r5[0] ^ r5[5] >>> 16 ^ r5[3] << 16, i4[1] = r5[2] ^ r5[7] >>> 16 ^ r5[5] << 16, i4[2] = r5[4] ^ r5[1] >>> 16 ^ r5[7] << 16, i4[3] = r5[6] ^ r5[3] >>> 16 ^ r5[1] << 16;
            for (var n5 = 0; n5 < 4; n5++)
              i4[n5] = 16711935 & (i4[n5] << 8 | i4[n5] >>> 24) | 4278255360 & (i4[n5] << 24 | i4[n5] >>> 8), t5[e5 + n5] ^= i4[n5];
          }, blockSize: 4, ivSize: 2 });
          function c3() {
            for (var t5 = this._X, e5 = this._C, r5 = 0; r5 < 8; r5++)
              n4[r5] = e5[r5];
            for (e5[0] = e5[0] + 1295307597 + this._b | 0, e5[1] = e5[1] + 3545052371 + (e5[0] >>> 0 < n4[0] >>> 0 ? 1 : 0) | 0, e5[2] = e5[2] + 886263092 + (e5[1] >>> 0 < n4[1] >>> 0 ? 1 : 0) | 0, e5[3] = e5[3] + 1295307597 + (e5[2] >>> 0 < n4[2] >>> 0 ? 1 : 0) | 0, e5[4] = e5[4] + 3545052371 + (e5[3] >>> 0 < n4[3] >>> 0 ? 1 : 0) | 0, e5[5] = e5[5] + 886263092 + (e5[4] >>> 0 < n4[4] >>> 0 ? 1 : 0) | 0, e5[6] = e5[6] + 1295307597 + (e5[5] >>> 0 < n4[5] >>> 0 ? 1 : 0) | 0, e5[7] = e5[7] + 3545052371 + (e5[6] >>> 0 < n4[6] >>> 0 ? 1 : 0) | 0, this._b = e5[7] >>> 0 < n4[7] >>> 0 ? 1 : 0, r5 = 0; r5 < 8; r5++) {
              var i5 = t5[r5] + e5[r5], s5 = 65535 & i5, a4 = i5 >>> 16, c4 = ((s5 * s5 >>> 17) + s5 * a4 >>> 15) + a4 * a4, h3 = ((4294901760 & i5) * i5 | 0) + ((65535 & i5) * i5 | 0);
              o4[r5] = c4 ^ h3;
            }
            t5[0] = o4[0] + (o4[7] << 16 | o4[7] >>> 16) + (o4[6] << 16 | o4[6] >>> 16) | 0, t5[1] = o4[1] + (o4[0] << 8 | o4[0] >>> 24) + o4[7] | 0, t5[2] = o4[2] + (o4[1] << 16 | o4[1] >>> 16) + (o4[0] << 16 | o4[0] >>> 16) | 0, t5[3] = o4[3] + (o4[2] << 8 | o4[2] >>> 24) + o4[1] | 0, t5[4] = o4[4] + (o4[3] << 16 | o4[3] >>> 16) + (o4[2] << 16 | o4[2] >>> 16) | 0, t5[5] = o4[5] + (o4[4] << 8 | o4[4] >>> 24) + o4[3] | 0, t5[6] = o4[6] + (o4[5] << 16 | o4[5] >>> 16) + (o4[4] << 16 | o4[4] >>> 16) | 0, t5[7] = o4[7] + (o4[6] << 8 | o4[6] >>> 24) + o4[5] | 0;
          }
          t4.Rabbit = e4._createHelper(s4);
        }(), a3.mode.CTR = function() {
          var t4 = a3.lib.BlockCipherMode.extend(), e4 = t4.Encryptor = t4.extend({ processBlock: function(t5, e5) {
            var r4 = this._cipher, i4 = r4.blockSize, n4 = this._iv, o4 = this._counter;
            n4 && (o4 = this._counter = n4.slice(0), this._iv = void 0);
            var s4 = o4.slice(0);
            r4.encryptBlock(s4, 0), o4[i4 - 1] = o4[i4 - 1] + 1 | 0;
            for (var a4 = 0; a4 < i4; a4++)
              t5[e5 + a4] ^= s4[a4];
          } });
          return t4.Decryptor = e4, t4;
        }(), function() {
          var t4 = a3, e4 = t4.lib.StreamCipher, r4 = t4.algo, i4 = [], n4 = [], o4 = [], s4 = r4.RabbitLegacy = e4.extend({ _doReset: function() {
            var t5 = this._key.words, e5 = this.cfg.iv, r5 = this._X = [t5[0], t5[3] << 16 | t5[2] >>> 16, t5[1], t5[0] << 16 | t5[3] >>> 16, t5[2], t5[1] << 16 | t5[0] >>> 16, t5[3], t5[2] << 16 | t5[1] >>> 16], i5 = this._C = [t5[2] << 16 | t5[2] >>> 16, 4294901760 & t5[0] | 65535 & t5[1], t5[3] << 16 | t5[3] >>> 16, 4294901760 & t5[1] | 65535 & t5[2], t5[0] << 16 | t5[0] >>> 16, 4294901760 & t5[2] | 65535 & t5[3], t5[1] << 16 | t5[1] >>> 16, 4294901760 & t5[3] | 65535 & t5[0]];
            this._b = 0;
            for (var n5 = 0; n5 < 4; n5++)
              c3.call(this);
            for (n5 = 0; n5 < 8; n5++)
              i5[n5] ^= r5[n5 + 4 & 7];
            if (e5) {
              var o5 = e5.words, s5 = o5[0], a4 = o5[1], h3 = 16711935 & (s5 << 8 | s5 >>> 24) | 4278255360 & (s5 << 24 | s5 >>> 8), l3 = 16711935 & (a4 << 8 | a4 >>> 24) | 4278255360 & (a4 << 24 | a4 >>> 8), f3 = h3 >>> 16 | 4294901760 & l3, u3 = l3 << 16 | 65535 & h3;
              for (i5[0] ^= h3, i5[1] ^= f3, i5[2] ^= l3, i5[3] ^= u3, i5[4] ^= h3, i5[5] ^= f3, i5[6] ^= l3, i5[7] ^= u3, n5 = 0; n5 < 4; n5++)
                c3.call(this);
            }
          }, _doProcessBlock: function(t5, e5) {
            var r5 = this._X;
            c3.call(this), i4[0] = r5[0] ^ r5[5] >>> 16 ^ r5[3] << 16, i4[1] = r5[2] ^ r5[7] >>> 16 ^ r5[5] << 16, i4[2] = r5[4] ^ r5[1] >>> 16 ^ r5[7] << 16, i4[3] = r5[6] ^ r5[3] >>> 16 ^ r5[1] << 16;
            for (var n5 = 0; n5 < 4; n5++)
              i4[n5] = 16711935 & (i4[n5] << 8 | i4[n5] >>> 24) | 4278255360 & (i4[n5] << 24 | i4[n5] >>> 8), t5[e5 + n5] ^= i4[n5];
          }, blockSize: 4, ivSize: 2 });
          function c3() {
            for (var t5 = this._X, e5 = this._C, r5 = 0; r5 < 8; r5++)
              n4[r5] = e5[r5];
            for (e5[0] = e5[0] + 1295307597 + this._b | 0, e5[1] = e5[1] + 3545052371 + (e5[0] >>> 0 < n4[0] >>> 0 ? 1 : 0) | 0, e5[2] = e5[2] + 886263092 + (e5[1] >>> 0 < n4[1] >>> 0 ? 1 : 0) | 0, e5[3] = e5[3] + 1295307597 + (e5[2] >>> 0 < n4[2] >>> 0 ? 1 : 0) | 0, e5[4] = e5[4] + 3545052371 + (e5[3] >>> 0 < n4[3] >>> 0 ? 1 : 0) | 0, e5[5] = e5[5] + 886263092 + (e5[4] >>> 0 < n4[4] >>> 0 ? 1 : 0) | 0, e5[6] = e5[6] + 1295307597 + (e5[5] >>> 0 < n4[5] >>> 0 ? 1 : 0) | 0, e5[7] = e5[7] + 3545052371 + (e5[6] >>> 0 < n4[6] >>> 0 ? 1 : 0) | 0, this._b = e5[7] >>> 0 < n4[7] >>> 0 ? 1 : 0, r5 = 0; r5 < 8; r5++) {
              var i5 = t5[r5] + e5[r5], s5 = 65535 & i5, a4 = i5 >>> 16, c4 = ((s5 * s5 >>> 17) + s5 * a4 >>> 15) + a4 * a4, h3 = ((4294901760 & i5) * i5 | 0) + ((65535 & i5) * i5 | 0);
              o4[r5] = c4 ^ h3;
            }
            t5[0] = o4[0] + (o4[7] << 16 | o4[7] >>> 16) + (o4[6] << 16 | o4[6] >>> 16) | 0, t5[1] = o4[1] + (o4[0] << 8 | o4[0] >>> 24) + o4[7] | 0, t5[2] = o4[2] + (o4[1] << 16 | o4[1] >>> 16) + (o4[0] << 16 | o4[0] >>> 16) | 0, t5[3] = o4[3] + (o4[2] << 8 | o4[2] >>> 24) + o4[1] | 0, t5[4] = o4[4] + (o4[3] << 16 | o4[3] >>> 16) + (o4[2] << 16 | o4[2] >>> 16) | 0, t5[5] = o4[5] + (o4[4] << 8 | o4[4] >>> 24) + o4[3] | 0, t5[6] = o4[6] + (o4[5] << 16 | o4[5] >>> 16) + (o4[4] << 16 | o4[4] >>> 16) | 0, t5[7] = o4[7] + (o4[6] << 8 | o4[6] >>> 24) + o4[5] | 0;
          }
          t4.RabbitLegacy = e4._createHelper(s4);
        }(), a3.pad.ZeroPadding = { pad: function(t4, e4) {
          var r4 = 4 * e4;
          t4.clamp(), t4.sigBytes += r4 - (t4.sigBytes % r4 || r4);
        }, unpad: function(t4) {
          var e4 = t4.words, r4 = t4.sigBytes - 1;
          for (r4 = t4.sigBytes - 1; r4 >= 0; r4--)
            if (e4[r4 >>> 2] >>> 24 - r4 % 4 * 8 & 255) {
              t4.sigBytes = r4 + 1;
              break;
            }
        } }, a3);
      });
      return function() {
        function e3(r3) {
          t2(this, e3);
          var i3 = r3.isArray, n3 = r3.isMap, o3 = r3.isDevMode;
          this._isArray = i3, this._isMap = n3, this._isDevMode = o3, this._interceptProfanityList = [], this._interceptFilter = null, this._interceptRegExpList = [], this._replacingProfanityMap = /* @__PURE__ */ new Map(), this._replacingFilter = null, this._replacingRegExpMap = /* @__PURE__ */ new Map(), this._key = "", this._iv = "", this._decryptOptions = void 0, this._n = "TIMProfanityFilterPlugin", true === o3 && formatAppLog("log", "at node_modules/tim-profanity-filter-plugin/index.js:15", "".concat(this._n, ".VERSION:").concat("1.1.0"));
        }
        return r2(e3, [{ key: "onToken", value: function(t3) {
          this._key = u2.enc.Utf8.parse(t3.slice(0, 32)), this._iv = this._key, this._decryptOptions = { iv: this._iv, mode: u2.mode.CBC, padding: u2.pad.Pkcs7 };
        } }, { key: "onLexiconSliced", value: function(t3) {
          if (this._isArray(t3) && 0 !== t3.length) {
            var e4, r3, i3, n3 = a2(t3);
            try {
              for (n3.s(); !(i3 = n3.n()).done; ) {
                var o3 = i3.value, s3 = o3.filterType, c3 = o3.profanityType, h3 = o3.profanity, l3 = o3.replacement;
                e4 = this._getDecryptedString(h3), r3 = this._getDecryptedString(l3), 1 === s3 ? 1 === c3 ? this._interceptProfanityList.push(e4) : 2 === c3 && this._interceptRegExpList.push(e4) : 2 === s3 && (1 === c3 ? this._replacingProfanityMap.set(e4, r3) : 2 === c3 && this._replacingRegExpMap.set(e4, r3));
              }
            } catch (f3) {
              n3.e(f3);
            } finally {
              n3.f();
            }
          }
        } }, { key: "_getDecryptedString", value: function(t3) {
          var e4 = u2.AES.decrypt(t3, this._key, this._decryptOptions);
          return u2.enc.Utf8.stringify(e4).toLowerCase();
        } }, { key: "onLexiconCompleted", value: function(t3) {
          this.onLexiconSliced(t3), this._interceptFilter = new h2({ input: this._interceptProfanityList, isArray: this._isArray, isMap: this._isMap }), this._replacingFilter = new h2({ input: this._replacingProfanityMap, isArray: this._isArray, isMap: this._isMap }), true === this._isDevMode && (formatAppLog("log", "at node_modules/tim-profanity-filter-plugin/index.js:15", "".concat(this._n, " _interceptProfanityList ->"), this._interceptProfanityList), formatAppLog("log", "at node_modules/tim-profanity-filter-plugin/index.js:15", "".concat(this._n, " _interceptRegExpList ->"), this._interceptRegExpList), formatAppLog("log", "at node_modules/tim-profanity-filter-plugin/index.js:15", "".concat(this._n, " _replacingProfanityMap ->"), this._replacingProfanityMap), formatAppLog("log", "at node_modules/tim-profanity-filter-plugin/index.js:15", "".concat(this._n, " _replacingRegExpMap ->"), this._replacingRegExpMap));
        } }, { key: "filter", value: function(t3) {
          var e4 = { type: 0, modifiedText: t3 };
          if ("string" != typeof t3)
            return true === this._isDevMode && formatAppLog("warn", "at node_modules/tim-profanity-filter-plugin/index.js:15", "".concat(this._n, ".filter invalid params, string required!")), e4;
          if (true === this._interceptFilter.filter({ text: t3, replacingEnabled: false }).isMatched)
            return e4.type = 1, e4;
          for (var r3 = false, n3 = 0, o3 = this._interceptRegExpList.length; n3 < o3; n3++)
            if (new RegExp(this._interceptRegExpList[n3], "gi").test(t3.toLowerCase())) {
              r3 = true;
              break;
            }
          if (r3)
            return e4.type = 1, e4;
          var s3 = this._replacingFilter.filter({ text: t3, replacingEnabled: true });
          true === s3.isMatched && (e4.type = 2, e4.modifiedText = s3.modifiedText);
          var c3, h3 = e4.modifiedText, l3 = null, f3 = a2(this._replacingRegExpMap);
          try {
            for (f3.s(); !(c3 = f3.n()).done; ) {
              var u3 = i2(c3.value, 2), d2 = u3[0], p2 = u3[1];
              l3 = new RegExp(d2, "gi"), h3 = h3.replace(l3, p2);
            }
          } catch (_2) {
            f3.e(_2);
          } finally {
            f3.f();
          }
          return h3 !== t3 && (e4.type = 2, e4.modifiedText = h3), e4;
        } }, { key: "reset", value: function() {
          this._isArray = null, this._isMap = null, this._interceptProfanityList.length = 0, this._interceptRegExpList.length = 0, this._replacingProfanityMap.clear(), this._replacingRegExpMap.clear(), this._key = "", this._iv = "", this._decryptOptions = {}, this._interceptFilter && this._interceptFilter.reset(), this._replacingFilter && this._replacingFilter.reset();
        } }]), e3;
      }();
    });
  })(timProfanityFilterPlugin);
  var timProfanityFilterPluginExports = timProfanityFilterPlugin.exports;
  const n$2 = /* @__PURE__ */ getDefaultExportFromCjs(timProfanityFilterPluginExports);
  function n$1(e2, t2) {
    var s2 = {};
    for (var n2 in e2)
      Object.prototype.hasOwnProperty.call(e2, n2) && t2.indexOf(n2) < 0 && (s2[n2] = e2[n2]);
    if (null != e2 && "function" == typeof Object.getOwnPropertySymbols) {
      var i2 = 0;
      for (n2 = Object.getOwnPropertySymbols(e2); i2 < n2.length; i2++)
        t2.indexOf(n2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(e2, n2[i2]) && (s2[n2[i2]] = e2[n2[i2]]);
    }
    return s2;
  }
  function i$2(e2, t2, s2, n2) {
    return new (s2 || (s2 = Promise))(function(i2, r2) {
      function a2(e3) {
        try {
          u2(n2.next(e3));
        } catch (e4) {
          r2(e4);
        }
      }
      function o2(e3) {
        try {
          u2(n2.throw(e3));
        } catch (e4) {
          r2(e4);
        }
      }
      function u2(e3) {
        var t3;
        e3.done ? i2(e3.value) : (t3 = e3.value, t3 instanceof s2 ? t3 : new s2(function(e4) {
          e4(t3);
        })).then(a2, o2);
      }
      u2((n2 = n2.apply(e2, t2 || [])).next());
    });
  }
  "function" == typeof SuppressedError && SuppressedError;
  let r$2 = class r2 {
    constructor(e2) {
      return r2.instance || (r2.instance = this, this.engine = e2, this.events = {}, this.bindIMEvents()), r2.instance;
    }
    addEvent(e2, t2) {
      this.events[e2] || (this.events[e2] = /* @__PURE__ */ new Map()), this.events[e2].set(t2, 1);
    }
    removeEvents() {
      Object.keys(this.events).forEach((e2) => {
        this.events[e2].clear();
      }), this.events = {};
    }
    dispatch(e2, t2) {
      if (this.events[e2])
        for (const s2 of this.events[e2].keys())
          s2.call(this, t2);
    }
    bindIMEvents() {
      this.engine.chat.on(this.engine.EVENT.SDK_READY, this.onSDKReady, this), this.engine.chat.on(this.engine.EVENT.SDK_NOT_READY, this.onSDKNotReady, this), this.engine.chat.on(this.engine.EVENT.KICKED_OUT, this.onKickedOut, this), this.engine.chat.on(this.engine.EVENT.NET_STATE_CHANGE, this.onNetStateChange, this), this.engine.chat.on(this.engine.EVENT.MESSAGE_RECEIVED, this.onReceiveMessage, this), this.engine.chat.on(this.engine.EVENT.MESSAGE_MODIFIED, this.onMessageModified, this), this.engine.chat.on(this.engine.EVENT.MESSAGE_REVOKED, this.onMessageRevoked, this), this.engine.chat.on(this.engine.EVENT.MESSAGE_READ_BY_PEER, this.onMessageReadByPeer, this), this.engine.chat.on(this.engine.EVENT.MESSAGE_READ_RECEIPT_RECEIVED, this.onMessageReadReceiptReceived, this), this.engine.chat.on(this.engine.EVENT.MESSAGE_REACTIONS_UPDATED, this.onMessageReactionsUpdated, this), this.engine.chat.on(this.engine.EVENT.CONVERSATION_LIST_UPDATED, this.onConversationListUpdated, this), this.engine.chat.on(this.engine.EVENT.TOTAL_UNREAD_MESSAGE_COUNT_UPDATED, this.onTotalMessageCountUpdated, this), this.engine.chat.on(this.engine.EVENT.PROFILE_UPDATED, this.onProfileUpdated, this), this.engine.chat.on(this.engine.EVENT.BLACKLIST_UPDATED, this.onBlacklistUpdated, this), this.engine.chat.on(this.engine.EVENT.USER_STATUS_UPDATED, this.onUserStatusUpdated, this), this.engine.chat.on(this.engine.EVENT.GROUP_LIST_UPDATED, this.onGroupListUpdated, this), this.engine.chat.on(this.engine.EVENT.GROUP_ATTRIBUTES_UPDATED, this.onGroupAttributesUpdated, this), this.engine.chat.on(this.engine.EVENT.GROUP_COUNTER_UPDATED, this.onGroupCounterUpdated, this), this.engine.chat.on(this.engine.EVENT.FRIEND_LIST_UPDATED, this.onFriendListUpdated, this), this.engine.chat.on(this.engine.EVENT.FRIEND_APPLICATION_LIST_UPDATED, this.onFriendApplicationListUpdated, this);
    }
    unbindIMEvents() {
      this.engine.chat.off(this.engine.EVENT.SDK_READY, this.onSDKReady, this), this.engine.chat.off(this.engine.EVENT.SDK_NOT_READY, this.onSDKNotReady, this), this.engine.chat.off(this.engine.EVENT.KICKED_OUT, this.onKickedOut, this), this.engine.chat.off(this.engine.EVENT.NET_STATE_CHANGE, this.onNetStateChange, this), this.engine.chat.off(this.engine.EVENT.MESSAGE_RECEIVED, this.onReceiveMessage, this), this.engine.chat.off(this.engine.EVENT.MESSAGE_MODIFIED, this.onMessageModified, this), this.engine.chat.off(this.engine.EVENT.MESSAGE_REVOKED, this.onMessageRevoked, this), this.engine.chat.off(this.engine.EVENT.MESSAGE_READ_BY_PEER, this.onMessageReadByPeer, this), this.engine.chat.off(this.engine.EVENT.MESSAGE_READ_RECEIPT_RECEIVED, this.onMessageReadReceiptReceived, this), this.engine.chat.off(this.engine.EVENT.MESSAGE_REACTIONS_UPDATED, this.onMessageReactionsUpdated, this), this.engine.chat.off(this.engine.EVENT.CONVERSATION_LIST_UPDATED, this.onConversationListUpdated, this), this.engine.chat.off(this.engine.EVENT.TOTAL_UNREAD_MESSAGE_COUNT_UPDATED, this.onTotalMessageCountUpdated, this), this.engine.chat.off(this.engine.EVENT.PROFILE_UPDATED, this.onProfileUpdated, this), this.engine.chat.off(this.engine.EVENT.BLACKLIST_UPDATED, this.onBlacklistUpdated, this), this.engine.chat.off(this.engine.EVENT.USER_STATUS_UPDATED, this.onUserStatusUpdated, this), this.engine.chat.off(this.engine.EVENT.GROUP_LIST_UPDATED, this.onGroupListUpdated, this), this.engine.chat.off(this.engine.EVENT.GROUP_ATTRIBUTES_UPDATED, this.onGroupAttributesUpdated, this), this.engine.chat.off(this.engine.EVENT.GROUP_COUNTER_UPDATED, this.onGroupCounterUpdated, this), this.engine.chat.off(this.engine.EVENT.FRIEND_LIST_UPDATED, this.onFriendListUpdated, this), this.engine.chat.off(this.engine.EVENT.FRIEND_APPLICATION_LIST_UPDATED, this.onFriendApplicationListUpdated, this), r2.instance = null;
    }
    onSDKReady(e2) {
      this.dispatch(this.engine.EVENT.SDK_READY, e2.data);
    }
    onSDKNotReady(e2) {
      this.dispatch(this.engine.EVENT.SDK_NOT_READY, e2.data);
    }
    onKickedOut(e2) {
      this.dispatch(this.engine.EVENT.KICKED_OUT, e2.data);
    }
    onNetStateChange(e2) {
      this.dispatch(this.engine.EVENT.NET_STATE_CHANGE, e2.data);
    }
    onReceiveMessage(e2) {
      this.dispatch(this.engine.EVENT.MESSAGE_RECEIVED, e2.data);
    }
    onMessageModified(e2) {
      this.dispatch(this.engine.EVENT.MESSAGE_MODIFIED, e2.data);
    }
    onMessageRevoked(e2) {
      this.dispatch(this.engine.EVENT.MESSAGE_REVOKED, e2.data);
    }
    onMessageReadByPeer(e2) {
      this.dispatch(this.engine.EVENT.MESSAGE_READ_BY_PEER, e2.data);
    }
    onMessageReadReceiptReceived(e2) {
      this.dispatch(this.engine.EVENT.MESSAGE_READ_RECEIPT_RECEIVED, e2.data);
    }
    onMessageReactionsUpdated(e2) {
      this.dispatch(this.engine.EVENT.MESSAGE_REACTIONS_UPDATED, e2.data);
    }
    onConversationListUpdated(e2) {
      this.dispatch(this.engine.EVENT.CONVERSATION_LIST_UPDATED, e2.data);
    }
    onTotalMessageCountUpdated(e2) {
      this.dispatch(this.engine.EVENT.TOTAL_UNREAD_MESSAGE_COUNT_UPDATED, e2.data);
    }
    onProfileUpdated(e2) {
      this.dispatch(this.engine.EVENT.PROFILE_UPDATED, e2.data);
    }
    onBlacklistUpdated(e2) {
      this.dispatch(this.engine.EVENT.BLACKLIST_UPDATED, e2.data);
    }
    onUserStatusUpdated(e2) {
      this.dispatch(this.engine.EVENT.USER_STATUS_UPDATED, e2.data);
    }
    onGroupListUpdated(e2) {
      this.dispatch(this.engine.EVENT.GROUP_LIST_UPDATED, e2.data);
    }
    onGroupAttributesUpdated(e2) {
      this.dispatch(this.engine.EVENT.GROUP_ATTRIBUTES_UPDATED, e2.data);
    }
    onGroupCounterUpdated(e2) {
      this.dispatch(this.engine.EVENT.GROUP_COUNTER_UPDATED, e2.data);
    }
    onFriendListUpdated(e2) {
      this.dispatch(this.engine.EVENT.FRIEND_LIST_UPDATED, e2.data);
    }
    onFriendApplicationListUpdated(e2) {
      this.dispatch(this.engine.EVENT.FRIEND_APPLICATION_LIST_UPDATED, e2.data);
    }
  };
  var a$2, o$2, u$2, c$2, g$2, l$2, h$2, p$2, d$1;
  !function(e2) {
    e2.TUIStore = "TUIStore", e2.TUITranslate = "TUITranslate", e2.TUIConversation = "TUIConversation", e2.TUIChat = "TUIChat", e2.TUIGroup = "TUIGroup", e2.TUIUser = "TUIUser", e2.TUIFriend = "TUIFriend", e2.TUIReport = "TUIReport";
  }(a$2 || (a$2 = {})), function(e2) {
    e2.APP = "application", e2.CONV = "conversation", e2.CHAT = "chat", e2.GRP = "group", e2.USER = "user", e2.FRIEND = "friend", e2.SEARCH = "search", e2.CUSTOM = "custom";
  }(o$2 || (o$2 = {})), function(e2) {
    e2[e2.UNSUB_USER = -1] = "UNSUB_USER";
  }(u$2 || (u$2 = {})), function(e2) {
    e2.BUSINESS_ID = "user_typing_status", e2[e2.STATUS_START = 1] = "STATUS_START", e2[e2.STATUS_END = 0] = "STATUS_END", e2[e2.VERSION = 1] = "VERSION", e2[e2.ACTION_START_ID = 14] = "ACTION_START_ID", e2[e2.ACTION_END_ID = 0] = "ACTION_END_ID", e2.ACTION_START = "EIMAMSG_InputStatus_Ing", e2.ACTION_END = "EIMAMSG_InputStatus_End", e2[e2.NEED_TYPING = 1] = "NEED_TYPING";
  }(c$2 || (c$2 = {})), function(e2) {
    e2.ADD = "add", e2.REMOVE = "remove";
  }(g$2 || (g$2 = {})), function(e2) {
    e2[e2.MSG_MODIFY_CONFLICT = 2480] = "MSG_MODIFY_CONFLICT", e2[e2.MSG_MODIFY_DISABLED_IN_AVCHATROOM = 2481] = "MSG_MODIFY_DISABLED_IN_AVCHATROOM", e2[e2.MODIFY_MESSAGE_NOT_EXIST = 20026] = "MODIFY_MESSAGE_NOT_EXIST";
  }(l$2 || (l$2 = {})), function(e2) {
    e2[e2.NOT_INIT = -1e5] = "NOT_INIT", e2[e2.INVALID_CONV_ID = -100001] = "INVALID_CONV_ID", e2[e2.CONV_ID_SAME = -100002] = "CONV_ID_SAME", e2[e2.CONV_NOT_EXIST = -100003] = "CONV_NOT_EXIST", e2[e2.GET_MSG_LIST_ERROR = -100004] = "GET_MSG_LIST_ERROR", e2[e2.MISMATCH_TYPE_AND_PAYLOAD = -100005] = "MISMATCH_TYPE_AND_PAYLOAD";
  }(h$2 || (h$2 = {})), function(e2) {
    e2.MSG_MODIFY_CONFLICT = "MODIFY_MESSAGE_ERROR,修改消息发生冲突, data.message 是最新的消息", e2.MSG_MODIFY_DISABLED_IN_AVCHATROOM = "MODIFY_MESSAGE_ERROR,不支持修改直播群消息.", e2.MODIFY_MESSAGE_NOT_EXIST = "MODIFY_MESSAGE_ERROR,消息不存在.";
  }(p$2 || (p$2 = {})), function(e2) {
    e2.NOT_INIT = "TUIChatEngine 初始化未完成，请确认 TUIChatEngine.login 接口调用是否正常。", e2.INVALID_CONV_ID = "会话 ID 无效", e2.CONV_ID_SAME = "您切换的是同一个会话 ID", e2.CONV_NOT_EXIST = "会话不存在", e2.GET_MSG_LIST_ERROR = "Chat SDK is not ready.", e2.MISMATCH_TYPE_AND_PAYLOAD = "type 与 payload 不匹配.";
  }(d$1 || (d$1 = {}));
  const f$1 = { logout: 1, destroy: 1 }, m$1 = { deleteConversation: 1, pinConversation: 1, muteConversation: 1, switchConversation: 1, getConversationProfile: 1, clearHistoryMessage: 1 }, v$2 = { modifyMessage: 1, revokeMessage: 1, resendMessage: 1, deleteMessage: 1, quoteMessage: 1, replyMessage: 1, setMessageExtensions: 1, deleteMessageExtensions: 1, getMessageExtensions: 1, sendTextMessage: 1, sendTextAtMessage: 1, sendImageMessage: 1, sendAudioMessage: 1, sendVideoMessage: 1, sendFileMessage: 1, sendCustomMessage: 1, sendFaceMessage: 1, sendLocationMessage: 1, sendForwardMessage: 1, enterTypingState: 1, leaveTypingState: 1, sendMessageReadReceipt: 1, getGroupMessageReadMemberList: 1, getMessageList: 1, downloadMergedMessages: 1, setTranslationLanguage: 1, translateText: 1, searchCloudMessages: 1, addMessageReaction: 1, removeMessageReaction: 1, getMessageReactions: 1, getAllUserListOfMessageReaction: 1 }, T$2 = { switchGroup: 1, getGroupProfile: 1, updateGroupProfile: 1, createGroup: 1, dismissGroup: 1, searchGroupByID: 1, joinGroup: 1, quitGroup: 1, getGroupApplicationList: 1, handleGroupApplication: 1, getGroupOnlineMemberCount: 1, changeGroupOwner: 1, initGroupAttributes: 1, setGroupAttributes: 1, deleteGroupAttributes: 1, getGroupAttributes: 1, setGroupCounters: 1, increaseGroupCounter: 1, decreaseGroupCounter: 1, getGroupCounters: 1, getGroupMemberList: 1, getGroupMemberProfile: 1, addGroupMember: 1, deleteGroupMember: 1, setGroupMemberMuteTime: 1, setGroupMemberRole: 1, setGroupMemberNameCard: 1, setGroupMemberCustomField: 1, markGroupMemberList: 1 }, E$2 = { switchUserStatus: 1, switchMessageReadStatus: 1, getUserProfile: 1, updateMyProfile: 1, addToBlacklist: 1, removeFromBlacklist: 1 }, I$1 = { getFriendList: 1, addFriend: 1, deleteFriend: 1, checkFriend: 1, getFriendProfile: 1, updateFriend: 1, acceptFriendApplication: 1, refuseFriendApplication: 1, deleteFriendApplication: 1, setFriendApplicationRead: 1 }, S$1 = function(e2) {
    return void 0 === e2;
  }, y = function(e2) {
    return e2.startsWith("_");
  }, b = function(e2) {
    return /^(https?:\/\/(([a-zA-Z0-9]+-?)+[a-zA-Z0-9]+\.)+[a-zA-Z]+)(:\d+)?(\/.*)?(\?.*)?(#.*)?$/.test(e2);
  };
  const U$1 = function(e2) {
    return e2 && function(e3) {
      if ("string" == typeof e3)
        try {
          return !!JSON.parse(e3);
        } catch (e4) {
          return false;
        }
      return false;
    }(e2) ? JSON.parse(e2) : e2;
  }, C$1 = function(e2) {
    let t2 = "";
    return t2 = e2 >= 1048576 ? `${(e2 / 1048576).toFixed(2)} Mb` : e2 >= 1024 ? `${(e2 / 1024).toFixed(2)} Kb` : `${e2.toFixed(2)}B`, t2;
  }, M$1 = "https://web.sdk.qcloud.com/component/TUIKit/assets/avatar_16.png", O = "https://web.sdk.qcloud.com/im/demo/TUIkit/web/img/constomer.png", _$1 = "https://web.sdk.qcloud.com/component/TUIKit/assets/group_avatar.png", D = "https://web.sdk.qcloud.com/im/assets/emoji-plugin/", P$1 = "https://web.sdk.qcloud.com/im/assets/face-elem/", R$1 = "https://map.qq.com/?type=marker&isopeninfowin=1&markertype=1&", L$1 = "https://apis.map.qq.com/ws/staticmap/v2/?", A = { "[TUIEmoji_Expect]": "emoji_0@2x.png", "[TUIEmoji_Blink]": "emoji_1@2x.png", "[TUIEmoji_Guffaw]": "emoji_2@2x.png", "[TUIEmoji_KindSmile]": "emoji_3@2x.png", "[TUIEmoji_Haha]": "emoji_4@2x.png", "[TUIEmoji_Cheerful]": "emoji_5@2x.png", "[TUIEmoji_Smile]": "emoji_6@2x.png", "[TUIEmoji_Sorrow]": "emoji_7@2x.png", "[TUIEmoji_Speechless]": "emoji_8@2x.png", "[TUIEmoji_Amazed]": "emoji_9@2x.png", "[TUIEmoji_Complacent]": "emoji_10@2x.png", "[TUIEmoji_Lustful]": "emoji_11@2x.png", "[TUIEmoji_Stareyes]": "emoji_12@2x.png", "[TUIEmoji_Giggle]": "emoji_13@2x.png", "[TUIEmoji_Daemon]": "emoji_14@2x.png", "[TUIEmoji_Rage]": "emoji_15@2x.png", "[TUIEmoji_Yawn]": "emoji_16@2x.png", "[TUIEmoji_TearsLaugh]": "emoji_17@2x.png", "[TUIEmoji_Silly]": "emoji_18@2x.png", "[TUIEmoji_Wail]": "emoji_19@2x.png", "[TUIEmoji_Kiss]": "emoji_20@2x.png", "[TUIEmoji_Trapped]": "emoji_21@2x.png", "[TUIEmoji_Fear]": "emoji_22@2x.png", "[TUIEmoji_BareTeeth]": "emoji_23@2x.png", "[TUIEmoji_FlareUp]": "emoji_24@2x.png", "[TUIEmoji_Tact]": "emoji_25@2x.png", "[TUIEmoji_Shit]": "emoji_26@2x.png", "[TUIEmoji_ShutUp]": "emoji_27@2x.png", "[TUIEmoji_Sigh]": "emoji_28@2x.png", "[TUIEmoji_Hehe]": "emoji_29@2x.png", "[TUIEmoji_Silent]": "emoji_30@2x.png", "[TUIEmoji_Skull]": "emoji_31@2x.png", "[TUIEmoji_Mask]": "emoji_32@2x.png", "[TUIEmoji_Beer]": "emoji_33@2x.png", "[TUIEmoji_Cake]": "emoji_34@2x.png", "[TUIEmoji_RedPacket]": "emoji_35@2x.png", "[TUIEmoji_Bombs]": "emoji_36@2x.png", "[TUIEmoji_Ai]": "emoji_37@2x.png", "[TUIEmoji_Celebrate]": "emoji_38@2x.png", "[TUIEmoji_Bless]": "emoji_39@2x.png", "[TUIEmoji_Flower]": "emoji_40@2x.png", "[TUIEmoji_Watermelon]": "emoji_41@2x.png", "[TUIEmoji_Cow]": "emoji_42@2x.png", "[TUIEmoji_Fool]": "emoji_43@2x.png", "[TUIEmoji_Surprised]": "emoji_44@2x.png", "[TUIEmoji_Askance]": "emoji_45@2x.png", "[TUIEmoji_Monster]": "emoji_46@2x.png", "[TUIEmoji_Pig]": "emoji_47@2x.png", "[TUIEmoji_Coffee]": "emoji_48@2x.png", "[TUIEmoji_Ok]": "emoji_49@2x.png", "[TUIEmoji_Heart]": "emoji_50@2x.png", "[TUIEmoji_Sun]": "emoji_51@2x.png", "[TUIEmoji_Moon]": "emoji_52@2x.png", "[TUIEmoji_Star]": "emoji_53@2x.png", "[TUIEmoji_Rich]": "emoji_54@2x.png", "[TUIEmoji_Fortune]": "emoji_55@2x.png", "[TUIEmoji_857]": "emoji_56@2x.png", "[TUIEmoji_666]": "emoji_57@2x.png", "[TUIEmoji_Prohibit]": "emoji_58@2x.png", "[TUIEmoji_Convinced]": "emoji_59@2x.png", "[TUIEmoji_Knife]": "emoji_60@2x.png", "[TUIEmoji_Like]": "emoji_61@2x.png" }, j = { "[TUIEmoji_Smile]": "[微笑]", "[TUIEmoji_Expect]": "[期待]", "[TUIEmoji_Blink]": "[眨眼]", "[TUIEmoji_Guffaw]": "[大笑]", "[TUIEmoji_KindSmile]": "[姨母笑]", "[TUIEmoji_Haha]": "[哈哈哈]", "[TUIEmoji_Cheerful]": "[愉快]", "[TUIEmoji_Speechless]": "[无语]", "[TUIEmoji_Amazed]": "[惊讶]", "[TUIEmoji_Sorrow]": "[悲伤]", "[TUIEmoji_Complacent]": "[得意]", "[TUIEmoji_Silly]": "[傻了]", "[TUIEmoji_Lustful]": "[色]", "[TUIEmoji_Giggle]": "[憨笑]", "[TUIEmoji_Kiss]": "[亲亲]", "[TUIEmoji_Wail]": "[大哭]", "[TUIEmoji_TearsLaugh]": "[哭笑]", "[TUIEmoji_Trapped]": "[困]", "[TUIEmoji_Mask]": "[口罩]", "[TUIEmoji_Fear]": "[恐惧]", "[TUIEmoji_BareTeeth]": "[龇牙]", "[TUIEmoji_FlareUp]": "[发怒]", "[TUIEmoji_Yawn]": "[打哈欠]", "[TUIEmoji_Tact]": "[机智]", "[TUIEmoji_Stareyes]": "[星星眼]", "[TUIEmoji_ShutUp]": "[闭嘴]", "[TUIEmoji_Sigh]": "[叹气]", "[TUIEmoji_Hehe]": "[呵呵]", "[TUIEmoji_Silent]": "[收声]", "[TUIEmoji_Surprised]": "[惊喜]", "[TUIEmoji_Askance]": "[白眼]", "[TUIEmoji_Ok]": "[OK]", "[TUIEmoji_Shit]": "[便便]", "[TUIEmoji_Monster]": "[怪兽]", "[TUIEmoji_Daemon]": "[恶魔]", "[TUIEmoji_Rage]": "[恶魔怒]", "[TUIEmoji_Fool]": "[衰]", "[TUIEmoji_Pig]": "[猪]", "[TUIEmoji_Cow]": "[牛]", "[TUIEmoji_Ai]": "[AI]", "[TUIEmoji_Skull]": "[骷髅]", "[TUIEmoji_Bombs]": "[炸弹]", "[TUIEmoji_Coffee]": "[咖啡]", "[TUIEmoji_Cake]": "[蛋糕]", "[TUIEmoji_Beer]": "[啤酒]", "[TUIEmoji_Flower]": "[花]", "[TUIEmoji_Watermelon]": "[瓜]", "[TUIEmoji_Rich]": "[壕]", "[TUIEmoji_Heart]": "[爱心]", "[TUIEmoji_Moon]": "[月亮]", "[TUIEmoji_Sun]": "[太阳]", "[TUIEmoji_Star]": "[星星]", "[TUIEmoji_RedPacket]": "[红包]", "[TUIEmoji_Celebrate]": "[庆祝]", "[TUIEmoji_Bless]": "[福]", "[TUIEmoji_Fortune]": "[发]", "[TUIEmoji_Convinced]": "[服]", "[TUIEmoji_Prohibit]": "[禁]", "[TUIEmoji_666]": "[666]", "[TUIEmoji_857]": "[857]", "[TUIEmoji_Knife]": "[刀]", "[TUIEmoji_Like]": "[赞]" }, k = { enabledMessageReadReceipt: Math.pow(2, 5), enabledEmojiPlugin: Math.pow(2, 48), enabledOnlineStatus: Math.pow(2, 7), enabledCustomerServicePlugin: Math.pow(2, 40), enabledTranslationPlugin: Math.pow(2, 38), enabledVoiceToText: Math.pow(2, 39) }, N$1 = ["messageList", "conversationList", "newMessageList"], x = ["translateTextInfo", "voiceToTextInfo"], G = "undefined" != typeof wx && "function" == typeof wx.getSystemInfoSync && Boolean(wx.getSystemInfoSync().fontSizeSetting), w$1 = "undefined" != typeof uni && "undefined" == typeof window, V = G || w$1, F = "undefined" != typeof uni, $ = ("undefined" != typeof uni || "undefined" != typeof window) && !V, H = G ? wx : F ? uni : window, Y = $ && window && window.navigator && window.navigator.userAgent || "", B = /Android/i.test(Y), K = /(?:Windows Phone)/.test(Y), q = /(?:SymbianOS)/.test(Y), z = /iPad/i.test(Y) || /iPhone/i.test(Y) || /iPod/i.test(Y), J = B || K || q || z, W = $ && !J;
  class X {
    constructor() {
      this.global = H, this.isOfficial = false;
    }
    static getInstance() {
      return X.instance || (X.instance = new X()), X.instance;
    }
    initOfficial(e2) {
      this.isOfficial = e2;
    }
    getPlatform() {
      let e2 = "";
      return W ? e2 = "pc" : J ? e2 = "h5" : G ? e2 = "wechat" : w$1 && !G && (e2 = "app"), e2;
    }
  }
  const Z = "group-module", Q = "relationship-module";
  class ee {
    constructor() {
      this.EVENT = e$1.EVENT, this.TYPES = e$1.TYPES, this.loginStatusPromise = /* @__PURE__ */ new Map(), this.userID = "", this.isInited = false;
    }
    static getInstance() {
      return ee.instance || (ee.instance = new ee()), ee.instance;
    }
    mount(e2, t2) {
      this[e2] = t2;
    }
    login(t2) {
      const { chat: s2, SDKAppID: n2, userID: i2 } = t2, a2 = 1400187352 === n2 || 1400188366 === n2;
      return this.createChat(t2), this.userID = i2, X.getInstance().initOfficial(a2), this.TUIStore.update(o$2.APP, "isOfficial", a2), this.TUIStore.update(o$2.APP, "SDKVersion", e$1.VERSION), this.eventCenter = new r$2(this), this.eventCenter.removeEvents(), this.resetStore(), this.initService(), s2 && s2.isReady() ? (formatAppLog("log", "at node_modules/@tencentcloud/chat-uikit-engine/index.js:1", "TUIChatEngine.login ok, from TUICore."), this.TUIUser.getUserProfile(), this.checkCommercialAbility(), Promise.resolve({})) : (this.registerPlugin(t2), this.eventCenter.addEvent(this.EVENT.SDK_READY, () => {
        this.onSDKReady();
      }), this.eventCenter.addEvent(this.EVENT.SDK_NOT_READY, () => {
        this.onSDKNotReady();
      }), this.loginChat(t2));
    }
    logout() {
      return this.userID = "", this.isInited = false, this.resetStore(), this.chat.logout();
    }
    isReady() {
      var e2;
      return (null === (e2 = this.chat) || void 0 === e2 ? void 0 : e2.isReady()) || false;
    }
    setLogLevel(e2) {
      this.chat ? this.chat.setLogLevel(e2) : formatAppLog("warn", "at node_modules/@tencentcloud/chat-uikit-engine/index.js:1", "TUIChatEngine 初始化未完成，请确认 TUIChatEngine.login 接口调用是否正常。");
    }
    destroy() {
      return this.eventCenter.unbindIMEvents(), this.isInited = false, this.resetStore(), this.chat.destroy();
    }
    getMyUserID() {
      return this.userID;
    }
    resetStore() {
      this.TUIStore.reset(o$2.CHAT), this.TUIStore.reset(o$2.CONV), this.TUIStore.reset(o$2.GRP), this.TUIStore.reset(o$2.USER), this.TUIStore.reset(o$2.SEARCH), this.TUIStore.reset(o$2.FRIEND), this.TUIStore.reset(o$2.CUSTOM), formatAppLog("log", "at node_modules/@tencentcloud/chat-uikit-engine/index.js:1", "TUIChatEngine.resetStore ok.");
    }
    initService() {
      this.TUIChat.init(), this.TUIConversation.init(), this.TUIUser.init(), this.initOptionalServices(), this.isInited = true, formatAppLog("log", "at node_modules/@tencentcloud/chat-uikit-engine/index.js:1", "TUIChatEngine.initService ok.");
    }
    initOptionalServices() {
      const t2 = e$1.VERSION.split(".");
      t2[0] > 3 || 3 === t2[0] && t2[1] >= 3 && t2[2] > 0 ? (true === this.chat.callExperimentalAPI("canIUseModule", [Z]) && this.TUIGroup.init(), true === this.chat.callExperimentalAPI("canIUseModule", [Q]) && this.TUIFriend.init()) : (this.TUIGroup.init(), this.TUIFriend.init());
    }
    createChat(t2) {
      const { chat: s2 } = t2, i2 = n$1(t2, ["chat"]);
      S$1(s2) ? this.chat = e$1.create(Object.assign(Object.assign({}, i2), { scene: "chat-uikit-engine" })) : this.chat = s2;
    }
    loginChat(e2) {
      const { userID: t2, userSig: s2 } = e2;
      return new Promise((e3, n2) => {
        this.chat.login({ userID: t2, userSig: s2 }).then((t3) => {
          formatAppLog("log", "at node_modules/@tencentcloud/chat-uikit-engine/index.js:1", "TUIChatEngine.loginChat ok."), this.checkCommercialAbility(), t3.data.repeatLogin && this.chat.isReady() && e3(t3), this.loginStatusPromise.set("login", { resolve: e3, reject: n2, imResponse: t3 });
        }).catch((e4) => {
          n2(e4);
        });
      });
    }
    registerPlugin(e2) {
      const { useUploadPlugin: n2 = false, useProfanityFilterPlugin: i2 = false, TIMPush: r2, pushConfig: a2, TUIOfflinePush: o2, offlinePushConfig: u2 } = e2;
      true === n2 && this.chat.registerPlugin({ "tim-upload-plugin": t$1 }), true === i2 && this.chat.registerPlugin({ "tim-profanity-filter-plugin": n$2 }), !w$1 || G || S$1(r2) || S$1(a2) || this.chat.registerPlugin({ "tim-push": r2, pushConfig: a2 }), !w$1 || G || S$1(o2) || S$1(u2) || this.chat.registerPlugin({ "tim-offline-push-plugin": o2, offlinePushConfig: u2 });
    }
    onSDKReady() {
      if (this.loginStatusPromise.has("login")) {
        const e2 = this.loginStatusPromise.get("login");
        e2.resolve(e2.imResponse), this.TUIUser.getUserProfile();
      }
      this.loginStatusPromise.delete("login");
    }
    onSDKNotReady() {
      if (this.loginStatusPromise.has("login")) {
        this.loginStatusPromise.get("login").reject(new Error("sdk not ready"));
      }
      this.loginStatusPromise.delete("login"), this.resetStore();
    }
    checkCommercialAbility() {
      Object.keys(k).forEach((e2) => {
        const t2 = k[e2];
        this.chat.callExperimentalAPI("isCommercialAbilityEnabled", t2).then((t3) => {
          const { enabled: s2 = false } = t3.data;
          this.TUIStore.update(o$2.APP, e2, s2);
        });
      });
    }
  }
  class te {
    constructor() {
      this.defaultStore = { enabledMessageReadReceipt: false, enabledEmojiPlugin: false, enabledOnlineStatus: false, enabledCustomerServicePlugin: false, enabledTranslationPlugin: false, enabledVoiceToText: false, enableTyping: true, enableConversationDraft: true, isOfficial: false, SDKVersion: "3.0.0", tasks: { sendMessage: false, revokeMessage: false, modifyNickName: false, groupChat: false, muteGroup: false, dismissGroup: false, call: false, searchCloudMessage: false, customerService: false, translateTextMessage: false } }, this.store = { enabledEmojiPlugin: false, enabledMessageReadReceipt: false, enabledOnlineStatus: false, enabledCustomerServicePlugin: false, enabledTranslationPlugin: false, enabledVoiceToText: false, enableTyping: true, enableConversationDraft: true, isOfficial: false, SDKVersion: "3.0.0", tasks: { sendMessage: false, revokeMessage: false, modifyNickName: false, groupChat: false, muteGroup: false, dismissGroup: false, call: false, searchCloudMessage: false, customerService: false, translateTextMessage: false } };
    }
    update(e2, t2) {
      this.store[e2] = t2;
    }
    getData(e2) {
      return this.store[e2];
    }
    reset(e2 = []) {
      this.store = Object.assign(Object.assign(Object.assign({}, this.defaultStore), this.store), e2.reduce((e3, t2) => Object.assign(Object.assign({}, e3), { [t2]: this.defaultStore[t2] }), {}));
    }
  }
  class se {
    constructor() {
      this.defaultStore = { userProfile: {}, displayOnlineStatus: false, displayMessageReadReceipt: true, userStatusList: /* @__PURE__ */ new Map(), kickedOut: "", netStateChange: "", userBlacklist: [], targetLanguage: "zh" }, this.store = { userProfile: {}, displayOnlineStatus: false, displayMessageReadReceipt: true, userStatusList: /* @__PURE__ */ new Map(), kickedOut: "", netStateChange: "", userBlacklist: [], targetLanguage: "zh" };
    }
    update(e2, t2) {
      if ("userStatusList" === e2)
        this.updateUserStatusList(t2);
      else
        this.store[e2] = t2;
    }
    getData(e2) {
      return this.store[e2];
    }
    reset(e2 = []) {
      this.store = Object.assign(Object.assign(Object.assign({}, this.defaultStore), this.store), e2.reduce((e3, t2) => Object.assign(Object.assign({}, e3), { [t2]: this.defaultStore[t2] }), {}));
    }
    updateUserStatusList(e2) {
      0 !== e2.length ? e2.forEach((e3) => {
        const { userID: t2, statusType: s2 = 0, customStatus: n2 = "" } = e3;
        s2 === u$2.UNSUB_USER ? this.store.userStatusList.delete(t2) : this.store.userStatusList.set(t2, { statusType: s2, customStatus: n2 });
      }) : this.store.userStatusList.clear();
    }
  }
  class ne {
    getEngine() {
      return ee.getInstance();
    }
  }
  const ie = function(e2) {
    if (null == e2)
      return true;
    if ("boolean" == typeof e2)
      return false;
    if ("number" == typeof e2)
      return 0 === e2;
    if ("string" == typeof e2)
      return 0 === e2.length;
    if ("function" == typeof e2)
      return 0 === e2.length;
    if (Array.isArray(e2))
      return 0 === e2.length;
    if (e2 instanceof Error)
      return "" === e2.message;
    if (function(e3) {
      if ("object" != typeof e3 || null === e3)
        return false;
      const t2 = Object.getPrototypeOf(e3);
      if (null === t2)
        return true;
      let s2 = t2;
      for (; null !== Object.getPrototypeOf(s2); )
        s2 = Object.getPrototypeOf(s2);
      return t2 === s2;
    }(e2)) {
      for (const t2 in e2)
        if (Object.prototype.hasOwnProperty.call(e2, t2))
          return false;
      return true;
    }
    return false;
  }, re = ["[图片]", "[语音]", "[视频]", "[文件]", "[位置]", "[地理位置]", "[动画表情]", "[自定义消息]", "[群提示消息]", "[聊天记录]"];
  class ae extends ne {
    constructor(e2) {
      super(), this.initProxy(e2), this.isMuted = this.messageRemindType === this.getEngine().TYPES.MSG_REMIND_ACPT_NOT_NOTE || this.messageRemindType === this.getEngine().TYPES.MSG_REMIND_DISCARD, this.operationType = 0, this._conversation = e2;
    }
    initProxy(e2) {
      Object.keys(e2).forEach((t2) => {
        y(t2) || (this[t2] = e2[t2]);
      });
    }
    updateProperties(e2) {
      Object.keys(e2).forEach((t2) => {
        y(t2) || (this[t2] = e2[t2]);
      });
    }
    updateOperationType(e2) {
      this.operationType = e2;
    }
    getConversation() {
      return this._conversation;
    }
    deleteConversation() {
      return this.getEngine().TUIConversation.deleteConversation(this.conversationID);
    }
    pinConversation() {
      return this.getEngine().TUIConversation.pinConversation({ conversationID: this.conversationID, isPinned: !this.isPinned });
    }
    muteConversation() {
      const e2 = this.getEngine(), t2 = { messageRemindType: true === this.isMuted ? e2.TYPES.MSG_REMIND_ACPT_AND_NOTE : e2.TYPES.MSG_REMIND_ACPT_NOT_NOTE };
      if (this.type === e2.TYPES.CONV_C2C) {
        const s2 = this.conversationID.replace(e2.TYPES.CONV_C2C, "");
        t2.userIDList = [s2];
      } else if (this.type === e2.TYPES.CONV_GROUP) {
        const s2 = this.conversationID.replace(e2.TYPES.CONV_GROUP, "");
        t2.groupID = s2;
      }
      return e2.TUIConversation.muteConversation(t2);
    }
    getAvatar() {
      var e2, t2, s2, n2, i2, r2;
      const a2 = this.getEngine();
      let o2 = "";
      switch (this.type) {
        case a2.TYPES.CONV_C2C:
          o2 = b(null === (e2 = this.userProfile) || void 0 === e2 ? void 0 : e2.avatar) ? null === (t2 = this.userProfile) || void 0 === t2 ? void 0 : t2.avatar : M$1;
          break;
        case a2.TYPES.CONV_GROUP:
          o2 = b(null === (s2 = this.groupProfile) || void 0 === s2 ? void 0 : s2.avatar) ? null === (n2 = this.groupProfile) || void 0 === n2 ? void 0 : n2.avatar : O;
          break;
        case a2.TYPES.CONV_SYSTEM:
          o2 = b(null === (i2 = this.groupProfile) || void 0 === i2 ? void 0 : i2.avatar) ? null === (r2 = this.groupProfile) || void 0 === r2 ? void 0 : r2.avatar : _$1;
      }
      return o2;
    }
    getShowName() {
      var e2, t2, s2, n2;
      const i2 = this.getEngine();
      let r2 = "";
      switch (this.type) {
        case i2.TYPES.CONV_C2C:
          r2 = this.remark || (null === (e2 = this.userProfile) || void 0 === e2 ? void 0 : e2.nick) || (null === (t2 = this.userProfile) || void 0 === t2 ? void 0 : t2.userID) || "";
          break;
        case i2.TYPES.CONV_GROUP:
          r2 = (null === (s2 = this.groupProfile) || void 0 === s2 ? void 0 : s2.name) || (null === (n2 = this.groupProfile) || void 0 === n2 ? void 0 : n2.groupID) || "";
          break;
        case i2.TYPES.CONV_SYSTEM:
          r2 = i2.TUITranslate.t("系统通知");
      }
      return r2;
    }
    getGroupAtInfo() {
      const e2 = this.getEngine(), t2 = e2.TUITranslate.t.bind(e2.TUITranslate), s2 = [`[${t2("TUIConversation.有人@我")}]`, `[${t2("TUIConversation.@所有人")}]`, `[${t2("TUIConversation.@所有人")}][${t2("TUIConversation.有人@我")}]`];
      let n2 = "";
      for (let e3 = 0; e3 < this.groupAtInfoList.length; e3++)
        this.groupAtInfoList[e3].atTypeArray[0] && this.unreadCount > 0 && (n2 = s2[this.groupAtInfoList[e3].atTypeArray[0] - 1]);
      return n2;
    }
    getLastMessage(e2) {
      return "time" === e2 ? this.getLastMessageTime() : "text" === e2 ? this.getLastMessageText() : (formatAppLog("warn", "at node_modules/@tencentcloud/chat-uikit-engine/index.js:1", `ConversationModel.getLastMessage key:${e2} is invalid.`), null);
    }
    getLastMessageTime() {
      var e2;
      const t2 = this.getEngine();
      let s2 = "";
      return (null === (e2 = this.lastMessage) || void 0 === e2 ? void 0 : e2.lastTime) > 0 && (s2 = function(e3, t3) {
        const s3 = 6e4, n2 = 36e5, i2 = 24 * n2, r2 = 7 * i2, a2 = (/* @__PURE__ */ new Date()).getTime() - e3;
        let o2 = "";
        if (a2 < 0)
          return o2;
        const u2 = a2 / s3, c2 = a2 / n2, g2 = a2 / i2, l2 = a2 / r2;
        if (l2 >= 1 && l2 <= 4)
          o2 = ` ${parseInt(`${l2}`, 10)} ${t3("time.周")}${t3("time.前")}`;
        else if (g2 >= 1 && g2 <= 6)
          o2 = ` ${parseInt(`${g2}`, 10)} ${t3("time.天")}${t3("time.前")}`;
        else if (c2 >= 1 && c2 <= 23)
          o2 = ` ${parseInt(`${c2}`, 10)} ${t3("time.小时")}${t3("time.前")}`;
        else if (u2 >= 1 && u2 <= 59)
          o2 = ` ${parseInt(`${u2}`, 10)} ${t3("time.分钟")}${t3("time.前")}`;
        else if (a2 >= 0 && a2 <= s3)
          o2 = `${t3("time.刚刚")}`;
        else {
          const t4 = /* @__PURE__ */ new Date();
          t4.setTime(e3), o2 = `${t4.getFullYear()}-${t4.getMonth() + 1 < 10 ? `0${t4.getMonth() + 1}` : t4.getMonth() + 1}-${t4.getDate() < 10 ? `0${t4.getDate()}` : t4.getDate()}`;
        }
        return o2;
      }(1e3 * this.lastMessage.lastTime, t2.TUITranslate.t.bind(t2.TUITranslate))), s2;
    }
    getLastMessageText() {
      var e2;
      if (this.draftText) {
        return U$1(this.draftText).abstract;
      }
      const t2 = this.getEngine(), s2 = t2.TUITranslate.t.bind(t2.TUITranslate);
      if (4 === this.operationType)
        return s2("TUIConversation.您已被群管理员移出群聊");
      if (5 === this.operationType)
        return s2("TUIConversation.该群聊已被解散");
      if (8 === this.operationType)
        return s2("TUIConversation.您已退出该群聊");
      const n2 = this._conversation, { lastMessage: i2 } = this;
      let r2 = "", a2 = "";
      const o2 = n2.unreadCount > 0 && n2.messageRemindType === t2.TYPES.MSG_REMIND_ACPT_NOT_NOTE ? `[${n2.unreadCount > 99 ? "99+" : n2.unreadCount}${s2("TUIConversation.条")}]` : "";
      if (n2.type === t2.TYPES.CONV_GROUP)
        if (i2.fromAccount === t2.getMyUserID())
          r2 = s2("TUIConversation.我");
        else {
          const e3 = i2.fromAccount;
          r2 = t2.TUIFriend.getFriendRemark([e3])[e3] || i2.nameCard || i2.nick || e3;
        }
      if (i2.type === t2.TYPES.MSG_TEXT)
        a2 = this.decodeTextMessage(i2.payload.text);
      else if (i2.type === t2.TYPES.MSG_CUSTOM) {
        const n3 = U$1(null === (e2 = null == i2 ? void 0 : i2.payload) || void 0 === e2 ? void 0 : e2.data);
        if (1 === (null == n3 ? void 0 : n3.businessID))
          return a2 = t2.TUIChat.messageHandler.handleCallKitSignaling(i2), a2;
        a2 = re.includes(i2.messageForShow) ? s2(`TUIChat.${i2.messageForShow}`) : i2.messageForShow;
      } else
        a2 = re.includes(i2.messageForShow) ? s2(`TUIChat.${i2.messageForShow}`) : i2.messageForShow;
      return i2.isRevoked && (a2 = s2("TUIChat.撤回了一条消息")), n2.type === t2.TYPES.CONV_GROUP && i2.type === t2.TYPES.MSG_GRP_TIP ? a2 : `${o2}${r2 ? `${r2}:` : ""}${a2}`;
    }
    decodeTextMessage(e2) {
      if (ie(e2))
        return e2;
      const t2 = /(\[.+?\])/g;
      let s2 = e2;
      if (t2.test(e2)) {
        const n2 = this.getEngine(), i2 = n2.TUITranslate.t.bind(n2.TUITranslate);
        s2 = e2.replace(t2, (e3) => {
          const t3 = i2(`Emoji.${e3}`);
          return G || !t3 || t3.startsWith("Emoji.") ? j[e3] || e3 : t3;
        });
      }
      return s2;
    }
  }
  class oe {
    constructor() {
      this.defaultStore = { currentConversationID: "", totalUnreadCount: 0, conversationList: [], currentConversation: null, operationTypeMap: /* @__PURE__ */ new Map() }, this.store = { currentConversationID: "", totalUnreadCount: 0, conversationList: [], currentConversation: null, operationTypeMap: /* @__PURE__ */ new Map() };
    }
    update(e2, t2) {
      switch (e2) {
        case "conversationList":
          this.updateConversationList(t2);
          break;
        case "operationTypeMap":
          this.updateOperationTypeMap(t2);
          break;
        default:
          this.store[e2] = t2;
      }
    }
    getData(e2) {
      return this.store[e2];
    }
    getModel(e2) {
      return this.store.conversationList.find((t2) => t2.conversationID === e2);
    }
    reset(e2 = []) {
      this.store = Object.assign(Object.assign(Object.assign({}, this.defaultStore), this.store), e2.reduce((e3, t2) => Object.assign(Object.assign({}, e3), { [t2]: this.defaultStore[t2] }), {}));
    }
    updateConversationList(e2) {
      const t2 = [];
      e2.forEach((e3) => {
        let s2 = e3;
        e3 instanceof ae ? s2.updateProperties(e3) : s2 = new ae(e3);
        const n2 = this.getOperationType(e3);
        s2.updateOperationType(n2), t2.push(s2);
      }), this.store.conversationList = t2;
    }
    updateOperationTypeMap(e2) {
      const { conversationID: t2, operationType: s2 = 0 } = e2;
      this.store.operationTypeMap.set(t2, s2);
    }
    getOperationType(e2) {
      const { conversationID: t2 } = e2;
      return this.store.operationTypeMap.get(t2) || 0;
    }
  }
  class ue extends ne {
    constructor(e2) {
      super(), this.messageHandlers = { [this.getEngine().TYPES.MSG_TEXT]: (e3) => this.getEngine().TUIChat.messageHandler.handleTextMessage(e3), [this.getEngine().TYPES.MSG_FACE]: (e3) => this.getEngine().TUIChat.messageHandler.handleFaceMessage(e3), [this.getEngine().TYPES.MSG_LOCATION]: (e3) => this.getEngine().TUIChat.messageHandler.handleLocationMessage(e3), [this.getEngine().TYPES.MSG_IMAGE]: (e3) => this.getEngine().TUIChat.messageHandler.handleImageMessage(e3), [this.getEngine().TYPES.MSG_AUDIO]: (e3) => this.getEngine().TUIChat.messageHandler.handleAudioMessage(e3), [this.getEngine().TYPES.MSG_VIDEO]: (e3) => this.getEngine().TUIChat.messageHandler.handleVideoMessage(e3), [this.getEngine().TYPES.MSG_FILE]: (e3) => this.getEngine().TUIChat.messageHandler.handleFileMessage(e3), [this.getEngine().TYPES.MSG_CUSTOM]: (e3) => this.getEngine().TUIChat.messageHandler.handleCustomMessage(e3), [this.getEngine().TYPES.MSG_MERGER]: (e3) => this.getEngine().TUIChat.messageHandler.handleMergeMessage(e3), [this.getEngine().TYPES.MSG_GRP_TIP]: (e3) => this.getEngine().TUIChat.messageHandler.handleGroupTipsMessage(e3) }, this._message = e2, this._signalingInfo = void 0, this.progress = 0, this.reactionList = [], this.initProperties(e2);
    }
    initProperties(e2) {
      Object.keys(e2).forEach((t2) => {
        y(t2) || (this[t2] = e2[t2]);
      });
    }
    updateProperties(e2) {
      this._message = e2, Object.keys(e2).forEach((t2) => {
        y(t2) || (this[t2] = e2[t2]);
      });
    }
    getMessage() {
      return this._message;
    }
    modifyMessage(e2) {
      return e2.type && this._message.type !== e2.type && !e2.payload ? Promise.reject({ code: h$2.MISMATCH_TYPE_AND_PAYLOAD, message: d$1.MISMATCH_TYPE_AND_PAYLOAD }) : (this._message.type = e2.type || this._message.type, this._message.payload = e2.payload || this._message.payload, this._message.cloudCustomData = e2.cloudCustomData || this._message.cloudCustomData, this.getEngine().TUIChat.modifyMessage(this._message));
    }
    revokeMessage() {
      return this.getEngine().TUIChat.revokeMessage(this._message);
    }
    resendMessage() {
      return this.getEngine().TUIChat.resendMessage(this._message);
    }
    deleteMessage() {
      return this.getEngine().TUIChat.deleteMessage([this._message]);
    }
    quoteMessage() {
      return this.getEngine().TUIChat.quoteMessage(this._message);
    }
    replyMessage() {
      return this.getEngine().TUIChat.replyMessage(this._message);
    }
    setMessageExtensions(e2) {
      return this.getEngine().TUIChat.setMessageExtensions(this._message, e2);
    }
    getMessageExtensions() {
      return this.getEngine().TUIChat.getMessageExtensions(this._message);
    }
    deleteMessageExtensions(e2) {
      return this.getEngine().TUIChat.deleteMessageExtensions(this._message, e2);
    }
    getSignalingInfo() {
      return this.type !== this.getEngine().TYPES.MSG_CUSTOM ? null : S$1(this._signalingInfo) ? (this._signalingInfo = this.getEngine().chat.getSignalingInfo(this._message), this._signalingInfo) : this._signalingInfo;
    }
    getMessageContent() {
      const e2 = this.messageHandlers[this.type];
      if (S$1(e2))
        return {};
      if (this.type === this.getEngine().TYPES.MSG_GRP_TIP)
        return e2(this._message);
      const t2 = this.getEngine().TUIFriend.getFriendRemark([this.from]);
      return Object.assign(Object.assign({}, e2(this._message)), { showName: t2[this.from] || this.nameCard || this.nick || this.from });
    }
    sendForwardMessage(e2) {
      return this.getEngine().TUIChat.sendForwardMessage(e2, [this._message]);
    }
  }
  class ce {
    constructor() {
      this.defaultStore = { messageList: [], isCompleted: false, nextReqMessageID: "", quoteMessage: {}, newMessageList: [], typingStatus: false, messageSource: void 0, translateTextInfo: void 0, voiceToTextInfo: void 0, userInfo: {} }, this.store = { messageList: [], isCompleted: false, nextReqMessageID: "", quoteMessage: {}, newMessageList: [], typingStatus: false, messageSource: void 0, translateTextInfo: void 0, voiceToTextInfo: void 0, userInfo: {} };
    }
    update(e2, t2) {
      switch (e2) {
        case "messageList":
          this.updateMessageList(t2);
          break;
        case "translateTextInfo":
          this.updateTranslateTextInfo(t2);
          break;
        case "voiceToTextInfo":
          this.updateVoiceToTextInfo(t2);
          break;
        default:
          this.store[e2] = t2;
      }
    }
    getData(e2) {
      return this.store[e2];
    }
    getModel(e2) {
      return this.store.messageList.find((t2) => t2.ID === e2);
    }
    reset(e2 = []) {
      const t2 = e2.filter((e3) => !x.includes(e3));
      this.store = Object.assign(Object.assign(Object.assign({}, this.defaultStore), this.store), null == t2 ? void 0 : t2.reduce((e3, t3) => Object.assign(Object.assign({}, e3), { [t3]: this.defaultStore[t3] }), {}));
    }
    updateMessageList(e2) {
      const t2 = [];
      e2.forEach((e3) => {
        let s2 = e3;
        e3 instanceof ue || (s2 = this.getModel(e3.ID), s2 ? s2.updateProperties(e3) : s2 = new ue(e3)), t2.push(s2);
      }), this.store.messageList = t2;
    }
    updateTranslateTextInfo(e2) {
      this.updateBykey("translateTextInfo", e2);
    }
    updateVoiceToTextInfo(e2) {
      this.updateBykey("voiceToTextInfo", e2);
    }
    updateBykey(e2, t2) {
      const { conversationID: s2, messageID: n2, visible: i2 = false } = t2;
      this.store[e2] || (this.store[e2] = /* @__PURE__ */ new Map()), this.store[e2].has(s2) || this.store[e2].set(s2, []);
      const r2 = this.store[e2].get(s2) || [];
      let a2 = true;
      for (let e3 = 0; e3 < r2.length; e3++)
        if (r2[e3].messageID === n2) {
          r2[e3].visible = i2, a2 = false;
          break;
        }
      a2 && r2.push({ messageID: n2, visible: i2 }), this.store[e2].set(s2, r2);
    }
  }
  class ge {
    constructor(e2) {
      this.groupAttributes = {}, this.groupCounters = {}, this.initProxy(e2);
    }
    initProxy(e2) {
      Object.keys(e2).forEach((t2) => {
        y(t2) || (this[t2] = e2[t2]);
      });
    }
  }
  class le {
    constructor() {
      this.defaultStore = { currentGroupID: "", currentGroup: {}, currentGroupAttributes: {}, currentGroupCounters: {}, currentGroupMemberList: [], groupList: [], groupSystemNoticeList: [], isCompleted: false, offset: 0 }, this.store = { currentGroupID: "", currentGroup: void 0, currentGroupAttributes: {}, currentGroupCounters: {}, currentGroupMemberList: [], groupList: [], groupSystemNoticeList: [], isCompleted: false, offset: 0 };
    }
    update(e2, t2) {
      switch (e2) {
        case "groupList":
          this.updateGroupList(t2);
          break;
        case "currentGroup":
          this.store.currentGroup = t2 instanceof ge ? t2 : new ge(t2);
          break;
        default:
          this.store[e2] = t2;
      }
    }
    getData(e2) {
      if ("groupSystemNoticeList" === e2) {
        const e3 = [...this.store.groupSystemNoticeList];
        return this.store.groupSystemNoticeList.length = 0, e3;
      }
      return this.store[e2];
    }
    reset(e2 = []) {
      this.store = Object.assign(Object.assign(Object.assign({}, this.defaultStore), this.store), e2.reduce((e3, t2) => Object.assign(Object.assign({}, e3), { [t2]: this.defaultStore[t2] }), {}));
    }
    updateGroupList(e2) {
      this.store.groupList = e2.map((e3) => e3 instanceof ge ? e3 : new ge(e3));
    }
  }
  class he {
    constructor() {
      this.store = {};
    }
    update(e2, t2) {
      this.store[e2] = t2;
    }
    getData(e2) {
      return this.store[e2];
    }
    reset(e2 = []) {
      0 === e2.length && (this.store = {}), this.store = Object.assign(Object.assign({}, this.store), e2.reduce((e3, t2) => Object.assign(Object.assign({}, e3), { [t2]: void 0 }), {}));
    }
  }
  class pe {
    constructor() {
      this.defaultStore = { friendList: [], friendApplicationList: [], friendApplicationUnreadCount: 0 }, this.store = { friendList: [], friendApplicationList: [], friendApplicationUnreadCount: 0 };
    }
    update(e2, t2) {
      this.store[e2] = t2;
    }
    getData(e2) {
      return this.store[e2];
    }
    reset(e2 = []) {
      this.store = Object.assign(Object.assign(Object.assign({}, this.defaultStore), this.store), e2.reduce((e3, t2) => Object.assign(Object.assign({}, e3), { [t2]: this.defaultStore[t2] }), {}));
    }
  }
  class de {
    constructor() {
      this.defaultStore = { currentSearchInputValue: { value: "", searchType: "global" }, currentSearchMessageType: { value: { key: "", label: "", value: "" }, searchType: "global" }, currentSearchMessageTime: { value: { key: "", label: "", value: { timePosition: 0, timePeriod: 0 } }, searchType: "global" }, currentSearchingStatus: { isSearching: false, searchType: "global" }, isShowInConversationSearch: false }, this.store = { currentSearchInputValue: { value: "", searchType: "global" }, currentSearchMessageType: { value: { key: "", label: "", value: "" }, searchType: "global" }, currentSearchMessageTime: { value: { key: "", label: "", value: { timePosition: 0, timePeriod: 0 } }, searchType: "global" }, currentSearchingStatus: { isSearching: false, searchType: "global" }, isShowInConversationSearch: false };
    }
    update(e2, t2) {
      this.store[e2] = t2;
    }
    getData(e2) {
      return this.store[e2];
    }
    reset(e2 = []) {
      this.store = Object.assign(Object.assign(Object.assign({}, this.defaultStore), this.store), null == e2 ? void 0 : e2.reduce((e3, t2) => Object.assign(Object.assign({}, e3), { [t2]: this.defaultStore[t2] }), {}));
    }
  }
  class fe {
    constructor() {
      this.storeMap = { [o$2.APP]: new te(), [o$2.USER]: new se(), [o$2.CONV]: new oe(), [o$2.CHAT]: new ce(), [o$2.GRP]: new le(), [o$2.FRIEND]: new pe(), [o$2.SEARCH]: new de() }, this.task = {};
    }
    static getInstance() {
      return fe.instance || (fe.instance = new fe()), fe.instance;
    }
    watch(e2, t2) {
      this.task[e2] || (this.task[e2] = {});
      const s2 = this.task[e2];
      Object.keys(t2).forEach((n2) => {
        const i2 = t2[n2];
        s2[n2] || (s2[n2] = /* @__PURE__ */ new Map()), s2[n2].set(i2, 1), this.notifyOnWatch(e2, n2, i2);
      });
    }
    unwatch(e2, t2) {
      if (!this.task[e2])
        return;
      const s2 = this.task[e2];
      Object.keys(t2).forEach((e3) => {
        var n2;
        null === (n2 = s2[e3]) || void 0 === n2 || n2.delete(t2[e3]);
      });
    }
    update(e2, t2, s2) {
      var n2;
      e2 !== o$2.CUSTOM || this.storeMap[e2] || (this.storeMap[e2] = new he()), null === (n2 = this.storeMap[e2]) || void 0 === n2 || n2.update(t2, s2), this.notify(e2, t2);
    }
    getData(e2, t2) {
      var s2;
      return e2 !== o$2.CUSTOM || this.storeMap[e2] || (this.storeMap[e2] = new he()), null === (s2 = this.storeMap[e2]) || void 0 === s2 ? void 0 : s2.getData(t2);
    }
    getConversationModel(e2) {
      var t2;
      return null === (t2 = this.storeMap[o$2.CONV]) || void 0 === t2 ? void 0 : t2.getModel(e2);
    }
    getMessageModel(e2) {
      var t2;
      return null === (t2 = this.storeMap[o$2.CHAT]) || void 0 === t2 ? void 0 : t2.getModel(e2);
    }
    reset(e2, t2 = [], s2 = false) {
      if (e2 in this.storeMap) {
        const n2 = this.storeMap[e2];
        0 === t2.length && (t2 = Object.keys(null == n2 ? void 0 : n2.store)), n2.reset(t2), s2 && t2.forEach((t3) => {
          this.notify(e2, t3);
        });
      }
    }
    notifyOnWatch(e2, t2, s2) {
      const n2 = this.getData(e2, t2);
      N$1.indexOf(t2) > -1 && 0 === n2.length || s2 && s2.call(this, n2);
    }
    notify(e2, t2) {
      if (!this.task[e2])
        return;
      const s2 = this.task[e2];
      if (s2[t2]) {
        const n2 = s2[t2], i2 = this.getData(e2, t2);
        for (const [e3] of n2.entries())
          e3.call(this, i2);
      }
    }
  }
  function me(e2) {
    return me = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
      return typeof e3;
    } : function(e3) {
      return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
    }, me(e2);
  }
  function ve(e2, t2) {
    if (!(e2 instanceof t2))
      throw new TypeError("Cannot call a class as a function");
  }
  function Te(e2) {
    var t2 = function(e3, t3) {
      if ("object" != me(e3) || !e3)
        return e3;
      var s2 = e3[Symbol.toPrimitive];
      if (void 0 !== s2) {
        var n2 = s2.call(e3, t3 || "default");
        if ("object" != me(n2))
          return n2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === t3 ? String : Number)(e3);
    }(e2, "string");
    return "symbol" == me(t2) ? t2 : t2 + "";
  }
  function Ee(e2, t2) {
    for (var s2 = 0; s2 < t2.length; s2++) {
      var n2 = t2[s2];
      n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e2, Te(n2.key), n2);
    }
  }
  function Ie(e2, t2, s2) {
    return t2 && Ee(e2.prototype, t2), s2 && Ee(e2, s2), Object.defineProperty(e2, "prototype", { writable: false }), e2;
  }
  function Se(e2) {
    if (void 0 === e2)
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return e2;
  }
  function ye(e2, t2) {
    return ye = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(e3, t3) {
      return e3.__proto__ = t3, e3;
    }, ye(e2, t2);
  }
  function be(e2, t2) {
    if ("function" != typeof t2 && null !== t2)
      throw new TypeError("Super expression must either be null or a function");
    e2.prototype = Object.create(t2 && t2.prototype, { constructor: { value: e2, writable: true, configurable: true } }), Object.defineProperty(e2, "prototype", { writable: false }), t2 && ye(e2, t2);
  }
  function Ue(e2, t2) {
    if (t2 && ("object" == me(t2) || "function" == typeof t2))
      return t2;
    if (void 0 !== t2)
      throw new TypeError("Derived constructors may only return object or undefined");
    return Se(e2);
  }
  function Ce(e2) {
    return Ce = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(e3) {
      return e3.__proto__ || Object.getPrototypeOf(e3);
    }, Ce(e2);
  }
  function Me(e2, t2, s2) {
    return (t2 = Te(t2)) in e2 ? Object.defineProperty(e2, t2, { value: s2, enumerable: true, configurable: true, writable: true }) : e2[t2] = s2, e2;
  }
  function Oe(e2, t2) {
    (null == t2 || t2 > e2.length) && (t2 = e2.length);
    for (var s2 = 0, n2 = Array(t2); s2 < t2; s2++)
      n2[s2] = e2[s2];
    return n2;
  }
  function _e(e2) {
    return function(e3) {
      if (Array.isArray(e3))
        return e3;
    }(e2) || function(e3) {
      if ("undefined" != typeof Symbol && null != e3[Symbol.iterator] || null != e3["@@iterator"])
        return Array.from(e3);
    }(e2) || function(e3, t2) {
      if (e3) {
        if ("string" == typeof e3)
          return Oe(e3, t2);
        var s2 = {}.toString.call(e3).slice(8, -1);
        return "Object" === s2 && e3.constructor && (s2 = e3.constructor.name), "Map" === s2 || "Set" === s2 ? Array.from(e3) : "Arguments" === s2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(s2) ? Oe(e3, t2) : void 0;
      }
    }(e2) || function() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }();
  }
  function De(e2, t2) {
    var s2 = Object.keys(e2);
    if (Object.getOwnPropertySymbols) {
      var n2 = Object.getOwnPropertySymbols(e2);
      t2 && (n2 = n2.filter(function(t3) {
        return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
      })), s2.push.apply(s2, n2);
    }
    return s2;
  }
  function Pe(e2) {
    for (var t2 = 1; t2 < arguments.length; t2++) {
      var s2 = null != arguments[t2] ? arguments[t2] : {};
      t2 % 2 ? De(Object(s2), true).forEach(function(t3) {
        Me(e2, t3, s2[t3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(s2)) : De(Object(s2)).forEach(function(t3) {
        Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(s2, t3));
      });
    }
    return e2;
  }
  var Re = { type: "logger", log: function(e2) {
    this.output("log", e2);
  }, warn: function(e2) {
    this.output("warn", e2);
  }, error: function(e2) {
    this.output("error", e2);
  }, output: function(e2, t2) {
    console && console[e2] && console[e2].apply(console, t2);
  } }, Le = new (function() {
    function e2(t2) {
      var s2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      ve(this, e2), this.init(t2, s2);
    }
    return Ie(e2, [{ key: "init", value: function(e3) {
      var t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      this.prefix = t2.prefix || "i18next:", this.logger = e3 || Re, this.options = t2, this.debug = t2.debug;
    } }, { key: "setDebug", value: function(e3) {
      this.debug = e3;
    } }, { key: "log", value: function() {
      for (var e3 = arguments.length, t2 = new Array(e3), s2 = 0; s2 < e3; s2++)
        t2[s2] = arguments[s2];
      return this.forward(t2, "log", "", true);
    } }, { key: "warn", value: function() {
      for (var e3 = arguments.length, t2 = new Array(e3), s2 = 0; s2 < e3; s2++)
        t2[s2] = arguments[s2];
      return this.forward(t2, "warn", "", true);
    } }, { key: "error", value: function() {
      for (var e3 = arguments.length, t2 = new Array(e3), s2 = 0; s2 < e3; s2++)
        t2[s2] = arguments[s2];
      return this.forward(t2, "error", "");
    } }, { key: "deprecate", value: function() {
      for (var e3 = arguments.length, t2 = new Array(e3), s2 = 0; s2 < e3; s2++)
        t2[s2] = arguments[s2];
      return this.forward(t2, "warn", "WARNING DEPRECATED: ", true);
    } }, { key: "forward", value: function(e3, t2, s2, n2) {
      return n2 && !this.debug ? null : ("string" == typeof e3[0] && (e3[0] = "".concat(s2).concat(this.prefix, " ").concat(e3[0])), this.logger[t2](e3));
    } }, { key: "create", value: function(t2) {
      return new e2(this.logger, Pe(Pe({}, { prefix: "".concat(this.prefix, ":").concat(t2, ":") }), this.options));
    } }, { key: "clone", value: function(t2) {
      return (t2 = t2 || this.options).prefix = t2.prefix || this.prefix, new e2(this.logger, t2);
    } }]), e2;
  }())(), Ae = function() {
    function e2() {
      ve(this, e2), this.observers = {};
    }
    return Ie(e2, [{ key: "on", value: function(e3, t2) {
      var s2 = this;
      return e3.split(" ").forEach(function(e4) {
        s2.observers[e4] = s2.observers[e4] || [], s2.observers[e4].push(t2);
      }), this;
    } }, { key: "off", value: function(e3, t2) {
      this.observers[e3] && (t2 ? this.observers[e3] = this.observers[e3].filter(function(e4) {
        return e4 !== t2;
      }) : delete this.observers[e3]);
    } }, { key: "emit", value: function(e3) {
      for (var t2 = arguments.length, s2 = new Array(t2 > 1 ? t2 - 1 : 0), n2 = 1; n2 < t2; n2++)
        s2[n2 - 1] = arguments[n2];
      this.observers[e3] && [].concat(this.observers[e3]).forEach(function(e4) {
        e4.apply(void 0, s2);
      });
      this.observers["*"] && [].concat(this.observers["*"]).forEach(function(t3) {
        t3.apply(t3, [e3].concat(s2));
      });
    } }]), e2;
  }();
  function je() {
    var e2, t2, s2 = new Promise(function(s3, n2) {
      e2 = s3, t2 = n2;
    });
    return s2.resolve = e2, s2.reject = t2, s2;
  }
  function ke(e2) {
    return null == e2 ? "" : "" + e2;
  }
  function Ne(e2, t2, s2) {
    function n2(e3) {
      return e3 && e3.indexOf("###") > -1 ? e3.replace(/###/g, ".") : e3;
    }
    function i2() {
      return !e2 || "string" == typeof e2;
    }
    for (var r2 = "string" != typeof t2 ? [].concat(t2) : t2.split("."); r2.length > 1; ) {
      if (i2())
        return {};
      var a2 = n2(r2.shift());
      !e2[a2] && s2 && (e2[a2] = new s2()), e2 = Object.prototype.hasOwnProperty.call(e2, a2) ? e2[a2] : {};
    }
    return i2() ? {} : { obj: e2, k: n2(r2.shift()) };
  }
  function xe(e2, t2, s2) {
    var n2 = Ne(e2, t2, Object);
    n2.obj[n2.k] = s2;
  }
  function Ge(e2, t2) {
    var s2 = Ne(e2, t2), n2 = s2.obj, i2 = s2.k;
    if (n2)
      return n2[i2];
  }
  function we(e2, t2, s2) {
    for (var n2 in t2)
      "__proto__" !== n2 && "constructor" !== n2 && (n2 in e2 ? "string" == typeof e2[n2] || e2[n2] instanceof String || "string" == typeof t2[n2] || t2[n2] instanceof String ? s2 && (e2[n2] = t2[n2]) : we(e2[n2], t2[n2], s2) : e2[n2] = t2[n2]);
    return e2;
  }
  function Ve(e2) {
    return e2.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
  }
  var Fe = { "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#39;", "/": "&#x2F;" };
  function $e(e2) {
    return "string" == typeof e2 ? e2.replace(/[&<>"'\/]/g, function(e3) {
      return Fe[e3];
    }) : e2;
  }
  var He = "undefined" != typeof window && window.navigator && void 0 === window.navigator.userAgentData && window.navigator.userAgent && window.navigator.userAgent.indexOf("MSIE") > -1, Ye = [" ", ",", "?", "!", ";"];
  function Be(e2, t2) {
    var s2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : ".";
    if (e2) {
      if (e2[t2])
        return e2[t2];
      for (var n2 = t2.split(s2), i2 = e2, r2 = 0; r2 < n2.length; ++r2) {
        if (!i2)
          return;
        if ("string" == typeof i2[n2[r2]] && r2 + 1 < n2.length)
          return;
        if (void 0 === i2[n2[r2]]) {
          for (var a2 = 2, o2 = n2.slice(r2, r2 + a2).join(s2), u2 = i2[o2]; void 0 === u2 && n2.length > r2 + a2; )
            a2++, u2 = i2[o2 = n2.slice(r2, r2 + a2).join(s2)];
          if (void 0 === u2)
            return;
          if (null === u2)
            return null;
          if (t2.endsWith(o2)) {
            if ("string" == typeof u2)
              return u2;
            if (o2 && "string" == typeof u2[o2])
              return u2[o2];
          }
          var c2 = n2.slice(r2 + a2).join(s2);
          return c2 ? Be(u2, c2, s2) : void 0;
        }
        i2 = i2[n2[r2]];
      }
      return i2;
    }
  }
  function Ke(e2, t2) {
    var s2 = Object.keys(e2);
    if (Object.getOwnPropertySymbols) {
      var n2 = Object.getOwnPropertySymbols(e2);
      t2 && (n2 = n2.filter(function(t3) {
        return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
      })), s2.push.apply(s2, n2);
    }
    return s2;
  }
  function qe(e2) {
    for (var t2 = 1; t2 < arguments.length; t2++) {
      var s2 = null != arguments[t2] ? arguments[t2] : {};
      t2 % 2 ? Ke(Object(s2), true).forEach(function(t3) {
        Me(e2, t3, s2[t3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(s2)) : Ke(Object(s2)).forEach(function(t3) {
        Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(s2, t3));
      });
    }
    return e2;
  }
  function ze(e2) {
    var t2 = function() {
      if ("undefined" == typeof Reflect || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if ("function" == typeof Proxy)
        return true;
      try {
        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        })), true;
      } catch (e3) {
        return false;
      }
    }();
    return function() {
      var s2, n2 = Ce(e2);
      if (t2) {
        var i2 = Ce(this).constructor;
        s2 = Reflect.construct(n2, arguments, i2);
      } else
        s2 = n2.apply(this, arguments);
      return Ue(this, s2);
    };
  }
  var Je = function() {
    be(t2, Ae);
    var e2 = ze(t2);
    function t2(s2) {
      var n2, i2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : { ns: ["translation"], defaultNS: "translation" };
      return ve(this, t2), n2 = e2.call(this), He && Ae.call(Se(n2)), n2.data = s2 || {}, n2.options = i2, void 0 === n2.options.keySeparator && (n2.options.keySeparator = "."), void 0 === n2.options.ignoreJSONStructure && (n2.options.ignoreJSONStructure = true), n2;
    }
    return Ie(t2, [{ key: "addNamespaces", value: function(e3) {
      this.options.ns.indexOf(e3) < 0 && this.options.ns.push(e3);
    } }, { key: "removeNamespaces", value: function(e3) {
      var t3 = this.options.ns.indexOf(e3);
      t3 > -1 && this.options.ns.splice(t3, 1);
    } }, { key: "getResource", value: function(e3, t3, s2) {
      var n2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {}, i2 = void 0 !== n2.keySeparator ? n2.keySeparator : this.options.keySeparator, r2 = void 0 !== n2.ignoreJSONStructure ? n2.ignoreJSONStructure : this.options.ignoreJSONStructure, a2 = [e3, t3];
      s2 && "string" != typeof s2 && (a2 = a2.concat(s2)), s2 && "string" == typeof s2 && (a2 = a2.concat(i2 ? s2.split(i2) : s2)), e3.indexOf(".") > -1 && (a2 = e3.split("."));
      var o2 = Ge(this.data, a2);
      return o2 || !r2 || "string" != typeof s2 ? o2 : Be(this.data && this.data[e3] && this.data[e3][t3], s2, i2);
    } }, { key: "addResource", value: function(e3, t3, s2, n2) {
      var i2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : { silent: false }, r2 = void 0 !== i2.keySeparator ? i2.keySeparator : this.options.keySeparator, a2 = [e3, t3];
      s2 && (a2 = a2.concat(r2 ? s2.split(r2) : s2)), e3.indexOf(".") > -1 && (n2 = t3, t3 = (a2 = e3.split("."))[1]), this.addNamespaces(t3), xe(this.data, a2, n2), i2.silent || this.emit("added", e3, t3, s2, n2);
    } }, { key: "addResources", value: function(e3, t3, s2) {
      var n2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : { silent: false };
      for (var i2 in s2)
        "string" != typeof s2[i2] && "[object Array]" !== Object.prototype.toString.apply(s2[i2]) || this.addResource(e3, t3, i2, s2[i2], { silent: true });
      n2.silent || this.emit("added", e3, t3, s2);
    } }, { key: "addResourceBundle", value: function(e3, t3, s2, n2, i2) {
      var r2 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : { silent: false }, a2 = [e3, t3];
      e3.indexOf(".") > -1 && (n2 = s2, s2 = t3, t3 = (a2 = e3.split("."))[1]), this.addNamespaces(t3);
      var o2 = Ge(this.data, a2) || {};
      n2 ? we(o2, s2, i2) : o2 = qe(qe({}, o2), s2), xe(this.data, a2, o2), r2.silent || this.emit("added", e3, t3, s2);
    } }, { key: "removeResourceBundle", value: function(e3, t3) {
      this.hasResourceBundle(e3, t3) && delete this.data[e3][t3], this.removeNamespaces(t3), this.emit("removed", e3, t3);
    } }, { key: "hasResourceBundle", value: function(e3, t3) {
      return void 0 !== this.getResource(e3, t3);
    } }, { key: "getResourceBundle", value: function(e3, t3) {
      return t3 || (t3 = this.options.defaultNS), "v1" === this.options.compatibilityAPI ? qe(qe({}, {}), this.getResource(e3, t3)) : this.getResource(e3, t3);
    } }, { key: "getDataByLanguage", value: function(e3) {
      return this.data[e3];
    } }, { key: "hasLanguageSomeTranslations", value: function(e3) {
      var t3 = this.getDataByLanguage(e3);
      return !!(t3 && Object.keys(t3) || []).find(function(e4) {
        return t3[e4] && Object.keys(t3[e4]).length > 0;
      });
    } }, { key: "toJSON", value: function() {
      return this.data;
    } }]), t2;
  }(), We = { processors: {}, addPostProcessor: function(e2) {
    this.processors[e2.name] = e2;
  }, handle: function(e2, t2, s2, n2, i2) {
    var r2 = this;
    return e2.forEach(function(e3) {
      r2.processors[e3] && (t2 = r2.processors[e3].process(t2, s2, n2, i2));
    }), t2;
  } };
  function Xe(e2, t2) {
    var s2 = Object.keys(e2);
    if (Object.getOwnPropertySymbols) {
      var n2 = Object.getOwnPropertySymbols(e2);
      t2 && (n2 = n2.filter(function(t3) {
        return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
      })), s2.push.apply(s2, n2);
    }
    return s2;
  }
  function Ze(e2) {
    for (var t2 = 1; t2 < arguments.length; t2++) {
      var s2 = null != arguments[t2] ? arguments[t2] : {};
      t2 % 2 ? Xe(Object(s2), true).forEach(function(t3) {
        Me(e2, t3, s2[t3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(s2)) : Xe(Object(s2)).forEach(function(t3) {
        Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(s2, t3));
      });
    }
    return e2;
  }
  function Qe(e2) {
    var t2 = function() {
      if ("undefined" == typeof Reflect || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if ("function" == typeof Proxy)
        return true;
      try {
        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        })), true;
      } catch (e3) {
        return false;
      }
    }();
    return function() {
      var s2, n2 = Ce(e2);
      if (t2) {
        var i2 = Ce(this).constructor;
        s2 = Reflect.construct(n2, arguments, i2);
      } else
        s2 = n2.apply(this, arguments);
      return Ue(this, s2);
    };
  }
  var et = {}, tt$1 = function() {
    be(t2, Ae);
    var e2 = Qe(t2);
    function t2(s2) {
      var n2, i2, r2, a2, o2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      return ve(this, t2), n2 = e2.call(this), He && Ae.call(Se(n2)), i2 = ["resourceStore", "languageUtils", "pluralResolver", "interpolator", "backendConnector", "i18nFormat", "utils"], r2 = s2, a2 = Se(n2), i2.forEach(function(e3) {
        r2[e3] && (a2[e3] = r2[e3]);
      }), n2.options = o2, void 0 === n2.options.keySeparator && (n2.options.keySeparator = "."), n2.logger = Le.create("translator"), n2;
    }
    return Ie(t2, [{ key: "changeLanguage", value: function(e3) {
      e3 && (this.language = e3);
    } }, { key: "exists", value: function(e3) {
      var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : { interpolation: {} };
      if (null == e3)
        return false;
      var s2 = this.resolve(e3, t3);
      return s2 && void 0 !== s2.res;
    } }, { key: "extractFromKey", value: function(e3, t3) {
      var s2 = void 0 !== t3.nsSeparator ? t3.nsSeparator : this.options.nsSeparator;
      void 0 === s2 && (s2 = ":");
      var n2 = void 0 !== t3.keySeparator ? t3.keySeparator : this.options.keySeparator, i2 = t3.ns || this.options.defaultNS || [], r2 = s2 && e3.indexOf(s2) > -1, a2 = !(this.options.userDefinedKeySeparator || t3.keySeparator || this.options.userDefinedNsSeparator || t3.nsSeparator || function(e4, t4, s3) {
        t4 = t4 || "", s3 = s3 || "";
        var n3 = Ye.filter(function(e5) {
          return t4.indexOf(e5) < 0 && s3.indexOf(e5) < 0;
        });
        if (0 === n3.length)
          return true;
        var i3 = new RegExp("(".concat(n3.map(function(e5) {
          return "?" === e5 ? "\\?" : e5;
        }).join("|"), ")")), r3 = !i3.test(e4);
        if (!r3) {
          var a3 = e4.indexOf(s3);
          a3 > 0 && !i3.test(e4.substring(0, a3)) && (r3 = true);
        }
        return r3;
      }(e3, s2, n2));
      if (r2 && !a2) {
        var o2 = e3.match(this.interpolator.nestingRegexp);
        if (o2 && o2.length > 0)
          return { key: e3, namespaces: i2 };
        var u2 = e3.split(s2);
        (s2 !== n2 || s2 === n2 && this.options.ns.indexOf(u2[0]) > -1) && (i2 = u2.shift()), e3 = u2.join(n2);
      }
      return "string" == typeof i2 && (i2 = [i2]), { key: e3, namespaces: i2 };
    } }, { key: "translate", value: function(e3, s2, n2) {
      var i2 = this;
      if ("object" !== me(s2) && this.options.overloadTranslationOptionHandler && (s2 = this.options.overloadTranslationOptionHandler(arguments)), "object" === me(s2) && (s2 = Ze({}, s2)), s2 || (s2 = {}), null == e3)
        return "";
      Array.isArray(e3) || (e3 = [String(e3)]);
      var r2 = void 0 !== s2.returnDetails ? s2.returnDetails : this.options.returnDetails, a2 = void 0 !== s2.keySeparator ? s2.keySeparator : this.options.keySeparator, o2 = this.extractFromKey(e3[e3.length - 1], s2), u2 = o2.key, c2 = o2.namespaces, g2 = c2[c2.length - 1], l2 = s2.lng || this.language, h2 = s2.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
      if (l2 && "cimode" === l2.toLowerCase()) {
        if (h2) {
          var p2 = s2.nsSeparator || this.options.nsSeparator;
          return r2 ? { res: "".concat(g2).concat(p2).concat(u2), usedKey: u2, exactUsedKey: u2, usedLng: l2, usedNS: g2 } : "".concat(g2).concat(p2).concat(u2);
        }
        return r2 ? { res: u2, usedKey: u2, exactUsedKey: u2, usedLng: l2, usedNS: g2 } : u2;
      }
      var d2 = this.resolve(e3, s2), f2 = d2 && d2.res, m2 = d2 && d2.usedKey || u2, v2 = d2 && d2.exactUsedKey || u2, T2 = Object.prototype.toString.apply(f2), E2 = void 0 !== s2.joinArrays ? s2.joinArrays : this.options.joinArrays, I2 = !this.i18nFormat || this.i18nFormat.handleAsObject;
      if (I2 && f2 && ("string" != typeof f2 && "boolean" != typeof f2 && "number" != typeof f2) && ["[object Number]", "[object Function]", "[object RegExp]"].indexOf(T2) < 0 && ("string" != typeof E2 || "[object Array]" !== T2)) {
        if (!s2.returnObjects && !this.options.returnObjects) {
          this.options.returnedObjectHandler || this.logger.warn("accessing an object - but returnObjects options is not enabled!");
          var S2 = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(m2, f2, Ze(Ze({}, s2), {}, { ns: c2 })) : "key '".concat(u2, " (").concat(this.language, ")' returned an object instead of string.");
          return r2 ? (d2.res = S2, d2) : S2;
        }
        if (a2) {
          var y2 = "[object Array]" === T2, b2 = y2 ? [] : {}, U2 = y2 ? v2 : m2;
          for (var C2 in f2)
            if (Object.prototype.hasOwnProperty.call(f2, C2)) {
              var M2 = "".concat(U2).concat(a2).concat(C2);
              b2[C2] = this.translate(M2, Ze(Ze({}, s2), { joinArrays: false, ns: c2 })), b2[C2] === M2 && (b2[C2] = f2[C2]);
            }
          f2 = b2;
        }
      } else if (I2 && "string" == typeof E2 && "[object Array]" === T2)
        (f2 = f2.join(E2)) && (f2 = this.extendTranslation(f2, e3, s2, n2));
      else {
        var O2 = false, _2 = false, D2 = void 0 !== s2.count && "string" != typeof s2.count, P2 = t2.hasDefaultValue(s2), R2 = D2 ? this.pluralResolver.getSuffix(l2, s2.count, s2) : "", L2 = s2["defaultValue".concat(R2)] || s2.defaultValue;
        !this.isValidLookup(f2) && P2 && (O2 = true, f2 = L2), this.isValidLookup(f2) || (_2 = true, f2 = u2);
        var A2 = (s2.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey) && _2 ? void 0 : f2, j2 = P2 && L2 !== f2 && this.options.updateMissing;
        if (_2 || O2 || j2) {
          if (this.logger.log(j2 ? "updateKey" : "missingKey", l2, g2, u2, j2 ? L2 : f2), a2) {
            var k2 = this.resolve(u2, Ze(Ze({}, s2), {}, { keySeparator: false }));
            k2 && k2.res && this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.");
          }
          var N2 = [], x2 = this.languageUtils.getFallbackCodes(this.options.fallbackLng, s2.lng || this.language);
          if ("fallback" === this.options.saveMissingTo && x2 && x2[0])
            for (var G2 = 0; G2 < x2.length; G2++)
              N2.push(x2[G2]);
          else
            "all" === this.options.saveMissingTo ? N2 = this.languageUtils.toResolveHierarchy(s2.lng || this.language) : N2.push(s2.lng || this.language);
          var w2 = function(e4, t3, n3) {
            var r3 = P2 && n3 !== f2 ? n3 : A2;
            i2.options.missingKeyHandler ? i2.options.missingKeyHandler(e4, g2, t3, r3, j2, s2) : i2.backendConnector && i2.backendConnector.saveMissing && i2.backendConnector.saveMissing(e4, g2, t3, r3, j2, s2), i2.emit("missingKey", e4, g2, t3, f2);
          };
          this.options.saveMissing && (this.options.saveMissingPlurals && D2 ? N2.forEach(function(e4) {
            i2.pluralResolver.getSuffixes(e4, s2).forEach(function(t3) {
              w2([e4], u2 + t3, s2["defaultValue".concat(t3)] || L2);
            });
          }) : w2(N2, u2, L2));
        }
        f2 = this.extendTranslation(f2, e3, s2, d2, n2), _2 && f2 === u2 && this.options.appendNamespaceToMissingKey && (f2 = "".concat(g2, ":").concat(u2)), (_2 || O2) && this.options.parseMissingKeyHandler && (f2 = "v1" !== this.options.compatibilityAPI ? this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? "".concat(g2, ":").concat(u2) : u2, O2 ? f2 : void 0) : this.options.parseMissingKeyHandler(f2));
      }
      return r2 ? (d2.res = f2, d2) : f2;
    } }, { key: "extendTranslation", value: function(e3, t3, s2, n2, i2) {
      var r2 = this;
      if (this.i18nFormat && this.i18nFormat.parse)
        e3 = this.i18nFormat.parse(e3, Ze(Ze({}, this.options.interpolation.defaultVariables), s2), n2.usedLng, n2.usedNS, n2.usedKey, { resolved: n2 });
      else if (!s2.skipInterpolation) {
        s2.interpolation && this.interpolator.init(Ze(Ze({}, s2), { interpolation: Ze(Ze({}, this.options.interpolation), s2.interpolation) }));
        var a2, o2 = "string" == typeof e3 && (s2 && s2.interpolation && void 0 !== s2.interpolation.skipOnVariables ? s2.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);
        if (o2) {
          var u2 = e3.match(this.interpolator.nestingRegexp);
          a2 = u2 && u2.length;
        }
        var c2 = s2.replace && "string" != typeof s2.replace ? s2.replace : s2;
        if (this.options.interpolation.defaultVariables && (c2 = Ze(Ze({}, this.options.interpolation.defaultVariables), c2)), e3 = this.interpolator.interpolate(e3, c2, s2.lng || this.language, s2), o2) {
          var g2 = e3.match(this.interpolator.nestingRegexp);
          a2 < (g2 && g2.length) && (s2.nest = false);
        }
        !s2.lng && "v1" !== this.options.compatibilityAPI && n2 && n2.res && (s2.lng = n2.usedLng), false !== s2.nest && (e3 = this.interpolator.nest(e3, function() {
          for (var e4 = arguments.length, n3 = new Array(e4), a3 = 0; a3 < e4; a3++)
            n3[a3] = arguments[a3];
          return i2 && i2[0] === n3[0] && !s2.context ? (r2.logger.warn("It seems you are nesting recursively key: ".concat(n3[0], " in key: ").concat(t3[0])), null) : r2.translate.apply(r2, n3.concat([t3]));
        }, s2)), s2.interpolation && this.interpolator.reset();
      }
      var l2 = s2.postProcess || this.options.postProcess, h2 = "string" == typeof l2 ? [l2] : l2;
      return null != e3 && h2 && h2.length && false !== s2.applyPostProcessor && (e3 = We.handle(h2, e3, t3, this.options && this.options.postProcessPassResolved ? Ze({ i18nResolved: n2 }, s2) : s2, this)), e3;
    } }, { key: "resolve", value: function(e3) {
      var t3, s2, n2, i2, r2, a2 = this, o2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      return "string" == typeof e3 && (e3 = [e3]), e3.forEach(function(e4) {
        if (!a2.isValidLookup(t3)) {
          var u2 = a2.extractFromKey(e4, o2), c2 = u2.key;
          s2 = c2;
          var g2 = u2.namespaces;
          a2.options.fallbackNS && (g2 = g2.concat(a2.options.fallbackNS));
          var l2 = void 0 !== o2.count && "string" != typeof o2.count, h2 = l2 && !o2.ordinal && 0 === o2.count && a2.pluralResolver.shouldUseIntlApi(), p2 = void 0 !== o2.context && ("string" == typeof o2.context || "number" == typeof o2.context) && "" !== o2.context, d2 = o2.lngs ? o2.lngs : a2.languageUtils.toResolveHierarchy(o2.lng || a2.language, o2.fallbackLng);
          g2.forEach(function(e5) {
            a2.isValidLookup(t3) || (r2 = e5, !et["".concat(d2[0], "-").concat(e5)] && a2.utils && a2.utils.hasLoadedNamespace && !a2.utils.hasLoadedNamespace(r2) && (et["".concat(d2[0], "-").concat(e5)] = true, a2.logger.warn('key "'.concat(s2, '" for languages "').concat(d2.join(", "), `" won't get resolved as namespace "`).concat(r2, '" was not yet loaded'), "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!")), d2.forEach(function(s3) {
              if (!a2.isValidLookup(t3)) {
                i2 = s3;
                var r3, u3 = [c2];
                if (a2.i18nFormat && a2.i18nFormat.addLookupKeys)
                  a2.i18nFormat.addLookupKeys(u3, c2, s3, e5, o2);
                else {
                  var g3;
                  l2 && (g3 = a2.pluralResolver.getSuffix(s3, o2.count, o2));
                  var d3 = "".concat(a2.options.pluralSeparator, "zero");
                  if (l2 && (u3.push(c2 + g3), h2 && u3.push(c2 + d3)), p2) {
                    var f2 = "".concat(c2).concat(a2.options.contextSeparator).concat(o2.context);
                    u3.push(f2), l2 && (u3.push(f2 + g3), h2 && u3.push(f2 + d3));
                  }
                }
                for (; r3 = u3.pop(); )
                  a2.isValidLookup(t3) || (n2 = r3, t3 = a2.getResource(s3, e5, r3, o2));
              }
            }));
          });
        }
      }), { res: t3, usedKey: s2, exactUsedKey: n2, usedLng: i2, usedNS: r2 };
    } }, { key: "isValidLookup", value: function(e3) {
      return !(void 0 === e3 || !this.options.returnNull && null === e3 || !this.options.returnEmptyString && "" === e3);
    } }, { key: "getResource", value: function(e3, t3, s2) {
      var n2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};
      return this.i18nFormat && this.i18nFormat.getResource ? this.i18nFormat.getResource(e3, t3, s2, n2) : this.resourceStore.getResource(e3, t3, s2, n2);
    } }], [{ key: "hasDefaultValue", value: function(e3) {
      var t3 = "defaultValue";
      for (var s2 in e3)
        if (Object.prototype.hasOwnProperty.call(e3, s2) && t3 === s2.substring(0, 12) && void 0 !== e3[s2])
          return true;
      return false;
    } }]), t2;
  }();
  function st(e2) {
    return e2.charAt(0).toUpperCase() + e2.slice(1);
  }
  var nt = function() {
    function e2(t2) {
      ve(this, e2), this.options = t2, this.supportedLngs = this.options.supportedLngs || false, this.logger = Le.create("languageUtils");
    }
    return Ie(e2, [{ key: "getScriptPartFromCode", value: function(e3) {
      if (!e3 || e3.indexOf("-") < 0)
        return null;
      var t2 = e3.split("-");
      return 2 === t2.length ? null : (t2.pop(), "x" === t2[t2.length - 1].toLowerCase() ? null : this.formatLanguageCode(t2.join("-")));
    } }, { key: "getLanguagePartFromCode", value: function(e3) {
      if (!e3 || e3.indexOf("-") < 0)
        return e3;
      var t2 = e3.split("-");
      return this.formatLanguageCode(t2[0]);
    } }, { key: "formatLanguageCode", value: function(e3) {
      if ("string" == typeof e3 && e3.indexOf("-") > -1) {
        var t2 = ["hans", "hant", "latn", "cyrl", "cans", "mong", "arab"], s2 = e3.split("-");
        return this.options.lowerCaseLng ? s2 = s2.map(function(e4) {
          return e4.toLowerCase();
        }) : 2 === s2.length ? (s2[0] = s2[0].toLowerCase(), s2[1] = s2[1].toUpperCase(), t2.indexOf(s2[1].toLowerCase()) > -1 && (s2[1] = st(s2[1].toLowerCase()))) : 3 === s2.length && (s2[0] = s2[0].toLowerCase(), 2 === s2[1].length && (s2[1] = s2[1].toUpperCase()), "sgn" !== s2[0] && 2 === s2[2].length && (s2[2] = s2[2].toUpperCase()), t2.indexOf(s2[1].toLowerCase()) > -1 && (s2[1] = st(s2[1].toLowerCase())), t2.indexOf(s2[2].toLowerCase()) > -1 && (s2[2] = st(s2[2].toLowerCase()))), s2.join("-");
      }
      return this.options.cleanCode || this.options.lowerCaseLng ? e3.toLowerCase() : e3;
    } }, { key: "isSupportedCode", value: function(e3) {
      return ("languageOnly" === this.options.load || this.options.nonExplicitSupportedLngs) && (e3 = this.getLanguagePartFromCode(e3)), !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(e3) > -1;
    } }, { key: "getBestMatchFromCodes", value: function(e3) {
      var t2, s2 = this;
      return e3 ? (e3.forEach(function(e4) {
        if (!t2) {
          var n2 = s2.formatLanguageCode(e4);
          s2.options.supportedLngs && !s2.isSupportedCode(n2) || (t2 = n2);
        }
      }), !t2 && this.options.supportedLngs && e3.forEach(function(e4) {
        if (!t2) {
          var n2 = s2.getLanguagePartFromCode(e4);
          if (s2.isSupportedCode(n2))
            return t2 = n2;
          t2 = s2.options.supportedLngs.find(function(e5) {
            return e5 === n2 ? e5 : e5.indexOf("-") < 0 && n2.indexOf("-") < 0 ? void 0 : 0 === e5.indexOf(n2) ? e5 : void 0;
          });
        }
      }), t2 || (t2 = this.getFallbackCodes(this.options.fallbackLng)[0]), t2) : null;
    } }, { key: "getFallbackCodes", value: function(e3, t2) {
      if (!e3)
        return [];
      if ("function" == typeof e3 && (e3 = e3(t2)), "string" == typeof e3 && (e3 = [e3]), "[object Array]" === Object.prototype.toString.apply(e3))
        return e3;
      if (!t2)
        return e3.default || [];
      var s2 = e3[t2];
      return s2 || (s2 = e3[this.getScriptPartFromCode(t2)]), s2 || (s2 = e3[this.formatLanguageCode(t2)]), s2 || (s2 = e3[this.getLanguagePartFromCode(t2)]), s2 || (s2 = e3.default), s2 || [];
    } }, { key: "toResolveHierarchy", value: function(e3, t2) {
      var s2 = this, n2 = this.getFallbackCodes(t2 || this.options.fallbackLng || [], e3), i2 = [], r2 = function(e4) {
        e4 && (s2.isSupportedCode(e4) ? i2.push(e4) : s2.logger.warn("rejecting language code not found in supportedLngs: ".concat(e4)));
      };
      return "string" == typeof e3 && e3.indexOf("-") > -1 ? ("languageOnly" !== this.options.load && r2(this.formatLanguageCode(e3)), "languageOnly" !== this.options.load && "currentOnly" !== this.options.load && r2(this.getScriptPartFromCode(e3)), "currentOnly" !== this.options.load && r2(this.getLanguagePartFromCode(e3))) : "string" == typeof e3 && r2(this.formatLanguageCode(e3)), n2.forEach(function(e4) {
        i2.indexOf(e4) < 0 && r2(s2.formatLanguageCode(e4));
      }), i2;
    } }]), e2;
  }(), it = [{ lngs: ["ach", "ak", "am", "arn", "br", "fil", "gun", "ln", "mfe", "mg", "mi", "oc", "pt", "pt-BR", "tg", "tl", "ti", "tr", "uz", "wa"], nr: [1, 2], fc: 1 }, { lngs: ["af", "an", "ast", "az", "bg", "bn", "ca", "da", "de", "dev", "el", "en", "eo", "es", "et", "eu", "fi", "fo", "fur", "fy", "gl", "gu", "ha", "hi", "hu", "hy", "ia", "it", "kk", "kn", "ku", "lb", "mai", "ml", "mn", "mr", "nah", "nap", "nb", "ne", "nl", "nn", "no", "nso", "pa", "pap", "pms", "ps", "pt-PT", "rm", "sco", "se", "si", "so", "son", "sq", "sv", "sw", "ta", "te", "tk", "ur", "yo"], nr: [1, 2], fc: 2 }, { lngs: ["ay", "bo", "cgg", "fa", "ht", "id", "ja", "jbo", "ka", "km", "ko", "ky", "lo", "ms", "sah", "su", "th", "tt", "ug", "vi", "wo", "zh"], nr: [1], fc: 3 }, { lngs: ["be", "bs", "cnr", "dz", "hr", "ru", "sr", "uk"], nr: [1, 2, 5], fc: 4 }, { lngs: ["ar"], nr: [0, 1, 2, 3, 11, 100], fc: 5 }, { lngs: ["cs", "sk"], nr: [1, 2, 5], fc: 6 }, { lngs: ["csb", "pl"], nr: [1, 2, 5], fc: 7 }, { lngs: ["cy"], nr: [1, 2, 3, 8], fc: 8 }, { lngs: ["fr"], nr: [1, 2], fc: 9 }, { lngs: ["ga"], nr: [1, 2, 3, 7, 11], fc: 10 }, { lngs: ["gd"], nr: [1, 2, 3, 20], fc: 11 }, { lngs: ["is"], nr: [1, 2], fc: 12 }, { lngs: ["jv"], nr: [0, 1], fc: 13 }, { lngs: ["kw"], nr: [1, 2, 3, 4], fc: 14 }, { lngs: ["lt"], nr: [1, 2, 10], fc: 15 }, { lngs: ["lv"], nr: [1, 2, 0], fc: 16 }, { lngs: ["mk"], nr: [1, 2], fc: 17 }, { lngs: ["mnk"], nr: [0, 1, 2], fc: 18 }, { lngs: ["mt"], nr: [1, 2, 11, 20], fc: 19 }, { lngs: ["or"], nr: [2, 1], fc: 2 }, { lngs: ["ro"], nr: [1, 2, 20], fc: 20 }, { lngs: ["sl"], nr: [5, 1, 2, 3], fc: 21 }, { lngs: ["he", "iw"], nr: [1, 2, 20, 21], fc: 22 }], rt = { 1: function(e2) {
    return Number(e2 > 1);
  }, 2: function(e2) {
    return Number(1 != e2);
  }, 3: function(e2) {
    return 0;
  }, 4: function(e2) {
    return Number(e2 % 10 == 1 && e2 % 100 != 11 ? 0 : e2 % 10 >= 2 && e2 % 10 <= 4 && (e2 % 100 < 10 || e2 % 100 >= 20) ? 1 : 2);
  }, 5: function(e2) {
    return Number(0 == e2 ? 0 : 1 == e2 ? 1 : 2 == e2 ? 2 : e2 % 100 >= 3 && e2 % 100 <= 10 ? 3 : e2 % 100 >= 11 ? 4 : 5);
  }, 6: function(e2) {
    return Number(1 == e2 ? 0 : e2 >= 2 && e2 <= 4 ? 1 : 2);
  }, 7: function(e2) {
    return Number(1 == e2 ? 0 : e2 % 10 >= 2 && e2 % 10 <= 4 && (e2 % 100 < 10 || e2 % 100 >= 20) ? 1 : 2);
  }, 8: function(e2) {
    return Number(1 == e2 ? 0 : 2 == e2 ? 1 : 8 != e2 && 11 != e2 ? 2 : 3);
  }, 9: function(e2) {
    return Number(e2 >= 2);
  }, 10: function(e2) {
    return Number(1 == e2 ? 0 : 2 == e2 ? 1 : e2 < 7 ? 2 : e2 < 11 ? 3 : 4);
  }, 11: function(e2) {
    return Number(1 == e2 || 11 == e2 ? 0 : 2 == e2 || 12 == e2 ? 1 : e2 > 2 && e2 < 20 ? 2 : 3);
  }, 12: function(e2) {
    return Number(e2 % 10 != 1 || e2 % 100 == 11);
  }, 13: function(e2) {
    return Number(0 !== e2);
  }, 14: function(e2) {
    return Number(1 == e2 ? 0 : 2 == e2 ? 1 : 3 == e2 ? 2 : 3);
  }, 15: function(e2) {
    return Number(e2 % 10 == 1 && e2 % 100 != 11 ? 0 : e2 % 10 >= 2 && (e2 % 100 < 10 || e2 % 100 >= 20) ? 1 : 2);
  }, 16: function(e2) {
    return Number(e2 % 10 == 1 && e2 % 100 != 11 ? 0 : 0 !== e2 ? 1 : 2);
  }, 17: function(e2) {
    return Number(1 == e2 || e2 % 10 == 1 && e2 % 100 != 11 ? 0 : 1);
  }, 18: function(e2) {
    return Number(0 == e2 ? 0 : 1 == e2 ? 1 : 2);
  }, 19: function(e2) {
    return Number(1 == e2 ? 0 : 0 == e2 || e2 % 100 > 1 && e2 % 100 < 11 ? 1 : e2 % 100 > 10 && e2 % 100 < 20 ? 2 : 3);
  }, 20: function(e2) {
    return Number(1 == e2 ? 0 : 0 == e2 || e2 % 100 > 0 && e2 % 100 < 20 ? 1 : 2);
  }, 21: function(e2) {
    return Number(e2 % 100 == 1 ? 1 : e2 % 100 == 2 ? 2 : e2 % 100 == 3 || e2 % 100 == 4 ? 3 : 0);
  }, 22: function(e2) {
    return Number(1 == e2 ? 0 : 2 == e2 ? 1 : (e2 < 0 || e2 > 10) && e2 % 10 == 0 ? 2 : 3);
  } }, at = ["v1", "v2", "v3"], ot = { zero: 0, one: 1, two: 2, few: 3, many: 4, other: 5 };
  var ut = function() {
    function e2(t2) {
      var s2, n2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      ve(this, e2), this.languageUtils = t2, this.options = n2, this.logger = Le.create("pluralResolver"), this.options.compatibilityJSON && "v4" !== this.options.compatibilityJSON || "undefined" != typeof Intl && Intl.PluralRules || (this.options.compatibilityJSON = "v3", this.logger.error("Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.")), this.rules = (s2 = {}, it.forEach(function(e3) {
        e3.lngs.forEach(function(t3) {
          s2[t3] = { numbers: e3.nr, plurals: rt[e3.fc] };
        });
      }), s2);
    }
    return Ie(e2, [{ key: "addRule", value: function(e3, t2) {
      this.rules[e3] = t2;
    } }, { key: "getRule", value: function(e3) {
      var t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      if (this.shouldUseIntlApi())
        try {
          return new Intl.PluralRules(e3, { type: t2.ordinal ? "ordinal" : "cardinal" });
        } catch (e4) {
          return;
        }
      return this.rules[e3] || this.rules[this.languageUtils.getLanguagePartFromCode(e3)];
    } }, { key: "needsPlural", value: function(e3) {
      var t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, s2 = this.getRule(e3, t2);
      return this.shouldUseIntlApi() ? s2 && s2.resolvedOptions().pluralCategories.length > 1 : s2 && s2.numbers.length > 1;
    } }, { key: "getPluralFormsOfKey", value: function(e3, t2) {
      var s2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
      return this.getSuffixes(e3, s2).map(function(e4) {
        return "".concat(t2).concat(e4);
      });
    } }, { key: "getSuffixes", value: function(e3) {
      var t2 = this, s2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, n2 = this.getRule(e3, s2);
      return n2 ? this.shouldUseIntlApi() ? n2.resolvedOptions().pluralCategories.sort(function(e4, t3) {
        return ot[e4] - ot[t3];
      }).map(function(e4) {
        return "".concat(t2.options.prepend).concat(e4);
      }) : n2.numbers.map(function(n3) {
        return t2.getSuffix(e3, n3, s2);
      }) : [];
    } }, { key: "getSuffix", value: function(e3, t2) {
      var s2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, n2 = this.getRule(e3, s2);
      return n2 ? this.shouldUseIntlApi() ? "".concat(this.options.prepend).concat(n2.select(t2)) : this.getSuffixRetroCompatible(n2, t2) : (this.logger.warn("no plural rule found for: ".concat(e3)), "");
    } }, { key: "getSuffixRetroCompatible", value: function(e3, t2) {
      var s2 = this, n2 = e3.noAbs ? e3.plurals(t2) : e3.plurals(Math.abs(t2)), i2 = e3.numbers[n2];
      this.options.simplifyPluralSuffix && 2 === e3.numbers.length && 1 === e3.numbers[0] && (2 === i2 ? i2 = "plural" : 1 === i2 && (i2 = ""));
      var r2 = function() {
        return s2.options.prepend && i2.toString() ? s2.options.prepend + i2.toString() : i2.toString();
      };
      return "v1" === this.options.compatibilityJSON ? 1 === i2 ? "" : "number" == typeof i2 ? "_plural_".concat(i2.toString()) : r2() : "v2" === this.options.compatibilityJSON || this.options.simplifyPluralSuffix && 2 === e3.numbers.length && 1 === e3.numbers[0] ? r2() : this.options.prepend && n2.toString() ? this.options.prepend + n2.toString() : n2.toString();
    } }, { key: "shouldUseIntlApi", value: function() {
      return !at.includes(this.options.compatibilityJSON);
    } }]), e2;
  }();
  function ct(e2, t2) {
    var s2 = Object.keys(e2);
    if (Object.getOwnPropertySymbols) {
      var n2 = Object.getOwnPropertySymbols(e2);
      t2 && (n2 = n2.filter(function(t3) {
        return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
      })), s2.push.apply(s2, n2);
    }
    return s2;
  }
  function gt(e2) {
    for (var t2 = 1; t2 < arguments.length; t2++) {
      var s2 = null != arguments[t2] ? arguments[t2] : {};
      t2 % 2 ? ct(Object(s2), true).forEach(function(t3) {
        Me(e2, t3, s2[t3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(s2)) : ct(Object(s2)).forEach(function(t3) {
        Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(s2, t3));
      });
    }
    return e2;
  }
  function lt(e2, t2, s2) {
    var n2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : ".", i2 = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4], r2 = function(e3, t3, s3) {
      var n3 = Ge(e3, s3);
      return void 0 !== n3 ? n3 : Ge(t3, s3);
    }(e2, t2, s2);
    return !r2 && i2 && "string" == typeof s2 && void 0 === (r2 = Be(e2, s2, n2)) && (r2 = Be(t2, s2, n2)), r2;
  }
  var ht = function() {
    function e2() {
      var t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
      ve(this, e2), this.logger = Le.create("interpolator"), this.options = t2, this.format = t2.interpolation && t2.interpolation.format || function(e3) {
        return e3;
      }, this.init(t2);
    }
    return Ie(e2, [{ key: "init", value: function() {
      var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
      e3.interpolation || (e3.interpolation = { escapeValue: true });
      var t2 = e3.interpolation;
      this.escape = void 0 !== t2.escape ? t2.escape : $e, this.escapeValue = void 0 === t2.escapeValue || t2.escapeValue, this.useRawValueToEscape = void 0 !== t2.useRawValueToEscape && t2.useRawValueToEscape, this.prefix = t2.prefix ? Ve(t2.prefix) : t2.prefixEscaped || "{{", this.suffix = t2.suffix ? Ve(t2.suffix) : t2.suffixEscaped || "}}", this.formatSeparator = t2.formatSeparator ? t2.formatSeparator : t2.formatSeparator || ",", this.unescapePrefix = t2.unescapeSuffix ? "" : t2.unescapePrefix || "-", this.unescapeSuffix = this.unescapePrefix ? "" : t2.unescapeSuffix || "", this.nestingPrefix = t2.nestingPrefix ? Ve(t2.nestingPrefix) : t2.nestingPrefixEscaped || Ve("$t("), this.nestingSuffix = t2.nestingSuffix ? Ve(t2.nestingSuffix) : t2.nestingSuffixEscaped || Ve(")"), this.nestingOptionsSeparator = t2.nestingOptionsSeparator ? t2.nestingOptionsSeparator : t2.nestingOptionsSeparator || ",", this.maxReplaces = t2.maxReplaces ? t2.maxReplaces : 1e3, this.alwaysFormat = void 0 !== t2.alwaysFormat && t2.alwaysFormat, this.resetRegExp();
    } }, { key: "reset", value: function() {
      this.options && this.init(this.options);
    } }, { key: "resetRegExp", value: function() {
      var e3 = "".concat(this.prefix, "(.+?)").concat(this.suffix);
      this.regexp = new RegExp(e3, "g");
      var t2 = "".concat(this.prefix).concat(this.unescapePrefix, "(.+?)").concat(this.unescapeSuffix).concat(this.suffix);
      this.regexpUnescape = new RegExp(t2, "g");
      var s2 = "".concat(this.nestingPrefix, "(.+?)").concat(this.nestingSuffix);
      this.nestingRegexp = new RegExp(s2, "g");
    } }, { key: "interpolate", value: function(e3, t2, s2, n2) {
      var i2, r2, a2, o2 = this, u2 = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};
      function c2(e4) {
        return e4.replace(/\$/g, "$$$$");
      }
      var g2 = function(e4) {
        if (e4.indexOf(o2.formatSeparator) < 0) {
          var i3 = lt(t2, u2, e4, o2.options.keySeparator, o2.options.ignoreJSONStructure);
          return o2.alwaysFormat ? o2.format(i3, void 0, s2, gt(gt(gt({}, n2), t2), {}, { interpolationkey: e4 })) : i3;
        }
        var r3 = e4.split(o2.formatSeparator), a3 = r3.shift().trim(), c3 = r3.join(o2.formatSeparator).trim();
        return o2.format(lt(t2, u2, a3, o2.options.keySeparator, o2.options.ignoreJSONStructure), c3, s2, gt(gt(gt({}, n2), t2), {}, { interpolationkey: a3 }));
      };
      this.resetRegExp();
      var l2 = n2 && n2.missingInterpolationHandler || this.options.missingInterpolationHandler, h2 = n2 && n2.interpolation && void 0 !== n2.interpolation.skipOnVariables ? n2.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;
      return [{ regex: this.regexpUnescape, safeValue: function(e4) {
        return c2(e4);
      } }, { regex: this.regexp, safeValue: function(e4) {
        return o2.escapeValue ? c2(o2.escape(e4)) : c2(e4);
      } }].forEach(function(t3) {
        for (a2 = 0; i2 = t3.regex.exec(e3); ) {
          var s3 = i2[1].trim();
          if (void 0 === (r2 = g2(s3)))
            if ("function" == typeof l2) {
              var u3 = l2(e3, i2, n2);
              r2 = "string" == typeof u3 ? u3 : "";
            } else if (n2 && Object.prototype.hasOwnProperty.call(n2, s3))
              r2 = "";
            else {
              if (h2) {
                r2 = i2[0];
                continue;
              }
              o2.logger.warn("missed to pass in variable ".concat(s3, " for interpolating ").concat(e3)), r2 = "";
            }
          else
            "string" == typeof r2 || o2.useRawValueToEscape || (r2 = ke(r2));
          var c3 = t3.safeValue(r2);
          if (e3 = e3.replace(i2[0], c3), h2 ? (t3.regex.lastIndex += r2.length, t3.regex.lastIndex -= i2[0].length) : t3.regex.lastIndex = 0, ++a2 >= o2.maxReplaces)
            break;
        }
      }), e3;
    } }, { key: "nest", value: function(e3, t2) {
      var s2, n2, i2, r2 = this, a2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
      function o2(e4, t3) {
        var s3 = this.nestingOptionsSeparator;
        if (e4.indexOf(s3) < 0)
          return e4;
        var n3 = e4.split(new RegExp("".concat(s3, "[ ]*{"))), r3 = "{".concat(n3[1]);
        e4 = n3[0];
        var a3 = (r3 = this.interpolate(r3, i2)).match(/'/g), o3 = r3.match(/"/g);
        (a3 && a3.length % 2 == 0 && !o3 || o3.length % 2 != 0) && (r3 = r3.replace(/'/g, '"'));
        try {
          i2 = JSON.parse(r3), t3 && (i2 = gt(gt({}, t3), i2));
        } catch (t4) {
          return this.logger.warn("failed parsing options string in nesting for key ".concat(e4), t4), "".concat(e4).concat(s3).concat(r3);
        }
        return delete i2.defaultValue, e4;
      }
      for (; s2 = this.nestingRegexp.exec(e3); ) {
        var u2 = [];
        (i2 = (i2 = gt({}, a2)).replace && "string" != typeof i2.replace ? i2.replace : i2).applyPostProcessor = false, delete i2.defaultValue;
        var c2 = false;
        if (-1 !== s2[0].indexOf(this.formatSeparator) && !/{.*}/.test(s2[1])) {
          var g2 = s2[1].split(this.formatSeparator).map(function(e4) {
            return e4.trim();
          });
          s2[1] = g2.shift(), u2 = g2, c2 = true;
        }
        if ((n2 = t2(o2.call(this, s2[1].trim(), i2), i2)) && s2[0] === e3 && "string" != typeof n2)
          return n2;
        "string" != typeof n2 && (n2 = ke(n2)), n2 || (this.logger.warn("missed to resolve ".concat(s2[1], " for nesting ").concat(e3)), n2 = ""), c2 && (n2 = u2.reduce(function(e4, t3) {
          return r2.format(e4, t3, a2.lng, gt(gt({}, a2), {}, { interpolationkey: s2[1].trim() }));
        }, n2.trim())), e3 = e3.replace(s2[0], n2), this.regexp.lastIndex = 0;
      }
      return e3;
    } }]), e2;
  }();
  function pt(e2, t2) {
    var s2 = Object.keys(e2);
    if (Object.getOwnPropertySymbols) {
      var n2 = Object.getOwnPropertySymbols(e2);
      t2 && (n2 = n2.filter(function(t3) {
        return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
      })), s2.push.apply(s2, n2);
    }
    return s2;
  }
  function dt(e2) {
    for (var t2 = 1; t2 < arguments.length; t2++) {
      var s2 = null != arguments[t2] ? arguments[t2] : {};
      t2 % 2 ? pt(Object(s2), true).forEach(function(t3) {
        Me(e2, t3, s2[t3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(s2)) : pt(Object(s2)).forEach(function(t3) {
        Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(s2, t3));
      });
    }
    return e2;
  }
  function ft(e2) {
    var t2 = {};
    return function(s2, n2, i2) {
      var r2 = n2 + JSON.stringify(i2), a2 = t2[r2];
      return a2 || (a2 = e2(n2, i2), t2[r2] = a2), a2(s2);
    };
  }
  var mt = function() {
    function e2() {
      var t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
      ve(this, e2), this.logger = Le.create("formatter"), this.options = t2, this.formats = { number: ft(function(e3, t3) {
        var s2 = new Intl.NumberFormat(e3, dt({}, t3));
        return function(e4) {
          return s2.format(e4);
        };
      }), currency: ft(function(e3, t3) {
        var s2 = new Intl.NumberFormat(e3, dt(dt({}, t3), {}, { style: "currency" }));
        return function(e4) {
          return s2.format(e4);
        };
      }), datetime: ft(function(e3, t3) {
        var s2 = new Intl.DateTimeFormat(e3, dt({}, t3));
        return function(e4) {
          return s2.format(e4);
        };
      }), relativetime: ft(function(e3, t3) {
        var s2 = new Intl.RelativeTimeFormat(e3, dt({}, t3));
        return function(e4) {
          return s2.format(e4, t3.range || "day");
        };
      }), list: ft(function(e3, t3) {
        var s2 = new Intl.ListFormat(e3, dt({}, t3));
        return function(e4) {
          return s2.format(e4);
        };
      }) }, this.init(t2);
    }
    return Ie(e2, [{ key: "init", value: function(e3) {
      var t2 = (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : { interpolation: {} }).interpolation;
      this.formatSeparator = t2.formatSeparator ? t2.formatSeparator : t2.formatSeparator || ",";
    } }, { key: "add", value: function(e3, t2) {
      this.formats[e3.toLowerCase().trim()] = t2;
    } }, { key: "addCached", value: function(e3, t2) {
      this.formats[e3.toLowerCase().trim()] = ft(t2);
    } }, { key: "format", value: function(e3, t2, s2) {
      var n2 = this, i2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};
      return t2.split(this.formatSeparator).reduce(function(e4, t3) {
        var r2 = function(e5) {
          var t4 = e5.toLowerCase().trim(), s3 = {};
          if (e5.indexOf("(") > -1) {
            var n3 = e5.split("(");
            t4 = n3[0].toLowerCase().trim();
            var i3 = n3[1].substring(0, n3[1].length - 1);
            "currency" === t4 && i3.indexOf(":") < 0 ? s3.currency || (s3.currency = i3.trim()) : "relativetime" === t4 && i3.indexOf(":") < 0 ? s3.range || (s3.range = i3.trim()) : i3.split(";").forEach(function(e6) {
              if (e6) {
                var t5 = _e(e6.split(":")), n4 = t5[0], i4 = t5.slice(1).join(":").trim().replace(/^'+|'+$/g, "");
                s3[n4.trim()] || (s3[n4.trim()] = i4), "false" === i4 && (s3[n4.trim()] = false), "true" === i4 && (s3[n4.trim()] = true), isNaN(i4) || (s3[n4.trim()] = parseInt(i4, 10));
              }
            });
          }
          return { formatName: t4, formatOptions: s3 };
        }(t3), a2 = r2.formatName, o2 = r2.formatOptions;
        if (n2.formats[a2]) {
          var u2 = e4;
          try {
            var c2 = i2 && i2.formatParams && i2.formatParams[i2.interpolationkey] || {}, g2 = c2.locale || c2.lng || i2.locale || i2.lng || s2;
            u2 = n2.formats[a2](e4, g2, dt(dt(dt({}, o2), i2), c2));
          } catch (e5) {
            n2.logger.warn(e5);
          }
          return u2;
        }
        return n2.logger.warn("there was no format function for ".concat(a2)), e4;
      }, e3);
    } }]), e2;
  }();
  function vt(e2, t2) {
    var s2 = Object.keys(e2);
    if (Object.getOwnPropertySymbols) {
      var n2 = Object.getOwnPropertySymbols(e2);
      t2 && (n2 = n2.filter(function(t3) {
        return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
      })), s2.push.apply(s2, n2);
    }
    return s2;
  }
  function Tt(e2) {
    for (var t2 = 1; t2 < arguments.length; t2++) {
      var s2 = null != arguments[t2] ? arguments[t2] : {};
      t2 % 2 ? vt(Object(s2), true).forEach(function(t3) {
        Me(e2, t3, s2[t3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(s2)) : vt(Object(s2)).forEach(function(t3) {
        Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(s2, t3));
      });
    }
    return e2;
  }
  function Et(e2) {
    var t2 = function() {
      if ("undefined" == typeof Reflect || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if ("function" == typeof Proxy)
        return true;
      try {
        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        })), true;
      } catch (e3) {
        return false;
      }
    }();
    return function() {
      var s2, n2 = Ce(e2);
      if (t2) {
        var i2 = Ce(this).constructor;
        s2 = Reflect.construct(n2, arguments, i2);
      } else
        s2 = n2.apply(this, arguments);
      return Ue(this, s2);
    };
  }
  var It = function() {
    be(t2, Ae);
    var e2 = Et(t2);
    function t2(s2, n2, i2) {
      var r2, a2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};
      return ve(this, t2), r2 = e2.call(this), He && Ae.call(Se(r2)), r2.backend = s2, r2.store = n2, r2.services = i2, r2.languageUtils = i2.languageUtils, r2.options = a2, r2.logger = Le.create("backendConnector"), r2.waitingReads = [], r2.maxParallelReads = a2.maxParallelReads || 10, r2.readingCalls = 0, r2.maxRetries = a2.maxRetries >= 0 ? a2.maxRetries : 5, r2.retryTimeout = a2.retryTimeout >= 1 ? a2.retryTimeout : 350, r2.state = {}, r2.queue = [], r2.backend && r2.backend.init && r2.backend.init(i2, a2.backend, a2), r2;
    }
    return Ie(t2, [{ key: "queueLoad", value: function(e3, t3, s2, n2) {
      var i2 = this, r2 = {}, a2 = {}, o2 = {}, u2 = {};
      return e3.forEach(function(e4) {
        var n3 = true;
        t3.forEach(function(t4) {
          var o3 = "".concat(e4, "|").concat(t4);
          !s2.reload && i2.store.hasResourceBundle(e4, t4) ? i2.state[o3] = 2 : i2.state[o3] < 0 || (1 === i2.state[o3] ? void 0 === a2[o3] && (a2[o3] = true) : (i2.state[o3] = 1, n3 = false, void 0 === a2[o3] && (a2[o3] = true), void 0 === r2[o3] && (r2[o3] = true), void 0 === u2[t4] && (u2[t4] = true)));
        }), n3 || (o2[e4] = true);
      }), (Object.keys(r2).length || Object.keys(a2).length) && this.queue.push({ pending: a2, pendingCount: Object.keys(a2).length, loaded: {}, errors: [], callback: n2 }), { toLoad: Object.keys(r2), pending: Object.keys(a2), toLoadLanguages: Object.keys(o2), toLoadNamespaces: Object.keys(u2) };
    } }, { key: "loaded", value: function(e3, t3, s2) {
      var n2 = e3.split("|"), i2 = n2[0], r2 = n2[1];
      t3 && this.emit("failedLoading", i2, r2, t3), s2 && this.store.addResourceBundle(i2, r2, s2), this.state[e3] = t3 ? -1 : 2;
      var a2 = {};
      this.queue.forEach(function(s3) {
        var n3, o2, c2, g2, l2;
        n3 = s3.loaded, o2 = r2, c2 = Ne(n3, [i2], Object), g2 = c2.obj, l2 = c2.k, g2[l2] = g2[l2] || [], g2[l2].push(o2), function(e4, t4) {
          void 0 !== e4.pending[t4] && (delete e4.pending[t4], e4.pendingCount--);
        }(s3, e3), t3 && s3.errors.push(t3), 0 !== s3.pendingCount || s3.done || (Object.keys(s3.loaded).forEach(function(e4) {
          a2[e4] || (a2[e4] = {});
          var t4 = s3.loaded[e4];
          t4.length && t4.forEach(function(t5) {
            void 0 === a2[e4][t5] && (a2[e4][t5] = true);
          });
        }), s3.done = true, s3.errors.length ? s3.callback(s3.errors) : s3.callback());
      }), this.emit("loaded", a2), this.queue = this.queue.filter(function(e4) {
        return !e4.done;
      });
    } }, { key: "read", value: function(e3, t3, s2) {
      var n2 = this, i2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, r2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : this.retryTimeout, a2 = arguments.length > 5 ? arguments[5] : void 0;
      if (!e3.length)
        return a2(null, {});
      if (this.readingCalls >= this.maxParallelReads)
        this.waitingReads.push({ lng: e3, ns: t3, fcName: s2, tried: i2, wait: r2, callback: a2 });
      else {
        this.readingCalls++;
        var o2 = function(o3, u3) {
          if (n2.readingCalls--, n2.waitingReads.length > 0) {
            var c3 = n2.waitingReads.shift();
            n2.read(c3.lng, c3.ns, c3.fcName, c3.tried, c3.wait, c3.callback);
          }
          o3 && u3 && i2 < n2.maxRetries ? setTimeout(function() {
            n2.read.call(n2, e3, t3, s2, i2 + 1, 2 * r2, a2);
          }, r2) : a2(o3, u3);
        }, u2 = this.backend[s2].bind(this.backend);
        if (2 !== u2.length)
          return u2(e3, t3, o2);
        try {
          var c2 = u2(e3, t3);
          c2 && "function" == typeof c2.then ? c2.then(function(e4) {
            return o2(null, e4);
          }).catch(o2) : o2(null, c2);
        } catch (e4) {
          o2(e4);
        }
      }
    } }, { key: "prepareLoading", value: function(e3, t3) {
      var s2 = this, n2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, i2 = arguments.length > 3 ? arguments[3] : void 0;
      if (!this.backend)
        return this.logger.warn("No backend was added via i18next.use. Will not load resources."), i2 && i2();
      "string" == typeof e3 && (e3 = this.languageUtils.toResolveHierarchy(e3)), "string" == typeof t3 && (t3 = [t3]);
      var r2 = this.queueLoad(e3, t3, n2, i2);
      if (!r2.toLoad.length)
        return r2.pending.length || i2(), null;
      r2.toLoad.forEach(function(e4) {
        s2.loadOne(e4);
      });
    } }, { key: "load", value: function(e3, t3, s2) {
      this.prepareLoading(e3, t3, {}, s2);
    } }, { key: "reload", value: function(e3, t3, s2) {
      this.prepareLoading(e3, t3, { reload: true }, s2);
    } }, { key: "loadOne", value: function(e3) {
      var t3 = this, s2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "", n2 = e3.split("|"), i2 = n2[0], r2 = n2[1];
      this.read(i2, r2, "read", void 0, void 0, function(n3, a2) {
        n3 && t3.logger.warn("".concat(s2, "loading namespace ").concat(r2, " for language ").concat(i2, " failed"), n3), !n3 && a2 && t3.logger.log("".concat(s2, "loaded namespace ").concat(r2, " for language ").concat(i2), a2), t3.loaded(e3, n3, a2);
      });
    } }, { key: "saveMissing", value: function(e3, t3, s2, n2, i2) {
      var r2 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : {}, a2 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : function() {
      };
      if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(t3))
        this.logger.warn('did not save key "'.concat(s2, '" as the namespace "').concat(t3, '" was not yet loaded'), "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
      else if (null != s2 && "" !== s2) {
        if (this.backend && this.backend.create) {
          var o2 = Tt(Tt({}, r2), {}, { isUpdate: i2 }), u2 = this.backend.create.bind(this.backend);
          if (u2.length < 6)
            try {
              var c2;
              (c2 = 5 === u2.length ? u2(e3, t3, s2, n2, o2) : u2(e3, t3, s2, n2)) && "function" == typeof c2.then ? c2.then(function(e4) {
                return a2(null, e4);
              }).catch(a2) : a2(null, c2);
            } catch (e4) {
              a2(e4);
            }
          else
            u2(e3, t3, s2, n2, a2, o2);
        }
        e3 && e3[0] && this.store.addResource(e3[0], t3, s2, n2);
      }
    } }]), t2;
  }();
  function St() {
    return { debug: false, initImmediate: true, ns: ["translation"], defaultNS: ["translation"], fallbackLng: ["dev"], fallbackNS: false, supportedLngs: false, nonExplicitSupportedLngs: false, load: "all", preload: false, simplifyPluralSuffix: true, keySeparator: ".", nsSeparator: ":", pluralSeparator: "_", contextSeparator: "_", partialBundledLanguages: false, saveMissing: false, updateMissing: false, saveMissingTo: "fallback", saveMissingPlurals: true, missingKeyHandler: false, missingInterpolationHandler: false, postProcess: false, postProcessPassResolved: false, returnNull: true, returnEmptyString: true, returnObjects: false, joinArrays: false, returnedObjectHandler: false, parseMissingKeyHandler: false, appendNamespaceToMissingKey: false, appendNamespaceToCIMode: false, overloadTranslationOptionHandler: function(e2) {
      var t2 = {};
      if ("object" === me(e2[1]) && (t2 = e2[1]), "string" == typeof e2[1] && (t2.defaultValue = e2[1]), "string" == typeof e2[2] && (t2.tDescription = e2[2]), "object" === me(e2[2]) || "object" === me(e2[3])) {
        var s2 = e2[3] || e2[2];
        Object.keys(s2).forEach(function(e3) {
          t2[e3] = s2[e3];
        });
      }
      return t2;
    }, interpolation: { escapeValue: true, format: function(e2, t2, s2, n2) {
      return e2;
    }, prefix: "{{", suffix: "}}", formatSeparator: ",", unescapePrefix: "-", nestingPrefix: "$t(", nestingSuffix: ")", nestingOptionsSeparator: ",", maxReplaces: 1e3, skipOnVariables: true } };
  }
  function yt(e2) {
    return "string" == typeof e2.ns && (e2.ns = [e2.ns]), "string" == typeof e2.fallbackLng && (e2.fallbackLng = [e2.fallbackLng]), "string" == typeof e2.fallbackNS && (e2.fallbackNS = [e2.fallbackNS]), e2.supportedLngs && e2.supportedLngs.indexOf("cimode") < 0 && (e2.supportedLngs = e2.supportedLngs.concat(["cimode"])), e2;
  }
  function bt(e2, t2) {
    var s2 = Object.keys(e2);
    if (Object.getOwnPropertySymbols) {
      var n2 = Object.getOwnPropertySymbols(e2);
      t2 && (n2 = n2.filter(function(t3) {
        return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
      })), s2.push.apply(s2, n2);
    }
    return s2;
  }
  function Ut(e2) {
    for (var t2 = 1; t2 < arguments.length; t2++) {
      var s2 = null != arguments[t2] ? arguments[t2] : {};
      t2 % 2 ? bt(Object(s2), true).forEach(function(t3) {
        Me(e2, t3, s2[t3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(s2)) : bt(Object(s2)).forEach(function(t3) {
        Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(s2, t3));
      });
    }
    return e2;
  }
  function Ct(e2) {
    var t2 = function() {
      if ("undefined" == typeof Reflect || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if ("function" == typeof Proxy)
        return true;
      try {
        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        })), true;
      } catch (e3) {
        return false;
      }
    }();
    return function() {
      var s2, n2 = Ce(e2);
      if (t2) {
        var i2 = Ce(this).constructor;
        s2 = Reflect.construct(n2, arguments, i2);
      } else
        s2 = n2.apply(this, arguments);
      return Ue(this, s2);
    };
  }
  function Mt() {
  }
  var Ot = function() {
    be(t2, Ae);
    var e2 = Ct(t2);
    function t2() {
      var s2, n2, i2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r2 = arguments.length > 1 ? arguments[1] : void 0;
      if (ve(this, t2), s2 = e2.call(this), He && Ae.call(Se(s2)), s2.options = yt(i2), s2.services = {}, s2.logger = Le, s2.modules = { external: [] }, n2 = Se(s2), Object.getOwnPropertyNames(Object.getPrototypeOf(n2)).forEach(function(e3) {
        "function" == typeof n2[e3] && (n2[e3] = n2[e3].bind(n2));
      }), r2 && !s2.isInitialized && !i2.isClone) {
        if (!s2.options.initImmediate)
          return s2.init(i2, r2), Ue(s2, Se(s2));
        setTimeout(function() {
          s2.init(i2, r2);
        }, 0);
      }
      return s2;
    }
    return Ie(t2, [{ key: "init", value: function() {
      var e3 = this, t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, s2 = arguments.length > 1 ? arguments[1] : void 0;
      "function" == typeof t3 && (s2 = t3, t3 = {}), !t3.defaultNS && false !== t3.defaultNS && t3.ns && ("string" == typeof t3.ns ? t3.defaultNS = t3.ns : t3.ns.indexOf("translation") < 0 && (t3.defaultNS = t3.ns[0]));
      var n2 = St();
      function i2(e4) {
        return e4 ? "function" == typeof e4 ? new e4() : e4 : null;
      }
      if (this.options = Ut(Ut(Ut({}, n2), this.options), yt(t3)), "v1" !== this.options.compatibilityAPI && (this.options.interpolation = Ut(Ut({}, n2.interpolation), this.options.interpolation)), void 0 !== t3.keySeparator && (this.options.userDefinedKeySeparator = t3.keySeparator), void 0 !== t3.nsSeparator && (this.options.userDefinedNsSeparator = t3.nsSeparator), !this.options.isClone) {
        var r2;
        this.modules.logger ? Le.init(i2(this.modules.logger), this.options) : Le.init(null, this.options), this.modules.formatter ? r2 = this.modules.formatter : "undefined" != typeof Intl && (r2 = mt);
        var a2 = new nt(this.options);
        this.store = new Je(this.options.resources, this.options);
        var o2 = this.services;
        o2.logger = Le, o2.resourceStore = this.store, o2.languageUtils = a2, o2.pluralResolver = new ut(a2, { prepend: this.options.pluralSeparator, compatibilityJSON: this.options.compatibilityJSON, simplifyPluralSuffix: this.options.simplifyPluralSuffix }), !r2 || this.options.interpolation.format && this.options.interpolation.format !== n2.interpolation.format || (o2.formatter = i2(r2), o2.formatter.init(o2, this.options), this.options.interpolation.format = o2.formatter.format.bind(o2.formatter)), o2.interpolator = new ht(this.options), o2.utils = { hasLoadedNamespace: this.hasLoadedNamespace.bind(this) }, o2.backendConnector = new It(i2(this.modules.backend), o2.resourceStore, o2, this.options), o2.backendConnector.on("*", function(t4) {
          for (var s3 = arguments.length, n3 = new Array(s3 > 1 ? s3 - 1 : 0), i3 = 1; i3 < s3; i3++)
            n3[i3 - 1] = arguments[i3];
          e3.emit.apply(e3, [t4].concat(n3));
        }), this.modules.languageDetector && (o2.languageDetector = i2(this.modules.languageDetector), o2.languageDetector.init && o2.languageDetector.init(o2, this.options.detection, this.options)), this.modules.i18nFormat && (o2.i18nFormat = i2(this.modules.i18nFormat), o2.i18nFormat.init && o2.i18nFormat.init(this)), this.translator = new tt$1(this.services, this.options), this.translator.on("*", function(t4) {
          for (var s3 = arguments.length, n3 = new Array(s3 > 1 ? s3 - 1 : 0), i3 = 1; i3 < s3; i3++)
            n3[i3 - 1] = arguments[i3];
          e3.emit.apply(e3, [t4].concat(n3));
        }), this.modules.external.forEach(function(t4) {
          t4.init && t4.init(e3);
        });
      }
      if (this.format = this.options.interpolation.format, s2 || (s2 = Mt), this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
        var u2 = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
        u2.length > 0 && "dev" !== u2[0] && (this.options.lng = u2[0]);
      }
      this.services.languageDetector || this.options.lng || this.logger.warn("init: no languageDetector is used and no lng is defined");
      ["getResource", "hasResourceBundle", "getResourceBundle", "getDataByLanguage"].forEach(function(t4) {
        e3[t4] = function() {
          var s3;
          return (s3 = e3.store)[t4].apply(s3, arguments);
        };
      });
      ["addResource", "addResources", "addResourceBundle", "removeResourceBundle"].forEach(function(t4) {
        e3[t4] = function() {
          var s3;
          return (s3 = e3.store)[t4].apply(s3, arguments), e3;
        };
      });
      var c2 = je(), g2 = function() {
        var t4 = function(t5, n3) {
          e3.isInitialized && !e3.initializedStoreOnce && e3.logger.warn("init: i18next is already initialized. You should call init just once!"), e3.isInitialized = true, e3.options.isClone || e3.logger.log("initialized", e3.options), e3.emit("initialized", e3.options), c2.resolve(n3), s2(t5, n3);
        };
        if (e3.languages && "v1" !== e3.options.compatibilityAPI && !e3.isInitialized)
          return t4(null, e3.t.bind(e3));
        e3.changeLanguage(e3.options.lng, t4);
      };
      return this.options.resources || !this.options.initImmediate ? g2() : setTimeout(g2, 0), c2;
    } }, { key: "loadResources", value: function(e3) {
      var t3 = this, s2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Mt, n2 = "string" == typeof e3 ? e3 : this.language;
      if ("function" == typeof e3 && (s2 = e3), !this.options.resources || this.options.partialBundledLanguages) {
        if (n2 && "cimode" === n2.toLowerCase())
          return s2();
        var i2 = [], r2 = function(e4) {
          e4 && t3.services.languageUtils.toResolveHierarchy(e4).forEach(function(e5) {
            i2.indexOf(e5) < 0 && i2.push(e5);
          });
        };
        if (n2)
          r2(n2);
        else
          this.services.languageUtils.getFallbackCodes(this.options.fallbackLng).forEach(function(e4) {
            return r2(e4);
          });
        this.options.preload && this.options.preload.forEach(function(e4) {
          return r2(e4);
        }), this.services.backendConnector.load(i2, this.options.ns, function(e4) {
          e4 || t3.resolvedLanguage || !t3.language || t3.setResolvedLanguage(t3.language), s2(e4);
        });
      } else
        s2(null);
    } }, { key: "reloadResources", value: function(e3, t3, s2) {
      var n2 = je();
      return e3 || (e3 = this.languages), t3 || (t3 = this.options.ns), s2 || (s2 = Mt), this.services.backendConnector.reload(e3, t3, function(e4) {
        n2.resolve(), s2(e4);
      }), n2;
    } }, { key: "use", value: function(e3) {
      if (!e3)
        throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");
      if (!e3.type)
        throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");
      return "backend" === e3.type && (this.modules.backend = e3), ("logger" === e3.type || e3.log && e3.warn && e3.error) && (this.modules.logger = e3), "languageDetector" === e3.type && (this.modules.languageDetector = e3), "i18nFormat" === e3.type && (this.modules.i18nFormat = e3), "postProcessor" === e3.type && We.addPostProcessor(e3), "formatter" === e3.type && (this.modules.formatter = e3), "3rdParty" === e3.type && this.modules.external.push(e3), this;
    } }, { key: "setResolvedLanguage", value: function(e3) {
      if (e3 && this.languages && !(["cimode", "dev"].indexOf(e3) > -1))
        for (var t3 = 0; t3 < this.languages.length; t3++) {
          var s2 = this.languages[t3];
          if (!(["cimode", "dev"].indexOf(s2) > -1) && this.store.hasLanguageSomeTranslations(s2)) {
            this.resolvedLanguage = s2;
            break;
          }
        }
    } }, { key: "changeLanguage", value: function(e3, t3) {
      var s2 = this;
      this.isLanguageChangingTo = e3;
      var n2 = je();
      this.emit("languageChanging", e3);
      var i2 = function(e4) {
        s2.language = e4, s2.languages = s2.services.languageUtils.toResolveHierarchy(e4), s2.resolvedLanguage = void 0, s2.setResolvedLanguage(e4);
      }, r2 = function(r3) {
        e3 || r3 || !s2.services.languageDetector || (r3 = []);
        var a2 = "string" == typeof r3 ? r3 : s2.services.languageUtils.getBestMatchFromCodes(r3);
        a2 && (s2.language || i2(a2), s2.translator.language || s2.translator.changeLanguage(a2), s2.services.languageDetector && s2.services.languageDetector.cacheUserLanguage && s2.services.languageDetector.cacheUserLanguage(a2)), s2.loadResources(a2, function(e4) {
          !function(e5, r4) {
            r4 ? (i2(r4), s2.translator.changeLanguage(r4), s2.isLanguageChangingTo = void 0, s2.emit("languageChanged", r4), s2.logger.log("languageChanged", r4)) : s2.isLanguageChangingTo = void 0, n2.resolve(function() {
              return s2.t.apply(s2, arguments);
            }), t3 && t3(e5, function() {
              return s2.t.apply(s2, arguments);
            });
          }(e4, a2);
        });
      };
      return e3 || !this.services.languageDetector || this.services.languageDetector.async ? !e3 && this.services.languageDetector && this.services.languageDetector.async ? 0 === this.services.languageDetector.detect.length ? this.services.languageDetector.detect().then(r2) : this.services.languageDetector.detect(r2) : r2(e3) : r2(this.services.languageDetector.detect()), n2;
    } }, { key: "getFixedT", value: function(e3, t3, s2) {
      var n2 = this, i2 = function e4(t4, i3) {
        var r2;
        if ("object" !== me(i3)) {
          for (var a2 = arguments.length, o2 = new Array(a2 > 2 ? a2 - 2 : 0), u2 = 2; u2 < a2; u2++)
            o2[u2 - 2] = arguments[u2];
          r2 = n2.options.overloadTranslationOptionHandler([t4, i3].concat(o2));
        } else
          r2 = Ut({}, i3);
        r2.lng = r2.lng || e4.lng, r2.lngs = r2.lngs || e4.lngs, r2.ns = r2.ns || e4.ns, r2.keyPrefix = r2.keyPrefix || s2 || e4.keyPrefix;
        var c2, g2 = n2.options.keySeparator || ".";
        return c2 = r2.keyPrefix && Array.isArray(t4) ? t4.map(function(e5) {
          return "".concat(r2.keyPrefix).concat(g2).concat(e5);
        }) : r2.keyPrefix ? "".concat(r2.keyPrefix).concat(g2).concat(t4) : t4, n2.t(c2, r2);
      };
      return "string" == typeof e3 ? i2.lng = e3 : i2.lngs = e3, i2.ns = t3, i2.keyPrefix = s2, i2;
    } }, { key: "t", value: function() {
      var e3;
      return this.translator && (e3 = this.translator).translate.apply(e3, arguments);
    } }, { key: "exists", value: function() {
      var e3;
      return this.translator && (e3 = this.translator).exists.apply(e3, arguments);
    } }, { key: "setDefaultNamespace", value: function(e3) {
      this.options.defaultNS = e3;
    } }, { key: "hasLoadedNamespace", value: function(e3) {
      var t3 = this, s2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      if (!this.isInitialized)
        return this.logger.warn("hasLoadedNamespace: i18next was not initialized", this.languages), false;
      if (!this.languages || !this.languages.length)
        return this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty", this.languages), false;
      var n2 = s2.lng || this.resolvedLanguage || this.languages[0], i2 = !!this.options && this.options.fallbackLng, r2 = this.languages[this.languages.length - 1];
      if ("cimode" === n2.toLowerCase())
        return true;
      var a2 = function(e4, s3) {
        var n3 = t3.services.backendConnector.state["".concat(e4, "|").concat(s3)];
        return -1 === n3 || 2 === n3;
      };
      if (s2.precheck) {
        var o2 = s2.precheck(this, a2);
        if (void 0 !== o2)
          return o2;
      }
      return !!this.hasResourceBundle(n2, e3) || (!(this.services.backendConnector.backend && (!this.options.resources || this.options.partialBundledLanguages)) || !(!a2(n2, e3) || i2 && !a2(r2, e3)));
    } }, { key: "loadNamespaces", value: function(e3, t3) {
      var s2 = this, n2 = je();
      return this.options.ns ? ("string" == typeof e3 && (e3 = [e3]), e3.forEach(function(e4) {
        s2.options.ns.indexOf(e4) < 0 && s2.options.ns.push(e4);
      }), this.loadResources(function(e4) {
        n2.resolve(), t3 && t3(e4);
      }), n2) : (t3 && t3(), Promise.resolve());
    } }, { key: "loadLanguages", value: function(e3, t3) {
      var s2 = je();
      "string" == typeof e3 && (e3 = [e3]);
      var n2 = this.options.preload || [], i2 = e3.filter(function(e4) {
        return n2.indexOf(e4) < 0;
      });
      return i2.length ? (this.options.preload = n2.concat(i2), this.loadResources(function(e4) {
        s2.resolve(), t3 && t3(e4);
      }), s2) : (t3 && t3(), Promise.resolve());
    } }, { key: "dir", value: function(e3) {
      if (e3 || (e3 = this.resolvedLanguage || (this.languages && this.languages.length > 0 ? this.languages[0] : this.language)), !e3)
        return "rtl";
      var t3 = this.services && this.services.languageUtils || new nt(St());
      return ["ar", "shu", "sqr", "ssh", "xaa", "yhd", "yud", "aao", "abh", "abv", "acm", "acq", "acw", "acx", "acy", "adf", "ads", "aeb", "aec", "afb", "ajp", "apc", "apd", "arb", "arq", "ars", "ary", "arz", "auz", "avl", "ayh", "ayl", "ayn", "ayp", "bbz", "pga", "he", "iw", "ps", "pbt", "pbu", "pst", "prp", "prd", "ug", "ur", "ydd", "yds", "yih", "ji", "yi", "hbo", "men", "xmn", "fa", "jpr", "peo", "pes", "prs", "dv", "sam", "ckb"].indexOf(t3.getLanguagePartFromCode(e3)) > -1 || e3.toLowerCase().indexOf("-arab") > 1 ? "rtl" : "ltr";
    } }, { key: "cloneInstance", value: function() {
      var e3 = this, s2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, n2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Mt, i2 = Ut(Ut(Ut({}, this.options), s2), { isClone: true }), r2 = new t2(i2);
      void 0 === s2.debug && void 0 === s2.prefix || (r2.logger = r2.logger.clone(s2));
      return ["store", "services", "language"].forEach(function(t3) {
        r2[t3] = e3[t3];
      }), r2.services = Ut({}, this.services), r2.services.utils = { hasLoadedNamespace: r2.hasLoadedNamespace.bind(r2) }, r2.translator = new tt$1(r2.services, r2.options), r2.translator.on("*", function(e4) {
        for (var t3 = arguments.length, s3 = new Array(t3 > 1 ? t3 - 1 : 0), n3 = 1; n3 < t3; n3++)
          s3[n3 - 1] = arguments[n3];
        r2.emit.apply(r2, [e4].concat(s3));
      }), r2.init(i2, n2), r2.translator.options = r2.options, r2.translator.backendConnector.services.utils = { hasLoadedNamespace: r2.hasLoadedNamespace.bind(r2) }, r2;
    } }, { key: "toJSON", value: function() {
      return { options: this.options, store: this.store, language: this.language, languages: this.languages, resolvedLanguage: this.resolvedLanguage };
    } }]), t2;
  }();
  Me(Ot, "createInstance", function() {
    return new Ot(arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, arguments.length > 1 ? arguments[1] : void 0);
  });
  var _t = Ot.createInstance();
  _t.createInstance = Ot.createInstance, _t.createInstance, _t.dir, _t.init, _t.loadResources, _t.reloadResources, _t.use, _t.changeLanguage, _t.getFixedT, _t.t, _t.exists, _t.setDefaultNamespace, _t.hasLoadedNamespace, _t.loadNamespaces, _t.loadLanguages;
  class Dt extends ne {
    constructor() {
      super(), this.languages = null, this.keyMap = {};
    }
    static getInstance() {
      return Dt.instance || (Dt.instance = new Dt()), Dt.instance;
    }
    provideLanguages(e2) {
      var t2;
      G || (this.languages = e2, (null === (t2 = e2["zh-CN"]) || void 0 === t2 ? void 0 : t2.Chat) && this.setKeyMap(e2["zh-CN"]), formatAppLog("log", "at node_modules/@tencentcloud/chat-uikit-engine/index.js:1", "TUITranslateService.provideLanguages ok."));
    }
    useI18n(e2) {
      var t2;
      if (G)
        return;
      if (!this.languages)
        return void formatAppLog("warn", "at node_modules/@tencentcloud/chat-uikit-engine/index.js:1", "TUITranslateService.useI18next not have messages.");
      const s2 = {};
      for (const [e3, t3] of Object.entries(this.languages)) {
        s2["zh_cn" === e3 ? "zh" : e3] = { translation: t3 };
      }
      _t.init({ compatibilityJSON: "v3", lng: e2 || "zh", fallbackLng: "zh", detection: { order: ["querystring", "navigator"], caches: ["localStorage", "cookie"] }, resources: s2 });
      let n2 = this.normalizeLanguageKey(e2 || "zh");
      null === (t2 = this.getEngine().TUIReport) || void 0 === t2 || t2.reportFeature(201, n2);
    }
    changeLanguage(e2) {
      let t2 = this.normalizeLanguageKey(e2);
      return this.getEngine().TUIReport.reportFeature(201, t2), _t.changeLanguage(e2);
    }
    normalizeLanguageKey(e2) {
      return e2.includes("en") ? "en-us" : e2.includes("tw") ? "zh-tw" : e2.includes("zh") || e2.includes("cn") ? "zh-cn" : e2.includes("ko") || e2.includes("kr") ? "ko-kr" : e2.includes("ja") || e2.includes("jp") ? "ja-jp" : "other-" + e2;
    }
    t(e2) {
      if (!this.languages) {
        let t3 = e2;
        return !S$1(e2) && e2.indexOf(".") > -1 && (t3 = e2.split(".").pop() || ""), t3;
      }
      const t2 = this.keyMap[e2];
      return t2 ? _t.t(t2) : _t.t(e2);
    }
    setKeyMap(e2, t2) {
      for (const s2 in e2)
        if (Object.prototype.hasOwnProperty.call(e2, s2)) {
          const n2 = t2 ? `${t2}.${s2}` : s2;
          if (e2[s2] && "object" == typeof e2[s2] && !Array.isArray(e2[s2]) && null !== e2[s2])
            this.setKeyMap(e2[s2], n2);
          else {
            let n3 = t2 ? `${t2}.${e2[s2]}` : e2[s2];
            n3 = this.replaceKey(n3), this.keyMap[n3] = `${t2}.${s2}`;
          }
        }
    }
    replaceKey(e2) {
      return e2.startsWith("Chat") ? e2.replace("Chat", "TUIChat") : e2.startsWith("Conversation") ? e2.replace("Conversation", "TUIConversation") : e2.startsWith("Message") ? e2.replace("Message", "message.tip") : e2.startsWith("Call") ? e2.replace("Call", "message.custom") : e2;
    }
  }
  class Pt extends ne {
    constructor() {
      super(), this.serv = "TUIConversationService";
    }
    static getInstance() {
      return Pt.instance || (Pt.instance = new Pt()), Pt.instance;
    }
    init() {
      const e2 = this.getEngine();
      e2.eventCenter.addEvent(e2.EVENT.CONVERSATION_LIST_UPDATED, this.onConversationListUpdated.bind(this)), e2.eventCenter.addEvent(e2.EVENT.TOTAL_UNREAD_MESSAGE_COUNT_UPDATED, this.onTotalUnreadCountUpdated.bind(this)), e2.eventCenter.addEvent(e2.EVENT.MESSAGE_RECEIVED, this.onMessageReceived.bind(this)), this.getConversationInitData();
    }
    onConversationListUpdated(e2) {
      const t2 = this.filterSystemConversation(e2);
      this.getEngine().TUIStore.update(o$2.CONV, "conversationList", t2), this.updateCurrentConversation();
    }
    onTotalUnreadCountUpdated(e2) {
      this.getEngine().TUIStore.update(o$2.CONV, "totalUnreadCount", e2);
    }
    onMessageReceived(e2) {
      const t2 = this.getEngine(), s2 = this.getEngine().TUIStore.getData(o$2.CONV, "conversationList");
      let n2 = false;
      for (let i2 = 0; i2 < e2.length; i2++) {
        if (e2[i2].type !== t2.TYPES.MSG_GRP_SYS_NOTICE)
          continue;
        const { operationType: r2 } = e2[i2].payload, a2 = `GROUP${e2[i2].to}`, u2 = 4 === r2 || 5 === r2 || 8 === r2, c2 = 2 === r2 || 6 === r2 || 7 === r2;
        if (u2 || c2) {
          for (let e3 = 0; e3 < s2.length; e3++)
            if (s2[e3].type !== t2.TYPES.CONV_C2C && s2[e3].conversationID === a2) {
              if (u2) {
                this.getEngine().TUIStore.update(o$2.CONV, "operationTypeMap", { conversationID: a2, operationType: r2 }), n2 = true;
                break;
              }
              if (c2 && s2[e3].operationType > 0) {
                this.getEngine().TUIStore.update(o$2.CONV, "operationTypeMap", { conversationID: a2, operationType: 0 }), n2 = true;
                break;
              }
            }
        }
      }
      if (n2) {
        this.getEngine().TUIStore.update(o$2.CONV, "conversationList", s2);
        const e3 = this.getEngine().TUIStore.getData(o$2.CONV, "currentConversationID") || "", t3 = this.findConversation(e3);
        t3 && this.getEngine().TUIStore.update(o$2.CONV, "currentConversation", t3);
      }
    }
    getConversationInitData() {
      const e2 = this.getEngine();
      e2.chat.isReady() && e2.chat.getConversationList().then((t2) => {
        const { conversationList: s2, isSyncCompleted: n2 } = t2.data;
        if (formatAppLog("log", "at node_modules/@tencentcloud/chat-uikit-engine/index.js:1", `${this.serv}.init, getConversationList count:${s2.length} isSyncCompleted:${n2}`), s2.length > 0) {
          this.onConversationListUpdated(s2);
          const t3 = e2.chat.getTotalUnreadMessageCount();
          this.onTotalUnreadCountUpdated(t3);
        }
      });
    }
    switchConversation(e2) {
      return i$2(this, void 0, void 0, function* () {
        const t2 = `${this.serv}.switchConversation`, s2 = this.getEngine();
        if (!e2)
          return s2.TUIStore.reset(o$2.CHAT, ["messageList", "isCompleted", "nextReqMessageID"]), s2.TUIStore.update(o$2.CONV, "currentConversationID", ""), s2.TUIStore.update(o$2.CONV, "currentConversation", null), formatAppLog("log", "at node_modules/@tencentcloud/chat-uikit-engine/index.js:1", `${t2} conversationID is empty, conversationID:${e2}`), Promise.resolve({});
        if (!e2.startsWith(s2.TYPES.CONV_C2C) && !e2.startsWith(s2.TYPES.CONV_GROUP))
          return formatAppLog("warn", "at node_modules/@tencentcloud/chat-uikit-engine/index.js:1", `${t2} conversationID is invalid, conversationID:${e2}`), Promise.reject({ code: h$2.INVALID_CONV_ID, message: d$1.INVALID_CONV_ID });
        const n2 = s2.TUIStore.getData(o$2.CONV, "currentConversationID");
        if (n2 && n2 === e2)
          return this.setMessageRead(n2), formatAppLog("warn", "at node_modules/@tencentcloud/chat-uikit-engine/index.js:1", `${t2} please check conversationID, conversationID:${e2}`), Promise.resolve({ code: h$2.CONV_ID_SAME, message: d$1.CONV_ID_SAME });
        const i2 = yield this.getConversationModel(e2);
        return S$1(i2) ? (formatAppLog("warn", "at node_modules/@tencentcloud/chat-uikit-engine/index.js:1", `${t2} target conversation is not exist, conversationID:${e2}`), Promise.reject({ code: h$2.CONV_NOT_EXIST, message: d$1.CONV_NOT_EXIST })) : (n2 && this.setMessageRead(n2), e2 && this.setMessageRead(e2), s2.TUIStore.reset(o$2.CHAT, ["messageList", "isCompleted", "nextReqMessageID"]), s2.TUIStore.update(o$2.CONV, "currentConversationID", e2), s2.TUIStore.update(o$2.CONV, "currentConversation", i2), Promise.resolve(i2));
      });
    }
    getConversationModel(e2) {
      return i$2(this, void 0, void 0, function* () {
        let t2 = this.findConversation(e2);
        if (S$1(t2))
          try {
            const s2 = yield this.getConversationProfile(e2);
            s2.data && s2.data.conversation && (t2 = new ae(s2.data.conversation));
          } catch (e3) {
            t2 = void 0;
          }
        return t2;
      });
    }
    findConversation(e2) {
      let t2;
      const s2 = this.getEngine().TUIStore.getData(o$2.CONV, "conversationList");
      for (let n2 = 0; n2 < s2.length; n2++)
        if (s2[n2].conversationID === e2) {
          t2 = s2[n2];
          break;
        }
      return t2;
    }
    updateCurrentConversation() {
      const e2 = this.getEngine(), t2 = e2.TUIStore.getData(o$2.CONV, "currentConversationID"), s2 = this.findConversation(t2);
      s2 && e2.TUIStore.update(o$2.CONV, "currentConversation", s2);
    }
    getConversationList() {
      return this.getEngine().chat.getConversationList();
    }
    getConversationProfile(e2) {
      return this.getEngine().chat.getConversationProfile(e2);
    }
    deleteConversation(e2) {
      return this.getEngine().chat.deleteConversation(e2).then((t2) => {
        const s2 = this.getEngine().TUIStore.getData(o$2.CONV, "currentConversationID");
        return formatAppLog("log", "at node_modules/@tencentcloud/chat-uikit-engine/index.js:1", `${this.serv}.deleteConversation conversationID:${e2} currentConversationID:${s2}`), e2 === s2 && (this.getEngine().TUIStore.update(o$2.CONV, "currentConversationID", ""), this.getEngine().TUIStore.update(o$2.CONV, "currentConversation", null)), t2;
      });
    }
    pinConversation(e2) {
      return this.getEngine().chat.pinConversation(e2);
    }
    muteConversation(e2) {
      return this.getEngine().chat.setMessageRemindType(e2);
    }
    clearHistoryMessage(e2) {
      return this.getEngine().chat.clearHistoryMessage(e2).then((e3) => (this.getEngine().TUIStore.update(o$2.CHAT, "messageList", []), this.getEngine().TUIStore.update(o$2.CHAT, "nextReqMessageID", ""), this.getEngine().TUIStore.update(o$2.CHAT, "isCompleted", true), e3));
    }
    setMessageRead(e2) {
      return this.getEngine().chat.setMessageRead({ conversationID: e2 });
    }
    setConversationDraft(e2) {
      const { conversationID: t2, draftInfo: s2 } = e2;
      let n2 = "";
      return s2 && (n2 = JSON.stringify(s2)), this.getEngine().chat.setConversationDraft({ conversationID: t2, draftText: n2 }).then((e3) => {
        const { conversation: t3 } = e3.data;
        this.updateConversation(t3);
      });
    }
    updateConversation(e2) {
      let t2 = false;
      const s2 = this.getEngine().TUIStore.getData(o$2.CONV, "conversationList");
      for (let n2 = 0; n2 < s2.length; n2++)
        if (s2[n2].conversationID === e2.conversationID) {
          s2[n2] = e2, t2 = true;
          break;
        }
      t2 && this.getEngine().TUIStore.update(o$2.CONV, "conversationList", s2);
    }
    filterSystemConversation(e2) {
      return e2.filter((e3) => e3.type !== this.getEngine().TYPES.CONV_SYSTEM);
    }
  }
  class Rt {
    constructor(e2) {
      this.TUIUserService = e2;
    }
    getEngine() {
      return this.TUIUserService.getEngine();
    }
    init() {
      this.getEngine().eventCenter.addEvent(this.getEngine().EVENT.PROFILE_UPDATED, this.onProfileUpdated.bind(this)), this.getEngine().eventCenter.addEvent(this.getEngine().EVENT.BLACKLIST_UPDATED, this.onBlacklistUpdated.bind(this)), this.getUserProfileInitData();
    }
    onProfileUpdated(e2) {
      const t2 = this.getEngine(), s2 = t2.TUIStore.getData(o$2.USER, "userProfile");
      e2.forEach((e3) => {
        e3.userID === s2.userID && t2.TUIStore.update(o$2.USER, "userProfile", e3);
      });
    }
    onBlacklistUpdated(e2) {
      const t2 = this.getEngine();
      this.getBlacklistProfile(e2).then((e3) => {
        t2.TUIStore.update(o$2.USER, "userBlacklist", e3);
      });
    }
    getUserProfileInitData() {
      const e2 = this.getEngine();
      e2.chat.isReady() && e2.chat.getBlacklist().then((e3) => {
        const t2 = e3.data || [];
        formatAppLog("log", "at node_modules/@tencentcloud/chat-uikit-engine/index.js:1", `TUIUserProfileHandler.init, getBlacklist count:${t2.length}`), t2.length > 0 && this.onBlacklistUpdated(t2);
      });
    }
    getBlacklistProfile(e2) {
      const t2 = [];
      let s2 = 0;
      for (; s2 < e2.length; )
        t2.push(e2.slice(s2, s2 += 100));
      const n2 = [];
      t2.forEach((e3) => {
        n2.push(this.TUIUserService.getUserProfile({ userIDList: e3 }));
      });
      const i2 = [];
      return Promise.all(n2).then((e3) => (e3.forEach((e4) => {
        const t3 = e4.data.map((e5) => {
          const { userID: t4, nick: s3, avatar: n3 } = e5;
          return { userID: t4, nick: s3, avatar: n3 };
        });
        i2.push(...t3);
      }), i2));
    }
    getUserProfile(e2) {
      const t2 = this.getEngine();
      return S$1(e2) ? t2.chat.getMyProfile().then((e3) => (t2.TUIStore.update(o$2.USER, "userProfile", e3.data), e3)).catch((e3) => Promise.reject(e3)) : t2.chat.getUserProfile(e2);
    }
    updateMyProfile(e2) {
      return this.getEngine().chat.updateMyProfile(e2);
    }
    addToBlacklist(e2) {
      return this.getEngine().chat.addToBlacklist(e2);
    }
    removeFromBlacklist(e2) {
      return this.getEngine().chat.removeFromBlacklist(e2);
    }
  }
  function Lt(e2, t2, s2 = true) {
    !function(e3, t3) {
      V ? H.setStorageSync(e3, t3) : kt() && localStorage.setItem(e3, JSON.stringify(t3));
    }(s2 ? jt(e2) : e2, t2);
  }
  function At(e2, t2 = true) {
    try {
      return function(e3) {
        if (V)
          return H.getStorageSync(e3);
        if (kt()) {
          const t3 = localStorage.getItem(e3);
          if ("undefined" !== t3)
            return JSON.parse(t3);
        }
        return;
      }(t2 ? jt(e2) : e2);
    } catch (e3) {
      return void formatAppLog("warn", "at node_modules/@tencentcloud/chat-uikit-engine/index.js:1", "Storage.getStorageItem error:", e3);
    }
  }
  function jt(e2) {
    return `chat_engine_${e2}`;
  }
  function kt() {
    return navigator && navigator.cookieEnabled && localStorage;
  }
  class Nt {
    constructor(e2) {
      this.TUIUserService = e2;
    }
    getEngine() {
      return this.TUIUserService.getEngine();
    }
    init() {
      const e2 = this.getEngine(), t2 = At("displayOnlineStatus") || false;
      e2.TUIStore.update(o$2.USER, "displayOnlineStatus", t2), e2.eventCenter.addEvent(e2.EVENT.USER_STATUS_UPDATED, this.onUserStatusUpdated.bind(this)), this.onConversationListUpdated();
    }
    onConversationListUpdated() {
      const e2 = this.getEngine();
      e2.TUIStore.watch(o$2.CONV, { conversationList: () => {
        const t2 = e2.TUIStore.getData(o$2.APP, "enabledOnlineStatus"), s2 = e2.TUIStore.getData(o$2.USER, "displayOnlineStatus");
        t2 && s2 && this.startToSubscribe();
      } });
    }
    onUserStatusUpdated(e2) {
      this.getEngine().TUIStore.update(o$2.USER, "userStatusList", e2);
    }
    switchUserStatus(e2) {
      const t2 = this.getEngine(), { displayOnlineStatus: s2 = false } = e2;
      t2.TUIStore.update(o$2.USER, "displayOnlineStatus", s2), Lt("displayOnlineStatus", s2);
      const n2 = t2.TUIStore.getData(o$2.APP, "enabledOnlineStatus");
      n2 ? true === s2 ? this.startToSubscribe() : this.unsubscribeUserStatus() : formatAppLog("warn", "at node_modules/@tencentcloud/chat-uikit-engine/index.js:1", `UserStatusHandler.switchUserStatus enabledOnlineStatus:${n2} displayOnlineStatus:${s2}`);
    }
    getUserStatus(e2) {
      const t2 = this.getEngine();
      return t2.chat.getUserStatus(e2).then((e3) => {
        const { successUserList: s2 } = e3.data;
        return s2.length > 0 && t2.TUIStore.update(o$2.USER, "userStatusList", s2), e3;
      }).catch((e3) => Promise.reject(e3));
    }
    subscribeUserStatus(e2) {
      var t2;
      const s2 = (null === (t2 = null == e2 ? void 0 : e2.userIDList) || void 0 === t2 ? void 0 : t2.length) || 0;
      return 0 === s2 ? (formatAppLog("warn", "at node_modules/@tencentcloud/chat-uikit-engine/index.js:1", `UserStatusHandler.subscribeUserStatus userID count:${s2}`), Promise.resolve()) : this.getEngine().chat.subscribeUserStatus(e2);
    }
    unsubscribeUserStatus(e2) {
      const t2 = this.getEngine(), { userIDList: s2 = [] } = e2 || {};
      return t2.chat.unsubscribeUserStatus({ userIDList: s2 }).then((e3) => {
        const { failureUserList: n2 } = e3.data, i2 = [];
        return s2.forEach((e4) => {
          n2.includes(e4) || i2.push({ userID: e4, statusType: u$2.UNSUB_USER });
        }), t2.TUIStore.update(o$2.USER, "userStatusList", i2), e3;
      }).catch((e3) => Promise.reject(e3));
    }
    startToSubscribe() {
      const e2 = this.getEngine(), t2 = e2.TUIStore.getData(o$2.CONV, "conversationList"), s2 = e2.TUIStore.getData(o$2.USER, "userStatusList"), n2 = [];
      t2.forEach((t3) => {
        if (t3.type === e2.TYPES.CONV_C2C) {
          const i2 = t3.conversationID.replace(e2.TYPES.CONV_C2C, "");
          s2.has(i2) || n2.push(i2);
        }
      }), 0 !== n2.length && e2.chat.isReady() && (this.subscribeUserStatus({ userIDList: n2 }), this.getUserStatus({ userIDList: n2 }));
    }
  }
  class xt extends ne {
    constructor() {
      super(), this.userProfileHandler = new Rt(this), this.userStatusHandler = new Nt(this);
    }
    static getInstance() {
      return xt.instance || (xt.instance = new xt()), xt.instance;
    }
    init() {
      const e2 = this.getEngine();
      e2.eventCenter.addEvent(e2.EVENT.KICKED_OUT, this.onKickedOut.bind(this)), e2.eventCenter.addEvent(e2.EVENT.NET_STATE_CHANGE, this.onNetStateChange.bind(this)), this.userProfileHandler.init(), this.userStatusHandler.init(), this.initMessageReadReceipt();
    }
    onKickedOut(e2) {
      this.getEngine().TUIStore.update(o$2.USER, "kickedOut", e2.type);
    }
    onNetStateChange(e2) {
      this.getEngine().TUIStore.update(o$2.USER, "netStateChange", e2.state);
    }
    initMessageReadReceipt() {
      const e2 = At("displayMessageReadReceipt") || true;
      this.getEngine().TUIStore.update(o$2.USER, "displayMessageReadReceipt", e2);
    }
    switchUserStatus(e2) {
      return this.userStatusHandler.switchUserStatus(e2);
    }
    switchMessageReadStatus(e2) {
      this.getEngine().TUIStore.update(o$2.USER, "displayMessageReadReceipt", e2), Lt("displayMessageReadReceipt", e2);
    }
    getUserProfile(e2) {
      return this.userProfileHandler.getUserProfile(e2);
    }
    updateMyProfile(e2) {
      return this.userProfileHandler.updateMyProfile(e2);
    }
    addToBlacklist(e2) {
      return this.userProfileHandler.addToBlacklist(e2);
    }
    removeFromBlacklist(e2) {
      return this.userProfileHandler.removeFromBlacklist(e2);
    }
    getUserStatus(e2) {
      return this.userStatusHandler.getUserStatus(e2);
    }
    subscribeUserStatus(e2) {
      return this.userStatusHandler.subscribeUserStatus(e2);
    }
    unsubscribeUserStatus(e2) {
      return this.userStatusHandler.unsubscribeUserStatus(e2);
    }
  }
  class Gt {
    constructor(e2) {
      this.TUIChatService = e2, this.userShowNameMap = /* @__PURE__ */ new Map(), this.requestedUserMap = /* @__PURE__ */ new Map();
    }
    getEngine() {
      return this.TUIChatService.getEngine();
    }
    t(e2) {
      return this.getEngine().TUITranslate.t(e2);
    }
    handleTextMessage(e2) {
      return { text: this.decodeText(e2.payload) };
    }
    handleFaceMessage(e2) {
      const t2 = { name: "", url: "", type: "" };
      return e2.payload.data.indexOf("@custom") > -1 ? (t2.name = e2.payload.data, t2.type = "custom", t2) : (t2.name = e2.payload.data.indexOf("@2x") < 0 ? `${e2.payload.data}@2x` : e2.payload.data, t2.url = `${P$1}${t2.name}.png`, t2);
    }
    handleLocationMessage(e2) {
      const t2 = { lon: "", lat: "", href: "", url: "", description: "" };
      return t2.lon = e2.payload.longitude.toFixed(6), t2.lat = e2.payload.latitude.toFixed(6), t2.href = `${R$1}pointx=${t2.lon}&pointy=${t2.lat}&name=${e2.payload.description}`, t2.url = `${L$1}center=${t2.lat},${t2.lon}&zoom=10&size=300*150&maptype=roadmap&markers=size:large|color:0xFFCCFF|label:k|${t2.lat},${t2.lon}&key=UBNBZ-PTP3P-TE7DB-LHRTI-Y4YLE-VWBBD`, t2.description = e2.payload.description, t2;
    }
    handleImageMessage(e2) {
      return { url: e2.payload.imageInfoArray[0].url, width: e2.payload.imageInfoArray[0].width, height: e2.payload.imageInfoArray[0].height };
    }
    handleAudioMessage(e2) {
      return { url: e2.payload.url, second: e2.payload.second };
    }
    handleVideoMessage(e2) {
      return { url: e2.payload.videoUrl, snapshotUrl: e2.payload.snapshotUrl, snapshotWidth: e2.payload.snapshotWidth, snapshotHeight: e2.payload.snapshotHeight };
    }
    handleFileMessage(e2) {
      return { url: e2.payload.fileUrl, name: e2.payload.fileName, size: C$1(e2.payload.fileSize) };
    }
    handleCustomMessage(e2) {
      var t2;
      const s2 = this.handleCreateGroupCustomMessage(e2);
      return { custom: this.handleCallKitSignaling(e2) || s2 || (null === (t2 = null == e2 ? void 0 : e2.payload) || void 0 === t2 ? void 0 : t2.extension) || `${this.t("TUIChat.[自定义消息]")}`, businessID: s2 ? "group_create" : "" };
    }
    handleMergeMessage(e2) {
      return Object.assign({}, e2.payload);
    }
    handleGroupTipsMessage(e2) {
      var t2, s2, n2, i2, r2, a2;
      const o2 = this.getEngine(), u2 = { text: "" };
      let c2 = (null == e2 ? void 0 : e2.nick) || (null === (s2 = null === (t2 = null == e2 ? void 0 : e2.payload) || void 0 === t2 ? void 0 : t2.userIDList) || void 0 === s2 ? void 0 : s2.join(","));
      switch ((null === (i2 = null === (n2 = null == e2 ? void 0 : e2.payload) || void 0 === n2 ? void 0 : n2.memberList) || void 0 === i2 ? void 0 : i2.length) > 0 && (c2 = "", null === (a2 = null === (r2 = null == e2 ? void 0 : e2.payload) || void 0 === r2 ? void 0 : r2.memberList) || void 0 === a2 || a2.map((e3) => {
        const t3 = (null == e3 ? void 0 : e3.nick) || (null == e3 ? void 0 : e3.userID);
        return c2 += `${this.substringByLength(t3)},`, e3;
      }), c2 = null == c2 ? void 0 : c2.slice(0, -1)), e2.payload.operationType) {
        case o2.TYPES.GRP_TIP_MBR_JOIN:
          u2.text = `${c2} ${this.t("message.tip.加入群组")}`;
          break;
        case o2.TYPES.GRP_TIP_MBR_QUIT:
          u2.text = `${this.t("message.tip.群成员")}：${c2} ${this.t("message.tip.退出群组")}`;
          break;
        case o2.TYPES.GRP_TIP_MBR_KICKED_OUT:
          u2.text = `${this.t("message.tip.群成员")}：${c2} ${this.t("message.tip.被")}${this.t("message.tip.踢出群组")}`;
          break;
        case o2.TYPES.GRP_TIP_MBR_SET_ADMIN:
          u2.text = `${this.t("message.tip.群成员")}：${c2} ${this.t("message.tip.成为管理员")}`;
          break;
        case o2.TYPES.GRP_TIP_MBR_CANCELED_ADMIN:
          u2.text = `${this.t("message.tip.群成员")}：${c2} ${this.t("message.tip.被撤销管理员")}`;
          break;
        case o2.TYPES.GRP_TIP_GRP_PROFILE_UPDATED:
          u2.text = this.handleGroupProfileUpdated(e2);
          break;
        case o2.TYPES.GRP_TIP_MBR_PROFILE_UPDATED:
          for (const t3 of e2.payload.memberList)
            t3.muteTime > 0 ? u2.text = `${this.t("message.tip.群成员")}：${c2} ${this.t("message.tip.被禁言")}` : u2.text = `${this.t("message.tip.群成员")}：${c2} ${this.t("message.tip.被取消禁言")}`;
          break;
        default:
          u2.text = `[${this.t("message.tip.群提示消息")}]`;
      }
      return u2;
    }
    handleGroupSystemMessage(e2) {
      const t2 = e2.payload.groupProfile.name || e2.payload.groupProfile.groupID, s2 = { text: "" };
      switch (e2.payload.operationType) {
        case 1:
          s2.text = `${e2.payload.operatorID} ${this.t("message.tip.申请加入群组")}：${t2}`;
          break;
        case 2:
          s2.text = `${this.t("message.tip.成功加入群组")}：${t2}`;
          break;
        case 3:
          s2.text = `${this.t("message.tip.申请加入群组")}：${t2} ${this.t("message.tip.被拒绝")}`;
          break;
        case 4:
          s2.text = `${this.t("message.tip.你被管理员")}${e2.payload.operatorID} ${this.t("message.tip.踢出群组")}：${t2}`;
          break;
        case 5:
          s2.text = `${this.t("message.tip.群")}：${t2} ${this.t("message.tip.被")} ${e2.payload.operatorID} ${this.t("message.tip.解散")}`;
          break;
        case 6:
          s2.text = `${e2.payload.operatorID} ${this.t("message.tip.创建群")}：${t2}`;
          break;
        case 7:
        case 12:
          s2.text = `${e2.payload.operatorID} ${this.t("message.tip.邀请你加群")}：${t2}`;
          break;
        case 8:
          s2.text = `${this.t("message.tip.你退出群组")}：${t2}`;
          break;
        case 9:
          s2.text = `${this.t("message.tip.你被")}${e2.payload.operatorID} ${this.t("message.tip.设置为群")}：${t2} ${this.t("message.tip.的管理员")}`;
          break;
        case 10:
          s2.text = `${this.t("message.tip.你被")}${e2.payload.operatorID} ${this.t("message.tip.撤销群")}：${t2} ${this.t("message.tip.的管理员身份")}`;
          break;
        case 13:
          s2.text = `${e2.payload.operatorID} ${this.t("message.tip.同意加群")}：${t2}`;
          break;
        case 14:
          s2.text = `${e2.payload.operatorID} ${this.t("message.tip.拒接加群")}：${t2}`;
          break;
        case 255:
          s2.text = `${this.t("message.tip.自定义群系统通知")}: ${e2.payload.userDefinedField}`;
          break;
        default:
          s2.text = "未解析的群系统通知";
      }
      return s2;
    }
    handleCallKitSignaling(e2) {
      var t2, s2, n2, i2, r2, a2, o2, u2, c2, g2;
      const l2 = U$1(e2.payload.data);
      if (1 !== (null == l2 ? void 0 : l2.businessID))
        return "";
      const h2 = U$1(null == l2 ? void 0 : l2.data), p2 = e2.fromAccount || e2.from, d2 = this.getEngine().TUIFriend.getFriendRemark([p2]), f2 = this.getEngine().getMyUserID();
      let m2 = d2[p2] || e2.nameCard || e2.nick || p2;
      switch (m2 = this.substringByLength(m2), null == l2 ? void 0 : l2.actionType) {
        case 1:
          return "audioCall" !== (null === (t2 = null == h2 ? void 0 : h2.data) || void 0 === t2 ? void 0 : t2.cmd) && "videoCall" !== (null === (s2 = null == h2 ? void 0 : h2.data) || void 0 === s2 ? void 0 : s2.cmd) || !(null == l2 ? void 0 : l2.groupID) ? "hangup" === (null === (n2 = null == h2 ? void 0 : h2.data) || void 0 === n2 ? void 0 : n2.cmd) ? (null == l2 ? void 0 : l2.groupID) ? `${this.t("message.custom.通话结束")}` : `${this.t("message.custom.通话时长")}：${function(e3) {
            const t3 = e3;
            let s3, n3, i3, r3 = "";
            return t3 >= 3600 ? (s3 = parseInt("" + t3 / 3600, 10) < 10 ? `0${parseInt("" + t3 / 3600, 10)}` : parseInt("" + t3 / 3600, 10), n3 = parseInt("" + t3 % 60 / 60, 10) < 10 ? `0${parseInt("" + t3 % 60 / 60, 10)}` : parseInt("" + t3 % 60 / 60, 10), i3 = t3 % 3600 < 10 ? "0" + t3 % 3600 : t3 % 3600, i3 > 60 && (n3 = parseInt("" + i3 / 60, 10) < 10 ? `0${parseInt("" + i3 / 60, 10)}` : parseInt("" + i3 / 60, 10), i3 = i3 % 60 < 10 ? "0" + i3 % 60 : i3 % 60), r3 = `${s3}:${n3}:${i3}`) : t3 >= 60 && t3 < 3600 ? (n3 = parseInt("" + t3 / 60, 10) < 10 ? `0${parseInt("" + t3 / 60, 10)}` : parseInt("" + t3 / 60, 10), i3 = t3 % 60 < 10 ? "0" + t3 % 60 : t3 % 60, r3 = `00:${n3}:${i3}`) : t3 < 60 && (i3 = t3 < 10 ? `0${t3}` : t3, r3 = `00:00:${i3}`), r3;
          }(null == h2 ? void 0 : h2.call_end)}` : "switchToAudio" === (null === (i2 = null == h2 ? void 0 : h2.data) || void 0 === i2 ? void 0 : i2.cmd) ? `${this.t("message.custom.切换语音通话")}` : "switchToVideo" === (null === (r2 = null == h2 ? void 0 : h2.data) || void 0 === r2 ? void 0 : r2.cmd) ? `${this.t("message.custom.切换视频通话")}` : `${this.t("message.custom.发起通话")}` : `${m2} ${this.t("message.custom.发起通话")}`;
        case 2:
          return (null == l2 ? void 0 : l2.groupID) ? `${m2} ${this.t("message.custom.取消通话")}` : this.isOldUIKit("message.custom.已取消") ? this.t("message.custom.取消通话") : (null == l2 ? void 0 : l2.inviter) === f2 ? this.t("message.custom.已取消") : this.t("message.custom.对方已取消");
        case 3:
          return "switchToAudio" === (null === (a2 = null == h2 ? void 0 : h2.data) || void 0 === a2 ? void 0 : a2.cmd) ? `${this.t("message.custom.切换语音通话")}` : "switchToVideo" === (null === (o2 = null == h2 ? void 0 : h2.data) || void 0 === o2 ? void 0 : o2.cmd) ? `${this.t("message.custom.切换视频通话")}` : (null == l2 ? void 0 : l2.groupID) ? `${m2} ${this.t("message.custom.已接听")}` : this.t("message.custom.已接听");
        case 4:
          return (null == l2 ? void 0 : l2.groupID) ? `${m2} ${this.t("message.custom.拒绝通话")}` : this.isOldUIKit("message.custom.已拒绝") ? this.t("message.custom.拒绝通话") : "line_busy" === (null == h2 ? void 0 : h2.line_busy) || "lineBusy" === (null == h2 ? void 0 : h2.data.message) ? (null == l2 ? void 0 : l2.inviter) === f2 ? this.t("message.custom.对方忙线中") : this.t("message.custom.忙线未接听") : (null == l2 ? void 0 : l2.inviter) === f2 ? this.t("message.custom.对方已拒绝") : this.t("message.custom.已拒绝");
        case 5:
          if ("switchToAudio" === (null === (u2 = null == h2 ? void 0 : h2.data) || void 0 === u2 ? void 0 : u2.cmd))
            return `${this.t("message.custom.切换语音通话")}`;
          if ("switchToVideo" === (null === (c2 = null == h2 ? void 0 : h2.data) || void 0 === c2 ? void 0 : c2.cmd))
            return `${this.t("message.custom.切换视频通话")}`;
          if (null == l2 ? void 0 : l2.groupID) {
            if (p2 === (null == l2 ? void 0 : l2.inviter)) {
              this.handleCallkitTimeoutSignaling(l2.inviteeList);
              let e3 = "";
              return null === (g2 = l2.inviteeList) || void 0 === g2 || g2.forEach((t3) => {
                const s3 = this.userShowNameMap.get(t3) || t3;
                e3 += `${this.substringByLength(s3)}、`;
              }), e3 = e3.substring(0, e3.lastIndexOf("、")), `${e3} ${this.t("message.custom.无应答")}`;
            }
            return `${m2} ${this.t("message.custom.无应答")}`;
          }
          return this.isOldUIKit("message.custom.对方无应答") ? this.t("message.custom.无应答") : (null == l2 ? void 0 : l2.inviter) === f2 ? this.t("message.custom.对方无应答") : this.t("message.custom.超时无应答");
        default:
          return "";
      }
    }
    handleCreateGroupCustomMessage(e2) {
      let t2;
      const s2 = U$1(e2.payload.data);
      return "group_create" === (null == s2 ? void 0 : s2.businessID) && (t2 = `${s2.opUser} ${s2.content}`), t2;
    }
    decodeText(e2) {
      const t2 = [];
      let s2 = e2.text, n2 = -1, i2 = -1;
      for (; "" !== s2; )
        switch (n2 = s2.indexOf("["), i2 = s2.indexOf("]"), n2) {
          case 0:
            if (-1 === i2)
              t2.push({ name: "text", text: s2 }), s2 = "";
            else {
              const e3 = s2.slice(0, i2 + 1);
              e3.indexOf("@custom") > -1 ? (t2.push({ name: "img", src: "", type: "custom", emojiKey: e3 }), s2 = s2.substring(i2 + 1)) : A[e3] ? (t2.push({ name: "img", src: D + A[e3], emojiKey: e3 }), s2 = s2.substring(i2 + 1)) : (t2.push({ name: "text", text: "[" }), s2 = s2.slice(1));
            }
            break;
          case -1:
            t2.push({ name: "text", text: s2 }), s2 = "";
            break;
          default:
            t2.push({ name: "text", text: s2.slice(0, n2) }), s2 = s2.substring(n2);
        }
      return t2;
    }
    handleGroupProfileUpdated(e2) {
      const { nick: t2, payload: s2 } = e2, { newGroupProfile: n2, memberList: i2, operatorID: r2 } = s2;
      let a2 = "";
      const o2 = t2 || r2, u2 = Object.keys(n2)[0];
      switch (u2) {
        case "muteAllMembers":
          a2 = n2[u2] ? `${this.t("message.tip.管理员")} ${o2} ${this.t("message.tip.开启全员禁言")}` : `${this.t("message.tip.管理员")} ${o2} ${this.t("message.tip.取消全员禁言")}`;
          break;
        case "ownerID":
          a2 = `${i2[0].nick || i2[0].userID} ${this.t("message.tip.成为新的群主")}`;
          break;
        case "groupName":
          a2 = `${o2} ${this.t("message.tip.修改群名为")} ${n2[u2]}`;
          break;
        case "notification":
          a2 = this.isOldUIKit("message.tip.把群公告修改为") ? `${o2} ${this.t("message.tip.发布新公告")}` : `${o2} ${this.t("message.tip.把群公告修改为")} "${n2[u2]}"`;
      }
      return a2;
    }
    handleCallkitTimeoutSignaling(e2 = []) {
      if (0 === e2.length)
        return;
      const t2 = this.getEngine().TUIFriend.getFriendRemark(e2), s2 = [];
      e2.forEach((e3) => {
        const n2 = t2[e3];
        n2 ? this.userShowNameMap.set(e3, n2) : this.requestedUserMap.has(e3) || (s2.push(e3), this.requestedUserMap.set(e3, 1));
      }), s2.length > 0 && this.getEngine().TUIUser.getUserProfile({ userIDList: s2 }).then((e3) => {
        (e3.data || []).forEach((e4) => {
          const { userID: t3, nick: s3 } = e4, n2 = s3 || t3;
          this.userShowNameMap.set(t3, n2);
        });
      }).catch(() => {
      });
    }
    substringByLength(e2, t2 = 12) {
      return e2.length > t2 ? `${e2.slice(0, t2)}...` : e2;
    }
    isOldUIKit(e2) {
      var t2;
      const s2 = e2.lastIndexOf("."), n2 = e2.slice(0, s2 + 1);
      return null === (t2 = this.t(e2)) || void 0 === t2 ? void 0 : t2.startsWith(n2);
    }
  }
  class wt {
    constructor(e2) {
      this.TUIChatService = e2, this.typingTo = "", this.timer = null;
    }
    getEngine() {
      return this.TUIChatService.getEngine();
    }
    clearTypingStatus() {
      this.getEngine().TUIStore.getData(o$2.CHAT, "typingStatus") && this.getEngine().TUIStore.update(o$2.CHAT, "typingStatus", false), this.timer && clearTimeout(this.timer), this.timer = null;
    }
    handleLastMessage(e2) {
      const t2 = this.getEngine(), s2 = t2.TUIStore.getData(o$2.CHAT, "typingStatus");
      if (e2.type === this.getEngine().TYPES.MSG_CUSTOM && "in" === e2.flow) {
        const n2 = U$1(e2.payload.data);
        if (n2.businessID === c$2.BUSINESS_ID) {
          const { typingStatus: e3, userAction: i2 } = n2;
          if (e3 === c$2.STATUS_START || i2 === c$2.ACTION_START_ID)
            return s2 ? (this.timer && clearTimeout(this.timer), this.timer = null) : t2.TUIStore.update(o$2.CHAT, "typingStatus", true), this.timer = setTimeout(() => {
              this.clearTypingStatus();
            }, 3e4), t2.TUIStore.getData(o$2.CHAT, "typingStatus");
          e3 !== c$2.STATUS_END && i2 !== c$2.ACTION_END_ID || this.clearTypingStatus();
        }
      }
    }
    filterTypingMessage(e2 = []) {
      if (0 === e2.length)
        return [];
      return this.getEngine().TUIStore.getData(o$2.APP, "enableTyping") && this.handleLastMessage(e2[e2.length - 1]), e2.filter((e3) => {
        if (e3.type === this.getEngine().TYPES.MSG_CUSTOM) {
          return U$1(e3.payload.data).businessID !== c$2.BUSINESS_ID;
        }
        return true;
      });
    }
    createTypingMessage(e2 = c$2.STATUS_END, t2 = "") {
      const { BUSINESS_ID: s2, STATUS_START: n2, VERSION: i2, ACTION_START_ID: r2, ACTION_END_ID: a2, ACTION_START: o2, ACTION_END: u2, NEED_TYPING: g2 } = c$2;
      return { to: t2, conversationType: this.getEngine().TYPES.CONV_C2C, payload: { data: JSON.stringify({ businessID: s2, typingStatus: e2, version: i2, userAction: e2 === n2 ? r2 : a2, actionParam: e2 === n2 ? o2 : u2 }), description: "", extension: "" }, cloudCustomData: JSON.stringify({ messageFeature: { needTyping: g2, version: i2 } }) };
    }
    sendTyping(e2 = false, t2 = "") {
      if (e2) {
        this.typingTo = t2;
        const e3 = this.createTypingMessage(c$2.STATUS_START, t2);
        this.getEngine().TUIChat.sendCustomMessage(e3, { onlineUserOnly: true });
      } else
        this.sendTypingEnd();
    }
    sendTypingEnd() {
      if (this.typingTo) {
        const e2 = this.createTypingMessage(c$2.STATUS_END, this.typingTo);
        this.getEngine().TUIChat.sendCustomMessage(e2, { onlineUserOnly: true });
      }
      this.typingTo = "";
    }
  }
  class Vt {
    constructor(e2) {
      this.TUIChatService = e2;
    }
    getEngine() {
      return this.TUIChatService.getEngine();
    }
    init() {
      const e2 = this.getEngine();
      e2.eventCenter.addEvent(e2.EVENT.MESSAGE_READ_RECEIPT_RECEIVED, this.onMessageReadReceiptReceived.bind(this));
    }
    onMessageReadReceiptReceived(e2) {
      const t2 = this.getEngine(), s2 = t2.TUIStore.getData(o$2.CONV, "currentConversationID"), n2 = [];
      e2.forEach((e3) => {
        const { messageID: i2 } = e3, r2 = t2.chat.findMessage(i2);
        r2 && s2 === r2.conversationID && n2.push(r2);
      }), n2.length > 0 && t2.TUIChat.updateMessageList(n2, "edit");
    }
    sendMessageReadReceipt(e2) {
      const t2 = [];
      return e2.forEach((e3) => {
        const s2 = e3.getMessage();
        t2.push(s2);
      }), this.getEngine().chat.sendMessageReadReceipt(t2);
    }
    getGroupMessageReadMemberList(e2) {
      const t2 = e2.message.getMessage(), s2 = Object.assign(Object.assign({}, e2), { message: t2 });
      return this.getEngine().chat.getGroupMessageReadMemberList(s2);
    }
    getMessageReadReceiptList(e2) {
      const t2 = this.getEngine(), s2 = t2.TUIStore.getData(o$2.APP, "enabledMessageReadReceipt"), n2 = t2.TUIStore.getData(o$2.USER, "displayMessageReadReceipt");
      !s2 || !n2 || 0 === e2.length || e2[0].conversationType !== t2.TYPES.CONV_GROUP || t2.chat.getMessageReadReceiptList(e2).then((e3) => {
        const { messageList: t3 } = e3.data;
        this.TUIChatService.updateMessageList(t3, "edit");
      }).catch((e3) => {
        formatAppLog("warn", "at node_modules/@tencentcloud/chat-uikit-engine/index.js:1", `ReadReceiptHandler.getMessageReadReceiptList error:${e3.message}`);
      });
    }
  }
  class Ft extends ne {
    constructor() {
      super(), this.serv = "TUIChatService", this.messageHandler = new Gt(this), this.typingHandler = new wt(this), this.readReceiptHandler = new Vt(this), this.isSwitching = true, this.delayGetHoppingFunction = void 0, this.hoppingConfigMap = /* @__PURE__ */ new Map();
    }
    static getInstance() {
      return Ft.instance || (Ft.instance = new Ft()), Ft.instance;
    }
    init() {
      const e2 = this.getEngine();
      e2.eventCenter.addEvent(e2.EVENT.MESSAGE_RECEIVED, this.onMessageReceived.bind(this)), e2.eventCenter.addEvent(e2.EVENT.MESSAGE_MODIFIED, this.onMessageModified.bind(this)), e2.eventCenter.addEvent(e2.EVENT.MESSAGE_REVOKED, this.onMessageRevoked.bind(this)), e2.eventCenter.addEvent(e2.EVENT.MESSAGE_READ_BY_PEER, this.onMessageReadByPeer.bind(this)), e2.eventCenter.addEvent(e2.EVENT.MESSAGE_REACTIONS_UPDATED, this.onMessageReactionsUpdated.bind(this)), this.onCurrentConversationIDUpdated(), this.onMessageSource(), this.readReceiptHandler.init();
    }
    onMessageReceived(e2) {
      this.updateMessageList(e2, "received"), this.getEngine().TUIStore.update(o$2.CHAT, "newMessageList", e2);
    }
    onMessageModified(e2) {
      this.updateMessageList(e2, "edit");
    }
    onMessageRevoked(e2) {
      this.updateMessageList(e2, "edit");
    }
    onMessageReadByPeer(e2) {
      this.updateMessageList(e2, "edit");
    }
    onMessageReactionsUpdated(e2) {
      this.updateMessageReactionList([e2]);
    }
    onCurrentConversationIDUpdated() {
      const e2 = this.getEngine();
      e2.TUIStore.watch(o$2.CONV, { currentConversationID: (t2) => {
        this.isSwitching = true, this.delayGetHoppingFunction = void 0, this.hoppingConfigMap.clear(), e2.TUIStore.reset(o$2.CHAT), this.typingHandler.clearTypingStatus(), this.typingHandler.sendTypingEnd(), ie(t2) || this.getMessageList().finally(() => {
          this.isSwitching = false, this.delayGetHoppingFunction && this.delayGetHoppingFunction();
        });
      } });
    }
    onMessageSource() {
      const e2 = this.getEngine();
      e2.TUIStore.watch(o$2.CHAT, { messageSource: (t2) => {
        const s2 = this.getStoreData(o$2.CONV, "currentConversationID");
        if (!s2 || t2 && t2.conversationID !== s2)
          return;
        if (S$1(t2))
          return this.hoppingConfigMap.clear(), e2.TUIStore.update(o$2.CHAT, "messageList", []), e2.TUIStore.update(o$2.CHAT, "nextReqMessageID", ""), e2.TUIStore.update(o$2.CHAT, "isCompleted", false), void this.getMessageList();
        const n2 = this.getStoreData(o$2.CHAT, "messageList");
        n2 && n2.find((e3) => t2 && e3.ID === t2.ID) || (this.isSwitching ? this.delayGetHoppingFunction = this.getMessageListHoppingForDown : this.getMessageListHoppingForDown());
      } });
    }
    getMessageListHoppingForDown() {
      const e2 = this.getStoreData(o$2.CHAT, "messageList"), { conversationID: t2, sequence: s2, time: n2, ID: i2 } = this.getStoreData(o$2.CHAT, "messageSource");
      if (e2 && e2.find((e3) => i2 && e3.ID === i2))
        return;
      const r2 = this.getEngine();
      r2.TUIStore.update(o$2.CHAT, "messageList", []), r2.TUIStore.update(o$2.CHAT, "nextReqMessageID", ""), r2.TUIStore.update(o$2.CHAT, "isCompleted", false), this.getMessageListHopping({ conversationID: t2, sequence: s2, time: n2, direction: 1 });
    }
    getStoreData(e2, t2) {
      return this.getEngine().TUIStore.getData(e2, t2);
    }
    sendMessage(e2, t2) {
      this.updateMessageList([e2], "send");
      const s2 = this.getEngine().chat.sendMessage(e2, t2);
      return this.getResponse(s2);
    }
    getResponse(e2, t2 = true, s2 = true) {
      return e2.then((e3) => {
        const s3 = e3.data.messageList ? e3.data.messageList : [e3.data.message];
        return t2 && this.updateMessageList(s3, "edit"), e3;
      }).catch((e3) => {
        var t3;
        return s2 && (null === (t3 = null == e3 ? void 0 : e3.data) || void 0 === t3 ? void 0 : t3.message) && this.updateMessageList([e3.data.message], "edit"), Promise.reject(e3);
      });
    }
    updateMessageList(e2, t2 = "") {
      if (this.getStoreData(o$2.CHAT, "messageSource") && "unshift" !== t2 && "edit" !== t2)
        return;
      const s2 = this.getStoreData(o$2.CHAT, "messageList"), n2 = this.updateTargetMessageList(e2, s2, t2);
      this.getEngine().TUIStore.update(o$2.CHAT, "messageList", n2);
    }
    updateTargetMessageList(e2, t2, s2 = "") {
      const n2 = this.getStoreData(o$2.CONV, "currentConversationID");
      let i2 = e2.filter((e3) => e3.conversationID === n2);
      if (i2 = this.handleC2CCallSignaling(i2), !s2 || 0 === i2.length)
        return t2;
      const r2 = t2 || [];
      let a2 = [];
      if ("send" === s2 || "push" === s2) {
        const e3 = this.getStoreData(o$2.CHAT, "userInfo");
        Object.keys(e3).length > 0 && this.updateLocalMessage(i2, e3);
      }
      switch (s2) {
        case "edit":
          for (const e3 of t2) {
            const t3 = i2.find((t4) => t4.ID === e3.ID);
            a2.push(t3 || e3);
          }
          break;
        case "resend":
          a2 = r2.filter((e3) => e3.ID !== i2[0].ID).concat(i2);
          break;
        case "send":
          a2 = r2.concat(this.typingHandler.filterTypingMessage(i2));
          break;
        case "push":
          a2 = r2.concat(this.typingHandler.filterTypingMessage(i2)), this.getEngine().chat.setMessageRead({ conversationID: n2 });
          break;
        case "received":
          a2 = r2.concat(this.typingHandler.filterTypingMessage(i2)), a2 = this.sortMessageList(a2), this.getEngine().chat.setMessageRead({ conversationID: n2 });
          break;
        case "unshift":
          a2 = i2.filter((e3) => 0 === r2.length || !r2.find((t3) => t3.ID === e3.ID)), a2.push(...r2), a2 = this.sortMessageList(a2);
      }
      return a2;
    }
    enterTypingState() {
      this.getStoreData(o$2.APP, "enableTyping") && this.sendTyping(true);
    }
    leaveTypingState() {
      this.getStoreData(o$2.APP, "enableTyping") && this.sendTyping(false);
    }
    sendTyping(e2) {
      const t2 = this.getEngine(), s2 = this.getStoreData(o$2.CONV, "currentConversationID");
      if (!s2.startsWith(t2.TYPES.CONV_C2C))
        return;
      const n2 = s2.replace(t2.TYPES.CONV_C2C, "");
      if (e2) {
        const e3 = this.getStoreData(o$2.CHAT, "messageList").filter((e4) => "in" === e4.flow);
        if (0 === e3.length)
          return;
        const t3 = 1e3 * e3[e3.length - 1].time;
        if ((/* @__PURE__ */ new Date()).getTime() - t3 > 3e4)
          return;
      }
      this.typingHandler.sendTyping(e2, n2);
    }
    quoteMessage(e2) {
      var t2;
      return this.getEngine().TUIStore.update(o$2.CHAT, "quoteMessage", { message: e2, type: "quote" }), null === (t2 = this.getEngine().TUIReport) || void 0 === t2 || t2.reportFeature(205), e2;
    }
    replyMessage(e2) {
      return this.getEngine().TUIStore.update(o$2.CHAT, "quoteMessage", { message: e2, type: "reply" }), e2;
    }
    getCurrentConvInfo() {
      const { conversationID: e2 = "", type: t2 } = this.getStoreData(o$2.CONV, "currentConversation") || {};
      return { to: e2.replace(t2, ""), conversationType: t2 };
    }
    t(e2) {
      return this.getEngine().TUITranslate.t(e2) || e2;
    }
    getMessageAbstractAndType(e2) {
      var t2, s2;
      const n2 = this.getEngine(), i2 = { abstract: "", type: 0 };
      switch (e2.type) {
        case n2.TYPES.MSG_TEXT:
          i2.abstract = null === (t2 = null == e2 ? void 0 : e2.payload) || void 0 === t2 ? void 0 : t2.text, i2.type = 1;
          break;
        case n2.TYPES.MSG_CUSTOM:
          i2.abstract = "[自定义消息]", i2.type = 2;
          break;
        case n2.TYPES.MSG_IMAGE:
          i2.abstract = "[图片]", i2.type = 3;
          break;
        case n2.TYPES.MSG_AUDIO:
          i2.abstract = "[语音]", i2.type = 4;
          break;
        case n2.TYPES.MSG_VIDEO:
          i2.abstract = "[视频]", i2.type = 5;
          break;
        case n2.TYPES.MSG_FILE:
          i2.abstract = "[文件]", i2.type = 6;
          break;
        case n2.TYPES.MSG_LOCATION:
          i2.type = 7;
          break;
        case n2.TYPES.MSG_FACE:
          i2.abstract = "[表情]", i2.type = 8;
          break;
        case n2.TYPES.MSG_GRP_TIP:
          i2.type = 9;
          break;
        case n2.TYPES.MSG_MERGER:
          i2.abstract = null === (s2 = null == e2 ? void 0 : e2.payload) || void 0 === s2 ? void 0 : s2.title, i2.type = 10;
      }
      return i2;
    }
    genMessageReply(e2, t2) {
      if ("reply" !== t2 && "quote" !== t2)
        return {};
      const { abstract: s2, type: n2 } = this.getMessageAbstractAndType(e2), i2 = { messageAbstract: s2, messageSender: e2.nick || e2.from, messageID: e2.ID }, r2 = Object.assign(Object.assign({}, i2), { messageType: n2, messageTime: null == e2 ? void 0 : e2.time, messageSequence: null == e2 ? void 0 : e2.sequence, version: 1 });
      if ("reply" === t2 && (r2.messageRootID = e2.ID, e2.cloudCustomData)) {
        const t3 = U$1(e2.cloudCustomData);
        t3.messageReply && t3.messageReply.messageRootID && (r2.messageRootID = t3.messageReply.messageRootID);
      }
      return { messageReply: r2, messageReplyRoot: i2 };
    }
    getMessageInfo(e2, t2, s2) {
      const { messageReply: n2, messageReplyRoot: i2 } = this.genMessageReply(t2, s2), r2 = e2.cloudCustomData ? U$1(e2.cloudCustomData) : {};
      let a2;
      if (r2.messageReply ? r2.messageReply = Object.assign(Object.assign({}, n2), r2.messageReply) : r2.messageReply = n2, "reply" === s2) {
        const { messageRootID: e3 } = n2;
        a2 = this.getEngine().chat.findMessage(e3);
        const t3 = (null == a2 ? void 0 : a2.cloudCustomData) ? U$1(a2.cloudCustomData) : {};
        t3.messageReplies || (t3.messageReplies = {}), o2 = t3.messageReplies.replies, ("function" == typeof Array.isArray ? Array.isArray(o2) : "array" === Object.prototype.toString.call(o2).match(/^\[object (.*)\]$/)[1].toLowerCase()) || (t3.messageReplies.replies = []), t3.messageReplies.replies.push(i2), a2.cloudCustomData = JSON.stringify(t3);
      }
      var o2;
      return { cloudCustomData: JSON.stringify(r2), rootMessage: a2 };
    }
    sendTextMessage(e2, t2) {
      const s2 = this.getEngine(), { message: n2, type: i2 } = this.getStoreData(o$2.CHAT, "quoteMessage");
      let r2 = { cloudCustomData: e2.cloudCustomData || "", rootMessage: void 0 };
      n2 && (r2 = this.getMessageInfo(e2, n2, i2));
      const a2 = s2.chat.createTextMessage(Object.assign(Object.assign(Object.assign({}, this.getCurrentConvInfo()), e2), { cloudCustomData: r2.cloudCustomData }));
      return this.sendMessage(a2, t2).then((e3) => (r2.rootMessage && this.modifyMessage(r2.rootMessage), s2.TUIStore.reset(o$2.CHAT, ["quoteMessage"], true), e3));
    }
    sendTextAtMessage(e2, t2) {
      const s2 = this.getEngine(), { message: n2, type: i2 } = this.getStoreData(o$2.CHAT, "quoteMessage");
      let r2 = { cloudCustomData: e2.cloudCustomData || "", rootMessage: void 0 };
      n2 && (r2 = this.getMessageInfo(e2, n2, i2));
      const a2 = s2.chat.createTextAtMessage(Object.assign(Object.assign(Object.assign({}, this.getCurrentConvInfo()), e2), { cloudCustomData: r2.cloudCustomData }));
      return this.sendMessage(a2, t2).then((e3) => (r2.rootMessage && this.modifyMessage(r2.rootMessage), s2.TUIStore.reset(o$2.CHAT, ["quoteMessage"], true), e3));
    }
    sendImageMessage(e2, t2) {
      const s2 = this.getEngine().chat.createImageMessage(Object.assign(Object.assign(Object.assign({}, this.getCurrentConvInfo()), e2), { onProgress: (e3) => {
        this.onProgress(s2.ID, e3);
      } }));
      return this.sendMessage(s2, t2);
    }
    sendAudioMessage(e2, t2) {
      const s2 = this.getEngine().chat.createAudioMessage(Object.assign(Object.assign(Object.assign({}, this.getCurrentConvInfo()), e2), { onProgress: (e3) => {
        this.onProgress(s2.ID, e3);
      } }));
      return this.sendMessage(s2, t2);
    }
    sendVideoMessage(e2, t2) {
      const s2 = this.getEngine().chat.createVideoMessage(Object.assign(Object.assign(Object.assign({}, this.getCurrentConvInfo()), e2), { onProgress: (e3) => {
        this.onProgress(s2.ID, e3);
      } }));
      return this.sendMessage(s2, t2);
    }
    sendCustomMessage(e2, t2) {
      const s2 = this.getEngine().chat.createCustomMessage(Object.assign(Object.assign({}, this.getCurrentConvInfo()), e2));
      return this.sendMessage(s2, t2);
    }
    sendFaceMessage(e2, t2) {
      const s2 = this.getEngine().chat.createFaceMessage(Object.assign(Object.assign({}, this.getCurrentConvInfo()), e2));
      return this.sendMessage(s2, t2);
    }
    sendFileMessage(e2, t2) {
      const s2 = this.getEngine().chat.createFileMessage(Object.assign(Object.assign(Object.assign({}, this.getCurrentConvInfo()), e2), { onProgress: (e3) => {
        this.onProgress(s2.ID, e3);
      } }));
      return this.sendMessage(s2, t2);
    }
    sendLocationMessage(e2, t2) {
      const s2 = this.getEngine().chat.createLocationMessage(Object.assign(Object.assign({}, this.getCurrentConvInfo()), e2));
      return this.sendMessage(s2, t2);
    }
    onProgress(e2, t2) {
      const s2 = this.getEngine().TUIStore.getMessageModel(e2);
      if (s2) {
        (t2 - s2.progress >= 0.1 || 1 === t2) && (s2.progress = t2, this.updateMessageList([s2], "edit"));
      }
    }
    setAbstractList(e2) {
      const t2 = this.getEngine(), s2 = e2.nick || e2.from;
      let n2 = "";
      switch (e2.type) {
        case t2.TYPES.MSG_TEXT:
          n2 = e2.payload.text || "", n2.length > 20 && (n2 = n2.slice(0, 20));
          break;
        case t2.TYPES.MSG_MERGER:
          n2 = `${this.t("TUIChat.[聊天记录]")}`;
          break;
        case t2.TYPES.MSG_IMAGE:
          n2 = `${this.t("TUIChat.[图片]")}`;
          break;
        case t2.TYPES.MSG_AUDIO:
          n2 = `${this.t("TUIChat.[音频]")}`;
          break;
        case t2.TYPES.MSG_VIDEO:
          n2 = `${this.t("TUIChat.[视频]")}`;
          break;
        case t2.TYPES.MSG_CUSTOM:
          n2 = `${this.t("TUIChat.[自定义消息]")}`;
          break;
        case t2.TYPES.MSG_FILE:
          n2 = `${this.t("TUIChat.[文件]")}`;
          break;
        case t2.TYPES.MSG_FACE:
          n2 = `${this.t("TUIChat.[动画表情]")}`;
      }
      return `${s2}: ${n2}`;
    }
    genMergerForwardPayload(e2, t2) {
      const { abstractList: s2 = [], compatibleText: n2 = "", title: i2 } = t2;
      return 0 === s2.length && e2.forEach((e3) => {
        s2.push(this.setAbstractList(e3));
      }), { messageList: e2, title: i2, abstractList: s2, compatibleText: n2 || this.t("TUIChat.请升级IMSDK到v2.10.1或更高版本查看此消息") };
    }
    genSendMergerForwardMessage(e2) {
      const { conversationList: t2, messageList: s2, params: n2, mergeInfo: i2, sendMessageOptions: r2 } = e2, a2 = [];
      for (let e3 = 0; e3 < t2.length; e3++) {
        const { conversationID: o2, type: u2 } = t2[e3], c2 = Object.assign({ to: o2.replace(`${u2}`, ""), conversationType: u2, payload: this.genMergerForwardPayload(s2, i2) }, n2), g2 = this.getEngine().chat.createMergerMessage(c2);
        a2.push(this.sendMessage(g2, r2));
      }
      return a2;
    }
    genTitle(e2, t2) {
      const { nick: s2, from: n2, to: i2 } = e2;
      return `${s2 || n2} ${this.t("TUIChat.和")} ${t2 || i2} ${this.t("TUIChat.的聊天记录")}`;
    }
    genMergeInfo(e2) {
      var t2;
      return i$2(this, void 0, void 0, function* () {
        const { messageList: s2, mergeInfo: n2 } = e2;
        if (n2.title)
          return n2;
        if (s2[0].conversationType === this.getEngine().TYPES.CONV_GROUP)
          return n2.title = this.t("TUIChat.群聊的聊天记录"), n2;
        try {
          const { data: e3 = [] } = yield this.getEngine().TUIUser.getUserProfile({ userIDList: [s2[0].to] });
          n2.title = this.genTitle(s2[0], null === (t2 = e3[0]) || void 0 === t2 ? void 0 : t2.nick);
        } catch (e3) {
          n2.title = this.genTitle(s2[0]);
        }
        return n2;
      });
    }
    sendMergerForwardMessage(e2) {
      return i$2(this, void 0, void 0, function* () {
        return e2.mergeInfo = yield this.genMergeInfo(e2), Promise.all(this.genSendMergerForwardMessage(e2));
      });
    }
    getOriginMessageList(e2) {
      return e2.map((e3) => e3 instanceof ue ? e3.getMessage() : e3);
    }
    sendForwardMessage(e2, t2, s2) {
      t2 = this.getOriginMessageList(t2);
      const i2 = s2 || {}, { needMerge: r2 = false, params: a2 = {}, mergeInfo: o2 = {} } = i2, u2 = n$1(i2, ["needMerge", "params", "mergeInfo"]);
      if (r2)
        return this.sendMergerForwardMessage({ conversationList: e2, messageList: t2, params: a2, mergeInfo: o2, sendMessageOptions: u2 });
      const c2 = [];
      for (let s3 = 0; s3 < e2.length; s3++) {
        const { conversationID: n2, type: i3 } = e2[s3], r3 = Object.assign({ to: n2.replace(`${i3}`, ""), conversationType: i3 }, a2), o3 = u2[n2] || u2;
        for (let e3 = 0; e3 < t2.length; e3++) {
          Reflect.set(r3, "payload", t2[e3]);
          const s4 = this.getEngine().chat.createForwardMessage(r3);
          c2.push(this.sendMessage(s4, o3));
        }
      }
      return Promise.all(c2);
    }
    revokeMessage(e2) {
      const t2 = this.getEngine().chat.revokeMessage(e2);
      return this.getResponse(t2, true, false);
    }
    resendMessage(e2) {
      e2.status = "unSend", this.updateMessageList([e2], "resend");
      const t2 = this.getEngine().chat.resendMessage(e2);
      return this.getResponse(t2, true, true);
    }
    deleteMessage(e2) {
      const t2 = this.getEngine().chat.deleteMessage(e2);
      return this.getResponse(t2, true, false);
    }
    setMessageExtensions(e2, t2) {
      return this.getEngine().chat.setMessageExtensions(e2, t2);
    }
    getMessageExtensions(e2) {
      return this.getEngine().chat.getMessageExtensions(e2);
    }
    deleteMessageExtensions(e2, t2) {
      return this.getEngine().chat.deleteMessageExtensions(e2, t2);
    }
    modifyMessage(e2) {
      const t2 = this.getEngine().chat.modifyMessage(e2);
      return this.getResponse(t2, true, false).catch((e3) => {
        const { code: t3 = 0, data: s2 = {} } = e3.code;
        throw t3 === l$2.MSG_MODIFY_CONFLICT ? formatAppLog("warn", "at node_modules/@tencentcloud/chat-uikit-engine/index.js:1", `${p$2.MSG_MODIFY_CONFLICT} data.message: ${null == s2 ? void 0 : s2.message}`) : t3 === l$2.MSG_MODIFY_DISABLED_IN_AVCHATROOM ? formatAppLog("warn", "at node_modules/@tencentcloud/chat-uikit-engine/index.js:1", p$2.MSG_MODIFY_DISABLED_IN_AVCHATROOM) : t3 === l$2.MODIFY_MESSAGE_NOT_EXIST && formatAppLog("warn", "at node_modules/@tencentcloud/chat-uikit-engine/index.js:1", p$2.MODIFY_MESSAGE_NOT_EXIST), e3;
      });
    }
    getMessageList(e2 = { conversationID: this.getStoreData(o$2.CONV, "currentConversationID"), nextReqMessageID: this.getStoreData(o$2.CHAT, "nextReqMessageID") }) {
      const t2 = this.getEngine();
      if (!t2.chat.isReady())
        return Promise.reject({ code: h$2.GET_MSG_LIST_ERROR, message: d$1.GET_MSG_LIST_ERROR });
      if (this.getStoreData(o$2.CHAT, "isCompleted"))
        return Promise.resolve({ data: { messageList: [], nextReqMessageID: "", isCompleted: true } });
      const s2 = this.getStoreData(o$2.CHAT, "messageSource"), n2 = this.hoppingConfigMap.get("nextMessageSeq"), i2 = this.hoppingConfigMap.get("nextMessageTime"), r2 = n2 || i2;
      return s2 && s2.conversationID === (null == e2 ? void 0 : e2.conversationID) && r2 ? this.getMessageListHopping() : t2.chat.getMessageList(e2).then((e3) => {
        var s3;
        const { messageList: n3, nextReqMessageID: i3, isCompleted: r3 } = e3.data, a2 = this.getStoreData(o$2.CHAT, "userInfo");
        Object.keys(a2).length > 0 && this.updateLocalMessage(n3, a2), this.updateMessageList(n3, "unshift"), t2.TUIStore.update(o$2.CHAT, "nextReqMessageID", i3), t2.TUIStore.update(o$2.CHAT, "isCompleted", r3);
        const u2 = null === (s3 = n3[0]) || void 0 === s3 ? void 0 : s3.conversationID, { operationType: c2 = 0 } = this.getEngine().TUIStore.getConversationModel(u2) || {};
        return 0 === c2 && (this.getMessageReactions({ messageList: n3 }), this.readReceiptHandler.getMessageReadReceiptList(n3)), e3;
      }).catch((e3) => Promise.reject(e3));
    }
    getMessageListHopping(e2) {
      var t2;
      void 0 === e2 && (e2 = { conversationID: null === (t2 = this.getStoreData(o$2.CHAT, "messageSource")) || void 0 === t2 ? void 0 : t2.conversationID, sequence: this.hoppingConfigMap.get("nextMessageSeq"), time: this.hoppingConfigMap.get("nextMessageTime") });
      const s2 = this.getEngine();
      return s2.chat.getMessageListHopping(e2).then((t3) => {
        const { messageList: n2, nextMessageSeq: i2, nextMessageTime: r2, isCompleted: a2 } = t3.data, u2 = 1 === e2.direction ? e2.sequence : i2, c2 = 1 === e2.direction ? e2.time : r2;
        return this.updateMessageList(n2, "unshift"), this.delayGetHoppingFunction = void 0, this.hoppingConfigMap.set("nextMessageSeq", u2), this.hoppingConfigMap.set("nextMessageTime", c2), s2.TUIStore.update(o$2.CHAT, "isCompleted", a2), t3;
      }).catch((e3) => Promise.reject(e3));
    }
    sendMessageReadReceipt(e2) {
      return this.readReceiptHandler.sendMessageReadReceipt(e2);
    }
    getGroupMessageReadMemberList(e2) {
      return this.readReceiptHandler.getGroupMessageReadMemberList(e2).then((e3) => {
        const { isCompleted: t2, cursor: s2, messageID: n2, unreadUserIDList: i2, readUserIDList: r2 } = e3.data, a2 = { code: 0, data: { cursor: s2, isCompleted: t2, messageID: n2, unreadUserInfoList: [], readUserInfoList: [] } }, o2 = [...i2, ...r2];
        return 0 === o2.length ? a2 : this.getEngine().TUIUser.getUserProfile({ userIDList: o2 }).then((e4) => (i2.length > 0 ? e4.data.forEach((e5) => {
          const { userID: t3, nick: s3 = "", avatar: n3 = "" } = e5;
          a2.data.unreadUserInfoList.push({ userID: t3, nick: s3, avatar: n3 });
        }) : e4.data.forEach((e5) => {
          const { userID: t3, nick: s3 = "", avatar: n3 = "" } = e5;
          a2.data.readUserInfoList.push({ userID: t3, nick: s3, avatar: n3 });
        }), a2));
      });
    }
    downloadMergedMessages(e2) {
      return this.getEngine().chat.downloadMergerMessage(e2);
    }
    setTranslationLanguage(e2) {
      this.getEngine().TUIStore.update(o$2.USER, "targetLanguage", e2);
    }
    translateText(e2) {
      const t2 = this.getStoreData(o$2.USER, "targetLanguage"), s2 = Object.assign({ targetLanguage: t2, sourceLanguage: "auto" }, e2);
      return this.getEngine().chat.translateText(s2);
    }
    searchCloudMessages(e2) {
      const t2 = this.getStoreData(o$2.CONV, "conversationList");
      return this.getEngine().chat.searchCloudMessages(e2).then((e3) => {
        const { searchResultList: s2 } = e3.data;
        return e3.data.searchResultList = s2.map((e4) => {
          const { messageList: s3, conversationID: i2 } = e4, r2 = n$1(e4, ["messageList", "conversationID"]), a2 = s3.map((e5) => new ue(e5)), o2 = t2.find((e5) => e5.conversationID === i2);
          return Object.assign(Object.assign({}, r2), { messageList: a2.sort((e5, t3) => t3.time - e5.time), conversation: o2 });
        }), e3;
      });
    }
    addMessageReaction(e2, t2) {
      return this.getEngine().chat.addMessageReaction(e2.getMessage(), t2);
    }
    removeMessageReaction(e2, t2) {
      return this.getEngine().chat.removeMessageReaction(e2.getMessage(), t2);
    }
    getMessageReactions(e2) {
      const { messageList: t2 = [] } = e2, s2 = this.getStoreData(o$2.APP, "enabledEmojiPlugin");
      formatAppLog("log", "at node_modules/@tencentcloud/chat-uikit-engine/index.js:1", `TUIChatService.getMessageReactions enabledEmojiPlugin:${s2} messageList length:${t2.length}`), s2 && t2.length > 0 && this.getEngine().chat.getMessageReactions(e2).then((e3) => {
        const t3 = e3.data.resultList || e3.data;
        this.updateMessageReactionList(t3);
      }).catch(() => {
      });
    }
    getAllUserListOfMessageReaction(e2) {
      var t2;
      return this.getEngine().chat.getAllUserListOfMessageReaction(Object.assign(Object.assign({}, e2), { message: null === (t2 = null == e2 ? void 0 : e2.message) || void 0 === t2 ? void 0 : t2.getMessage() }));
    }
    updateMessageReactionList(e2) {
      const t2 = [];
      e2.forEach((e3) => {
        const { messageID: s2, reactionList: n2 } = e3, i2 = this.getEngine().TUIStore.getMessageModel(s2);
        if (i2) {
          const e4 = [];
          for (let t3 = 0; t3 < n2.length; t3++) {
            let s3 = true;
            for (let e5 = 0; e5 < i2.reactionList.length; e5++)
              if (n2[t3].reactionID === i2.reactionList[e5].reactionID) {
                i2.reactionList[e5] = n2[t3], s3 = false;
                break;
              }
            s3 && e4.push(n2[t3]);
          }
          i2.reactionList.push(...e4), e4.length = 0, t2.push(i2);
        }
      }), t2.length > 0 && this.updateMessageList(t2, "edit");
    }
    convertVoiceToText(e2) {
      const { message: t2, language: s2 = "zh" } = e2, n2 = t2.getMessage();
      return this.getEngine().chat.convertVoiceToText({ message: n2, language: s2 });
    }
    clearHistoryMessage(e2) {
      const t2 = this.getEngine();
      return t2.chat.clearHistoryMessage(e2).then((e3) => (t2.TUIStore.update(o$2.CHAT, "messageList", []), t2.TUIStore.update(o$2.CHAT, "nextReqMessageID", ""), t2.TUIStore.update(o$2.CHAT, "isCompleted", false), e3));
    }
    updateMessageInfo(e2) {
      const t2 = this.getStoreData(o$2.CHAT, "userInfo");
      this.getEngine().TUIStore.update(o$2.CHAT, "userInfo", Object.assign(t2, e2));
      const s2 = this.getStoreData(o$2.CHAT, "messageList");
      if (s2.length > 0) {
        this.updateLocalMessage(s2, e2) && this.getEngine().TUIStore.update(o$2.CHAT, "messageList", s2);
      }
    }
    updateLocalMessage(e2, t2) {
      let s2 = false;
      return e2.forEach((e3) => {
        if (t2[e3.from]) {
          const { nick: n2, nameCard: i2, avatar: r2 } = t2[e3.from];
          n2 && (e3.nick = n2, s2 = true), i2 && (e3.nameCard = i2, s2 = true), r2 && (e3.avatar = r2, s2 = true);
        }
      }), s2;
    }
    handleC2CCallSignaling(e2) {
      const t2 = this.getEngine(), s2 = t2.getMyUserID();
      return e2.filter((e3) => {
        var n2, i2, r2, a2, u2;
        const { conversationType: c2, type: g2, payload: l2 } = e3;
        let h2 = true;
        if (c2 === t2.TYPES.CONV_C2C && g2 === t2.TYPES.MSG_CUSTOM) {
          if (t2.chat.getSignalingInfo(e3)) {
            const t3 = U$1(l2.data);
            if (1 === (null == t3 ? void 0 : t3.businessID)) {
              const c3 = U$1(t3.data);
              if (h2 = !(e3._isExcludedFromUnreadCount && e3._isExcludedFromLastMessage), h2 && true !== (null === (n2 = null == c3 ? void 0 : c3.data) || void 0 === n2 ? void 0 : n2.consumed)) {
                let n3 = null === (i2 = null == c3 ? void 0 : c3.data) || void 0 === i2 ? void 0 : i2.inviter;
                "line_busy" !== (null == c3 ? void 0 : c3.line_busy) && "lineBusy" !== (null === (r2 = null == c3 ? void 0 : c3.data) || void 0 === r2 ? void 0 : r2.message) || (n3 = t3.inviter);
                const { from: g3, to: l3 } = e3;
                if (n3 !== s2 && e3.from === s2) {
                  const t4 = this.getStoreData(o$2.CONV, "currentConversation");
                  e3.from = l3, e3.to = g3, e3.flow = "in", e3.avatar = (null === (a2 = null == t4 ? void 0 : t4.userProfile) || void 0 === a2 ? void 0 : a2.avatar) || "";
                }
                if (n3 === s2 && e3.from !== s2) {
                  const t4 = this.getStoreData(o$2.USER, "userProfile");
                  e3.from = l3, e3.to = g3, e3.flow = "out", e3.avatar = null == t4 ? void 0 : t4.avatar;
                }
                formatAppLog("log", "at node_modules/@tencentcloud/chat-uikit-engine/index.js:1", `${this.serv}.handleC2CCallSignaling myUserID:${s2} callSignaling.inviter:${t3.inviter} customData.data.inviter:${null === (u2 = null == c3 ? void 0 : c3.data) || void 0 === u2 ? void 0 : u2.inviter}`);
              }
            }
          }
        }
        return h2;
      });
    }
    sortMessageList(e2) {
      const { conversationType: t2 } = e2[0];
      if (t2 === this.getEngine().TYPES.CONV_C2C)
        return e2.sort((e3, t3) => e3.time - t3.time);
      const s2 = e2.filter((e3) => "success" === e3.status).sort((e3, t3) => e3.sequence - t3.sequence);
      for (let t3 = 0; t3 < e2.length; t3++)
        "success" !== e2[t3].status && s2.splice(t3, 0, e2[t3]);
      return s2;
    }
  }
  class $t extends ne {
    constructor() {
      super(), this.groupMap = /* @__PURE__ */ new Map();
    }
    static getInstance() {
      return $t.instance || ($t.instance = new $t()), $t.instance;
    }
    init() {
      const e2 = this.getEngine();
      e2.eventCenter.addEvent(e2.EVENT.GROUP_LIST_UPDATED, this.onGroupListUpdated.bind(this)), e2.eventCenter.addEvent(e2.EVENT.GROUP_ATTRIBUTES_UPDATED, this.onGroupAttributesUpdated.bind(this)), e2.eventCenter.addEvent(e2.EVENT.GROUP_COUNTER_UPDATED, this.onGroupCounterUpdated.bind(this)), e2.eventCenter.addEvent(e2.EVENT.MESSAGE_RECEIVED, this.onMessageReceived.bind(this)), this.getGroupInitData();
    }
    onGroupListUpdated(e2) {
      const t2 = this.getEngine();
      t2.TUIStore.update(o$2.GRP, "groupList", e2);
      const s2 = t2.TUIStore.getData(o$2.GRP, "currentGroupID");
      e2.forEach((e3) => {
        e3.groupID === s2 && t2.TUIStore.update(o$2.GRP, "currentGroup", e3);
      });
    }
    onGroupAttributesUpdated(e2) {
      const t2 = this.getEngine(), s2 = t2.TUIStore.getData(o$2.GRP, "currentGroupID");
      let n2 = t2.TUIStore.getData(o$2.GRP, "groupList");
      const { groupID: i2, groupAttributes: r2 } = e2;
      s2 === i2 && t2.TUIStore.update(o$2.GRP, "currentGroupAttributes", r2), n2 = n2.map((e3) => (e3.groupID === i2 && (e3.groupAttributes = r2), e3)), t2.TUIStore.update(o$2.GRP, "groupList", n2);
    }
    onGroupCounterUpdated(e2) {
      const t2 = this.getEngine(), s2 = t2.TUIStore.getData(o$2.GRP, "currentGroupID"), n2 = t2.TUIStore.getData(o$2.GRP, "currentGroupCounters") || {};
      let i2 = t2.TUIStore.getData(o$2.GRP, "groupList");
      const { groupID: r2, key: a2, value: u2 } = e2;
      s2 === r2 && (n2[a2] = u2, t2.TUIStore.update(o$2.GRP, "currentGroupCounters", n2)), i2 = i2.map((e3) => (e3.groupID === r2 && (e3.groupCounters = Object.assign(Object.assign({}, e3.groupCounters), { [a2]: u2 })), e3)), t2.TUIStore.update(o$2.GRP, "groupList", i2);
    }
    onMessageReceived(e2) {
      const t2 = this.getEngine(), s2 = [];
      e2.forEach((e3) => {
        if (e3.type === t2.TYPES.MSG_GRP_TIP) {
          const { payload: s3 } = e3, { operationType: n2, userIDList: i2 } = s3;
          switch (n2) {
            case t2.TYPES.GRP_TIP_MBR_JOIN:
              this.addMemberList(i2);
              break;
            case t2.TYPES.GRP_TIP_MBR_QUIT:
            case t2.TYPES.GRP_TIP_MBR_KICKED_OUT:
              this.removeMemberList(i2);
              break;
            case t2.TYPES.GRP_TIP_MBR_SET_ADMIN:
            case t2.TYPES.GRP_TIP_MBR_CANCELED_ADMIN:
              this.updateGroupMember(i2);
              break;
            case t2.TYPES.GRP_TIP_GRP_PROFILE_UPDATED:
              break;
            case t2.TYPES.GRP_TIP_MBR_PROFILE_UPDATED:
            case t2.TYPES.GRP_TIP_BAN_AVCHATROOM_MEMBER:
            case t2.TYPES.GRP_TIP_UNBAN_AVCHATROOM_MEMBER:
              this.updateGroupMember(i2);
          }
        }
        e3.type === t2.TYPES.MSG_GRP_SYS_NOTICE && s2.push(e3);
      }), s2.length > 0 && t2.TUIStore.update(o$2.GRP, "groupSystemNoticeList", s2);
    }
    getGroupInitData() {
      const e2 = this.getEngine();
      e2.chat.isReady() && e2.chat.getGroupList().then((e3) => {
        const { groupList: t2 = [] } = e3.data;
        formatAppLog("log", "at node_modules/@tencentcloud/chat-uikit-engine/index.js:1", `TUIGroupService.init, getGroupList count:${t2.length}`), t2.length > 0 && this.onGroupListUpdated(t2);
      });
    }
    updateGroupMember(e2) {
      return i$2(this, void 0, void 0, function* () {
        const t2 = this.getEngine().TUIStore.getData(o$2.GRP, "currentGroupID");
        if (t2) {
          const s2 = yield this.getGroupMemberProfile({ groupID: t2, userIDList: e2 }), { memberList: n2 } = s2.data;
          this.updateMemberList(n2);
        }
      });
    }
    resetCurrentStore() {
      this.getEngine().TUIStore.reset(o$2.GRP, ["currentGroupID", "currentGroup", "currentGroupAttributes", "currentGroupCounters", "currentGroupMemberList"], true);
    }
    switchGroup(e2) {
      return i$2(this, void 0, void 0, function* () {
        const t2 = this.getEngine();
        t2.TUIStore.update(o$2.GRP, "offset", 0), t2.TUIStore.update(o$2.GRP, "isCompleted", false);
        const s2 = t2.TUIStore.getConversationModel(`GROUP${e2}`);
        if ((null == s2 ? void 0 : s2.operationType) > 0) {
          const e3 = t2.TUIStore.getData(o$2.GRP, "currentGroup");
          return Promise.resolve(e3);
        }
        const n2 = t2.TUIStore.getData(o$2.GRP, "currentGroupID");
        if (!e2)
          return this.resetCurrentStore(), Promise.resolve({});
        if (n2 === e2) {
          const e3 = t2.TUIStore.getData(o$2.GRP, "currentGroup");
          return Promise.resolve(e3);
        }
        this.resetCurrentStore(), t2.TUIStore.update(o$2.GRP, "currentGroupID", e2);
        try {
          yield this.getGroupInfo(e2);
        } catch (e3) {
          Promise.reject(e3);
        }
        const i2 = setTimeout(() => {
          this.groupMap.delete(e2), clearTimeout(i2);
        }, 5e3), r2 = t2.TUIStore.getData(o$2.GRP, "currentGroup");
        return Promise.resolve(r2);
      });
    }
    getGroupInfo(e2) {
      return i$2(this, void 0, void 0, function* () {
        const t2 = this.getEngine(), s2 = this.groupMap.get(e2);
        if (s2)
          return this.updateMemberList((null == s2 ? void 0 : s2.memberList) || []), t2.TUIStore.update(o$2.GRP, "currentGroup", s2.group), t2.TUIStore.update(o$2.GRP, "currentGroupAttributes", s2.groupAttributes || {}), void t2.TUIStore.update(o$2.GRP, "currentGroupCounters", s2.counters || {});
        const n2 = { group: {}, memberList: [], groupAttributes: void 0, counters: void 0 }, { data: { group: i2 } } = yield this.getGroupProfile({ groupID: e2 });
        n2.group = i2;
        const { data: { memberList: r2 } } = yield this.getGroupMemberList({ groupID: e2 });
        n2.memberList = r2;
        const a2 = yield this.getGroupAttributes({ groupID: e2, keyList: [] }), { groupAttributes: u2 } = a2.data;
        n2.groupAttributes = u2, t2.TUIStore.update(o$2.GRP, "currentGroupAttributes", u2);
        try {
          const s3 = yield this.getGroupCounters({ groupID: e2, keyList: [] }), { counters: i3 } = s3.data;
          n2.counters = i3, t2.TUIStore.update(o$2.GRP, "currentGroupCounters", i3);
        } catch (e3) {
          formatAppLog("warn", "at node_modules/@tencentcloud/chat-uikit-engine/index.js:1", null == e3 ? void 0 : e3.message);
        }
        this.groupMap.set(e2, n2);
      });
    }
    getGroupProfile(e2) {
      const t2 = this.getEngine();
      return t2.chat.getGroupProfile(e2).then((s2) => i$2(this, void 0, void 0, function* () {
        if (t2.TUIStore.getData(o$2.GRP, "currentGroupID") === e2.groupID) {
          const { group: e3 } = s2.data;
          t2.TUIStore.update(o$2.GRP, "currentGroup", e3);
        }
        return s2;
      }));
    }
    updateGroupProfile(e2) {
      return this.getEngine().chat.updateGroupProfile(e2);
    }
    createGroup(e2) {
      return this.getEngine().chat.createGroup(e2);
    }
    dismissGroup(e2) {
      return this.getEngine().chat.dismissGroup(e2);
    }
    searchGroupByID(e2) {
      const t2 = this.getEngine();
      return t2.chat.searchGroupByID(e2).then((e3) => {
        const { group: s2 } = e3.data, n2 = t2.TUIStore.getData(o$2.GRP, "groupList");
        return e3.data.group.isJoinedGroup = n2.some((e4) => e4.groupID === s2.groupID), e3;
      });
    }
    joinGroup(e2) {
      return this.getEngine().chat.joinGroup(e2);
    }
    quitGroup(e2) {
      return this.getEngine().chat.quitGroup(e2);
    }
    getGroupApplicationList() {
      return this.getEngine().chat.getGroupApplicationList();
    }
    handleGroupApplication(e2) {
      return this.getEngine().chat.handleGroupApplication(e2);
    }
    getGroupOnlineMemberCount(e2) {
      return this.getEngine().chat.getGroupOnlineMemberCount(e2);
    }
    changeGroupOwner(e2) {
      return this.getEngine().chat.changeGroupOwner(e2);
    }
    initGroupAttributes(e2) {
      return this.getEngine().chat.initGroupAttributes(e2);
    }
    setGroupAttributes(e2) {
      return this.getEngine().chat.setGroupAttributes(e2);
    }
    deleteGroupAttributes(e2) {
      return this.getEngine().chat.deleteGroupAttributes(e2);
    }
    getGroupAttributes(e2) {
      return this.getEngine().chat.getGroupAttributes(e2);
    }
    setGroupCounters(e2) {
      return this.getEngine().chat.setGroupCounters(e2);
    }
    increaseGroupCounter(e2) {
      return this.getEngine().chat.increaseGroupCounter(e2);
    }
    decreaseGroupCounter(e2) {
      return this.getEngine().chat.decreaseGroupCounter(e2);
    }
    getGroupCounters(e2) {
      return this.getEngine().chat.getGroupCounters(e2);
    }
    updateMemberList(e2) {
      const t2 = this.getEngine(), s2 = [...(t2.TUIStore.getData(o$2.GRP, "currentGroupMemberList") || []).filter((t3) => !e2.find((e3) => e3.userID === t3.userID)), ...e2];
      t2.TUIStore.update(o$2.GRP, "currentGroupMemberList", s2);
    }
    addMemberList(e2) {
      return i$2(this, void 0, void 0, function* () {
        const t2 = this.getEngine().TUIStore.getData(o$2.GRP, "currentGroupID");
        if (t2)
          try {
            const s2 = yield this.getGroupMemberProfile({ groupID: t2, userIDList: e2 }), { memberList: n2 } = s2.data;
            this.updateMemberList(n2);
          } catch (t3) {
            const s2 = e2.map((e3) => ({ userID: e3, avatar: "", nick: "", role: "", joinTime: 0, nameCard: "", muteUntil: 0, memberCustomField: [] }));
            this.updateMemberList(s2);
          }
      });
    }
    removeMemberList(e2) {
      const t2 = this.getEngine(), s2 = t2.TUIStore.getData(o$2.GRP, "currentGroupMemberList").filter((t3) => -1 === e2.indexOf(t3.userID));
      t2.TUIStore.update(o$2.GRP, "currentGroupMemberList", s2);
    }
    getGroupMemberList(e2) {
      const t2 = this.getEngine();
      if (S$1(e2.offset)) {
        const s2 = t2.TUIStore.getData(o$2.GRP, "offset");
        e2.offset = s2;
      }
      return t2.chat.getGroupMemberList(e2).then((s2) => {
        if (t2.TUIStore.getData(o$2.GRP, "currentGroupID") === e2.groupID) {
          const { memberList: e3, offset: n2 = 0 } = s2.data;
          this.updateMemberList(e3), t2.TUIStore.update(o$2.GRP, "offset", n2), 0 === n2 && t2.TUIStore.update(o$2.GRP, "isCompleted", true);
        }
        return s2;
      });
    }
    getGroupMemberProfile(e2) {
      return this.getEngine().chat.getGroupMemberProfile(e2);
    }
    addGroupMember(e2) {
      const t2 = this.getEngine();
      return t2.chat.addGroupMember(e2).then((s2) => i$2(this, void 0, void 0, function* () {
        if (t2.TUIStore.getData(o$2.GRP, "currentGroupID") === e2.groupID) {
          const { successUserIDList: e3, group: n2 } = s2.data;
          t2.TUIStore.update(o$2.GRP, "currentGroup", n2), this.addMemberList(e3);
        }
        return s2;
      }));
    }
    deleteGroupMember(e2) {
      const t2 = this.getEngine();
      return t2.chat.deleteGroupMember(e2).then((s2) => {
        if (t2.TUIStore.getData(o$2.GRP, "currentGroupID") === e2.groupID) {
          const { userIDList: e3, group: n2 } = s2.data;
          this.removeMemberList(e3), t2.TUIStore.update(o$2.GRP, "currentGroup", n2);
        }
        return s2;
      });
    }
    setGroupMemberMuteTime(e2) {
      return this.getEngine().chat.setGroupMemberMuteTime(e2);
    }
    setGroupMemberRole(e2) {
      return this.getEngine().chat.setGroupMemberRole(e2);
    }
    setGroupMemberNameCard(e2) {
      return this.getEngine().chat.setGroupMemberNameCard(e2);
    }
    setGroupMemberCustomField(e2) {
      return this.getEngine().chat.setGroupMemberCustomField(e2);
    }
    markGroupMemberList(e2) {
      return this.getEngine().chat.markGroupMemberList(e2);
    }
  }
  class Ht extends ne {
    constructor() {
      super();
    }
    static getInstance() {
      return Ht.instance || (Ht.instance = new Ht()), Ht.instance;
    }
    init() {
      const e2 = this.getEngine();
      e2.eventCenter.addEvent(e2.EVENT.FRIEND_LIST_UPDATED, this.onFriendListUpdated.bind(this)), e2.eventCenter.addEvent(e2.EVENT.FRIEND_APPLICATION_LIST_UPDATED, this.onFriendApplicationListUpdated.bind(this)), this.getFriendInitData();
    }
    onFriendListUpdated(e2) {
      this.getEngine().TUIStore.update(o$2.FRIEND, "friendList", e2);
    }
    onFriendApplicationListUpdated(e2) {
      const { friendApplicationList: t2, unreadCount: s2 = 0 } = e2, n2 = this.getEngine();
      n2.TUIStore.update(o$2.FRIEND, "friendApplicationList", t2), n2.TUIStore.update(o$2.FRIEND, "friendApplicationUnreadCount", s2);
    }
    getFriendInitData() {
      const e2 = this.getEngine();
      e2.chat.isReady() && (e2.chat.getFriendList().then((e3) => {
        const t2 = e3.data || [];
        formatAppLog("log", "at node_modules/@tencentcloud/chat-uikit-engine/index.js:1", `TUIFriendService.init, getFriendList count:${t2.length}`), t2.length > 0 && this.onFriendListUpdated(t2);
      }), e2.chat.getFriendApplicationList().then((e3) => {
        this.onFriendApplicationListUpdated(e3.data);
      }));
    }
    getFriendList() {
      return this.getEngine().chat.getFriendList();
    }
    getFriendRemark(e2) {
      const t2 = this.getEngine().TUIStore.getData(o$2.FRIEND, "friendList"), s2 = {};
      return e2.forEach((e3) => {
        for (let n2 = 0; n2 < t2.length; n2++)
          t2[n2].userID !== e3 || (s2[e3] = t2[n2].remark);
      }), s2;
    }
    addFriend(e2) {
      return this.getEngine().chat.addFriend(e2);
    }
    deleteFriend(e2) {
      return this.getEngine().chat.deleteFriend(e2);
    }
    checkFriend(e2) {
      return this.getEngine().chat.checkFriend(e2);
    }
    getFriendProfile(e2) {
      return this.getEngine().chat.getFriendProfile(e2);
    }
    updateFriend(e2) {
      return this.getEngine().chat.updateFriend(e2);
    }
    acceptFriendApplication(e2) {
      return this.getEngine().chat.acceptFriendApplication(e2);
    }
    refuseFriendApplication(e2) {
      return this.getEngine().chat.refuseFriendApplication({ userID: e2 });
    }
    deleteFriendApplication(e2) {
      return this.getEngine().chat.deleteFriendApplication(e2);
    }
    setFriendApplicationRead() {
      return this.getEngine().chat.setFriendApplicationRead();
    }
  }
  class Yt extends ne {
    static getInstance() {
      return Yt.instance || (Yt.instance = new Yt()), Yt.instance;
    }
    reportFeature(e2, t2) {
      var s2;
      return null === (s2 = this.getEngine().chat) || void 0 === s2 ? void 0 : s2.callExperimentalAPI("statTUIKeyFeatures", { code: e2, msg: t2 ? `${e2}-${t2}` : "" });
    }
  }
  class Bt {
    constructor() {
      this.cache = [], this.middlewares = [], this.options = null;
    }
    use(e2) {
      return "function" != typeof e2 && formatAppLog("error", "at node_modules/@tencentcloud/chat-uikit-engine/index.js:1", "middleware must be a function"), this.cache.push(e2), this;
    }
    next() {
      if (this.middlewares && this.middlewares.length > 0) {
        return this.middlewares.shift().call(this, this.options, this.next.bind(this));
      }
    }
    run(e2) {
      return this.middlewares = this.cache.map((e3) => e3), this.options = e2, this.next();
    }
  }
  function Kt(e2, t2, s2) {
    const n2 = /* @__PURE__ */ Object.create(null);
    Object.keys(s2).forEach((s3) => {
      if (!t2[s3])
        return;
      n2[s3] = t2[s3];
      const i2 = new Bt();
      t2[s3] = function() {
        const r2 = Array.from(arguments);
        return i2.use((t3, n3) => e2.isInited ? n3() : Promise.reject({ code: h$2.NOT_INIT, message: `${s3} | ${d$1.NOT_INIT}` })).use((e3) => n2[s3].apply(t2, e3)), i2.run(r2);
      };
    });
  }
  formatAppLog("log", "at node_modules/@tencentcloud/chat-uikit-engine/index.js:1", "TUIChatEngine.VERSION:2.4.4");
  const qt = ee.getInstance();
  X.getInstance();
  const Jt = fe.getInstance(), Wt = Dt.getInstance(), Xt = Pt.getInstance(), Zt = xt.getInstance(), Qt = Ft.getInstance(), es = $t.getInstance(), ts = Ht.getInstance(), ss = Yt.getInstance();
  qt.mount(a$2.TUIStore, Jt), qt.mount(a$2.TUITranslate, Wt), qt.mount(a$2.TUIConversation, Xt), qt.mount(a$2.TUIUser, Zt), qt.mount(a$2.TUIChat, Qt), qt.mount(a$2.TUIGroup, es), qt.mount(a$2.TUIFriend, ts), qt.mount(a$2.TUIReport, ss), Kt(qt, qt, f$1), Kt(qt, Xt, m$1), Kt(qt, Qt, v$2), Kt(qt, es, T$2), Kt(qt, Zt, E$2), Kt(qt, ts, I$1), Kt(qt, ss, f$1);
  let i$1 = class i {
    constructor() {
      this.serviceMap = /* @__PURE__ */ new Map();
    }
    registerService(e2, t2) {
      this.serviceMap.has(e2) || (formatAppLog("log", "at node_modules/@tencentcloud/tui-core/index.js:1", `TUIServiceManager.registerService serviceName:${e2}`), this.serviceMap.set(e2, t2));
    }
    unregisterService(e2) {
      this.serviceMap.has(e2) && (formatAppLog("log", "at node_modules/@tencentcloud/tui-core/index.js:1", `TUIServiceManager.unregisterService serviceName:${e2}`), this.serviceMap.delete(e2));
    }
    getService(e2) {
      return this.serviceMap.get(e2);
    }
    callService(e2) {
      const { serviceName: t2, method: n2, params: i2, callback: s2 } = e2, o2 = this.getService(t2);
      if (formatAppLog("log", "at node_modules/@tencentcloud/tui-core/index.js:1", `TUIServiceManager.callService serviceName:${t2}, service:`, o2), o2)
        return o2.onCall(n2, i2, s2);
    }
  };
  let s$1 = class s {
    constructor() {
      this.extensionMap = /* @__PURE__ */ new Map();
    }
    registerExtension(e2, t2) {
      if (formatAppLog("log", "at node_modules/@tencentcloud/tui-core/index.js:1", `TUIExtensionManager.registerExtension extensionID:${e2}`), !this.extensionMap.has(e2)) {
        const t3 = [];
        this.extensionMap.set(e2, t3);
      }
      const n2 = this.extensionMap.get(e2);
      -1 === n2.indexOf(t2) && n2.push(t2);
    }
    unregisterExtension(e2, t2) {
      if (formatAppLog("log", "at node_modules/@tencentcloud/tui-core/index.js:1", `TUIExtensionManager.unregisterExtension extensionID:${e2}`), this.extensionMap.has(e2)) {
        const n2 = this.extensionMap.get(e2), i2 = n2.indexOf(t2);
        i2 > -1 && n2.splice(i2, 1);
      }
    }
    getExtensionList(e2, t2) {
      const n2 = t2 ? `params:${JSON.stringify(t2)}` : "";
      formatAppLog("log", "at node_modules/@tencentcloud/tui-core/index.js:1", `TUIExtensionManager.getExtensionList extensionID:${e2} ${n2}`);
      let i2 = [], s2 = [];
      if (this.extensionMap.has(e2)) {
        i2 = this.extensionMap.get(e2);
        for (let n3 = 0; n3 < i2.length; n3++) {
          const o2 = i2[n3].onGetExtension(e2, t2);
          s2 = s2.concat(o2);
        }
      }
      return s2;
    }
  };
  const o$1 = ["vue2", "vue3", "rn"], E$1 = { TUILogin: { EVENT: { LOGIN_STATE_CHANGED: "loginStateChanged" }, EVENT_SUB_KEY: { USER_LOGIN_SUCCESS: "userLoginSuccess", USER_LOGOUT_SUCCESS: "userLogoutSuccess", USER_KICKED_OFFLINE: "userKickedOffline", USER_SIG_EXPIRED: "userSigExpired" } }, TUIConversation: { SERVICE: { NAME: "TUIConversationService", METHOD: { CREATE_CONVERSATION: "createConversation", HIDE_CONVERSATION_HEADER: "hideConversationHeader" } }, EXTENSION: { CONV_POP_MENU: { EXT_ID: "conversationPopMenu" }, CONV_GROUP: { EXT_ID: "conversationGroup" } } }, TUIChat: { SERVICE: { NAME: "TUIChatService", METHOD: { UPDATE_MESSAGE_LIST: "updateMessageList", CLOSE_MESSAGE_POP_MENU: "closeMessagePopMenu", SEND_CUSTOM_MESSAGE: "sendCustomMessage", SEND_TEXT_MESSAGE: "sendTextMessage", SET_CHAT_TYPE: "setChatType", UPDATE_MESSAGE_INFO: "updateMessageInfo" } }, EXTENSION: { INPUT_MORE: { EXT_ID: "inputToolBarMore" }, MSG_POP_MENU: { EXT_ID: "messagePopMenu" }, CHAT_HEADER: { EXT_ID: "chatHeader" } }, TYPE: { C2C: "C2C", GROUP: "GROUP", CUSTOMER_SERVICE: "customerService", ROOM: "room" }, EVENT: { CHAT_STATE_CHANGED: "chatStateChanged", CHAT_TYPE_CHANGED: "chatTypeChanged" }, EVENT_SUB_KEY: { CHAT_OPENED: "chatOpened", CHANGE_SUCCESS: "changeSuccess" }, FEATURE: { DownloadFile: "DownloadFile", CopyMessage: "CopyMessage", DeleteMessage: "DeleteMessage", RevokeMessage: "RevokeMessage", QuoteMessage: "QuoteMessage", ForwardMessage: "ForwardMessage", TranslateMessage: "TranslateMessage", VoiceToText: "VoiceToText", MultiSelection: "MultiSelection", EmojiReaction: "EmojiReaction", InputEmoji: "InputEmoji", InputStickers: "InputStickers", InputImage: "InputImage", InputVoice: "InputVoice", InputVideo: "InputVideo", InputFile: "InputFile", InputEvaluation: "InputEvaluation", InputQuickReplies: "InputQuickReplies", InputMention: "InputMention", MessageSearch: "MessageSearch", ReadStatus: "ReadStatus" } }, TUIGroup: { SERVICE: { NAME: "TUIGroupService", METHOD: { CREATE_GROUP: "createGroup", OPEN_GROUP_MANAGEMENT: "openGroupManagement", SELECT_GROUP_MEMBER: "selectGroupMember" } } }, TUIContact: { SERVICE: { NAME: "TUIContactService", METHOD: { SELECT_FRIEND: "selectFriend" } }, EXTENSION: { CONTACT_LIST: { EXT_ID: "contactList" } } }, TUISearch: { SERVICE: { NAME: "TUISearchService", METHOD: { SEARCH_GROUP: "searchGroup", SEARCH_USER: "searchUser", SEARCH_FRIEND: "searchFriend", SEARCH_GROUP_MEMBER: "searchGroupMember" } }, EXTENSION: { SEARCH_MORE: { EXT_ID: "searchMore" } } }, TUICalling: { SERVICE: { NAME: "TUICallingService", METHOD: { START_CALL: "startCall" } } }, TUIRoom: { SERVICE: { NAME: "TUIRoomService" } }, TUIEmojiPlugin: { SERVICE: { NAME: "TUIEmojiPluginService", METHOD: { CLOSE_EMOJI_DETAIL: "closeEmojiDetail" } } }, TUITranslate: { EVENT: { LANGUAGE_CHANGED: "languageChanged" }, EVENT_SUB_KEY: { CHANGE_SUCCESS: "changeSuccess" } }, TUITranslatePlugin: { SERVICE: { NAME: "TUITranslatePluginService" } }, TUIVoiceToTextPlugin: { SERVICE: { NAME: "TUIVoiceToTextPluginService" } }, TUICustomerServicePlugin: { SERVICE: { NAME: "TUICustomerServicePlugin", METHOD: { ACTIVE_CONVERSATION: "activeConversation", FILTER_MESSAGE: "filterMessage" } }, EXTENSION: {} }, TUIPushPlugin: { SERVICE: { NAME: "TUIPushPluginService" } }, TUIChatbotPlugin: { SERVICE: { NAME: "TUIChatbotPluginService" } }, TUITheme: { EVENT: { THEME_CHANGED: "themeChanged" }, EVENT_SUB_KEY: { CHANGE_SUCCESS: "changeSuccess" } } }, r$1 = "undefined" != typeof wx && "function" == typeof wx.getSystemInfoSync && Boolean(wx.getSystemInfoSync().fontSizeSetting), a$1 = "undefined" != typeof uni && "undefined" == typeof window, g$1 = r$1 || a$1, S = "undefined" != typeof uni, c$1 = ("undefined" != typeof uni || "undefined" != typeof window) && !g$1;
  r$1 ? wx : S ? uni : window;
  const h$1 = c$1 && window && window.navigator && window.navigator.userAgent || "", T$1 = /Android/i.test(h$1), u$1 = /(?:Windows Phone)/.test(h$1), I = /(?:SymbianOS)/.test(h$1), l$1 = /iPad/i.test(h$1) || /iPhone/i.test(h$1) || /iPod/i.test(h$1), C = T$1 || u$1 || I || l$1, M = c$1 && !C, U = a$1 && !r$1, _ = { [E$1.TUITranslatePlugin.SERVICE.NAME]: Math.pow(2, 38), [E$1.TUIVoiceToTextPlugin.SERVICE.NAME]: Math.pow(2, 39), [E$1.TUICustomerServicePlugin.SERVICE.NAME]: Math.pow(2, 40), [E$1.TUIPushPlugin.SERVICE.NAME]: Math.pow(2, 41), [E$1.TUIChatbotPlugin.SERVICE.NAME]: Math.pow(2, 42), [E$1.TUIEmojiPlugin.SERVICE.NAME]: Math.pow(2, 48) };
  class N {
    constructor(e2) {
      this.loginStatusPromise = /* @__PURE__ */ new Map(), this.SDKAppID = 0, this.userID = "", this.userSig = "", this.TUICore = e2, this.isOnChatEvent = false;
    }
    static getInstance(e2) {
      return !N.instance && e2 && (N.instance = new N(e2)), N.instance;
    }
    login(t2) {
      const { SDKAppID: n2, userID: i2, userSig: s2, framework: o2 } = t2;
      return this.chat = e$1.create(Object.assign(Object.assign({}, t2), { scene: this.getStatScene(o2) })), this.EVENT = e$1.EVENT, this.TYPES = e$1.TYPES, this.SDKAppID = n2, this.userID = i2, this.userSig = s2, this.offChatEvent(), this.onChatEvent(), this.registerPlugin(t2), this.loginChat(t2);
    }
    logout() {
      return this.chat.logout().then((e2) => (this.userID = "", this.userSig = "", this.TUICore.notifyEvent(E$1.TUILogin.EVENT.LOGIN_STATE_CHANGED, E$1.TUILogin.EVENT_SUB_KEY.USER_LOGOUT_SUCCESS), Promise.resolve(e2)));
    }
    destroy() {
      return this.chat.destroy().then((e2) => (this.userID = "", this.userSig = "", this.TUICore.notifyEvent(E$1.TUILogin.EVENT.LOGIN_STATE_CHANGED, E$1.TUILogin.EVENT_SUB_KEY.USER_LOGOUT_SUCCESS), Promise.resolve(e2)));
    }
    setLogLevel(e2) {
      return this.chat.setLogLevel(e2);
    }
    getContext() {
      return { chat: this.chat, SDKAppID: this.SDKAppID, userID: this.userID, userSig: this.userSig };
    }
    reportPlugin() {
      var e2;
      for (const t2 in _)
        this.TUICore.getService(t2) && (null === (e2 = this.chat.callExperimentalAPI("isFeatureEnabledForStat", _[t2])) || void 0 === e2 || e2.catch((e3) => {
        }));
    }
    loginChat(e2) {
      const { userID: t2, userSig: n2 } = e2;
      return new Promise((e3, i2) => {
        this.chat.login({ userID: t2, userSig: n2 }).then((t3) => {
          t3.data.repeatLogin && this.chat.isReady() && e3(t3), this.reportPlugin(), this.loginStatusPromise.set("login", { resolve: e3, reject: i2, imResponse: t3 });
        }).catch((e4) => {
          i2(e4);
        });
      });
    }
    onChatEvent() {
      this.chat.on(this.EVENT.SDK_READY, this.onSDKReady, this), this.chat.on(this.EVENT.SDK_NOT_READY, this.onSDKNotReady, this), this.chat.on(this.EVENT.KICKED_OUT, this.onUserKicked, this), this.isOnChatEvent = true;
    }
    offChatEvent() {
      this.isOnChatEvent && (this.chat.off(this.EVENT.SDK_READY, this.onSDKReady, this), this.chat.off(this.EVENT.SDK_NOT_READY, this.onSDKNotReady, this), this.chat.off(this.EVENT.KICKED_OUT, this.onUserKicked, this), this.isOnChatEvent = false);
    }
    onSDKReady() {
      if (this.loginStatusPromise.has("login")) {
        this.TUICore.notifyEvent(E$1.TUILogin.EVENT.LOGIN_STATE_CHANGED, E$1.TUILogin.EVENT_SUB_KEY.USER_LOGIN_SUCCESS);
        const e2 = setTimeout(() => {
          const t2 = this.loginStatusPromise.get("login");
          t2.resolve(t2.imResponse), clearTimeout(e2), this.loginStatusPromise.delete("login");
        }, 500);
      }
    }
    onSDKNotReady() {
      if (this.loginStatusPromise.has("login")) {
        this.loginStatusPromise.get("login").reject(new Error("sdk not ready"));
      }
      this.loginStatusPromise.delete("login");
    }
    onUserKicked(e2) {
      e2.data.type !== this.TYPES.KICKED_OUT_USERSIG_EXPIRED ? this.TUICore.notifyEvent(E$1.TUILogin.EVENT.LOGIN_STATE_CHANGED, E$1.TUILogin.EVENT_SUB_KEY.USER_KICKED_OFFLINE) : this.TUICore.notifyEvent(E$1.TUILogin.EVENT.LOGIN_STATE_CHANGED, E$1.TUILogin.EVENT_SUB_KEY.USER_SIG_EXPIRED);
    }
    registerPlugin(e2) {
      const { useUploadPlugin: i2 = false, useProfanityFilterPlugin: s2 = false, TUIOfflinePush: o2, offlinePushConfig: E2, TIMPush: r2, pushConfig: a2 } = e2;
      true === i2 && this.chat.registerPlugin({ "tim-upload-plugin": t$1 }), true === s2 && this.chat.registerPlugin({ "tim-profanity-filter-plugin": n$2 }), U && r2 && a2 && this.chat.registerPlugin({ "tim-push": r2, pushConfig: a2 }), U && o2 && E2 && this.chat.registerPlugin({ "tim-offline-push-plugin": o2, offlinePushConfig: E2 });
    }
    getStatScene(e2) {
      let t2;
      return e2 && o$1.indexOf(e2) > -1 && (t2 = this.genStatScene(e2)), t2;
    }
    genStatScene(e2) {
      if ("rn" === e2)
        return "k-rn";
      let t2 = "";
      return S ? (M && (t2 = `k-${e2}-pc-uni`), C && (t2 = `k-${e2}-h5-uni`), U && (t2 = `k-${e2}-app-uni`), r$1 && (t2 = `k-${e2}-mp-uni`), t2) : (M && (t2 = `k-${e2}-pc`), C && (t2 = `k-${e2}-h5`), t2);
    }
  }
  let p$1 = class p {
    constructor() {
      this.eventMap = /* @__PURE__ */ new Map();
    }
    registerEvent(e2, t2, n2) {
      const i2 = this.getKey(e2, t2);
      if (formatAppLog("log", "at node_modules/@tencentcloud/tui-core/index.js:1", `TUIEventManager.registerEvent eventName:${e2} subKey:${t2}`), !this.eventMap.has(i2)) {
        const e3 = [];
        this.eventMap.set(i2, e3);
      }
      const s2 = this.eventMap.get(i2);
      -1 === s2.indexOf(n2) && (s2.push(n2), this.renotify(e2, t2, n2));
    }
    unregisterEvent(e2, t2, n2) {
      formatAppLog("log", "at node_modules/@tencentcloud/tui-core/index.js:1", `TUIEventManager.unregisterEvent eventName:${e2} subKey:${t2}`);
      const i2 = this.getKey(e2, t2);
      if (this.eventMap.has(i2)) {
        const e3 = this.eventMap.get(i2), t3 = e3.indexOf(n2);
        t3 > -1 && e3.splice(t3, 1);
      }
    }
    notifyEvent(e2, t2, n2) {
      const i2 = this.getKey(e2, t2), s2 = n2 ? `params:${JSON.stringify(n2)}` : "";
      if (formatAppLog("log", "at node_modules/@tencentcloud/tui-core/index.js:1", `TUIEventManager.notifyEvent eventName:${e2} subKey:${t2} ${s2}`), this.eventMap.has(i2)) {
        this.eventMap.get(i2).forEach((i3) => {
          i3.onNotifyEvent(e2, t2, n2);
        });
      }
    }
    getKey(e2, t2) {
      let n2 = e2;
      return t2 && (n2 = `${e2}-${n2}`), n2;
    }
    renotify(e2, t2, n2) {
      if (e2 === E$1.TUILogin.EVENT.LOGIN_STATE_CHANGED && t2 === E$1.TUILogin.EVENT_SUB_KEY.USER_LOGIN_SUCCESS) {
        const { chat: e3 } = N.getInstance().getContext();
        e3 && e3.isReady() && (n2.onNotifyEvent(E$1.TUILogin.EVENT.LOGIN_STATE_CHANGED, E$1.TUILogin.EVENT_SUB_KEY.USER_LOGIN_SUCCESS), formatAppLog("log", "at node_modules/@tencentcloud/tui-core/index.js:1", "TUIEventManager.renotify success."));
      }
    }
  };
  let v$1 = class v2 {
    constructor() {
      this.serviceManager = new i$1(), this.extensionManager = new s$1(), this.eventManager = new p$1();
    }
    static getInstance() {
      return v2.instance || (formatAppLog("log", "at node_modules/@tencentcloud/tui-core/index.js:1", "TUICore.getInstance ok."), v2.instance = new v2()), v2.instance;
    }
    registerService(e2, t2) {
      return this.serviceManager.registerService(e2, t2);
    }
    unregisterService(e2) {
      return this.serviceManager.unregisterService(e2);
    }
    getService(e2) {
      return this.serviceManager.getService(e2);
    }
    callService(e2) {
      return this.serviceManager.callService(e2);
    }
    registerExtension(e2, t2) {
      return this.extensionManager.registerExtension(e2, t2);
    }
    unregisterExtension(e2, t2) {
      return this.extensionManager.unregisterExtension(e2, t2);
    }
    getExtensionList(e2, t2) {
      return this.extensionManager.getExtensionList(e2, t2);
    }
    registerEvent(e2, t2, n2) {
      return this.eventManager.registerEvent(e2, t2, n2);
    }
    unregisterEvent(e2, t2, n2) {
      return this.eventManager.unregisterEvent(e2, t2, n2);
    }
    notifyEvent(e2, t2, n2) {
      return this.eventManager.notifyEvent(e2, t2, n2);
    }
  };
  formatAppLog("log", "at node_modules/@tencentcloud/tui-core/index.js:1", "TUICore.VERSION:2.4.0");
  const R = v$1.getInstance();
  N.getInstance(R);
  var lodash = { exports: {} };
  /**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */
  lodash.exports;
  (function(module, exports) {
    (function() {
      var undefined$1;
      var VERSION = "4.17.21";
      var LARGE_ARRAY_SIZE = 200;
      var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var MAX_MEMOIZE_SIZE = 500;
      var PLACEHOLDER = "__lodash_placeholder__";
      var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
      var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
      var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
      var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
      var HOT_COUNT = 800, HOT_SPAN = 16;
      var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
      var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
      var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
      var wrapFlags = [
        ["ary", WRAP_ARY_FLAG],
        ["bind", WRAP_BIND_FLAG],
        ["bindKey", WRAP_BIND_KEY_FLAG],
        ["curry", WRAP_CURRY_FLAG],
        ["curryRight", WRAP_CURRY_RIGHT_FLAG],
        ["flip", WRAP_FLIP_FLAG],
        ["partial", WRAP_PARTIAL_FLAG],
        ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
        ["rearg", WRAP_REARG_FLAG]
      ];
      var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
      var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
      var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
      var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
      var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
      var reTrimStart = /^\s+/;
      var reWhitespace = /\s/;
      var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
      var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
      var reEscapeChar = /\\(\\)?/g;
      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
      var reFlags = /\w*$/;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsOctal = /^0o[0-7]+$/i;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
      var reNoMatch = /($^)/;
      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
      var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
      var rsApos = "['’]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
      var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
      var reApos = RegExp(rsApos, "g");
      var reComboMark = RegExp(rsCombo, "g");
      var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
      var reUnicodeWord = RegExp([
        rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
        rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
        rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
        rsUpper + "+" + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
      ].join("|"), "g");
      var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
      var contextProps = [
        "Array",
        "Buffer",
        "DataView",
        "Date",
        "Error",
        "Float32Array",
        "Float64Array",
        "Function",
        "Int8Array",
        "Int16Array",
        "Int32Array",
        "Map",
        "Math",
        "Object",
        "Promise",
        "RegExp",
        "Set",
        "String",
        "Symbol",
        "TypeError",
        "Uint8Array",
        "Uint8ClampedArray",
        "Uint16Array",
        "Uint32Array",
        "WeakMap",
        "_",
        "clearTimeout",
        "isFinite",
        "parseInt",
        "setTimeout"
      ];
      var templateCounter = -1;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      var cloneableTags = {};
      cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
      cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
      var deburredLetters = {
        // Latin-1 Supplement block.
        "À": "A",
        "Á": "A",
        "Â": "A",
        "Ã": "A",
        "Ä": "A",
        "Å": "A",
        "à": "a",
        "á": "a",
        "â": "a",
        "ã": "a",
        "ä": "a",
        "å": "a",
        "Ç": "C",
        "ç": "c",
        "Ð": "D",
        "ð": "d",
        "È": "E",
        "É": "E",
        "Ê": "E",
        "Ë": "E",
        "è": "e",
        "é": "e",
        "ê": "e",
        "ë": "e",
        "Ì": "I",
        "Í": "I",
        "Î": "I",
        "Ï": "I",
        "ì": "i",
        "í": "i",
        "î": "i",
        "ï": "i",
        "Ñ": "N",
        "ñ": "n",
        "Ò": "O",
        "Ó": "O",
        "Ô": "O",
        "Õ": "O",
        "Ö": "O",
        "Ø": "O",
        "ò": "o",
        "ó": "o",
        "ô": "o",
        "õ": "o",
        "ö": "o",
        "ø": "o",
        "Ù": "U",
        "Ú": "U",
        "Û": "U",
        "Ü": "U",
        "ù": "u",
        "ú": "u",
        "û": "u",
        "ü": "u",
        "Ý": "Y",
        "ý": "y",
        "ÿ": "y",
        "Æ": "Ae",
        "æ": "ae",
        "Þ": "Th",
        "þ": "th",
        "ß": "ss",
        // Latin Extended-A block.
        "Ā": "A",
        "Ă": "A",
        "Ą": "A",
        "ā": "a",
        "ă": "a",
        "ą": "a",
        "Ć": "C",
        "Ĉ": "C",
        "Ċ": "C",
        "Č": "C",
        "ć": "c",
        "ĉ": "c",
        "ċ": "c",
        "č": "c",
        "Ď": "D",
        "Đ": "D",
        "ď": "d",
        "đ": "d",
        "Ē": "E",
        "Ĕ": "E",
        "Ė": "E",
        "Ę": "E",
        "Ě": "E",
        "ē": "e",
        "ĕ": "e",
        "ė": "e",
        "ę": "e",
        "ě": "e",
        "Ĝ": "G",
        "Ğ": "G",
        "Ġ": "G",
        "Ģ": "G",
        "ĝ": "g",
        "ğ": "g",
        "ġ": "g",
        "ģ": "g",
        "Ĥ": "H",
        "Ħ": "H",
        "ĥ": "h",
        "ħ": "h",
        "Ĩ": "I",
        "Ī": "I",
        "Ĭ": "I",
        "Į": "I",
        "İ": "I",
        "ĩ": "i",
        "ī": "i",
        "ĭ": "i",
        "į": "i",
        "ı": "i",
        "Ĵ": "J",
        "ĵ": "j",
        "Ķ": "K",
        "ķ": "k",
        "ĸ": "k",
        "Ĺ": "L",
        "Ļ": "L",
        "Ľ": "L",
        "Ŀ": "L",
        "Ł": "L",
        "ĺ": "l",
        "ļ": "l",
        "ľ": "l",
        "ŀ": "l",
        "ł": "l",
        "Ń": "N",
        "Ņ": "N",
        "Ň": "N",
        "Ŋ": "N",
        "ń": "n",
        "ņ": "n",
        "ň": "n",
        "ŋ": "n",
        "Ō": "O",
        "Ŏ": "O",
        "Ő": "O",
        "ō": "o",
        "ŏ": "o",
        "ő": "o",
        "Ŕ": "R",
        "Ŗ": "R",
        "Ř": "R",
        "ŕ": "r",
        "ŗ": "r",
        "ř": "r",
        "Ś": "S",
        "Ŝ": "S",
        "Ş": "S",
        "Š": "S",
        "ś": "s",
        "ŝ": "s",
        "ş": "s",
        "š": "s",
        "Ţ": "T",
        "Ť": "T",
        "Ŧ": "T",
        "ţ": "t",
        "ť": "t",
        "ŧ": "t",
        "Ũ": "U",
        "Ū": "U",
        "Ŭ": "U",
        "Ů": "U",
        "Ű": "U",
        "Ų": "U",
        "ũ": "u",
        "ū": "u",
        "ŭ": "u",
        "ů": "u",
        "ű": "u",
        "ų": "u",
        "Ŵ": "W",
        "ŵ": "w",
        "Ŷ": "Y",
        "ŷ": "y",
        "Ÿ": "Y",
        "Ź": "Z",
        "Ż": "Z",
        "Ž": "Z",
        "ź": "z",
        "ż": "z",
        "ž": "z",
        "Ĳ": "IJ",
        "ĳ": "ij",
        "Œ": "Oe",
        "œ": "oe",
        "ŉ": "'n",
        "ſ": "s"
      };
      var htmlEscapes = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;"
      };
      var htmlUnescapes = {
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&#39;": "'"
      };
      var stringEscapes = {
        "\\": "\\",
        "'": "'",
        "\n": "n",
        "\r": "r",
        "\u2028": "u2028",
        "\u2029": "u2029"
      };
      var freeParseFloat = parseFloat, freeParseInt = parseInt;
      var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      var freeExports = exports && !exports.nodeType && exports;
      var freeModule = freeExports && true && module && !module.nodeType && module;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          var types = freeModule && freeModule.require && freeModule.require("util").types;
          if (types) {
            return types;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e2) {
        }
      }();
      var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      function apply(func2, thisArg, args) {
        switch (args.length) {
          case 0:
            return func2.call(thisArg);
          case 1:
            return func2.call(thisArg, args[0]);
          case 2:
            return func2.call(thisArg, args[0], args[1]);
          case 3:
            return func2.call(thisArg, args[0], args[1], args[2]);
        }
        return func2.apply(thisArg, args);
      }
      function arrayAggregator(array2, setter, iteratee, accumulator) {
        var index = -1, length2 = array2 == null ? 0 : array2.length;
        while (++index < length2) {
          var value = array2[index];
          setter(accumulator, value, iteratee(value), array2);
        }
        return accumulator;
      }
      function arrayEach(array2, iteratee) {
        var index = -1, length2 = array2 == null ? 0 : array2.length;
        while (++index < length2) {
          if (iteratee(array2[index], index, array2) === false) {
            break;
          }
        }
        return array2;
      }
      function arrayEachRight(array2, iteratee) {
        var length2 = array2 == null ? 0 : array2.length;
        while (length2--) {
          if (iteratee(array2[length2], length2, array2) === false) {
            break;
          }
        }
        return array2;
      }
      function arrayEvery(array2, predicate) {
        var index = -1, length2 = array2 == null ? 0 : array2.length;
        while (++index < length2) {
          if (!predicate(array2[index], index, array2)) {
            return false;
          }
        }
        return true;
      }
      function arrayFilter(array2, predicate) {
        var index = -1, length2 = array2 == null ? 0 : array2.length, resIndex = 0, result = [];
        while (++index < length2) {
          var value = array2[index];
          if (predicate(value, index, array2)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      function arrayIncludes(array2, value) {
        var length2 = array2 == null ? 0 : array2.length;
        return !!length2 && baseIndexOf(array2, value, 0) > -1;
      }
      function arrayIncludesWith(array2, value, comparator) {
        var index = -1, length2 = array2 == null ? 0 : array2.length;
        while (++index < length2) {
          if (comparator(value, array2[index])) {
            return true;
          }
        }
        return false;
      }
      function arrayMap(array2, iteratee) {
        var index = -1, length2 = array2 == null ? 0 : array2.length, result = Array(length2);
        while (++index < length2) {
          result[index] = iteratee(array2[index], index, array2);
        }
        return result;
      }
      function arrayPush(array2, values) {
        var index = -1, length2 = values.length, offset = array2.length;
        while (++index < length2) {
          array2[offset + index] = values[index];
        }
        return array2;
      }
      function arrayReduce(array2, iteratee, accumulator, initAccum) {
        var index = -1, length2 = array2 == null ? 0 : array2.length;
        if (initAccum && length2) {
          accumulator = array2[++index];
        }
        while (++index < length2) {
          accumulator = iteratee(accumulator, array2[index], index, array2);
        }
        return accumulator;
      }
      function arrayReduceRight(array2, iteratee, accumulator, initAccum) {
        var length2 = array2 == null ? 0 : array2.length;
        if (initAccum && length2) {
          accumulator = array2[--length2];
        }
        while (length2--) {
          accumulator = iteratee(accumulator, array2[length2], length2, array2);
        }
        return accumulator;
      }
      function arraySome(array2, predicate) {
        var index = -1, length2 = array2 == null ? 0 : array2.length;
        while (++index < length2) {
          if (predicate(array2[index], index, array2)) {
            return true;
          }
        }
        return false;
      }
      var asciiSize = baseProperty("length");
      function asciiToArray(string2) {
        return string2.split("");
      }
      function asciiWords(string2) {
        return string2.match(reAsciiWord) || [];
      }
      function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function(value, key, collection2) {
          if (predicate(value, key, collection2)) {
            result = key;
            return false;
          }
        });
        return result;
      }
      function baseFindIndex(array2, predicate, fromIndex, fromRight) {
        var length2 = array2.length, index = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index-- : ++index < length2) {
          if (predicate(array2[index], index, array2)) {
            return index;
          }
        }
        return -1;
      }
      function baseIndexOf(array2, value, fromIndex) {
        return value === value ? strictIndexOf(array2, value, fromIndex) : baseFindIndex(array2, baseIsNaN, fromIndex);
      }
      function baseIndexOfWith(array2, value, fromIndex, comparator) {
        var index = fromIndex - 1, length2 = array2.length;
        while (++index < length2) {
          if (comparator(array2[index], value)) {
            return index;
          }
        }
        return -1;
      }
      function baseIsNaN(value) {
        return value !== value;
      }
      function baseMean(array2, iteratee) {
        var length2 = array2 == null ? 0 : array2.length;
        return length2 ? baseSum(array2, iteratee) / length2 : NAN;
      }
      function baseProperty(key) {
        return function(object2) {
          return object2 == null ? undefined$1 : object2[key];
        };
      }
      function basePropertyOf(object2) {
        return function(key) {
          return object2 == null ? undefined$1 : object2[key];
        };
      }
      function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function(value, index, collection2) {
          accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
        });
        return accumulator;
      }
      function baseSortBy(array2, comparer) {
        var length2 = array2.length;
        array2.sort(comparer);
        while (length2--) {
          array2[length2] = array2[length2].value;
        }
        return array2;
      }
      function baseSum(array2, iteratee) {
        var result, index = -1, length2 = array2.length;
        while (++index < length2) {
          var current = iteratee(array2[index]);
          if (current !== undefined$1) {
            result = result === undefined$1 ? current : result + current;
          }
        }
        return result;
      }
      function baseTimes(n2, iteratee) {
        var index = -1, result = Array(n2);
        while (++index < n2) {
          result[index] = iteratee(index);
        }
        return result;
      }
      function baseToPairs(object2, props) {
        return arrayMap(props, function(key) {
          return [key, object2[key]];
        });
      }
      function baseTrim(string2) {
        return string2 ? string2.slice(0, trimmedEndIndex(string2) + 1).replace(reTrimStart, "") : string2;
      }
      function baseUnary(func2) {
        return function(value) {
          return func2(value);
        };
      }
      function baseValues(object2, props) {
        return arrayMap(props, function(key) {
          return object2[key];
        });
      }
      function cacheHas(cache, key) {
        return cache.has(key);
      }
      function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1, length2 = strSymbols.length;
        while (++index < length2 && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;
        while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function countHolders(array2, placeholder) {
        var length2 = array2.length, result = 0;
        while (length2--) {
          if (array2[length2] === placeholder) {
            ++result;
          }
        }
        return result;
      }
      var deburrLetter = basePropertyOf(deburredLetters);
      var escapeHtmlChar = basePropertyOf(htmlEscapes);
      function escapeStringChar(chr) {
        return "\\" + stringEscapes[chr];
      }
      function getValue(object2, key) {
        return object2 == null ? undefined$1 : object2[key];
      }
      function hasUnicode(string2) {
        return reHasUnicode.test(string2);
      }
      function hasUnicodeWord(string2) {
        return reHasUnicodeWord.test(string2);
      }
      function iteratorToArray(iterator) {
        var data, result = [];
        while (!(data = iterator.next()).done) {
          result.push(data.value);
        }
        return result;
      }
      function mapToArray(map) {
        var index = -1, result = Array(map.size);
        map.forEach(function(value, key) {
          result[++index] = [key, value];
        });
        return result;
      }
      function overArg(func2, transform) {
        return function(arg) {
          return func2(transform(arg));
        };
      }
      function replaceHolders(array2, placeholder) {
        var index = -1, length2 = array2.length, resIndex = 0, result = [];
        while (++index < length2) {
          var value = array2[index];
          if (value === placeholder || value === PLACEHOLDER) {
            array2[index] = PLACEHOLDER;
            result[resIndex++] = index;
          }
        }
        return result;
      }
      function setToArray(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = value;
        });
        return result;
      }
      function setToPairs(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = [value, value];
        });
        return result;
      }
      function strictIndexOf(array2, value, fromIndex) {
        var index = fromIndex - 1, length2 = array2.length;
        while (++index < length2) {
          if (array2[index] === value) {
            return index;
          }
        }
        return -1;
      }
      function strictLastIndexOf(array2, value, fromIndex) {
        var index = fromIndex + 1;
        while (index--) {
          if (array2[index] === value) {
            return index;
          }
        }
        return index;
      }
      function stringSize(string2) {
        return hasUnicode(string2) ? unicodeSize(string2) : asciiSize(string2);
      }
      function stringToArray(string2) {
        return hasUnicode(string2) ? unicodeToArray(string2) : asciiToArray(string2);
      }
      function trimmedEndIndex(string2) {
        var index = string2.length;
        while (index-- && reWhitespace.test(string2.charAt(index))) {
        }
        return index;
      }
      var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
      function unicodeSize(string2) {
        var result = reUnicode.lastIndex = 0;
        while (reUnicode.test(string2)) {
          ++result;
        }
        return result;
      }
      function unicodeToArray(string2) {
        return string2.match(reUnicode) || [];
      }
      function unicodeWords(string2) {
        return string2.match(reUnicodeWord) || [];
      }
      var runInContext = function runInContext2(context) {
        context = context == null ? root : _2.defaults(root.Object(), context, _2.pick(root, contextProps));
        var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
        var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
        var coreJsData = context["__core-js_shared__"];
        var funcToString = funcProto.toString;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var idCounter = 0;
        var maskSrcKey = function() {
          var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
          return uid ? "Symbol(src)_1." + uid : "";
        }();
        var nativeObjectToString = objectProto.toString;
        var objectCtorString = funcToString.call(Object2);
        var oldDash = root._;
        var reIsNative = RegExp2(
          "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
        );
        var Buffer2 = moduleExports ? context.Buffer : undefined$1, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined$1, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined$1, symIterator = Symbol2 ? Symbol2.iterator : undefined$1, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined$1;
        var defineProperty = function() {
          try {
            var func2 = getNative(Object2, "defineProperty");
            func2({}, "", {});
            return func2;
          } catch (e2) {
          }
        }();
        var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
        var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined$1, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
        var DataView = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap2 = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
        var metaMap = WeakMap2 && new WeakMap2();
        var realNames = {};
        var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
        var symbolProto = Symbol2 ? Symbol2.prototype : undefined$1, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1, symbolToString = symbolProto ? symbolProto.toString : undefined$1;
        function lodash2(value) {
          if (isObjectLike(value) && !isArray2(value) && !(value instanceof LazyWrapper)) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty.call(value, "__wrapped__")) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }
        var baseCreate = /* @__PURE__ */ function() {
          function object2() {
          }
          return function(proto) {
            if (!isObject2(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object2.prototype = proto;
            var result2 = new object2();
            object2.prototype = undefined$1;
            return result2;
          };
        }();
        function baseLodash() {
        }
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined$1;
        }
        lodash2.templateSettings = {
          /**
           * Used to detect `data` property values to be HTML-escaped.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "escape": reEscape,
          /**
           * Used to detect code to be evaluated.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "evaluate": reEvaluate,
          /**
           * Used to detect `data` property values to inject.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "interpolate": reInterpolate,
          /**
           * Used to reference the data object in the template text.
           *
           * @memberOf _.templateSettings
           * @type {string}
           */
          "variable": "",
          /**
           * Used to import variables into the compiled template.
           *
           * @memberOf _.templateSettings
           * @type {Object}
           */
          "imports": {
            /**
             * A reference to the `lodash` function.
             *
             * @memberOf _.templateSettings.imports
             * @type {Function}
             */
            "_": lodash2
          }
        };
        lodash2.prototype = baseLodash.prototype;
        lodash2.prototype.constructor = lodash2;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }
        function lazyClone() {
          var result2 = new LazyWrapper(this.__wrapped__);
          result2.__actions__ = copyArray(this.__actions__);
          result2.__dir__ = this.__dir__;
          result2.__filtered__ = this.__filtered__;
          result2.__iteratees__ = copyArray(this.__iteratees__);
          result2.__takeCount__ = this.__takeCount__;
          result2.__views__ = copyArray(this.__views__);
          return result2;
        }
        function lazyReverse() {
          if (this.__filtered__) {
            var result2 = new LazyWrapper(this);
            result2.__dir__ = -1;
            result2.__filtered__ = true;
          } else {
            result2 = this.clone();
            result2.__dir__ *= -1;
          }
          return result2;
        }
        function lazyValue() {
          var array2 = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray2(array2), isRight = dir < 0, arrLength = isArr ? array2.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length2 = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length2, this.__takeCount__);
          if (!isArr || !isRight && arrLength == length2 && takeCount == length2) {
            return baseWrapperValue(array2, this.__actions__);
          }
          var result2 = [];
          outer:
            while (length2-- && resIndex < takeCount) {
              index += dir;
              var iterIndex = -1, value = array2[index];
              while (++iterIndex < iterLength) {
                var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed2 = iteratee2(value);
                if (type == LAZY_MAP_FLAG) {
                  value = computed2;
                } else if (!computed2) {
                  if (type == LAZY_FILTER_FLAG) {
                    continue outer;
                  } else {
                    break outer;
                  }
                }
              }
              result2[resIndex++] = value;
            }
          return result2;
        }
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        function Hash(entries) {
          var index = -1, length2 = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length2) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }
        function hashDelete(key) {
          var result2 = this.has(key) && delete this.__data__[key];
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate) {
            var result2 = data[key];
            return result2 === HASH_UNDEFINED ? undefined$1 : result2;
          }
          return hasOwnProperty.call(data, key) ? data[key] : undefined$1;
        }
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate ? data[key] !== undefined$1 : hasOwnProperty.call(data, key);
        }
        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] = nativeCreate && value === undefined$1 ? HASH_UNDEFINED : value;
          return this;
        }
        Hash.prototype.clear = hashClear;
        Hash.prototype["delete"] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        function ListCache(entries) {
          var index = -1, length2 = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length2) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }
        function listCacheDelete(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index, 1);
          }
          --this.size;
          return true;
        }
        function listCacheGet(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          return index < 0 ? undefined$1 : data[index][1];
        }
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }
        function listCacheSet(key, value) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index][1] = value;
          }
          return this;
        }
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype["delete"] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        function MapCache(entries) {
          var index = -1, length2 = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length2) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            "hash": new Hash(),
            "map": new (Map2 || ListCache)(),
            "string": new Hash()
          };
        }
        function mapCacheDelete(key) {
          var result2 = getMapData(this, key)["delete"](key);
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }
        function mapCacheSet(key, value) {
          var data = getMapData(this, key), size2 = data.size;
          data.set(key, value);
          this.size += data.size == size2 ? 0 : 1;
          return this;
        }
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype["delete"] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        function SetCache(values2) {
          var index = -1, length2 = values2 == null ? 0 : values2.length;
          this.__data__ = new MapCache();
          while (++index < length2) {
            this.add(values2[index]);
          }
        }
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }
        function setCacheHas(value) {
          return this.__data__.has(value);
        }
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        function Stack(entries) {
          var data = this.__data__ = new ListCache(entries);
          this.size = data.size;
        }
        function stackClear() {
          this.__data__ = new ListCache();
          this.size = 0;
        }
        function stackDelete(key) {
          var data = this.__data__, result2 = data["delete"](key);
          this.size = data.size;
          return result2;
        }
        function stackGet(key) {
          return this.__data__.get(key);
        }
        function stackHas(key) {
          return this.__data__.has(key);
        }
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs = data.__data__;
            if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }
        Stack.prototype.clear = stackClear;
        Stack.prototype["delete"] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray2(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length2 = result2.length;
          for (var key in value) {
            if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
            (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
            isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
            isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
            isIndex(key, length2)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function arraySample(array2) {
          var length2 = array2.length;
          return length2 ? array2[baseRandom(0, length2 - 1)] : undefined$1;
        }
        function arraySampleSize(array2, n2) {
          return shuffleSelf(copyArray(array2), baseClamp(n2, 0, array2.length));
        }
        function arrayShuffle(array2) {
          return shuffleSelf(copyArray(array2));
        }
        function assignMergeValue(object2, key, value) {
          if (value !== undefined$1 && !eq(object2[key], value) || value === undefined$1 && !(key in object2)) {
            baseAssignValue(object2, key, value);
          }
        }
        function assignValue(object2, key, value) {
          var objValue = object2[key];
          if (!(hasOwnProperty.call(object2, key) && eq(objValue, value)) || value === undefined$1 && !(key in object2)) {
            baseAssignValue(object2, key, value);
          }
        }
        function assocIndexOf(array2, key) {
          var length2 = array2.length;
          while (length2--) {
            if (eq(array2[length2][0], key)) {
              return length2;
            }
          }
          return -1;
        }
        function baseAggregator(collection, setter, iteratee2, accumulator) {
          baseEach(collection, function(value, key, collection2) {
            setter(accumulator, value, iteratee2(value), collection2);
          });
          return accumulator;
        }
        function baseAssign(object2, source) {
          return object2 && copyObject(source, keys(source), object2);
        }
        function baseAssignIn(object2, source) {
          return object2 && copyObject(source, keysIn(source), object2);
        }
        function baseAssignValue(object2, key, value) {
          if (key == "__proto__" && defineProperty) {
            defineProperty(object2, key, {
              "configurable": true,
              "enumerable": true,
              "value": value,
              "writable": true
            });
          } else {
            object2[key] = value;
          }
        }
        function baseAt(object2, paths) {
          var index = -1, length2 = paths.length, result2 = Array2(length2), skip = object2 == null;
          while (++index < length2) {
            result2[index] = skip ? undefined$1 : get(object2, paths[index]);
          }
          return result2;
        }
        function baseClamp(number2, lower, upper) {
          if (number2 === number2) {
            if (upper !== undefined$1) {
              number2 = number2 <= upper ? number2 : upper;
            }
            if (lower !== undefined$1) {
              number2 = number2 >= lower ? number2 : lower;
            }
          }
          return number2;
        }
        function baseClone(value, bitmask, customizer, key, object2, stack) {
          var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
          if (customizer) {
            result2 = object2 ? customizer(value, key, object2, stack) : customizer(value);
          }
          if (result2 !== undefined$1) {
            return result2;
          }
          if (!isObject2(value)) {
            return value;
          }
          var isArr = isArray2(value);
          if (isArr) {
            result2 = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result2);
            }
          } else {
            var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || isFunc && !object2) {
              result2 = isFlat || isFunc ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object2 ? value : {};
              }
              result2 = initCloneByTag(value, tag, isDeep);
            }
          }
          stack || (stack = new Stack());
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result2);
          if (isSet(value)) {
            value.forEach(function(subValue) {
              result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
          } else if (isMap(value)) {
            value.forEach(function(subValue, key2) {
              result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
          }
          var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
          var props = isArr ? undefined$1 : keysFunc(value);
          arrayEach(props || value, function(subValue, key2) {
            if (props) {
              key2 = subValue;
              subValue = value[key2];
            }
            assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
          });
          return result2;
        }
        function baseConforms(source) {
          var props = keys(source);
          return function(object2) {
            return baseConformsTo(object2, source, props);
          };
        }
        function baseConformsTo(object2, source, props) {
          var length2 = props.length;
          if (object2 == null) {
            return !length2;
          }
          object2 = Object2(object2);
          while (length2--) {
            var key = props[length2], predicate = source[key], value = object2[key];
            if (value === undefined$1 && !(key in object2) || !predicate(value)) {
              return false;
            }
          }
          return true;
        }
        function baseDelay(func2, wait, args) {
          if (typeof func2 != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return setTimeout2(function() {
            func2.apply(undefined$1, args);
          }, wait);
        }
        function baseDifference(array2, values2, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, isCommon = true, length2 = array2.length, result2 = [], valuesLength = values2.length;
          if (!length2) {
            return result2;
          }
          if (iteratee2) {
            values2 = arrayMap(values2, baseUnary(iteratee2));
          }
          if (comparator) {
            includes2 = arrayIncludesWith;
            isCommon = false;
          } else if (values2.length >= LARGE_ARRAY_SIZE) {
            includes2 = cacheHas;
            isCommon = false;
            values2 = new SetCache(values2);
          }
          outer:
            while (++index < length2) {
              var value = array2[index], computed2 = iteratee2 == null ? value : iteratee2(value);
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed2 === computed2) {
                var valuesIndex = valuesLength;
                while (valuesIndex--) {
                  if (values2[valuesIndex] === computed2) {
                    continue outer;
                  }
                }
                result2.push(value);
              } else if (!includes2(values2, computed2, comparator)) {
                result2.push(value);
              }
            }
          return result2;
        }
        var baseEach = createBaseEach(baseForOwn);
        var baseEachRight = createBaseEach(baseForOwnRight, true);
        function baseEvery(collection, predicate) {
          var result2 = true;
          baseEach(collection, function(value, index, collection2) {
            result2 = !!predicate(value, index, collection2);
            return result2;
          });
          return result2;
        }
        function baseExtremum(array2, iteratee2, comparator) {
          var index = -1, length2 = array2.length;
          while (++index < length2) {
            var value = array2[index], current = iteratee2(value);
            if (current != null && (computed2 === undefined$1 ? current === current && !isSymbol(current) : comparator(current, computed2))) {
              var computed2 = current, result2 = value;
            }
          }
          return result2;
        }
        function baseFill(array2, value, start, end) {
          var length2 = array2.length;
          start = toInteger(start);
          if (start < 0) {
            start = -start > length2 ? 0 : length2 + start;
          }
          end = end === undefined$1 || end > length2 ? length2 : toInteger(end);
          if (end < 0) {
            end += length2;
          }
          end = start > end ? 0 : toLength(end);
          while (start < end) {
            array2[start++] = value;
          }
          return array2;
        }
        function baseFilter(collection, predicate) {
          var result2 = [];
          baseEach(collection, function(value, index, collection2) {
            if (predicate(value, index, collection2)) {
              result2.push(value);
            }
          });
          return result2;
        }
        function baseFlatten(array2, depth, predicate, isStrict, result2) {
          var index = -1, length2 = array2.length;
          predicate || (predicate = isFlattenable);
          result2 || (result2 = []);
          while (++index < length2) {
            var value = array2[index];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                baseFlatten(value, depth - 1, predicate, isStrict, result2);
              } else {
                arrayPush(result2, value);
              }
            } else if (!isStrict) {
              result2[result2.length] = value;
            }
          }
          return result2;
        }
        var baseFor = createBaseFor();
        var baseForRight = createBaseFor(true);
        function baseForOwn(object2, iteratee2) {
          return object2 && baseFor(object2, iteratee2, keys);
        }
        function baseForOwnRight(object2, iteratee2) {
          return object2 && baseForRight(object2, iteratee2, keys);
        }
        function baseFunctions(object2, props) {
          return arrayFilter(props, function(key) {
            return isFunction(object2[key]);
          });
        }
        function baseGet(object2, path) {
          path = castPath(path, object2);
          var index = 0, length2 = path.length;
          while (object2 != null && index < length2) {
            object2 = object2[toKey(path[index++])];
          }
          return index && index == length2 ? object2 : undefined$1;
        }
        function baseGetAllKeys(object2, keysFunc, symbolsFunc) {
          var result2 = keysFunc(object2);
          return isArray2(object2) ? result2 : arrayPush(result2, symbolsFunc(object2));
        }
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined$1 ? undefinedTag : nullTag;
          }
          return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
        }
        function baseGt(value, other) {
          return value > other;
        }
        function baseHas(object2, key) {
          return object2 != null && hasOwnProperty.call(object2, key);
        }
        function baseHasIn(object2, key) {
          return object2 != null && key in Object2(object2);
        }
        function baseInRange(number2, start, end) {
          return number2 >= nativeMin(start, end) && number2 < nativeMax(start, end);
        }
        function baseIntersection(arrays, iteratee2, comparator) {
          var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length2 = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
          while (othIndex--) {
            var array2 = arrays[othIndex];
            if (othIndex && iteratee2) {
              array2 = arrayMap(array2, baseUnary(iteratee2));
            }
            maxLength = nativeMin(array2.length, maxLength);
            caches[othIndex] = !comparator && (iteratee2 || length2 >= 120 && array2.length >= 120) ? new SetCache(othIndex && array2) : undefined$1;
          }
          array2 = arrays[0];
          var index = -1, seen = caches[0];
          outer:
            while (++index < length2 && result2.length < maxLength) {
              var value = array2[index], computed2 = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (!(seen ? cacheHas(seen, computed2) : includes2(result2, computed2, comparator))) {
                othIndex = othLength;
                while (--othIndex) {
                  var cache = caches[othIndex];
                  if (!(cache ? cacheHas(cache, computed2) : includes2(arrays[othIndex], computed2, comparator))) {
                    continue outer;
                  }
                }
                if (seen) {
                  seen.push(computed2);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseInverter(object2, setter, iteratee2, accumulator) {
          baseForOwn(object2, function(value, key, object3) {
            setter(accumulator, iteratee2(value), key, object3);
          });
          return accumulator;
        }
        function baseInvoke(object2, path, args) {
          path = castPath(path, object2);
          object2 = parent(object2, path);
          var func2 = object2 == null ? object2 : object2[toKey(last(path))];
          return func2 == null ? undefined$1 : apply(func2, object2, args);
        }
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        function baseIsArrayBuffer(value) {
          return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
        function baseIsDate(value) {
          return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
        function baseIsEqualDeep(object2, other, bitmask, customizer, equalFunc, stack) {
          var objIsArr = isArray2(object2), othIsArr = isArray2(other), objTag = objIsArr ? arrayTag : getTag(object2), othTag = othIsArr ? arrayTag : getTag(other);
          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;
          var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
          if (isSameTag && isBuffer(object2)) {
            if (!isBuffer(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack());
            return objIsArr || isTypedArray(object2) ? equalArrays(object2, other, bitmask, customizer, equalFunc, stack) : equalByTag(object2, other, objTag, bitmask, customizer, equalFunc, stack);
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty.call(object2, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object2.value() : object2, othUnwrapped = othIsWrapped ? other.value() : other;
              stack || (stack = new Stack());
              return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack());
          return equalObjects(object2, other, bitmask, customizer, equalFunc, stack);
        }
        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }
        function baseIsMatch(object2, source, matchData, customizer) {
          var index = matchData.length, length2 = index, noCustomizer = !customizer;
          if (object2 == null) {
            return !length2;
          }
          object2 = Object2(object2);
          while (index--) {
            var data = matchData[index];
            if (noCustomizer && data[2] ? data[1] !== object2[data[0]] : !(data[0] in object2)) {
              return false;
            }
          }
          while (++index < length2) {
            data = matchData[index];
            var key = data[0], objValue = object2[key], srcValue = data[1];
            if (noCustomizer && data[2]) {
              if (objValue === undefined$1 && !(key in object2)) {
                return false;
              }
            } else {
              var stack = new Stack();
              if (customizer) {
                var result2 = customizer(objValue, srcValue, key, object2, source, stack);
              }
              if (!(result2 === undefined$1 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                return false;
              }
            }
          }
          return true;
        }
        function baseIsNative(value) {
          if (!isObject2(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }
        function baseIsRegExp(value) {
          return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }
        function baseIsTypedArray(value) {
          return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        function baseIteratee(value) {
          if (typeof value == "function") {
            return value;
          }
          if (value == null) {
            return identity;
          }
          if (typeof value == "object") {
            return isArray2(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
          }
          return property(value);
        }
        function baseKeys(object2) {
          if (!isPrototype(object2)) {
            return nativeKeys(object2);
          }
          var result2 = [];
          for (var key in Object2(object2)) {
            if (hasOwnProperty.call(object2, key) && key != "constructor") {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseKeysIn(object2) {
          if (!isObject2(object2)) {
            return nativeKeysIn(object2);
          }
          var isProto = isPrototype(object2), result2 = [];
          for (var key in object2) {
            if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object2, key)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseLt(value, other) {
          return value < other;
        }
        function baseMap(collection, iteratee2) {
          var index = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value, key, collection2) {
            result2[++index] = iteratee2(value, key, collection2);
          });
          return result2;
        }
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function(object2) {
            return object2 === source || baseIsMatch(object2, source, matchData);
          };
        }
        function baseMatchesProperty(path, srcValue) {
          if (isKey(path) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path), srcValue);
          }
          return function(object2) {
            var objValue = get(object2, path);
            return objValue === undefined$1 && objValue === srcValue ? hasIn(object2, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
          };
        }
        function baseMerge(object2, source, srcIndex, customizer, stack) {
          if (object2 === source) {
            return;
          }
          baseFor(source, function(srcValue, key) {
            stack || (stack = new Stack());
            if (isObject2(srcValue)) {
              baseMergeDeep(object2, source, key, srcIndex, baseMerge, customizer, stack);
            } else {
              var newValue = customizer ? customizer(safeGet(object2, key), srcValue, key + "", object2, source, stack) : undefined$1;
              if (newValue === undefined$1) {
                newValue = srcValue;
              }
              assignMergeValue(object2, key, newValue);
            }
          }, keysIn);
        }
        function baseMergeDeep(object2, source, key, srcIndex, mergeFunc, customizer, stack) {
          var objValue = safeGet(object2, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
          if (stacked) {
            assignMergeValue(object2, key, stacked);
            return;
          }
          var newValue = customizer ? customizer(objValue, srcValue, key + "", object2, source, stack) : undefined$1;
          var isCommon = newValue === undefined$1;
          if (isCommon) {
            var isArr = isArray2(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray2(objValue)) {
                newValue = objValue;
              } else if (isArrayLikeObject(objValue)) {
                newValue = copyArray(objValue);
              } else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              } else {
                newValue = [];
              }
            } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
              newValue = objValue;
              if (isArguments(objValue)) {
                newValue = toPlainObject(objValue);
              } else if (!isObject2(objValue) || isFunction(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            } else {
              isCommon = false;
            }
          }
          if (isCommon) {
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack["delete"](srcValue);
          }
          assignMergeValue(object2, key, newValue);
        }
        function baseNth(array2, n2) {
          var length2 = array2.length;
          if (!length2) {
            return;
          }
          n2 += n2 < 0 ? length2 : 0;
          return isIndex(n2, length2) ? array2[n2] : undefined$1;
        }
        function baseOrderBy(collection, iteratees, orders) {
          if (iteratees.length) {
            iteratees = arrayMap(iteratees, function(iteratee2) {
              if (isArray2(iteratee2)) {
                return function(value) {
                  return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                };
              }
              return iteratee2;
            });
          } else {
            iteratees = [identity];
          }
          var index = -1;
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          var result2 = baseMap(collection, function(value, key, collection2) {
            var criteria = arrayMap(iteratees, function(iteratee2) {
              return iteratee2(value);
            });
            return { "criteria": criteria, "index": ++index, "value": value };
          });
          return baseSortBy(result2, function(object2, other) {
            return compareMultiple(object2, other, orders);
          });
        }
        function basePick(object2, paths) {
          return basePickBy(object2, paths, function(value, path) {
            return hasIn(object2, path);
          });
        }
        function basePickBy(object2, paths, predicate) {
          var index = -1, length2 = paths.length, result2 = {};
          while (++index < length2) {
            var path = paths[index], value = baseGet(object2, path);
            if (predicate(value, path)) {
              baseSet(result2, castPath(path, object2), value);
            }
          }
          return result2;
        }
        function basePropertyDeep(path) {
          return function(object2) {
            return baseGet(object2, path);
          };
        }
        function basePullAll(array2, values2, iteratee2, comparator) {
          var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length2 = values2.length, seen = array2;
          if (array2 === values2) {
            values2 = copyArray(values2);
          }
          if (iteratee2) {
            seen = arrayMap(array2, baseUnary(iteratee2));
          }
          while (++index < length2) {
            var fromIndex = 0, value = values2[index], computed2 = iteratee2 ? iteratee2(value) : value;
            while ((fromIndex = indexOf2(seen, computed2, fromIndex, comparator)) > -1) {
              if (seen !== array2) {
                splice.call(seen, fromIndex, 1);
              }
              splice.call(array2, fromIndex, 1);
            }
          }
          return array2;
        }
        function basePullAt(array2, indexes) {
          var length2 = array2 ? indexes.length : 0, lastIndex = length2 - 1;
          while (length2--) {
            var index = indexes[length2];
            if (length2 == lastIndex || index !== previous) {
              var previous = index;
              if (isIndex(index)) {
                splice.call(array2, index, 1);
              } else {
                baseUnset(array2, index);
              }
            }
          }
          return array2;
        }
        function baseRandom(lower, upper) {
          return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        function baseRange(start, end, step, fromRight) {
          var index = -1, length2 = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result2 = Array2(length2);
          while (length2--) {
            result2[fromRight ? length2 : ++index] = start;
            start += step;
          }
          return result2;
        }
        function baseRepeat(string2, n2) {
          var result2 = "";
          if (!string2 || n2 < 1 || n2 > MAX_SAFE_INTEGER) {
            return result2;
          }
          do {
            if (n2 % 2) {
              result2 += string2;
            }
            n2 = nativeFloor(n2 / 2);
            if (n2) {
              string2 += string2;
            }
          } while (n2);
          return result2;
        }
        function baseRest(func2, start) {
          return setToString(overRest(func2, start, identity), func2 + "");
        }
        function baseSample(collection) {
          return arraySample(values(collection));
        }
        function baseSampleSize(collection, n2) {
          var array2 = values(collection);
          return shuffleSelf(array2, baseClamp(n2, 0, array2.length));
        }
        function baseSet(object2, path, value, customizer) {
          if (!isObject2(object2)) {
            return object2;
          }
          path = castPath(path, object2);
          var index = -1, length2 = path.length, lastIndex = length2 - 1, nested = object2;
          while (nested != null && ++index < length2) {
            var key = toKey(path[index]), newValue = value;
            if (key === "__proto__" || key === "constructor" || key === "prototype") {
              return object2;
            }
            if (index != lastIndex) {
              var objValue = nested[key];
              newValue = customizer ? customizer(objValue, key, nested) : undefined$1;
              if (newValue === undefined$1) {
                newValue = isObject2(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
              }
            }
            assignValue(nested, key, newValue);
            nested = nested[key];
          }
          return object2;
        }
        var baseSetData = !metaMap ? identity : function(func2, data) {
          metaMap.set(func2, data);
          return func2;
        };
        var baseSetToString = !defineProperty ? identity : function(func2, string2) {
          return defineProperty(func2, "toString", {
            "configurable": true,
            "enumerable": false,
            "value": constant(string2),
            "writable": true
          });
        };
        function baseShuffle(collection) {
          return shuffleSelf(values(collection));
        }
        function baseSlice(array2, start, end) {
          var index = -1, length2 = array2.length;
          if (start < 0) {
            start = -start > length2 ? 0 : length2 + start;
          }
          end = end > length2 ? length2 : end;
          if (end < 0) {
            end += length2;
          }
          length2 = start > end ? 0 : end - start >>> 0;
          start >>>= 0;
          var result2 = Array2(length2);
          while (++index < length2) {
            result2[index] = array2[index + start];
          }
          return result2;
        }
        function baseSome(collection, predicate) {
          var result2;
          baseEach(collection, function(value, index, collection2) {
            result2 = predicate(value, index, collection2);
            return !result2;
          });
          return !!result2;
        }
        function baseSortedIndex(array2, value, retHighest) {
          var low = 0, high = array2 == null ? low : array2.length;
          if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
            while (low < high) {
              var mid = low + high >>> 1, computed2 = array2[mid];
              if (computed2 !== null && !isSymbol(computed2) && (retHighest ? computed2 <= value : computed2 < value)) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return baseSortedIndexBy(array2, value, identity, retHighest);
        }
        function baseSortedIndexBy(array2, value, iteratee2, retHighest) {
          var low = 0, high = array2 == null ? 0 : array2.length;
          if (high === 0) {
            return 0;
          }
          value = iteratee2(value);
          var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined$1;
          while (low < high) {
            var mid = nativeFloor((low + high) / 2), computed2 = iteratee2(array2[mid]), othIsDefined = computed2 !== undefined$1, othIsNull = computed2 === null, othIsReflexive = computed2 === computed2, othIsSymbol = isSymbol(computed2);
            if (valIsNaN) {
              var setLow = retHighest || othIsReflexive;
            } else if (valIsUndefined) {
              setLow = othIsReflexive && (retHighest || othIsDefined);
            } else if (valIsNull) {
              setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
            } else if (valIsSymbol) {
              setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
            } else if (othIsNull || othIsSymbol) {
              setLow = false;
            } else {
              setLow = retHighest ? computed2 <= value : computed2 < value;
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin(high, MAX_ARRAY_INDEX);
        }
        function baseSortedUniq(array2, iteratee2) {
          var index = -1, length2 = array2.length, resIndex = 0, result2 = [];
          while (++index < length2) {
            var value = array2[index], computed2 = iteratee2 ? iteratee2(value) : value;
            if (!index || !eq(computed2, seen)) {
              var seen = computed2;
              result2[resIndex++] = value === 0 ? 0 : value;
            }
          }
          return result2;
        }
        function baseToNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          return +value;
        }
        function baseToString(value) {
          if (typeof value == "string") {
            return value;
          }
          if (isArray2(value)) {
            return arrayMap(value, baseToString) + "";
          }
          if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : "";
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function baseUniq(array2, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, length2 = array2.length, isCommon = true, result2 = [], seen = result2;
          if (comparator) {
            isCommon = false;
            includes2 = arrayIncludesWith;
          } else if (length2 >= LARGE_ARRAY_SIZE) {
            var set2 = iteratee2 ? null : createSet(array2);
            if (set2) {
              return setToArray(set2);
            }
            isCommon = false;
            includes2 = cacheHas;
            seen = new SetCache();
          } else {
            seen = iteratee2 ? [] : result2;
          }
          outer:
            while (++index < length2) {
              var value = array2[index], computed2 = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed2 === computed2) {
                var seenIndex = seen.length;
                while (seenIndex--) {
                  if (seen[seenIndex] === computed2) {
                    continue outer;
                  }
                }
                if (iteratee2) {
                  seen.push(computed2);
                }
                result2.push(value);
              } else if (!includes2(seen, computed2, comparator)) {
                if (seen !== result2) {
                  seen.push(computed2);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseUnset(object2, path) {
          path = castPath(path, object2);
          object2 = parent(object2, path);
          return object2 == null || delete object2[toKey(last(path))];
        }
        function baseUpdate(object2, path, updater, customizer) {
          return baseSet(object2, path, updater(baseGet(object2, path)), customizer);
        }
        function baseWhile(array2, predicate, isDrop, fromRight) {
          var length2 = array2.length, index = fromRight ? length2 : -1;
          while ((fromRight ? index-- : ++index < length2) && predicate(array2[index], index, array2)) {
          }
          return isDrop ? baseSlice(array2, fromRight ? 0 : index, fromRight ? index + 1 : length2) : baseSlice(array2, fromRight ? index + 1 : 0, fromRight ? length2 : index);
        }
        function baseWrapperValue(value, actions) {
          var result2 = value;
          if (result2 instanceof LazyWrapper) {
            result2 = result2.value();
          }
          return arrayReduce(actions, function(result3, action) {
            return action.func.apply(action.thisArg, arrayPush([result3], action.args));
          }, result2);
        }
        function baseXor(arrays, iteratee2, comparator) {
          var length2 = arrays.length;
          if (length2 < 2) {
            return length2 ? baseUniq(arrays[0]) : [];
          }
          var index = -1, result2 = Array2(length2);
          while (++index < length2) {
            var array2 = arrays[index], othIndex = -1;
            while (++othIndex < length2) {
              if (othIndex != index) {
                result2[index] = baseDifference(result2[index] || array2, arrays[othIndex], iteratee2, comparator);
              }
            }
          }
          return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
        }
        function baseZipObject(props, values2, assignFunc) {
          var index = -1, length2 = props.length, valsLength = values2.length, result2 = {};
          while (++index < length2) {
            var value = index < valsLength ? values2[index] : undefined$1;
            assignFunc(result2, props[index], value);
          }
          return result2;
        }
        function castArrayLikeObject(value) {
          return isArrayLikeObject(value) ? value : [];
        }
        function castFunction(value) {
          return typeof value == "function" ? value : identity;
        }
        function castPath(value, object2) {
          if (isArray2(value)) {
            return value;
          }
          return isKey(value, object2) ? [value] : stringToPath(toString(value));
        }
        var castRest = baseRest;
        function castSlice(array2, start, end) {
          var length2 = array2.length;
          end = end === undefined$1 ? length2 : end;
          return !start && end >= length2 ? array2 : baseSlice(array2, start, end);
        }
        var clearTimeout2 = ctxClearTimeout || function(id) {
          return root.clearTimeout(id);
        };
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length2 = buffer.length, result2 = allocUnsafe ? allocUnsafe(length2) : new buffer.constructor(length2);
          buffer.copy(result2);
          return result2;
        }
        function cloneArrayBuffer(arrayBuffer) {
          var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
          return result2;
        }
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        function cloneRegExp(regexp) {
          var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
          result2.lastIndex = regexp.lastIndex;
          return result2;
        }
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
        }
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined$1, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
            var othIsDefined = other !== undefined$1, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
            if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
              return 1;
            }
            if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
              return -1;
            }
          }
          return 0;
        }
        function compareMultiple(object2, other, orders) {
          var index = -1, objCriteria = object2.criteria, othCriteria = other.criteria, length2 = objCriteria.length, ordersLength = orders.length;
          while (++index < length2) {
            var result2 = compareAscending(objCriteria[index], othCriteria[index]);
            if (result2) {
              if (index >= ordersLength) {
                return result2;
              }
              var order = orders[index];
              return result2 * (order == "desc" ? -1 : 1);
            }
          }
          return object2.index - other.index;
        }
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength2 = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength2), isUncurried = !isCurried;
          while (++leftIndex < leftLength) {
            result2[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength2--) {
            result2[leftIndex++] = args[argsIndex++];
          }
          return result2;
        }
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength2 = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength2 + rightLength), isUncurried = !isCurried;
          while (++argsIndex < rangeLength2) {
            result2[argsIndex] = args[argsIndex];
          }
          var offset = argsIndex;
          while (++rightIndex < rightLength) {
            result2[offset + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[offset + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result2;
        }
        function copyArray(source, array2) {
          var index = -1, length2 = source.length;
          array2 || (array2 = Array2(length2));
          while (++index < length2) {
            array2[index] = source[index];
          }
          return array2;
        }
        function copyObject(source, props, object2, customizer) {
          var isNew = !object2;
          object2 || (object2 = {});
          var index = -1, length2 = props.length;
          while (++index < length2) {
            var key = props[index];
            var newValue = customizer ? customizer(object2[key], source[key], key, object2, source) : undefined$1;
            if (newValue === undefined$1) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object2, key, newValue);
            } else {
              assignValue(object2, key, newValue);
            }
          }
          return object2;
        }
        function copySymbols(source, object2) {
          return copyObject(source, getSymbols(source), object2);
        }
        function copySymbolsIn(source, object2) {
          return copyObject(source, getSymbolsIn(source), object2);
        }
        function createAggregator(setter, initializer) {
          return function(collection, iteratee2) {
            var func2 = isArray2(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
            return func2(collection, setter, getIteratee(iteratee2, 2), accumulator);
          };
        }
        function createAssigner(assigner) {
          return baseRest(function(object2, sources) {
            var index = -1, length2 = sources.length, customizer = length2 > 1 ? sources[length2 - 1] : undefined$1, guard = length2 > 2 ? sources[2] : undefined$1;
            customizer = assigner.length > 3 && typeof customizer == "function" ? (length2--, customizer) : undefined$1;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length2 < 3 ? undefined$1 : customizer;
              length2 = 1;
            }
            object2 = Object2(object2);
            while (++index < length2) {
              var source = sources[index];
              if (source) {
                assigner(object2, source, index, customizer);
              }
            }
            return object2;
          });
        }
        function createBaseEach(eachFunc, fromRight) {
          return function(collection, iteratee2) {
            if (collection == null) {
              return collection;
            }
            if (!isArrayLike(collection)) {
              return eachFunc(collection, iteratee2);
            }
            var length2 = collection.length, index = fromRight ? length2 : -1, iterable = Object2(collection);
            while (fromRight ? index-- : ++index < length2) {
              if (iteratee2(iterable[index], index, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }
        function createBaseFor(fromRight) {
          return function(object2, iteratee2, keysFunc) {
            var index = -1, iterable = Object2(object2), props = keysFunc(object2), length2 = props.length;
            while (length2--) {
              var key = props[fromRight ? length2 : ++index];
              if (iteratee2(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object2;
          };
        }
        function createBind(func2, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func2);
          function wrapper() {
            var fn = this && this !== root && this instanceof wrapper ? Ctor : func2;
            return fn.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }
        function createCaseFirst(methodName) {
          return function(string2) {
            string2 = toString(string2);
            var strSymbols = hasUnicode(string2) ? stringToArray(string2) : undefined$1;
            var chr = strSymbols ? strSymbols[0] : string2.charAt(0);
            var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string2.slice(1);
            return chr[methodName]() + trailing;
          };
        }
        function createCompounder(callback) {
          return function(string2) {
            return arrayReduce(words(deburr(string2).replace(reApos, "")), callback, "");
          };
        }
        function createCtor(Ctor) {
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return new Ctor();
              case 1:
                return new Ctor(args[0]);
              case 2:
                return new Ctor(args[0], args[1]);
              case 3:
                return new Ctor(args[0], args[1], args[2]);
              case 4:
                return new Ctor(args[0], args[1], args[2], args[3]);
              case 5:
                return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
              case 7:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
            }
            var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
            return isObject2(result2) ? result2 : thisBinding;
          };
        }
        function createCurry(func2, bitmask, arity) {
          var Ctor = createCtor(func2);
          function wrapper() {
            var length2 = arguments.length, args = Array2(length2), index = length2, placeholder = getHolder(wrapper);
            while (index--) {
              args[index] = arguments[index];
            }
            var holders = length2 < 3 && args[0] !== placeholder && args[length2 - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
            length2 -= holders.length;
            if (length2 < arity) {
              return createRecurry(
                func2,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                undefined$1,
                args,
                holders,
                undefined$1,
                undefined$1,
                arity - length2
              );
            }
            var fn = this && this !== root && this instanceof wrapper ? Ctor : func2;
            return apply(fn, this, args);
          }
          return wrapper;
        }
        function createFind(findIndexFunc) {
          return function(collection, predicate, fromIndex) {
            var iterable = Object2(collection);
            if (!isArrayLike(collection)) {
              var iteratee2 = getIteratee(predicate, 3);
              collection = keys(collection);
              predicate = function(key) {
                return iteratee2(iterable[key], key, iterable);
              };
            }
            var index = findIndexFunc(collection, predicate, fromIndex);
            return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined$1;
          };
        }
        function createFlow(fromRight) {
          return flatRest(function(funcs) {
            var length2 = funcs.length, index = length2, prereq = LodashWrapper.prototype.thru;
            if (fromRight) {
              funcs.reverse();
            }
            while (index--) {
              var func2 = funcs[index];
              if (typeof func2 != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              if (prereq && !wrapper && getFuncName(func2) == "wrapper") {
                var wrapper = new LodashWrapper([], true);
              }
            }
            index = wrapper ? index : length2;
            while (++index < length2) {
              func2 = funcs[index];
              var funcName = getFuncName(func2), data = funcName == "wrapper" ? getData(func2) : undefined$1;
              if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
              } else {
                wrapper = func2.length == 1 && isLaziable(func2) ? wrapper[funcName]() : wrapper.thru(func2);
              }
            }
            return function() {
              var args = arguments, value = args[0];
              if (wrapper && args.length == 1 && isArray2(value)) {
                return wrapper.plant(value).value();
              }
              var index2 = 0, result2 = length2 ? funcs[index2].apply(this, args) : value;
              while (++index2 < length2) {
                result2 = funcs[index2].call(this, result2);
              }
              return result2;
            };
          });
        }
        function createHybrid(func2, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
          var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined$1 : createCtor(func2);
          function wrapper() {
            var length2 = arguments.length, args = Array2(length2), index = length2;
            while (index--) {
              args[index] = arguments[index];
            }
            if (isCurried) {
              var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
            }
            length2 -= holdersCount;
            if (isCurried && length2 < arity) {
              var newHolders = replaceHolders(args, placeholder);
              return createRecurry(
                func2,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                thisArg,
                args,
                newHolders,
                argPos,
                ary2,
                arity - length2
              );
            }
            var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func2] : func2;
            length2 = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length2 > 1) {
              args.reverse();
            }
            if (isAry && ary2 < length2) {
              args.length = ary2;
            }
            if (this && this !== root && this instanceof wrapper) {
              fn = Ctor || createCtor(fn);
            }
            return fn.apply(thisBinding, args);
          }
          return wrapper;
        }
        function createInverter(setter, toIteratee) {
          return function(object2, iteratee2) {
            return baseInverter(object2, setter, toIteratee(iteratee2), {});
          };
        }
        function createMathOperation(operator, defaultValue) {
          return function(value, other) {
            var result2;
            if (value === undefined$1 && other === undefined$1) {
              return defaultValue;
            }
            if (value !== undefined$1) {
              result2 = value;
            }
            if (other !== undefined$1) {
              if (result2 === undefined$1) {
                return other;
              }
              if (typeof value == "string" || typeof other == "string") {
                value = baseToString(value);
                other = baseToString(other);
              } else {
                value = baseToNumber(value);
                other = baseToNumber(other);
              }
              result2 = operator(value, other);
            }
            return result2;
          };
        }
        function createOver(arrayFunc) {
          return flatRest(function(iteratees) {
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            return baseRest(function(args) {
              var thisArg = this;
              return arrayFunc(iteratees, function(iteratee2) {
                return apply(iteratee2, thisArg, args);
              });
            });
          });
        }
        function createPadding(length2, chars) {
          chars = chars === undefined$1 ? " " : baseToString(chars);
          var charsLength = chars.length;
          if (charsLength < 2) {
            return charsLength ? baseRepeat(chars, length2) : chars;
          }
          var result2 = baseRepeat(chars, nativeCeil(length2 / stringSize(chars)));
          return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length2).join("") : result2.slice(0, length2);
        }
        function createPartial(func2, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func2);
          function wrapper() {
            var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func2;
            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply(fn, isBind ? thisArg : this, args);
          }
          return wrapper;
        }
        function createRange(fromRight) {
          return function(start, end, step) {
            if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
              end = step = undefined$1;
            }
            start = toFinite(start);
            if (end === undefined$1) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            step = step === undefined$1 ? start < end ? 1 : -1 : toFinite(step);
            return baseRange(start, end, step, fromRight);
          };
        }
        function createRelationalOperation(operator) {
          return function(value, other) {
            if (!(typeof value == "string" && typeof other == "string")) {
              value = toNumber(value);
              other = toNumber(other);
            }
            return operator(value, other);
          };
        }
        function createRecurry(func2, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
          var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined$1, newHoldersRight = isCurry ? undefined$1 : holders, newPartials = isCurry ? partials : undefined$1, newPartialsRight = isCurry ? undefined$1 : partials;
          bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
          }
          var newData = [
            func2,
            bitmask,
            thisArg,
            newPartials,
            newHolders,
            newPartialsRight,
            newHoldersRight,
            argPos,
            ary2,
            arity
          ];
          var result2 = wrapFunc.apply(undefined$1, newData);
          if (isLaziable(func2)) {
            setData(result2, newData);
          }
          result2.placeholder = placeholder;
          return setWrapToString(result2, func2, bitmask);
        }
        function createRound(methodName) {
          var func2 = Math2[methodName];
          return function(number2, precision) {
            number2 = toNumber(number2);
            precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
            if (precision && nativeIsFinite(number2)) {
              var pair = (toString(number2) + "e").split("e"), value = func2(pair[0] + "e" + (+pair[1] + precision));
              pair = (toString(value) + "e").split("e");
              return +(pair[0] + "e" + (+pair[1] - precision));
            }
            return func2(number2);
          };
        }
        var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop2 : function(values2) {
          return new Set2(values2);
        };
        function createToPairs(keysFunc) {
          return function(object2) {
            var tag = getTag(object2);
            if (tag == mapTag) {
              return mapToArray(object2);
            }
            if (tag == setTag) {
              return setToPairs(object2);
            }
            return baseToPairs(object2, keysFunc(object2));
          };
        }
        function createWrap(func2, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func2 != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var length2 = partials ? partials.length : 0;
          if (!length2) {
            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
            partials = holders = undefined$1;
          }
          ary2 = ary2 === undefined$1 ? ary2 : nativeMax(toInteger(ary2), 0);
          arity = arity === undefined$1 ? arity : toInteger(arity);
          length2 -= holders ? holders.length : 0;
          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials, holdersRight = holders;
            partials = holders = undefined$1;
          }
          var data = isBindKey ? undefined$1 : getData(func2);
          var newData = [
            func2,
            bitmask,
            thisArg,
            partials,
            holders,
            partialsRight,
            holdersRight,
            argPos,
            ary2,
            arity
          ];
          if (data) {
            mergeData(newData, data);
          }
          func2 = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] = newData[9] === undefined$1 ? isBindKey ? 0 : func2.length : nativeMax(newData[9] - length2, 0);
          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result2 = createBind(func2, bitmask, thisArg);
          } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
            result2 = createCurry(func2, bitmask, arity);
          } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
            result2 = createPartial(func2, bitmask, thisArg, partials);
          } else {
            result2 = createHybrid.apply(undefined$1, newData);
          }
          var setter = data ? baseSetData : setData;
          return setWrapToString(setter(result2, newData), func2, bitmask);
        }
        function customDefaultsAssignIn(objValue, srcValue, key, object2) {
          if (objValue === undefined$1 || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object2, key)) {
            return srcValue;
          }
          return objValue;
        }
        function customDefaultsMerge(objValue, srcValue, key, object2, source, stack) {
          if (isObject2(objValue) && isObject2(srcValue)) {
            stack.set(srcValue, objValue);
            baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
            stack["delete"](srcValue);
          }
          return objValue;
        }
        function customOmitClone(value) {
          return isPlainObject(value) ? undefined$1 : value;
        }
        function equalArrays(array2, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array2.length, othLength = other.length;
          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          var arrStacked = stack.get(array2);
          var othStacked = stack.get(other);
          if (arrStacked && othStacked) {
            return arrStacked == other && othStacked == array2;
          }
          var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined$1;
          stack.set(array2, other);
          stack.set(other, array2);
          while (++index < arrLength) {
            var arrValue = array2[index], othValue = other[index];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, arrValue, index, other, array2, stack) : customizer(arrValue, othValue, index, array2, other, stack);
            }
            if (compared !== undefined$1) {
              if (compared) {
                continue;
              }
              result2 = false;
              break;
            }
            if (seen) {
              if (!arraySome(other, function(othValue2, othIndex) {
                if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
                result2 = false;
                break;
              }
            } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              result2 = false;
              break;
            }
          }
          stack["delete"](array2);
          stack["delete"](other);
          return result2;
        }
        function equalByTag(object2, other, tag, bitmask, customizer, equalFunc, stack) {
          switch (tag) {
            case dataViewTag:
              if (object2.byteLength != other.byteLength || object2.byteOffset != other.byteOffset) {
                return false;
              }
              object2 = object2.buffer;
              other = other.buffer;
            case arrayBufferTag:
              if (object2.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object2), new Uint8Array2(other))) {
                return false;
              }
              return true;
            case boolTag:
            case dateTag:
            case numberTag:
              return eq(+object2, +other);
            case errorTag:
              return object2.name == other.name && object2.message == other.message;
            case regexpTag:
            case stringTag:
              return object2 == other + "";
            case mapTag:
              var convert = mapToArray;
            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);
              if (object2.size != other.size && !isPartial) {
                return false;
              }
              var stacked = stack.get(object2);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;
              stack.set(object2, other);
              var result2 = equalArrays(convert(object2), convert(other), bitmask, customizer, equalFunc, stack);
              stack["delete"](object2);
              return result2;
            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object2) == symbolValueOf.call(other);
              }
          }
          return false;
        }
        function equalObjects(object2, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object2), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index = objLength;
          while (index--) {
            var key = objProps[index];
            if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
              return false;
            }
          }
          var objStacked = stack.get(object2);
          var othStacked = stack.get(other);
          if (objStacked && othStacked) {
            return objStacked == other && othStacked == object2;
          }
          var result2 = true;
          stack.set(object2, other);
          stack.set(other, object2);
          var skipCtor = isPartial;
          while (++index < objLength) {
            key = objProps[index];
            var objValue = object2[key], othValue = other[key];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, objValue, key, other, object2, stack) : customizer(objValue, othValue, key, object2, other, stack);
            }
            if (!(compared === undefined$1 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
              result2 = false;
              break;
            }
            skipCtor || (skipCtor = key == "constructor");
          }
          if (result2 && !skipCtor) {
            var objCtor = object2.constructor, othCtor = other.constructor;
            if (objCtor != othCtor && ("constructor" in object2 && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
              result2 = false;
            }
          }
          stack["delete"](object2);
          stack["delete"](other);
          return result2;
        }
        function flatRest(func2) {
          return setToString(overRest(func2, undefined$1, flatten), func2 + "");
        }
        function getAllKeys(object2) {
          return baseGetAllKeys(object2, keys, getSymbols);
        }
        function getAllKeysIn(object2) {
          return baseGetAllKeys(object2, keysIn, getSymbolsIn);
        }
        var getData = !metaMap ? noop2 : function(func2) {
          return metaMap.get(func2);
        };
        function getFuncName(func2) {
          var result2 = func2.name + "", array2 = realNames[result2], length2 = hasOwnProperty.call(realNames, result2) ? array2.length : 0;
          while (length2--) {
            var data = array2[length2], otherFunc = data.func;
            if (otherFunc == null || otherFunc == func2) {
              return data.name;
            }
          }
          return result2;
        }
        function getHolder(func2) {
          var object2 = hasOwnProperty.call(lodash2, "placeholder") ? lodash2 : func2;
          return object2.placeholder;
        }
        function getIteratee() {
          var result2 = lodash2.iteratee || iteratee;
          result2 = result2 === iteratee ? baseIteratee : result2;
          return arguments.length ? result2(arguments[0], arguments[1]) : result2;
        }
        function getMapData(map2, key) {
          var data = map2.__data__;
          return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
        }
        function getMatchData(object2) {
          var result2 = keys(object2), length2 = result2.length;
          while (length2--) {
            var key = result2[length2], value = object2[key];
            result2[length2] = [key, value, isStrictComparable(value)];
          }
          return result2;
        }
        function getNative(object2, key) {
          var value = getValue(object2, key);
          return baseIsNative(value) ? value : undefined$1;
        }
        function getRawTag(value) {
          var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
          try {
            value[symToStringTag] = undefined$1;
            var unmasked = true;
          } catch (e2) {
          }
          var result2 = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result2;
        }
        var getSymbols = !nativeGetSymbols ? stubArray : function(object2) {
          if (object2 == null) {
            return [];
          }
          object2 = Object2(object2);
          return arrayFilter(nativeGetSymbols(object2), function(symbol) {
            return propertyIsEnumerable.call(object2, symbol);
          });
        };
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object2) {
          var result2 = [];
          while (object2) {
            arrayPush(result2, getSymbols(object2));
            object2 = getPrototype(object2);
          }
          return result2;
        };
        var getTag = baseGetTag;
        if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
          getTag = function(value) {
            var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined$1, ctorString = Ctor ? toSource(Ctor) : "";
            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString:
                  return dataViewTag;
                case mapCtorString:
                  return mapTag;
                case promiseCtorString:
                  return promiseTag;
                case setCtorString:
                  return setTag;
                case weakMapCtorString:
                  return weakMapTag;
              }
            }
            return result2;
          };
        }
        function getView(start, end, transforms) {
          var index = -1, length2 = transforms.length;
          while (++index < length2) {
            var data = transforms[index], size2 = data.size;
            switch (data.type) {
              case "drop":
                start += size2;
                break;
              case "dropRight":
                end -= size2;
                break;
              case "take":
                end = nativeMin(end, start + size2);
                break;
              case "takeRight":
                start = nativeMax(start, end - size2);
                break;
            }
          }
          return { "start": start, "end": end };
        }
        function getWrapDetails(source) {
          var match = source.match(reWrapDetails);
          return match ? match[1].split(reSplitDetails) : [];
        }
        function hasPath(object2, path, hasFunc) {
          path = castPath(path, object2);
          var index = -1, length2 = path.length, result2 = false;
          while (++index < length2) {
            var key = toKey(path[index]);
            if (!(result2 = object2 != null && hasFunc(object2, key))) {
              break;
            }
            object2 = object2[key];
          }
          if (result2 || ++index != length2) {
            return result2;
          }
          length2 = object2 == null ? 0 : object2.length;
          return !!length2 && isLength(length2) && isIndex(key, length2) && (isArray2(object2) || isArguments(object2));
        }
        function initCloneArray(array2) {
          var length2 = array2.length, result2 = new array2.constructor(length2);
          if (length2 && typeof array2[0] == "string" && hasOwnProperty.call(array2, "index")) {
            result2.index = array2.index;
            result2.input = array2.input;
          }
          return result2;
        }
        function initCloneObject(object2) {
          return typeof object2.constructor == "function" && !isPrototype(object2) ? baseCreate(getPrototype(object2)) : {};
        }
        function initCloneByTag(object2, tag, isDeep) {
          var Ctor = object2.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object2);
            case boolTag:
            case dateTag:
              return new Ctor(+object2);
            case dataViewTag:
              return cloneDataView(object2, isDeep);
            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
              return cloneTypedArray(object2, isDeep);
            case mapTag:
              return new Ctor();
            case numberTag:
            case stringTag:
              return new Ctor(object2);
            case regexpTag:
              return cloneRegExp(object2);
            case setTag:
              return new Ctor();
            case symbolTag:
              return cloneSymbol(object2);
          }
        }
        function insertWrapDetails(source, details) {
          var length2 = details.length;
          if (!length2) {
            return source;
          }
          var lastIndex = length2 - 1;
          details[lastIndex] = (length2 > 1 ? "& " : "") + details[lastIndex];
          details = details.join(length2 > 2 ? ", " : " ");
          return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
        }
        function isFlattenable(value) {
          return isArray2(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        function isIndex(value, length2) {
          var type = typeof value;
          length2 = length2 == null ? MAX_SAFE_INTEGER : length2;
          return !!length2 && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length2);
        }
        function isIterateeCall(value, index, object2) {
          if (!isObject2(object2)) {
            return false;
          }
          var type = typeof index;
          if (type == "number" ? isArrayLike(object2) && isIndex(index, object2.length) : type == "string" && index in object2) {
            return eq(object2[index], value);
          }
          return false;
        }
        function isKey(value, object2) {
          if (isArray2(value)) {
            return false;
          }
          var type = typeof value;
          if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
            return true;
          }
          return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object2 != null && value in Object2(object2);
        }
        function isKeyable(value) {
          var type = typeof value;
          return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
        }
        function isLaziable(func2) {
          var funcName = getFuncName(func2), other = lodash2[funcName];
          if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
            return false;
          }
          if (func2 === other) {
            return true;
          }
          var data = getData(other);
          return !!data && func2 === data[0];
        }
        function isMasked(func2) {
          return !!maskSrcKey && maskSrcKey in func2;
        }
        var isMaskable = coreJsData ? isFunction : stubFalse;
        function isPrototype(value) {
          var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
          return value === proto;
        }
        function isStrictComparable(value) {
          return value === value && !isObject2(value);
        }
        function matchesStrictComparable(key, srcValue) {
          return function(object2) {
            if (object2 == null) {
              return false;
            }
            return object2[key] === srcValue && (srcValue !== undefined$1 || key in Object2(object2));
          };
        }
        function memoizeCapped(func2) {
          var result2 = memoize(func2, function(key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }
            return key;
          });
          var cache = result2.cache;
          return result2;
        }
        function mergeData(data, source) {
          var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
          var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
          if (!(isCommon || isCombo)) {
            return data;
          }
          if (srcBitmask & WRAP_BIND_FLAG) {
            data[2] = source[2];
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          var value = source[3];
          if (value) {
            var partials = data[3];
            data[3] = partials ? composeArgs(partials, value, source[4]) : value;
            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
          }
          value = source[5];
          if (value) {
            partials = data[5];
            data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
          }
          value = source[7];
          if (value) {
            data[7] = value;
          }
          if (srcBitmask & WRAP_ARY_FLAG) {
            data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
          }
          if (data[9] == null) {
            data[9] = source[9];
          }
          data[0] = source[0];
          data[1] = newBitmask;
          return data;
        }
        function nativeKeysIn(object2) {
          var result2 = [];
          if (object2 != null) {
            for (var key in Object2(object2)) {
              result2.push(key);
            }
          }
          return result2;
        }
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }
        function overRest(func2, start, transform2) {
          start = nativeMax(start === undefined$1 ? func2.length - 1 : start, 0);
          return function() {
            var args = arguments, index = -1, length2 = nativeMax(args.length - start, 0), array2 = Array2(length2);
            while (++index < length2) {
              array2[index] = args[start + index];
            }
            index = -1;
            var otherArgs = Array2(start + 1);
            while (++index < start) {
              otherArgs[index] = args[index];
            }
            otherArgs[start] = transform2(array2);
            return apply(func2, this, otherArgs);
          };
        }
        function parent(object2, path) {
          return path.length < 2 ? object2 : baseGet(object2, baseSlice(path, 0, -1));
        }
        function reorder(array2, indexes) {
          var arrLength = array2.length, length2 = nativeMin(indexes.length, arrLength), oldArray = copyArray(array2);
          while (length2--) {
            var index = indexes[length2];
            array2[length2] = isIndex(index, arrLength) ? oldArray[index] : undefined$1;
          }
          return array2;
        }
        function safeGet(object2, key) {
          if (key === "constructor" && typeof object2[key] === "function") {
            return;
          }
          if (key == "__proto__") {
            return;
          }
          return object2[key];
        }
        var setData = shortOut(baseSetData);
        var setTimeout2 = ctxSetTimeout || function(func2, wait) {
          return root.setTimeout(func2, wait);
        };
        var setToString = shortOut(baseSetToString);
        function setWrapToString(wrapper, reference, bitmask) {
          var source = reference + "";
          return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
        function shortOut(func2) {
          var count = 0, lastCalled = 0;
          return function() {
            var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func2.apply(undefined$1, arguments);
          };
        }
        function shuffleSelf(array2, size2) {
          var index = -1, length2 = array2.length, lastIndex = length2 - 1;
          size2 = size2 === undefined$1 ? length2 : size2;
          while (++index < size2) {
            var rand = baseRandom(index, lastIndex), value = array2[rand];
            array2[rand] = array2[index];
            array2[index] = value;
          }
          array2.length = size2;
          return array2;
        }
        var stringToPath = memoizeCapped(function(string2) {
          var result2 = [];
          if (string2.charCodeAt(0) === 46) {
            result2.push("");
          }
          string2.replace(rePropName, function(match, number2, quote, subString) {
            result2.push(quote ? subString.replace(reEscapeChar, "$1") : number2 || match);
          });
          return result2;
        });
        function toKey(value) {
          if (typeof value == "string" || isSymbol(value)) {
            return value;
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function toSource(func2) {
          if (func2 != null) {
            try {
              return funcToString.call(func2);
            } catch (e2) {
            }
            try {
              return func2 + "";
            } catch (e2) {
            }
          }
          return "";
        }
        function updateWrapDetails(details, bitmask) {
          arrayEach(wrapFlags, function(pair) {
            var value = "_." + pair[0];
            if (bitmask & pair[1] && !arrayIncludes(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
          result2.__actions__ = copyArray(wrapper.__actions__);
          result2.__index__ = wrapper.__index__;
          result2.__values__ = wrapper.__values__;
          return result2;
        }
        function chunk(array2, size2, guard) {
          if (guard ? isIterateeCall(array2, size2, guard) : size2 === undefined$1) {
            size2 = 1;
          } else {
            size2 = nativeMax(toInteger(size2), 0);
          }
          var length2 = array2 == null ? 0 : array2.length;
          if (!length2 || size2 < 1) {
            return [];
          }
          var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length2 / size2));
          while (index < length2) {
            result2[resIndex++] = baseSlice(array2, index, index += size2);
          }
          return result2;
        }
        function compact(array2) {
          var index = -1, length2 = array2 == null ? 0 : array2.length, resIndex = 0, result2 = [];
          while (++index < length2) {
            var value = array2[index];
            if (value) {
              result2[resIndex++] = value;
            }
          }
          return result2;
        }
        function concat() {
          var length2 = arguments.length;
          if (!length2) {
            return [];
          }
          var args = Array2(length2 - 1), array2 = arguments[0], index = length2;
          while (index--) {
            args[index - 1] = arguments[index];
          }
          return arrayPush(isArray2(array2) ? copyArray(array2) : [array2], baseFlatten(args, 1));
        }
        var difference = baseRest(function(array2, values2) {
          return isArrayLikeObject(array2) ? baseDifference(array2, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
        });
        var differenceBy = baseRest(function(array2, values2) {
          var iteratee2 = last(values2);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined$1;
          }
          return isArrayLikeObject(array2) ? baseDifference(array2, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
        });
        var differenceWith = baseRest(function(array2, values2) {
          var comparator = last(values2);
          if (isArrayLikeObject(comparator)) {
            comparator = undefined$1;
          }
          return isArrayLikeObject(array2) ? baseDifference(array2, baseFlatten(values2, 1, isArrayLikeObject, true), undefined$1, comparator) : [];
        });
        function drop(array2, n2, guard) {
          var length2 = array2 == null ? 0 : array2.length;
          if (!length2) {
            return [];
          }
          n2 = guard || n2 === undefined$1 ? 1 : toInteger(n2);
          return baseSlice(array2, n2 < 0 ? 0 : n2, length2);
        }
        function dropRight(array2, n2, guard) {
          var length2 = array2 == null ? 0 : array2.length;
          if (!length2) {
            return [];
          }
          n2 = guard || n2 === undefined$1 ? 1 : toInteger(n2);
          n2 = length2 - n2;
          return baseSlice(array2, 0, n2 < 0 ? 0 : n2);
        }
        function dropRightWhile(array2, predicate) {
          return array2 && array2.length ? baseWhile(array2, getIteratee(predicate, 3), true, true) : [];
        }
        function dropWhile(array2, predicate) {
          return array2 && array2.length ? baseWhile(array2, getIteratee(predicate, 3), true) : [];
        }
        function fill(array2, value, start, end) {
          var length2 = array2 == null ? 0 : array2.length;
          if (!length2) {
            return [];
          }
          if (start && typeof start != "number" && isIterateeCall(array2, value, start)) {
            start = 0;
            end = length2;
          }
          return baseFill(array2, value, start, end);
        }
        function findIndex(array2, predicate, fromIndex) {
          var length2 = array2 == null ? 0 : array2.length;
          if (!length2) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length2 + index, 0);
          }
          return baseFindIndex(array2, getIteratee(predicate, 3), index);
        }
        function findLastIndex(array2, predicate, fromIndex) {
          var length2 = array2 == null ? 0 : array2.length;
          if (!length2) {
            return -1;
          }
          var index = length2 - 1;
          if (fromIndex !== undefined$1) {
            index = toInteger(fromIndex);
            index = fromIndex < 0 ? nativeMax(length2 + index, 0) : nativeMin(index, length2 - 1);
          }
          return baseFindIndex(array2, getIteratee(predicate, 3), index, true);
        }
        function flatten(array2) {
          var length2 = array2 == null ? 0 : array2.length;
          return length2 ? baseFlatten(array2, 1) : [];
        }
        function flattenDeep(array2) {
          var length2 = array2 == null ? 0 : array2.length;
          return length2 ? baseFlatten(array2, INFINITY) : [];
        }
        function flattenDepth(array2, depth) {
          var length2 = array2 == null ? 0 : array2.length;
          if (!length2) {
            return [];
          }
          depth = depth === undefined$1 ? 1 : toInteger(depth);
          return baseFlatten(array2, depth);
        }
        function fromPairs(pairs) {
          var index = -1, length2 = pairs == null ? 0 : pairs.length, result2 = {};
          while (++index < length2) {
            var pair = pairs[index];
            result2[pair[0]] = pair[1];
          }
          return result2;
        }
        function head(array2) {
          return array2 && array2.length ? array2[0] : undefined$1;
        }
        function indexOf(array2, value, fromIndex) {
          var length2 = array2 == null ? 0 : array2.length;
          if (!length2) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length2 + index, 0);
          }
          return baseIndexOf(array2, value, index);
        }
        function initial(array2) {
          var length2 = array2 == null ? 0 : array2.length;
          return length2 ? baseSlice(array2, 0, -1) : [];
        }
        var intersection = baseRest(function(arrays) {
          var mapped = arrayMap(arrays, castArrayLikeObject);
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        var intersectionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          if (iteratee2 === last(mapped)) {
            iteratee2 = undefined$1;
          } else {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
        });
        var intersectionWith = baseRest(function(arrays) {
          var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          comparator = typeof comparator == "function" ? comparator : undefined$1;
          if (comparator) {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined$1, comparator) : [];
        });
        function join(array2, separator) {
          return array2 == null ? "" : nativeJoin.call(array2, separator);
        }
        function last(array2) {
          var length2 = array2 == null ? 0 : array2.length;
          return length2 ? array2[length2 - 1] : undefined$1;
        }
        function lastIndexOf(array2, value, fromIndex) {
          var length2 = array2 == null ? 0 : array2.length;
          if (!length2) {
            return -1;
          }
          var index = length2;
          if (fromIndex !== undefined$1) {
            index = toInteger(fromIndex);
            index = index < 0 ? nativeMax(length2 + index, 0) : nativeMin(index, length2 - 1);
          }
          return value === value ? strictLastIndexOf(array2, value, index) : baseFindIndex(array2, baseIsNaN, index, true);
        }
        function nth(array2, n2) {
          return array2 && array2.length ? baseNth(array2, toInteger(n2)) : undefined$1;
        }
        var pull = baseRest(pullAll);
        function pullAll(array2, values2) {
          return array2 && array2.length && values2 && values2.length ? basePullAll(array2, values2) : array2;
        }
        function pullAllBy(array2, values2, iteratee2) {
          return array2 && array2.length && values2 && values2.length ? basePullAll(array2, values2, getIteratee(iteratee2, 2)) : array2;
        }
        function pullAllWith(array2, values2, comparator) {
          return array2 && array2.length && values2 && values2.length ? basePullAll(array2, values2, undefined$1, comparator) : array2;
        }
        var pullAt = flatRest(function(array2, indexes) {
          var length2 = array2 == null ? 0 : array2.length, result2 = baseAt(array2, indexes);
          basePullAt(array2, arrayMap(indexes, function(index) {
            return isIndex(index, length2) ? +index : index;
          }).sort(compareAscending));
          return result2;
        });
        function remove(array2, predicate) {
          var result2 = [];
          if (!(array2 && array2.length)) {
            return result2;
          }
          var index = -1, indexes = [], length2 = array2.length;
          predicate = getIteratee(predicate, 3);
          while (++index < length2) {
            var value = array2[index];
            if (predicate(value, index, array2)) {
              result2.push(value);
              indexes.push(index);
            }
          }
          basePullAt(array2, indexes);
          return result2;
        }
        function reverse(array2) {
          return array2 == null ? array2 : nativeReverse.call(array2);
        }
        function slice(array2, start, end) {
          var length2 = array2 == null ? 0 : array2.length;
          if (!length2) {
            return [];
          }
          if (end && typeof end != "number" && isIterateeCall(array2, start, end)) {
            start = 0;
            end = length2;
          } else {
            start = start == null ? 0 : toInteger(start);
            end = end === undefined$1 ? length2 : toInteger(end);
          }
          return baseSlice(array2, start, end);
        }
        function sortedIndex(array2, value) {
          return baseSortedIndex(array2, value);
        }
        function sortedIndexBy(array2, value, iteratee2) {
          return baseSortedIndexBy(array2, value, getIteratee(iteratee2, 2));
        }
        function sortedIndexOf(array2, value) {
          var length2 = array2 == null ? 0 : array2.length;
          if (length2) {
            var index = baseSortedIndex(array2, value);
            if (index < length2 && eq(array2[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedLastIndex(array2, value) {
          return baseSortedIndex(array2, value, true);
        }
        function sortedLastIndexBy(array2, value, iteratee2) {
          return baseSortedIndexBy(array2, value, getIteratee(iteratee2, 2), true);
        }
        function sortedLastIndexOf(array2, value) {
          var length2 = array2 == null ? 0 : array2.length;
          if (length2) {
            var index = baseSortedIndex(array2, value, true) - 1;
            if (eq(array2[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedUniq(array2) {
          return array2 && array2.length ? baseSortedUniq(array2) : [];
        }
        function sortedUniqBy(array2, iteratee2) {
          return array2 && array2.length ? baseSortedUniq(array2, getIteratee(iteratee2, 2)) : [];
        }
        function tail(array2) {
          var length2 = array2 == null ? 0 : array2.length;
          return length2 ? baseSlice(array2, 1, length2) : [];
        }
        function take(array2, n2, guard) {
          if (!(array2 && array2.length)) {
            return [];
          }
          n2 = guard || n2 === undefined$1 ? 1 : toInteger(n2);
          return baseSlice(array2, 0, n2 < 0 ? 0 : n2);
        }
        function takeRight(array2, n2, guard) {
          var length2 = array2 == null ? 0 : array2.length;
          if (!length2) {
            return [];
          }
          n2 = guard || n2 === undefined$1 ? 1 : toInteger(n2);
          n2 = length2 - n2;
          return baseSlice(array2, n2 < 0 ? 0 : n2, length2);
        }
        function takeRightWhile(array2, predicate) {
          return array2 && array2.length ? baseWhile(array2, getIteratee(predicate, 3), false, true) : [];
        }
        function takeWhile(array2, predicate) {
          return array2 && array2.length ? baseWhile(array2, getIteratee(predicate, 3)) : [];
        }
        var union = baseRest(function(arrays) {
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        var unionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined$1;
          }
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
        });
        var unionWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined$1;
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
        });
        function uniq(array2) {
          return array2 && array2.length ? baseUniq(array2) : [];
        }
        function uniqBy(array2, iteratee2) {
          return array2 && array2.length ? baseUniq(array2, getIteratee(iteratee2, 2)) : [];
        }
        function uniqWith(array2, comparator) {
          comparator = typeof comparator == "function" ? comparator : undefined$1;
          return array2 && array2.length ? baseUniq(array2, undefined$1, comparator) : [];
        }
        function unzip(array2) {
          if (!(array2 && array2.length)) {
            return [];
          }
          var length2 = 0;
          array2 = arrayFilter(array2, function(group) {
            if (isArrayLikeObject(group)) {
              length2 = nativeMax(group.length, length2);
              return true;
            }
          });
          return baseTimes(length2, function(index) {
            return arrayMap(array2, baseProperty(index));
          });
        }
        function unzipWith(array2, iteratee2) {
          if (!(array2 && array2.length)) {
            return [];
          }
          var result2 = unzip(array2);
          if (iteratee2 == null) {
            return result2;
          }
          return arrayMap(result2, function(group) {
            return apply(iteratee2, undefined$1, group);
          });
        }
        var without = baseRest(function(array2, values2) {
          return isArrayLikeObject(array2) ? baseDifference(array2, values2) : [];
        });
        var xor = baseRest(function(arrays) {
          return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        var xorBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined$1;
          }
          return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
        });
        var xorWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined$1;
          return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);
        });
        var zip = baseRest(unzip);
        function zipObject(props, values2) {
          return baseZipObject(props || [], values2 || [], assignValue);
        }
        function zipObjectDeep(props, values2) {
          return baseZipObject(props || [], values2 || [], baseSet);
        }
        var zipWith = baseRest(function(arrays) {
          var length2 = arrays.length, iteratee2 = length2 > 1 ? arrays[length2 - 1] : undefined$1;
          iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined$1;
          return unzipWith(arrays, iteratee2);
        });
        function chain(value) {
          var result2 = lodash2(value);
          result2.__chain__ = true;
          return result2;
        }
        function tap(value, interceptor) {
          interceptor(value);
          return value;
        }
        function thru(value, interceptor) {
          return interceptor(value);
        }
        var wrapperAt = flatRest(function(paths) {
          var length2 = paths.length, start = length2 ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object2) {
            return baseAt(object2, paths);
          };
          if (length2 > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
            return this.thru(interceptor);
          }
          value = value.slice(start, +start + (length2 ? 1 : 0));
          value.__actions__.push({
            "func": thru,
            "args": [interceptor],
            "thisArg": undefined$1
          });
          return new LodashWrapper(value, this.__chain__).thru(function(array2) {
            if (length2 && !array2.length) {
              array2.push(undefined$1);
            }
            return array2;
          });
        });
        function wrapperChain() {
          return chain(this);
        }
        function wrapperCommit() {
          return new LodashWrapper(this.value(), this.__chain__);
        }
        function wrapperNext() {
          if (this.__values__ === undefined$1) {
            this.__values__ = toArray(this.value());
          }
          var done = this.__index__ >= this.__values__.length, value = done ? undefined$1 : this.__values__[this.__index__++];
          return { "done": done, "value": value };
        }
        function wrapperToIterator() {
          return this;
        }
        function wrapperPlant(value) {
          var result2, parent2 = this;
          while (parent2 instanceof baseLodash) {
            var clone2 = wrapperClone(parent2);
            clone2.__index__ = 0;
            clone2.__values__ = undefined$1;
            if (result2) {
              previous.__wrapped__ = clone2;
            } else {
              result2 = clone2;
            }
            var previous = clone2;
            parent2 = parent2.__wrapped__;
          }
          previous.__wrapped__ = value;
          return result2;
        }
        function wrapperReverse() {
          var value = this.__wrapped__;
          if (value instanceof LazyWrapper) {
            var wrapped = value;
            if (this.__actions__.length) {
              wrapped = new LazyWrapper(this);
            }
            wrapped = wrapped.reverse();
            wrapped.__actions__.push({
              "func": thru,
              "args": [reverse],
              "thisArg": undefined$1
            });
            return new LodashWrapper(wrapped, this.__chain__);
          }
          return this.thru(reverse);
        }
        function wrapperValue() {
          return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        var countBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            ++result2[key];
          } else {
            baseAssignValue(result2, key, 1);
          }
        });
        function every(collection, predicate, guard) {
          var func2 = isArray2(collection) ? arrayEvery : baseEvery;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined$1;
          }
          return func2(collection, getIteratee(predicate, 3));
        }
        function filter(collection, predicate) {
          var func2 = isArray2(collection) ? arrayFilter : baseFilter;
          return func2(collection, getIteratee(predicate, 3));
        }
        var find = createFind(findIndex);
        var findLast = createFind(findLastIndex);
        function flatMap(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), 1);
        }
        function flatMapDeep(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), INFINITY);
        }
        function flatMapDepth(collection, iteratee2, depth) {
          depth = depth === undefined$1 ? 1 : toInteger(depth);
          return baseFlatten(map(collection, iteratee2), depth);
        }
        function forEach(collection, iteratee2) {
          var func2 = isArray2(collection) ? arrayEach : baseEach;
          return func2(collection, getIteratee(iteratee2, 3));
        }
        function forEachRight(collection, iteratee2) {
          var func2 = isArray2(collection) ? arrayEachRight : baseEachRight;
          return func2(collection, getIteratee(iteratee2, 3));
        }
        var groupBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            result2[key].push(value);
          } else {
            baseAssignValue(result2, key, [value]);
          }
        });
        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike(collection) ? collection : values(collection);
          fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
          var length2 = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax(length2 + fromIndex, 0);
          }
          return isString(collection) ? fromIndex <= length2 && collection.indexOf(value, fromIndex) > -1 : !!length2 && baseIndexOf(collection, value, fromIndex) > -1;
        }
        var invokeMap = baseRest(function(collection, path, args) {
          var index = -1, isFunc = typeof path == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value) {
            result2[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
          });
          return result2;
        });
        var keyBy = createAggregator(function(result2, value, key) {
          baseAssignValue(result2, key, value);
        });
        function map(collection, iteratee2) {
          var func2 = isArray2(collection) ? arrayMap : baseMap;
          return func2(collection, getIteratee(iteratee2, 3));
        }
        function orderBy(collection, iteratees, orders, guard) {
          if (collection == null) {
            return [];
          }
          if (!isArray2(iteratees)) {
            iteratees = iteratees == null ? [] : [iteratees];
          }
          orders = guard ? undefined$1 : orders;
          if (!isArray2(orders)) {
            orders = orders == null ? [] : [orders];
          }
          return baseOrderBy(collection, iteratees, orders);
        }
        var partition = createAggregator(function(result2, value, key) {
          result2[key ? 0 : 1].push(value);
        }, function() {
          return [[], []];
        });
        function reduce(collection, iteratee2, accumulator) {
          var func2 = isArray2(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
          return func2(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
        }
        function reduceRight(collection, iteratee2, accumulator) {
          var func2 = isArray2(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
          return func2(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
        }
        function reject(collection, predicate) {
          var func2 = isArray2(collection) ? arrayFilter : baseFilter;
          return func2(collection, negate(getIteratee(predicate, 3)));
        }
        function sample(collection) {
          var func2 = isArray2(collection) ? arraySample : baseSample;
          return func2(collection);
        }
        function sampleSize(collection, n2, guard) {
          if (guard ? isIterateeCall(collection, n2, guard) : n2 === undefined$1) {
            n2 = 1;
          } else {
            n2 = toInteger(n2);
          }
          var func2 = isArray2(collection) ? arraySampleSize : baseSampleSize;
          return func2(collection, n2);
        }
        function shuffle(collection) {
          var func2 = isArray2(collection) ? arrayShuffle : baseShuffle;
          return func2(collection);
        }
        function size(collection) {
          if (collection == null) {
            return 0;
          }
          if (isArrayLike(collection)) {
            return isString(collection) ? stringSize(collection) : collection.length;
          }
          var tag = getTag(collection);
          if (tag == mapTag || tag == setTag) {
            return collection.size;
          }
          return baseKeys(collection).length;
        }
        function some(collection, predicate, guard) {
          var func2 = isArray2(collection) ? arraySome : baseSome;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined$1;
          }
          return func2(collection, getIteratee(predicate, 3));
        }
        var sortBy = baseRest(function(collection, iteratees) {
          if (collection == null) {
            return [];
          }
          var length2 = iteratees.length;
          if (length2 > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
            iteratees = [];
          } else if (length2 > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
            iteratees = [iteratees[0]];
          }
          return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        var now = ctxNow || function() {
          return root.Date.now();
        };
        function after(n2, func2) {
          if (typeof func2 != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n2 = toInteger(n2);
          return function() {
            if (--n2 < 1) {
              return func2.apply(this, arguments);
            }
          };
        }
        function ary(func2, n2, guard) {
          n2 = guard ? undefined$1 : n2;
          n2 = func2 && n2 == null ? func2.length : n2;
          return createWrap(func2, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n2);
        }
        function before(n2, func2) {
          var result2;
          if (typeof func2 != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n2 = toInteger(n2);
          return function() {
            if (--n2 > 0) {
              result2 = func2.apply(this, arguments);
            }
            if (n2 <= 1) {
              func2 = undefined$1;
            }
            return result2;
          };
        }
        var bind = baseRest(function(func2, thisArg, partials) {
          var bitmask = WRAP_BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bind));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(func2, bitmask, thisArg, partials, holders);
        });
        var bindKey = baseRest(function(object2, key, partials) {
          var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bindKey));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(key, bitmask, object2, partials, holders);
        });
        function curry(func2, arity, guard) {
          arity = guard ? undefined$1 : arity;
          var result2 = createWrap(func2, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
          result2.placeholder = curry.placeholder;
          return result2;
        }
        function curryRight(func2, arity, guard) {
          arity = guard ? undefined$1 : arity;
          var result2 = createWrap(func2, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
          result2.placeholder = curryRight.placeholder;
          return result2;
        }
        function debounce2(func2, wait, options) {
          var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
          if (typeof func2 != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          wait = toNumber(wait) || 0;
          if (isObject2(options)) {
            leading = !!options.leading;
            maxing = "maxWait" in options;
            maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          function invokeFunc(time) {
            var args = lastArgs, thisArg = lastThis;
            lastArgs = lastThis = undefined$1;
            lastInvokeTime = time;
            result2 = func2.apply(thisArg, args);
            return result2;
          }
          function leadingEdge(time) {
            lastInvokeTime = time;
            timerId = setTimeout2(timerExpired, wait);
            return leading ? invokeFunc(time) : result2;
          }
          function remainingWait(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
            return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
          }
          function shouldInvoke(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
            return lastCallTime === undefined$1 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
          }
          function timerExpired() {
            var time = now();
            if (shouldInvoke(time)) {
              return trailingEdge(time);
            }
            timerId = setTimeout2(timerExpired, remainingWait(time));
          }
          function trailingEdge(time) {
            timerId = undefined$1;
            if (trailing && lastArgs) {
              return invokeFunc(time);
            }
            lastArgs = lastThis = undefined$1;
            return result2;
          }
          function cancel() {
            if (timerId !== undefined$1) {
              clearTimeout2(timerId);
            }
            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined$1;
          }
          function flush() {
            return timerId === undefined$1 ? result2 : trailingEdge(now());
          }
          function debounced() {
            var time = now(), isInvoking = shouldInvoke(time);
            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time;
            if (isInvoking) {
              if (timerId === undefined$1) {
                return leadingEdge(lastCallTime);
              }
              if (maxing) {
                clearTimeout2(timerId);
                timerId = setTimeout2(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }
            if (timerId === undefined$1) {
              timerId = setTimeout2(timerExpired, wait);
            }
            return result2;
          }
          debounced.cancel = cancel;
          debounced.flush = flush;
          return debounced;
        }
        var defer = baseRest(function(func2, args) {
          return baseDelay(func2, 1, args);
        });
        var delay = baseRest(function(func2, wait, args) {
          return baseDelay(func2, toNumber(wait) || 0, args);
        });
        function flip(func2) {
          return createWrap(func2, WRAP_FLIP_FLAG);
        }
        function memoize(func2, resolver) {
          if (typeof func2 != "function" || resolver != null && typeof resolver != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var memoized = function() {
            var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
            if (cache.has(key)) {
              return cache.get(key);
            }
            var result2 = func2.apply(this, args);
            memoized.cache = cache.set(key, result2) || cache;
            return result2;
          };
          memoized.cache = new (memoize.Cache || MapCache)();
          return memoized;
        }
        memoize.Cache = MapCache;
        function negate(predicate) {
          if (typeof predicate != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return !predicate.call(this);
              case 1:
                return !predicate.call(this, args[0]);
              case 2:
                return !predicate.call(this, args[0], args[1]);
              case 3:
                return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }
        function once(func2) {
          return before(2, func2);
        }
        var overArgs = castRest(function(func2, transforms) {
          transforms = transforms.length == 1 && isArray2(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
          var funcsLength = transforms.length;
          return baseRest(function(args) {
            var index = -1, length2 = nativeMin(args.length, funcsLength);
            while (++index < length2) {
              args[index] = transforms[index].call(this, args[index]);
            }
            return apply(func2, this, args);
          });
        });
        var partial = baseRest(function(func2, partials) {
          var holders = replaceHolders(partials, getHolder(partial));
          return createWrap(func2, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
        });
        var partialRight = baseRest(function(func2, partials) {
          var holders = replaceHolders(partials, getHolder(partialRight));
          return createWrap(func2, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
        });
        var rearg = flatRest(function(func2, indexes) {
          return createWrap(func2, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
        });
        function rest(func2, start) {
          if (typeof func2 != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start === undefined$1 ? start : toInteger(start);
          return baseRest(func2, start);
        }
        function spread(func2, start) {
          if (typeof func2 != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start == null ? 0 : nativeMax(toInteger(start), 0);
          return baseRest(function(args) {
            var array2 = args[start], otherArgs = castSlice(args, 0, start);
            if (array2) {
              arrayPush(otherArgs, array2);
            }
            return apply(func2, this, otherArgs);
          });
        }
        function throttle2(func2, wait, options) {
          var leading = true, trailing = true;
          if (typeof func2 != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          if (isObject2(options)) {
            leading = "leading" in options ? !!options.leading : leading;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          return debounce2(func2, wait, {
            "leading": leading,
            "maxWait": wait,
            "trailing": trailing
          });
        }
        function unary(func2) {
          return ary(func2, 1);
        }
        function wrap(value, wrapper) {
          return partial(castFunction(wrapper), value);
        }
        function castArray() {
          if (!arguments.length) {
            return [];
          }
          var value = arguments[0];
          return isArray2(value) ? value : [value];
        }
        function clone(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        function cloneWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined$1;
          return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        function cloneDeep(value) {
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        function cloneDeepWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined$1;
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }
        function conformsTo(object2, source) {
          return source == null || baseConformsTo(object2, source, keys(source));
        }
        function eq(value, other) {
          return value === other || value !== value && other !== other;
        }
        var gt2 = createRelationalOperation(baseGt);
        var gte = createRelationalOperation(function(value, other) {
          return value >= other;
        });
        var isArguments = baseIsArguments(/* @__PURE__ */ function() {
          return arguments;
        }()) ? baseIsArguments : function(value) {
          return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
        };
        var isArray2 = Array2.isArray;
        var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction(value);
        }
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike(value);
        }
        function isBoolean(value) {
          return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
        }
        var isBuffer = nativeIsBuffer || stubFalse;
        var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        function isElement(value) {
          return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
        }
        function isEmpty(value) {
          if (value == null) {
            return true;
          }
          if (isArrayLike(value) && (isArray2(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
            return !value.length;
          }
          var tag = getTag(value);
          if (tag == mapTag || tag == setTag) {
            return !value.size;
          }
          if (isPrototype(value)) {
            return !baseKeys(value).length;
          }
          for (var key in value) {
            if (hasOwnProperty.call(value, key)) {
              return false;
            }
          }
          return true;
        }
        function isEqual(value, other) {
          return baseIsEqual(value, other);
        }
        function isEqualWith(value, other, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined$1;
          var result2 = customizer ? customizer(value, other) : undefined$1;
          return result2 === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result2;
        }
        function isError(value) {
          if (!isObjectLike(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
        }
        function isFinite(value) {
          return typeof value == "number" && nativeIsFinite(value);
        }
        function isFunction(value) {
          if (!isObject2(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        function isInteger(value) {
          return typeof value == "number" && value == toInteger(value);
        }
        function isLength(value) {
          return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        function isObject2(value) {
          var type = typeof value;
          return value != null && (type == "object" || type == "function");
        }
        function isObjectLike(value) {
          return value != null && typeof value == "object";
        }
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        function isMatch(object2, source) {
          return object2 === source || baseIsMatch(object2, source, getMatchData(source));
        }
        function isMatchWith(object2, source, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined$1;
          return baseIsMatch(object2, source, getMatchData(source), customizer);
        }
        function isNaN2(value) {
          return isNumber(value) && value != +value;
        }
        function isNative(value) {
          if (isMaskable(value)) {
            throw new Error2(CORE_ERROR_TEXT);
          }
          return baseIsNative(value);
        }
        function isNull(value) {
          return value === null;
        }
        function isNil(value) {
          return value == null;
        }
        function isNumber(value) {
          return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
        }
        function isPlainObject(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
          return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        function isSafeInteger(value) {
          return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        function isString(value) {
          return typeof value == "string" || !isArray2(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
        }
        function isSymbol(value) {
          return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        function isUndefined(value) {
          return value === undefined$1;
        }
        function isWeakMap(value) {
          return isObjectLike(value) && getTag(value) == weakMapTag;
        }
        function isWeakSet(value) {
          return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
        var lt2 = createRelationalOperation(baseLt);
        var lte = createRelationalOperation(function(value, other) {
          return value <= other;
        });
        function toArray(value) {
          if (!value) {
            return [];
          }
          if (isArrayLike(value)) {
            return isString(value) ? stringToArray(value) : copyArray(value);
          }
          if (symIterator && value[symIterator]) {
            return iteratorToArray(value[symIterator]());
          }
          var tag = getTag(value), func2 = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
          return func2(value);
        }
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = value < 0 ? -1 : 1;
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }
        function toInteger(value) {
          var result2 = toFinite(value), remainder = result2 % 1;
          return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
        }
        function toLength(value) {
          return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        function toNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject2(value)) {
            var other = typeof value.valueOf == "function" ? value.valueOf() : value;
            value = isObject2(other) ? other + "" : other;
          }
          if (typeof value != "string") {
            return value === 0 ? value : +value;
          }
          value = baseTrim(value);
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }
        function toSafeInteger(value) {
          return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
        }
        function toString(value) {
          return value == null ? "" : baseToString(value);
        }
        var assign = createAssigner(function(object2, source) {
          if (isPrototype(source) || isArrayLike(source)) {
            copyObject(source, keys(source), object2);
            return;
          }
          for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
              assignValue(object2, key, source[key]);
            }
          }
        });
        var assignIn = createAssigner(function(object2, source) {
          copyObject(source, keysIn(source), object2);
        });
        var assignInWith = createAssigner(function(object2, source, srcIndex, customizer) {
          copyObject(source, keysIn(source), object2, customizer);
        });
        var assignWith = createAssigner(function(object2, source, srcIndex, customizer) {
          copyObject(source, keys(source), object2, customizer);
        });
        var at2 = flatRest(baseAt);
        function create(prototype, properties) {
          var result2 = baseCreate(prototype);
          return properties == null ? result2 : baseAssign(result2, properties);
        }
        var defaults2 = baseRest(function(object2, sources) {
          object2 = Object2(object2);
          var index = -1;
          var length2 = sources.length;
          var guard = length2 > 2 ? sources[2] : undefined$1;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            length2 = 1;
          }
          while (++index < length2) {
            var source = sources[index];
            var props = keysIn(source);
            var propsIndex = -1;
            var propsLength = props.length;
            while (++propsIndex < propsLength) {
              var key = props[propsIndex];
              var value = object2[key];
              if (value === undefined$1 || eq(value, objectProto[key]) && !hasOwnProperty.call(object2, key)) {
                object2[key] = source[key];
              }
            }
          }
          return object2;
        });
        var defaultsDeep = baseRest(function(args) {
          args.push(undefined$1, customDefaultsMerge);
          return apply(mergeWith, undefined$1, args);
        });
        function findKey(object2, predicate) {
          return baseFindKey(object2, getIteratee(predicate, 3), baseForOwn);
        }
        function findLastKey(object2, predicate) {
          return baseFindKey(object2, getIteratee(predicate, 3), baseForOwnRight);
        }
        function forIn(object2, iteratee2) {
          return object2 == null ? object2 : baseFor(object2, getIteratee(iteratee2, 3), keysIn);
        }
        function forInRight(object2, iteratee2) {
          return object2 == null ? object2 : baseForRight(object2, getIteratee(iteratee2, 3), keysIn);
        }
        function forOwn(object2, iteratee2) {
          return object2 && baseForOwn(object2, getIteratee(iteratee2, 3));
        }
        function forOwnRight(object2, iteratee2) {
          return object2 && baseForOwnRight(object2, getIteratee(iteratee2, 3));
        }
        function functions(object2) {
          return object2 == null ? [] : baseFunctions(object2, keys(object2));
        }
        function functionsIn(object2) {
          return object2 == null ? [] : baseFunctions(object2, keysIn(object2));
        }
        function get(object2, path, defaultValue) {
          var result2 = object2 == null ? undefined$1 : baseGet(object2, path);
          return result2 === undefined$1 ? defaultValue : result2;
        }
        function has(object2, path) {
          return object2 != null && hasPath(object2, path, baseHas);
        }
        function hasIn(object2, path) {
          return object2 != null && hasPath(object2, path, baseHasIn);
        }
        var invert = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          result2[value] = key;
        }, constant(identity));
        var invertBy = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          if (hasOwnProperty.call(result2, value)) {
            result2[value].push(key);
          } else {
            result2[value] = [key];
          }
        }, getIteratee);
        var invoke = baseRest(baseInvoke);
        function keys(object2) {
          return isArrayLike(object2) ? arrayLikeKeys(object2) : baseKeys(object2);
        }
        function keysIn(object2) {
          return isArrayLike(object2) ? arrayLikeKeys(object2, true) : baseKeysIn(object2);
        }
        function mapKeys(object2, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object2, function(value, key, object3) {
            baseAssignValue(result2, iteratee2(value, key, object3), value);
          });
          return result2;
        }
        function mapValues(object2, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object2, function(value, key, object3) {
            baseAssignValue(result2, key, iteratee2(value, key, object3));
          });
          return result2;
        }
        var merge2 = createAssigner(function(object2, source, srcIndex) {
          baseMerge(object2, source, srcIndex);
        });
        var mergeWith = createAssigner(function(object2, source, srcIndex, customizer) {
          baseMerge(object2, source, srcIndex, customizer);
        });
        var omit = flatRest(function(object2, paths) {
          var result2 = {};
          if (object2 == null) {
            return result2;
          }
          var isDeep = false;
          paths = arrayMap(paths, function(path) {
            path = castPath(path, object2);
            isDeep || (isDeep = path.length > 1);
            return path;
          });
          copyObject(object2, getAllKeysIn(object2), result2);
          if (isDeep) {
            result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
          }
          var length2 = paths.length;
          while (length2--) {
            baseUnset(result2, paths[length2]);
          }
          return result2;
        });
        function omitBy(object2, predicate) {
          return pickBy(object2, negate(getIteratee(predicate)));
        }
        var pick = flatRest(function(object2, paths) {
          return object2 == null ? {} : basePick(object2, paths);
        });
        function pickBy(object2, predicate) {
          if (object2 == null) {
            return {};
          }
          var props = arrayMap(getAllKeysIn(object2), function(prop) {
            return [prop];
          });
          predicate = getIteratee(predicate);
          return basePickBy(object2, props, function(value, path) {
            return predicate(value, path[0]);
          });
        }
        function result(object2, path, defaultValue) {
          path = castPath(path, object2);
          var index = -1, length2 = path.length;
          if (!length2) {
            length2 = 1;
            object2 = undefined$1;
          }
          while (++index < length2) {
            var value = object2 == null ? undefined$1 : object2[toKey(path[index])];
            if (value === undefined$1) {
              index = length2;
              value = defaultValue;
            }
            object2 = isFunction(value) ? value.call(object2) : value;
          }
          return object2;
        }
        function set(object2, path, value) {
          return object2 == null ? object2 : baseSet(object2, path, value);
        }
        function setWith(object2, path, value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined$1;
          return object2 == null ? object2 : baseSet(object2, path, value, customizer);
        }
        var toPairs = createToPairs(keys);
        var toPairsIn = createToPairs(keysIn);
        function transform(object2, iteratee2, accumulator) {
          var isArr = isArray2(object2), isArrLike = isArr || isBuffer(object2) || isTypedArray(object2);
          iteratee2 = getIteratee(iteratee2, 4);
          if (accumulator == null) {
            var Ctor = object2 && object2.constructor;
            if (isArrLike) {
              accumulator = isArr ? new Ctor() : [];
            } else if (isObject2(object2)) {
              accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object2)) : {};
            } else {
              accumulator = {};
            }
          }
          (isArrLike ? arrayEach : baseForOwn)(object2, function(value, index, object3) {
            return iteratee2(accumulator, value, index, object3);
          });
          return accumulator;
        }
        function unset(object2, path) {
          return object2 == null ? true : baseUnset(object2, path);
        }
        function update(object2, path, updater) {
          return object2 == null ? object2 : baseUpdate(object2, path, castFunction(updater));
        }
        function updateWith(object2, path, updater, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined$1;
          return object2 == null ? object2 : baseUpdate(object2, path, castFunction(updater), customizer);
        }
        function values(object2) {
          return object2 == null ? [] : baseValues(object2, keys(object2));
        }
        function valuesIn(object2) {
          return object2 == null ? [] : baseValues(object2, keysIn(object2));
        }
        function clamp(number2, lower, upper) {
          if (upper === undefined$1) {
            upper = lower;
            lower = undefined$1;
          }
          if (upper !== undefined$1) {
            upper = toNumber(upper);
            upper = upper === upper ? upper : 0;
          }
          if (lower !== undefined$1) {
            lower = toNumber(lower);
            lower = lower === lower ? lower : 0;
          }
          return baseClamp(toNumber(number2), lower, upper);
        }
        function inRange(number2, start, end) {
          start = toFinite(start);
          if (end === undefined$1) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          number2 = toNumber(number2);
          return baseInRange(number2, start, end);
        }
        function random2(lower, upper, floating) {
          if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
            upper = floating = undefined$1;
          }
          if (floating === undefined$1) {
            if (typeof upper == "boolean") {
              floating = upper;
              upper = undefined$1;
            } else if (typeof lower == "boolean") {
              floating = lower;
              lower = undefined$1;
            }
          }
          if (lower === undefined$1 && upper === undefined$1) {
            lower = 0;
            upper = 1;
          } else {
            lower = toFinite(lower);
            if (upper === undefined$1) {
              upper = lower;
              lower = 0;
            } else {
              upper = toFinite(upper);
            }
          }
          if (lower > upper) {
            var temp = lower;
            lower = upper;
            upper = temp;
          }
          if (floating || lower % 1 || upper % 1) {
            var rand = nativeRandom();
            return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
          }
          return baseRandom(lower, upper);
        }
        var camelCase = createCompounder(function(result2, word, index) {
          word = word.toLowerCase();
          return result2 + (index ? capitalize(word) : word);
        });
        function capitalize(string2) {
          return upperFirst(toString(string2).toLowerCase());
        }
        function deburr(string2) {
          string2 = toString(string2);
          return string2 && string2.replace(reLatin, deburrLetter).replace(reComboMark, "");
        }
        function endsWith(string2, target, position) {
          string2 = toString(string2);
          target = baseToString(target);
          var length2 = string2.length;
          position = position === undefined$1 ? length2 : baseClamp(toInteger(position), 0, length2);
          var end = position;
          position -= target.length;
          return position >= 0 && string2.slice(position, end) == target;
        }
        function escape2(string2) {
          string2 = toString(string2);
          return string2 && reHasUnescapedHtml.test(string2) ? string2.replace(reUnescapedHtml, escapeHtmlChar) : string2;
        }
        function escapeRegExp(string2) {
          string2 = toString(string2);
          return string2 && reHasRegExpChar.test(string2) ? string2.replace(reRegExpChar, "\\$&") : string2;
        }
        var kebabCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "-" : "") + word.toLowerCase();
        });
        var lowerCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toLowerCase();
        });
        var lowerFirst = createCaseFirst("toLowerCase");
        function pad(string2, length2, chars) {
          string2 = toString(string2);
          length2 = toInteger(length2);
          var strLength = length2 ? stringSize(string2) : 0;
          if (!length2 || strLength >= length2) {
            return string2;
          }
          var mid = (length2 - strLength) / 2;
          return createPadding(nativeFloor(mid), chars) + string2 + createPadding(nativeCeil(mid), chars);
        }
        function padEnd(string2, length2, chars) {
          string2 = toString(string2);
          length2 = toInteger(length2);
          var strLength = length2 ? stringSize(string2) : 0;
          return length2 && strLength < length2 ? string2 + createPadding(length2 - strLength, chars) : string2;
        }
        function padStart(string2, length2, chars) {
          string2 = toString(string2);
          length2 = toInteger(length2);
          var strLength = length2 ? stringSize(string2) : 0;
          return length2 && strLength < length2 ? createPadding(length2 - strLength, chars) + string2 : string2;
        }
        function parseInt2(string2, radix, guard) {
          if (guard || radix == null) {
            radix = 0;
          } else if (radix) {
            radix = +radix;
          }
          return nativeParseInt(toString(string2).replace(reTrimStart, ""), radix || 0);
        }
        function repeat(string2, n2, guard) {
          if (guard ? isIterateeCall(string2, n2, guard) : n2 === undefined$1) {
            n2 = 1;
          } else {
            n2 = toInteger(n2);
          }
          return baseRepeat(toString(string2), n2);
        }
        function replace() {
          var args = arguments, string2 = toString(args[0]);
          return args.length < 3 ? string2 : string2.replace(args[1], args[2]);
        }
        var snakeCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "_" : "") + word.toLowerCase();
        });
        function split(string2, separator, limit) {
          if (limit && typeof limit != "number" && isIterateeCall(string2, separator, limit)) {
            separator = limit = undefined$1;
          }
          limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
          if (!limit) {
            return [];
          }
          string2 = toString(string2);
          if (string2 && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
            separator = baseToString(separator);
            if (!separator && hasUnicode(string2)) {
              return castSlice(stringToArray(string2), 0, limit);
            }
          }
          return string2.split(separator, limit);
        }
        var startCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + upperFirst(word);
        });
        function startsWith(string2, target, position) {
          string2 = toString(string2);
          position = position == null ? 0 : baseClamp(toInteger(position), 0, string2.length);
          target = baseToString(target);
          return string2.slice(position, position + target.length) == target;
        }
        function template(string2, options, guard) {
          var settings = lodash2.templateSettings;
          if (guard && isIterateeCall(string2, options, guard)) {
            options = undefined$1;
          }
          string2 = toString(string2);
          options = assignInWith({}, options, settings, customDefaultsAssignIn);
          var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
          var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
          var reDelimiters = RegExp2(
            (options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$",
            "g"
          );
          var sourceURL = "//# sourceURL=" + (hasOwnProperty.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
          string2.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
            interpolateValue || (interpolateValue = esTemplateValue);
            source += string2.slice(index, offset).replace(reUnescapedString, escapeStringChar);
            if (escapeValue) {
              isEscaping = true;
              source += "' +\n__e(" + escapeValue + ") +\n'";
            }
            if (evaluateValue) {
              isEvaluating = true;
              source += "';\n" + evaluateValue + ";\n__p += '";
            }
            if (interpolateValue) {
              source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
            }
            index = offset + match.length;
            return match;
          });
          source += "';\n";
          var variable = hasOwnProperty.call(options, "variable") && options.variable;
          if (!variable) {
            source = "with (obj) {\n" + source + "\n}\n";
          } else if (reForbiddenIdentifierChars.test(variable)) {
            throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
          }
          source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
          source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
          var result2 = attempt(function() {
            return Function2(importsKeys, sourceURL + "return " + source).apply(undefined$1, importsValues);
          });
          result2.source = source;
          if (isError(result2)) {
            throw result2;
          }
          return result2;
        }
        function toLower(value) {
          return toString(value).toLowerCase();
        }
        function toUpper(value) {
          return toString(value).toUpperCase();
        }
        function trim2(string2, chars, guard) {
          string2 = toString(string2);
          if (string2 && (guard || chars === undefined$1)) {
            return baseTrim(string2);
          }
          if (!string2 || !(chars = baseToString(chars))) {
            return string2;
          }
          var strSymbols = stringToArray(string2), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
          return castSlice(strSymbols, start, end).join("");
        }
        function trimEnd(string2, chars, guard) {
          string2 = toString(string2);
          if (string2 && (guard || chars === undefined$1)) {
            return string2.slice(0, trimmedEndIndex(string2) + 1);
          }
          if (!string2 || !(chars = baseToString(chars))) {
            return string2;
          }
          var strSymbols = stringToArray(string2), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
          return castSlice(strSymbols, 0, end).join("");
        }
        function trimStart(string2, chars, guard) {
          string2 = toString(string2);
          if (string2 && (guard || chars === undefined$1)) {
            return string2.replace(reTrimStart, "");
          }
          if (!string2 || !(chars = baseToString(chars))) {
            return string2;
          }
          var strSymbols = stringToArray(string2), start = charsStartIndex(strSymbols, stringToArray(chars));
          return castSlice(strSymbols, start).join("");
        }
        function truncate(string2, options) {
          var length2 = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
          if (isObject2(options)) {
            var separator = "separator" in options ? options.separator : separator;
            length2 = "length" in options ? toInteger(options.length) : length2;
            omission = "omission" in options ? baseToString(options.omission) : omission;
          }
          string2 = toString(string2);
          var strLength = string2.length;
          if (hasUnicode(string2)) {
            var strSymbols = stringToArray(string2);
            strLength = strSymbols.length;
          }
          if (length2 >= strLength) {
            return string2;
          }
          var end = length2 - stringSize(omission);
          if (end < 1) {
            return omission;
          }
          var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string2.slice(0, end);
          if (separator === undefined$1) {
            return result2 + omission;
          }
          if (strSymbols) {
            end += result2.length - end;
          }
          if (isRegExp(separator)) {
            if (string2.slice(end).search(separator)) {
              var match, substring = result2;
              if (!separator.global) {
                separator = RegExp2(separator.source, toString(reFlags.exec(separator)) + "g");
              }
              separator.lastIndex = 0;
              while (match = separator.exec(substring)) {
                var newEnd = match.index;
              }
              result2 = result2.slice(0, newEnd === undefined$1 ? end : newEnd);
            }
          } else if (string2.indexOf(baseToString(separator), end) != end) {
            var index = result2.lastIndexOf(separator);
            if (index > -1) {
              result2 = result2.slice(0, index);
            }
          }
          return result2 + omission;
        }
        function unescape2(string2) {
          string2 = toString(string2);
          return string2 && reHasEscapedHtml.test(string2) ? string2.replace(reEscapedHtml, unescapeHtmlChar) : string2;
        }
        var upperCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toUpperCase();
        });
        var upperFirst = createCaseFirst("toUpperCase");
        function words(string2, pattern, guard) {
          string2 = toString(string2);
          pattern = guard ? undefined$1 : pattern;
          if (pattern === undefined$1) {
            return hasUnicodeWord(string2) ? unicodeWords(string2) : asciiWords(string2);
          }
          return string2.match(pattern) || [];
        }
        var attempt = baseRest(function(func2, args) {
          try {
            return apply(func2, undefined$1, args);
          } catch (e2) {
            return isError(e2) ? e2 : new Error2(e2);
          }
        });
        var bindAll = flatRest(function(object2, methodNames) {
          arrayEach(methodNames, function(key) {
            key = toKey(key);
            baseAssignValue(object2, key, bind(object2[key], object2));
          });
          return object2;
        });
        function cond(pairs) {
          var length2 = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
          pairs = !length2 ? [] : arrayMap(pairs, function(pair) {
            if (typeof pair[1] != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return [toIteratee(pair[0]), pair[1]];
          });
          return baseRest(function(args) {
            var index = -1;
            while (++index < length2) {
              var pair = pairs[index];
              if (apply(pair[0], this, args)) {
                return apply(pair[1], this, args);
              }
            }
          });
        }
        function conforms(source) {
          return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        function constant(value) {
          return function() {
            return value;
          };
        }
        function defaultTo(value, defaultValue) {
          return value == null || value !== value ? defaultValue : value;
        }
        var flow = createFlow();
        var flowRight = createFlow(true);
        function identity(value) {
          return value;
        }
        function iteratee(func2) {
          return baseIteratee(typeof func2 == "function" ? func2 : baseClone(func2, CLONE_DEEP_FLAG));
        }
        function matches(source) {
          return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        function matchesProperty(path, srcValue) {
          return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
        }
        var method2 = baseRest(function(path, args) {
          return function(object2) {
            return baseInvoke(object2, path, args);
          };
        });
        var methodOf = baseRest(function(object2, args) {
          return function(path) {
            return baseInvoke(object2, path, args);
          };
        });
        function mixin2(object2, source, options) {
          var props = keys(source), methodNames = baseFunctions(source, props);
          if (options == null && !(isObject2(source) && (methodNames.length || !props.length))) {
            options = source;
            source = object2;
            object2 = this;
            methodNames = baseFunctions(source, keys(source));
          }
          var chain2 = !(isObject2(options) && "chain" in options) || !!options.chain, isFunc = isFunction(object2);
          arrayEach(methodNames, function(methodName) {
            var func2 = source[methodName];
            object2[methodName] = func2;
            if (isFunc) {
              object2.prototype[methodName] = function() {
                var chainAll = this.__chain__;
                if (chain2 || chainAll) {
                  var result2 = object2(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                  actions.push({ "func": func2, "args": arguments, "thisArg": object2 });
                  result2.__chain__ = chainAll;
                  return result2;
                }
                return func2.apply(object2, arrayPush([this.value()], arguments));
              };
            }
          });
          return object2;
        }
        function noConflict() {
          if (root._ === this) {
            root._ = oldDash;
          }
          return this;
        }
        function noop2() {
        }
        function nthArg(n2) {
          n2 = toInteger(n2);
          return baseRest(function(args) {
            return baseNth(args, n2);
          });
        }
        var over = createOver(arrayMap);
        var overEvery = createOver(arrayEvery);
        var overSome = createOver(arraySome);
        function property(path) {
          return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }
        function propertyOf(object2) {
          return function(path) {
            return object2 == null ? undefined$1 : baseGet(object2, path);
          };
        }
        var range2 = createRange();
        var rangeRight = createRange(true);
        function stubArray() {
          return [];
        }
        function stubFalse() {
          return false;
        }
        function stubObject() {
          return {};
        }
        function stubString() {
          return "";
        }
        function stubTrue() {
          return true;
        }
        function times(n2, iteratee2) {
          n2 = toInteger(n2);
          if (n2 < 1 || n2 > MAX_SAFE_INTEGER) {
            return [];
          }
          var index = MAX_ARRAY_LENGTH, length2 = nativeMin(n2, MAX_ARRAY_LENGTH);
          iteratee2 = getIteratee(iteratee2);
          n2 -= MAX_ARRAY_LENGTH;
          var result2 = baseTimes(length2, iteratee2);
          while (++index < n2) {
            iteratee2(index);
          }
          return result2;
        }
        function toPath(value) {
          if (isArray2(value)) {
            return arrayMap(value, toKey);
          }
          return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
        }
        function uniqueId(prefix) {
          var id = ++idCounter;
          return toString(prefix) + id;
        }
        var add = createMathOperation(function(augend, addend) {
          return augend + addend;
        }, 0);
        var ceil = createRound("ceil");
        var divide = createMathOperation(function(dividend, divisor) {
          return dividend / divisor;
        }, 1);
        var floor = createRound("floor");
        function max(array2) {
          return array2 && array2.length ? baseExtremum(array2, identity, baseGt) : undefined$1;
        }
        function maxBy(array2, iteratee2) {
          return array2 && array2.length ? baseExtremum(array2, getIteratee(iteratee2, 2), baseGt) : undefined$1;
        }
        function mean(array2) {
          return baseMean(array2, identity);
        }
        function meanBy(array2, iteratee2) {
          return baseMean(array2, getIteratee(iteratee2, 2));
        }
        function min(array2) {
          return array2 && array2.length ? baseExtremum(array2, identity, baseLt) : undefined$1;
        }
        function minBy(array2, iteratee2) {
          return array2 && array2.length ? baseExtremum(array2, getIteratee(iteratee2, 2), baseLt) : undefined$1;
        }
        var multiply = createMathOperation(function(multiplier, multiplicand) {
          return multiplier * multiplicand;
        }, 1);
        var round = createRound("round");
        var subtract = createMathOperation(function(minuend, subtrahend) {
          return minuend - subtrahend;
        }, 0);
        function sum(array2) {
          return array2 && array2.length ? baseSum(array2, identity) : 0;
        }
        function sumBy(array2, iteratee2) {
          return array2 && array2.length ? baseSum(array2, getIteratee(iteratee2, 2)) : 0;
        }
        lodash2.after = after;
        lodash2.ary = ary;
        lodash2.assign = assign;
        lodash2.assignIn = assignIn;
        lodash2.assignInWith = assignInWith;
        lodash2.assignWith = assignWith;
        lodash2.at = at2;
        lodash2.before = before;
        lodash2.bind = bind;
        lodash2.bindAll = bindAll;
        lodash2.bindKey = bindKey;
        lodash2.castArray = castArray;
        lodash2.chain = chain;
        lodash2.chunk = chunk;
        lodash2.compact = compact;
        lodash2.concat = concat;
        lodash2.cond = cond;
        lodash2.conforms = conforms;
        lodash2.constant = constant;
        lodash2.countBy = countBy;
        lodash2.create = create;
        lodash2.curry = curry;
        lodash2.curryRight = curryRight;
        lodash2.debounce = debounce2;
        lodash2.defaults = defaults2;
        lodash2.defaultsDeep = defaultsDeep;
        lodash2.defer = defer;
        lodash2.delay = delay;
        lodash2.difference = difference;
        lodash2.differenceBy = differenceBy;
        lodash2.differenceWith = differenceWith;
        lodash2.drop = drop;
        lodash2.dropRight = dropRight;
        lodash2.dropRightWhile = dropRightWhile;
        lodash2.dropWhile = dropWhile;
        lodash2.fill = fill;
        lodash2.filter = filter;
        lodash2.flatMap = flatMap;
        lodash2.flatMapDeep = flatMapDeep;
        lodash2.flatMapDepth = flatMapDepth;
        lodash2.flatten = flatten;
        lodash2.flattenDeep = flattenDeep;
        lodash2.flattenDepth = flattenDepth;
        lodash2.flip = flip;
        lodash2.flow = flow;
        lodash2.flowRight = flowRight;
        lodash2.fromPairs = fromPairs;
        lodash2.functions = functions;
        lodash2.functionsIn = functionsIn;
        lodash2.groupBy = groupBy;
        lodash2.initial = initial;
        lodash2.intersection = intersection;
        lodash2.intersectionBy = intersectionBy;
        lodash2.intersectionWith = intersectionWith;
        lodash2.invert = invert;
        lodash2.invertBy = invertBy;
        lodash2.invokeMap = invokeMap;
        lodash2.iteratee = iteratee;
        lodash2.keyBy = keyBy;
        lodash2.keys = keys;
        lodash2.keysIn = keysIn;
        lodash2.map = map;
        lodash2.mapKeys = mapKeys;
        lodash2.mapValues = mapValues;
        lodash2.matches = matches;
        lodash2.matchesProperty = matchesProperty;
        lodash2.memoize = memoize;
        lodash2.merge = merge2;
        lodash2.mergeWith = mergeWith;
        lodash2.method = method2;
        lodash2.methodOf = methodOf;
        lodash2.mixin = mixin2;
        lodash2.negate = negate;
        lodash2.nthArg = nthArg;
        lodash2.omit = omit;
        lodash2.omitBy = omitBy;
        lodash2.once = once;
        lodash2.orderBy = orderBy;
        lodash2.over = over;
        lodash2.overArgs = overArgs;
        lodash2.overEvery = overEvery;
        lodash2.overSome = overSome;
        lodash2.partial = partial;
        lodash2.partialRight = partialRight;
        lodash2.partition = partition;
        lodash2.pick = pick;
        lodash2.pickBy = pickBy;
        lodash2.property = property;
        lodash2.propertyOf = propertyOf;
        lodash2.pull = pull;
        lodash2.pullAll = pullAll;
        lodash2.pullAllBy = pullAllBy;
        lodash2.pullAllWith = pullAllWith;
        lodash2.pullAt = pullAt;
        lodash2.range = range2;
        lodash2.rangeRight = rangeRight;
        lodash2.rearg = rearg;
        lodash2.reject = reject;
        lodash2.remove = remove;
        lodash2.rest = rest;
        lodash2.reverse = reverse;
        lodash2.sampleSize = sampleSize;
        lodash2.set = set;
        lodash2.setWith = setWith;
        lodash2.shuffle = shuffle;
        lodash2.slice = slice;
        lodash2.sortBy = sortBy;
        lodash2.sortedUniq = sortedUniq;
        lodash2.sortedUniqBy = sortedUniqBy;
        lodash2.split = split;
        lodash2.spread = spread;
        lodash2.tail = tail;
        lodash2.take = take;
        lodash2.takeRight = takeRight;
        lodash2.takeRightWhile = takeRightWhile;
        lodash2.takeWhile = takeWhile;
        lodash2.tap = tap;
        lodash2.throttle = throttle2;
        lodash2.thru = thru;
        lodash2.toArray = toArray;
        lodash2.toPairs = toPairs;
        lodash2.toPairsIn = toPairsIn;
        lodash2.toPath = toPath;
        lodash2.toPlainObject = toPlainObject;
        lodash2.transform = transform;
        lodash2.unary = unary;
        lodash2.union = union;
        lodash2.unionBy = unionBy;
        lodash2.unionWith = unionWith;
        lodash2.uniq = uniq;
        lodash2.uniqBy = uniqBy;
        lodash2.uniqWith = uniqWith;
        lodash2.unset = unset;
        lodash2.unzip = unzip;
        lodash2.unzipWith = unzipWith;
        lodash2.update = update;
        lodash2.updateWith = updateWith;
        lodash2.values = values;
        lodash2.valuesIn = valuesIn;
        lodash2.without = without;
        lodash2.words = words;
        lodash2.wrap = wrap;
        lodash2.xor = xor;
        lodash2.xorBy = xorBy;
        lodash2.xorWith = xorWith;
        lodash2.zip = zip;
        lodash2.zipObject = zipObject;
        lodash2.zipObjectDeep = zipObjectDeep;
        lodash2.zipWith = zipWith;
        lodash2.entries = toPairs;
        lodash2.entriesIn = toPairsIn;
        lodash2.extend = assignIn;
        lodash2.extendWith = assignInWith;
        mixin2(lodash2, lodash2);
        lodash2.add = add;
        lodash2.attempt = attempt;
        lodash2.camelCase = camelCase;
        lodash2.capitalize = capitalize;
        lodash2.ceil = ceil;
        lodash2.clamp = clamp;
        lodash2.clone = clone;
        lodash2.cloneDeep = cloneDeep;
        lodash2.cloneDeepWith = cloneDeepWith;
        lodash2.cloneWith = cloneWith;
        lodash2.conformsTo = conformsTo;
        lodash2.deburr = deburr;
        lodash2.defaultTo = defaultTo;
        lodash2.divide = divide;
        lodash2.endsWith = endsWith;
        lodash2.eq = eq;
        lodash2.escape = escape2;
        lodash2.escapeRegExp = escapeRegExp;
        lodash2.every = every;
        lodash2.find = find;
        lodash2.findIndex = findIndex;
        lodash2.findKey = findKey;
        lodash2.findLast = findLast;
        lodash2.findLastIndex = findLastIndex;
        lodash2.findLastKey = findLastKey;
        lodash2.floor = floor;
        lodash2.forEach = forEach;
        lodash2.forEachRight = forEachRight;
        lodash2.forIn = forIn;
        lodash2.forInRight = forInRight;
        lodash2.forOwn = forOwn;
        lodash2.forOwnRight = forOwnRight;
        lodash2.get = get;
        lodash2.gt = gt2;
        lodash2.gte = gte;
        lodash2.has = has;
        lodash2.hasIn = hasIn;
        lodash2.head = head;
        lodash2.identity = identity;
        lodash2.includes = includes;
        lodash2.indexOf = indexOf;
        lodash2.inRange = inRange;
        lodash2.invoke = invoke;
        lodash2.isArguments = isArguments;
        lodash2.isArray = isArray2;
        lodash2.isArrayBuffer = isArrayBuffer;
        lodash2.isArrayLike = isArrayLike;
        lodash2.isArrayLikeObject = isArrayLikeObject;
        lodash2.isBoolean = isBoolean;
        lodash2.isBuffer = isBuffer;
        lodash2.isDate = isDate;
        lodash2.isElement = isElement;
        lodash2.isEmpty = isEmpty;
        lodash2.isEqual = isEqual;
        lodash2.isEqualWith = isEqualWith;
        lodash2.isError = isError;
        lodash2.isFinite = isFinite;
        lodash2.isFunction = isFunction;
        lodash2.isInteger = isInteger;
        lodash2.isLength = isLength;
        lodash2.isMap = isMap;
        lodash2.isMatch = isMatch;
        lodash2.isMatchWith = isMatchWith;
        lodash2.isNaN = isNaN2;
        lodash2.isNative = isNative;
        lodash2.isNil = isNil;
        lodash2.isNull = isNull;
        lodash2.isNumber = isNumber;
        lodash2.isObject = isObject2;
        lodash2.isObjectLike = isObjectLike;
        lodash2.isPlainObject = isPlainObject;
        lodash2.isRegExp = isRegExp;
        lodash2.isSafeInteger = isSafeInteger;
        lodash2.isSet = isSet;
        lodash2.isString = isString;
        lodash2.isSymbol = isSymbol;
        lodash2.isTypedArray = isTypedArray;
        lodash2.isUndefined = isUndefined;
        lodash2.isWeakMap = isWeakMap;
        lodash2.isWeakSet = isWeakSet;
        lodash2.join = join;
        lodash2.kebabCase = kebabCase;
        lodash2.last = last;
        lodash2.lastIndexOf = lastIndexOf;
        lodash2.lowerCase = lowerCase;
        lodash2.lowerFirst = lowerFirst;
        lodash2.lt = lt2;
        lodash2.lte = lte;
        lodash2.max = max;
        lodash2.maxBy = maxBy;
        lodash2.mean = mean;
        lodash2.meanBy = meanBy;
        lodash2.min = min;
        lodash2.minBy = minBy;
        lodash2.stubArray = stubArray;
        lodash2.stubFalse = stubFalse;
        lodash2.stubObject = stubObject;
        lodash2.stubString = stubString;
        lodash2.stubTrue = stubTrue;
        lodash2.multiply = multiply;
        lodash2.nth = nth;
        lodash2.noConflict = noConflict;
        lodash2.noop = noop2;
        lodash2.now = now;
        lodash2.pad = pad;
        lodash2.padEnd = padEnd;
        lodash2.padStart = padStart;
        lodash2.parseInt = parseInt2;
        lodash2.random = random2;
        lodash2.reduce = reduce;
        lodash2.reduceRight = reduceRight;
        lodash2.repeat = repeat;
        lodash2.replace = replace;
        lodash2.result = result;
        lodash2.round = round;
        lodash2.runInContext = runInContext2;
        lodash2.sample = sample;
        lodash2.size = size;
        lodash2.snakeCase = snakeCase;
        lodash2.some = some;
        lodash2.sortedIndex = sortedIndex;
        lodash2.sortedIndexBy = sortedIndexBy;
        lodash2.sortedIndexOf = sortedIndexOf;
        lodash2.sortedLastIndex = sortedLastIndex;
        lodash2.sortedLastIndexBy = sortedLastIndexBy;
        lodash2.sortedLastIndexOf = sortedLastIndexOf;
        lodash2.startCase = startCase;
        lodash2.startsWith = startsWith;
        lodash2.subtract = subtract;
        lodash2.sum = sum;
        lodash2.sumBy = sumBy;
        lodash2.template = template;
        lodash2.times = times;
        lodash2.toFinite = toFinite;
        lodash2.toInteger = toInteger;
        lodash2.toLength = toLength;
        lodash2.toLower = toLower;
        lodash2.toNumber = toNumber;
        lodash2.toSafeInteger = toSafeInteger;
        lodash2.toString = toString;
        lodash2.toUpper = toUpper;
        lodash2.trim = trim2;
        lodash2.trimEnd = trimEnd;
        lodash2.trimStart = trimStart;
        lodash2.truncate = truncate;
        lodash2.unescape = unescape2;
        lodash2.uniqueId = uniqueId;
        lodash2.upperCase = upperCase;
        lodash2.upperFirst = upperFirst;
        lodash2.each = forEach;
        lodash2.eachRight = forEachRight;
        lodash2.first = head;
        mixin2(lodash2, function() {
          var source = {};
          baseForOwn(lodash2, function(func2, methodName) {
            if (!hasOwnProperty.call(lodash2.prototype, methodName)) {
              source[methodName] = func2;
            }
          });
          return source;
        }(), { "chain": false });
        lodash2.VERSION = VERSION;
        arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
          lodash2[methodName].placeholder = lodash2;
        });
        arrayEach(["drop", "take"], function(methodName, index) {
          LazyWrapper.prototype[methodName] = function(n2) {
            n2 = n2 === undefined$1 ? 1 : nativeMax(toInteger(n2), 0);
            var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
            if (result2.__filtered__) {
              result2.__takeCount__ = nativeMin(n2, result2.__takeCount__);
            } else {
              result2.__views__.push({
                "size": nativeMin(n2, MAX_ARRAY_LENGTH),
                "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
              });
            }
            return result2;
          };
          LazyWrapper.prototype[methodName + "Right"] = function(n2) {
            return this.reverse()[methodName](n2).reverse();
          };
        });
        arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
          var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
          LazyWrapper.prototype[methodName] = function(iteratee2) {
            var result2 = this.clone();
            result2.__iteratees__.push({
              "iteratee": getIteratee(iteratee2, 3),
              "type": type
            });
            result2.__filtered__ = result2.__filtered__ || isFilter;
            return result2;
          };
        });
        arrayEach(["head", "last"], function(methodName, index) {
          var takeName = "take" + (index ? "Right" : "");
          LazyWrapper.prototype[methodName] = function() {
            return this[takeName](1).value()[0];
          };
        });
        arrayEach(["initial", "tail"], function(methodName, index) {
          var dropName = "drop" + (index ? "" : "Right");
          LazyWrapper.prototype[methodName] = function() {
            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
          };
        });
        LazyWrapper.prototype.compact = function() {
          return this.filter(identity);
        };
        LazyWrapper.prototype.find = function(predicate) {
          return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function(predicate) {
          return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
          if (typeof path == "function") {
            return new LazyWrapper(this);
          }
          return this.map(function(value) {
            return baseInvoke(value, path, args);
          });
        });
        LazyWrapper.prototype.reject = function(predicate) {
          return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function(start, end) {
          start = toInteger(start);
          var result2 = this;
          if (result2.__filtered__ && (start > 0 || end < 0)) {
            return new LazyWrapper(result2);
          }
          if (start < 0) {
            result2 = result2.takeRight(-start);
          } else if (start) {
            result2 = result2.drop(start);
          }
          if (end !== undefined$1) {
            end = toInteger(end);
            result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
          }
          return result2;
        };
        LazyWrapper.prototype.takeRightWhile = function(predicate) {
          return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function() {
          return this.take(MAX_ARRAY_LENGTH);
        };
        baseForOwn(LazyWrapper.prototype, function(func2, methodName) {
          var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash2[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
          if (!lodashFunc) {
            return;
          }
          lodash2.prototype[methodName] = function() {
            var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray2(value);
            var interceptor = function(value2) {
              var result3 = lodashFunc.apply(lodash2, arrayPush([value2], args));
              return isTaker && chainAll ? result3[0] : result3;
            };
            if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
              isLazy = useLazy = false;
            }
            var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
            if (!retUnwrapped && useLazy) {
              value = onlyLazy ? value : new LazyWrapper(this);
              var result2 = func2.apply(value, args);
              result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined$1 });
              return new LodashWrapper(result2, chainAll);
            }
            if (isUnwrapped && onlyLazy) {
              return func2.apply(this, args);
            }
            result2 = this.thru(interceptor);
            return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
          };
        });
        arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
          var func2 = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
          lodash2.prototype[methodName] = function() {
            var args = arguments;
            if (retUnwrapped && !this.__chain__) {
              var value = this.value();
              return func2.apply(isArray2(value) ? value : [], args);
            }
            return this[chainName](function(value2) {
              return func2.apply(isArray2(value2) ? value2 : [], args);
            });
          };
        });
        baseForOwn(LazyWrapper.prototype, function(func2, methodName) {
          var lodashFunc = lodash2[methodName];
          if (lodashFunc) {
            var key = lodashFunc.name + "";
            if (!hasOwnProperty.call(realNames, key)) {
              realNames[key] = [];
            }
            realNames[key].push({ "name": methodName, "func": lodashFunc });
          }
        });
        realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{
          "name": "wrapper",
          "func": undefined$1
        }];
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        lodash2.prototype.at = wrapperAt;
        lodash2.prototype.chain = wrapperChain;
        lodash2.prototype.commit = wrapperCommit;
        lodash2.prototype.next = wrapperNext;
        lodash2.prototype.plant = wrapperPlant;
        lodash2.prototype.reverse = wrapperReverse;
        lodash2.prototype.toJSON = lodash2.prototype.valueOf = lodash2.prototype.value = wrapperValue;
        lodash2.prototype.first = lodash2.prototype.head;
        if (symIterator) {
          lodash2.prototype[symIterator] = wrapperToIterator;
        }
        return lodash2;
      };
      var _2 = runInContext();
      if (freeModule) {
        (freeModule.exports = _2)._ = _2;
        freeExports._ = _2;
      } else {
        root._ = _2;
      }
    }).call(commonjsGlobal);
  })(lodash, lodash.exports);
  var lodashExports = lodash.exports;
  const e = "undefined" != typeof wx && "function" == typeof wx.getSystemInfoSync && Boolean(wx.getSystemInfoSync().fontSizeSetting), t = "undefined" != typeof uni && "undefined" == typeof window, n = e || t, o = "undefined" != typeof uni, r = ("undefined" != typeof uni || "undefined" != typeof window) && !n, i = e ? wx : o ? uni : "undefined" != typeof window ? window : {}, s = r && window && window.navigator && window.navigator.userAgent || "", c = /Android/i.test(s), l = /(?:Windows Phone)/.test(s), a = /(?:SymbianOS)/.test(s), u = /OpenHarmony/i.test(s), d = r && ("ontouchstart" in window || navigator.maxTouchPoints > 0) && function() {
    if (r) {
      if (/Tablet|Pad/i.test(s))
        return true;
      if (180 === window.orientation || 0 === window.orientation)
        return window.innerWidth >= 768 && window.innerHeight >= 1024;
      if (90 === window.orientation || -90 === window.orientation)
        return window.innerWidth >= 1024 && window.innerHeight >= 768;
    }
    return false;
  }(), f = /iPhone/i.test(s) || /iPod/i.test(s), w = e, h = c || l || a || f || d || u, m = r && !h, p = t && !e;
  function g() {
    let e2 = "";
    return m ? e2 = "pc" : h ? e2 = "h5" : w ? e2 = "wechat" : p && (e2 = "app"), e2;
  }
  const E = /* @__PURE__ */ new Map();
  function v(e2, t2) {
    E.set(e2, t2);
  }
  function T(e2, t2) {
    if (!e2)
      return Promise.reject(new Error(`getBoundingClientRect get error selector ${typeof e2}.`));
    if (window || document) {
      const t3 = "object" == typeof e2 ? e2 : document.querySelector(e2);
      if (!t3)
        return Promise.reject(new Error(`getBoundingClientRect can't find ${e2} dom.`));
      const n2 = t3.getBoundingClientRect();
      return Promise.resolve({ id: t3.id, top: n2.top, left: n2.left, right: n2.right, bottom: n2.bottom, width: n2.width, height: n2.height, x: n2.x, y: n2.y });
    }
    if (o) {
      if (!t2)
        return Promise.reject(new Error("getBoundingClientRect need instanceName in params."));
      const n2 = uni.createSelectorQuery().in(E.get(t2));
      return new Promise((t3, o2) => {
        n2.select(e2).boundingClientRect((e3) => {
          e3 && t3(e3);
        }).exec(), setTimeout(() => o2(new Error(`getBoundingClientRect ${e2} timeout.`)), 500);
      });
    }
    return Promise.reject(new Error("getBoundingClientRect occur error"));
  }
  function P(e2, t2) {
    if (!e2)
      return Promise.reject(new Error(`getScrollInfo get error selector ${typeof e2}.`));
    if (!o && window) {
      const t3 = "object" == typeof e2 ? e2 : document.querySelector(e2);
      return t3 ? Promise.resolve({ id: t3.id, scrollTop: t3.scrollTop, scrollLeft: t3.scrollLeft, scrollWidth: t3.scrollWidth, scrollHeight: t3.scrollHeight }) : Promise.reject(new Error(`getScrollInfo can't find ${e2} dom.`));
    }
    if (o) {
      if (!t2)
        return Promise.reject(new Error("getScrollInfo need instanceName in params."));
      const n2 = uni.createSelectorQuery().in(E.get(t2));
      return new Promise((t3, o2) => {
        n2.select(e2).scrollOffset((e3) => {
          e3 && t3(e3);
        }).exec(), setTimeout(() => o2(new Error(`getScrollInfo ${e2} timeout.`)), 500);
      });
    }
    return Promise.reject(new Error("getScrollInfo occur error"));
  }
  class L {
    constructor() {
      if (L.instance)
        return L.instance;
      L.instance = this, this.eventCallback = null, this.listener = null, this.button = 0, this.init();
    }
    init() {
      r && (this.eventCallback = (e2) => {
        this.listener && this.listener(e2);
      }, document.addEventListener("mousedown", this.eventCallback));
    }
    listen(e2) {
      if (r) {
        const { domRefs: t2, ignoreDomRefs: n2, handler: o2, button: r2 = 0 } = e2;
        this.button = r2, this.listener = (e3) => {
          const r3 = Array.isArray(n2) ? n2 : [n2];
          for (const t3 of r3)
            if (t3 && t3.contains(e3.target))
              return;
          const i2 = Array.isArray(t2) ? t2 : [t2];
          for (const t3 of i2)
            if (t3 && t3.contains(e3.target) && this.button === e3.button)
              return;
          o2(e3), this.remove();
        };
      }
    }
    remove() {
      this.listener = null, this.button = -1;
    }
  }
  formatAppLog("log", "at node_modules/@tencentcloud/universal-api/index.js:1", "UniversalAPI.VERSION:2.4.0");
  new L();
  const addIcon = "/assets/back.e9626a2e.svg";
  const playIcon = "/assets/video-play.58b451c9.png";
  const isPC = g() === "pc";
  const isH5 = g() === "h5";
  const isWeChat = g() === "wechat";
  const isApp = g() === "app";
  const isUniFrameWork = typeof uni !== "undefined";
  const isMobile = isH5 || isWeChat || isApp;
  const _sfc_main$15 = /* @__PURE__ */ vue$1.defineComponent({
    __name: "Icon",
    props: {
      file: { type: String, required: true, default: "" },
      size: { type: String, required: false },
      width: { type: String, required: false, default: "20px" },
      height: { type: String, required: false, default: "20px" },
      hotAreaSize: { type: [Number, String], required: false }
    },
    emits: ["onClick"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const { withDefaults, computed: computed2 } = vue;
      const emits = __emit;
      const props = __props;
      const iconHotAreaSize = computed2(() => {
        if (!props.hotAreaSize) {
          return void 0;
        }
        if (isNaN(Number(props.hotAreaSize))) {
          return String(props.hotAreaSize);
        }
        return `${props.hotAreaSize}px`;
      });
      const iconWidth = computed2(() => {
        return props.size ? props.size : props.width;
      });
      const iconHeight = computed2(() => {
        return props.size ? props.size : props.height;
      });
      const handleImgClick = (e2) => {
        emits("onClick", e2);
      };
      const __returned__ = { withDefaults, computed: computed2, emits, props, iconHotAreaSize, iconWidth, iconHeight, handleImgClick, get isApp() {
        return isApp;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$14(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock(
      "div",
      {
        class: vue$1.normalizeClass(["common-icon-container", "common-icon-container-mobile"]),
        style: vue$1.normalizeStyle({
          padding: $setup.iconHotAreaSize
        }),
        onClick: $setup.handleImgClick
      },
      [
        $setup.isApp ? (vue$1.openBlock(), vue$1.createElementBlock("image", {
          key: 0,
          class: "common-icon",
          src: $setup.props.file,
          style: vue$1.normalizeStyle({ width: $setup.iconWidth, height: $setup.iconHeight })
        }, null, 12, ["src"])) : (vue$1.openBlock(), vue$1.createElementBlock("img", {
          key: 1,
          class: "common-icon",
          src: $setup.props.file,
          style: vue$1.normalizeStyle({ width: $setup.iconWidth, height: $setup.iconHeight })
        }, null, 12, ["src"]))
      ],
      4
      /* STYLE */
    );
  }
  const Icon$1 = /* @__PURE__ */ _export_sfc(_sfc_main$15, [["render", _sfc_render$14], ["__scopeId", "data-v-7ac21aed"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/common/Icon.vue"]]);
  const _sfc_main$14 = /* @__PURE__ */ vue$1.defineComponent({
    __name: "index",
    props: {
      url: { type: String, required: true, default: "https://web.sdk.qcloud.com/component/TUIKit/assets/avatar_21.png" },
      size: { type: String, required: false, default: "36px" },
      borderRadius: { type: String, required: false, default: "50%" },
      useSkeletonAnimation: { type: Boolean, required: false, default: false }
    },
    emits: ["onLoad", "onError"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const { ref: ref2, toRefs: toRefs2 } = vue;
      const defaultAvatarUrl = ref2(
        "https://web.sdk.qcloud.com/component/TUIKit/assets/avatar_21.png"
      );
      const emits = __emit;
      const props = __props;
      const {
        size: avatarSize,
        url: avatarImageUrl,
        borderRadius: avatarBorderRadius,
        useSkeletonAnimation: useAvatarSkeletonAnimation
      } = toRefs2(props);
      let reloadAvatarTime = 0;
      const isImgLoaded = ref2(false);
      const loadErrorInUniapp = ref2(false);
      function avatarLoadSuccess(e2) {
        isImgLoaded.value = true;
        emits("onLoad", e2);
      }
      function avatarLoadFailed(e2) {
        reloadAvatarTime += 1;
        if (reloadAvatarTime > 3) {
          return;
        }
        loadErrorInUniapp.value = true;
        emits("onError", e2);
      }
      const __returned__ = { ref: ref2, toRefs: toRefs2, defaultAvatarUrl, emits, props, avatarSize, avatarImageUrl, avatarBorderRadius, useAvatarSkeletonAnimation, get reloadAvatarTime() {
        return reloadAvatarTime;
      }, set reloadAvatarTime(v2) {
        reloadAvatarTime = v2;
      }, isImgLoaded, loadErrorInUniapp, avatarLoadSuccess, avatarLoadFailed };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$13(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock(
      "div",
      {
        class: "avatar-container",
        style: vue$1.normalizeStyle({
          width: $setup.avatarSize,
          height: $setup.avatarSize,
          borderRadius: $setup.avatarBorderRadius
        })
      },
      [
        vue$1.createElementVNode("template", null, [
          !$setup.loadErrorInUniapp ? (vue$1.openBlock(), vue$1.createElementBlock("image", {
            key: 0,
            class: "avatar-image",
            src: $setup.avatarImageUrl || $setup.defaultAvatarUrl,
            onLoad: $setup.avatarLoadSuccess,
            onError: $setup.avatarLoadFailed
          }, null, 40, ["src"])) : (vue$1.openBlock(), vue$1.createElementBlock("image", {
            key: 1,
            class: "avatar-image",
            src: $setup.defaultAvatarUrl,
            onLoad: $setup.avatarLoadSuccess,
            onError: $setup.avatarLoadFailed
          }, null, 40, ["src"]))
        ]),
        $setup.useAvatarSkeletonAnimation && !$setup.isImgLoaded ? (vue$1.openBlock(), vue$1.createElementBlock(
          "div",
          {
            key: 0,
            class: vue$1.normalizeClass({
              placeholder: true,
              hidden: $setup.isImgLoaded,
              "skeleton-animation": $setup.useAvatarSkeletonAnimation
            })
          },
          null,
          2
          /* CLASS */
        )) : vue$1.createCommentVNode("v-if", true)
      ],
      4
      /* STYLE */
    );
  }
  const Avatar = /* @__PURE__ */ _export_sfc(_sfc_main$14, [["render", _sfc_render$13], ["__scopeId", "data-v-4faf8a8c"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/common/Avatar/index.vue"]]);
  const CUSTOM_MESSAGE_SRC = {
    OFFICIAL_ACCOUNT: "1",
    MINI_APP: "2",
    MINI_APP_SERVICE_ACCOUNT: "3",
    BACKEND_INTERNAL: "4",
    WEB: "5",
    SESSION_MESSAGE_SLICE: "6",
    MINI_APP_AUTO: "7",
    INTERNAL: "8",
    MENU: "9",
    MENU_SELECTED: "10",
    CLIENT_STATE: "11",
    TYPING_STATE: "12",
    ROBOT: "13",
    BRANCH: "15",
    BRANCH_NUMBER: 15,
    MEMBER: "17",
    NO_SEAT_ONLINE: "18",
    END: "19",
    TIMEOUT: "20",
    FROM_INPUT: "21",
    PRODUCT_CARD: "22",
    SATISFACTION_CON: "23",
    USER_SATISFACTION: "24",
    SEAT_STATUS: "26",
    USER_END_SESSION: "27",
    ORDER: "28",
    ROBOT_MSG: "29",
    RICH_TEXT: "30",
    STREAM_TEXT: "31",
    MULTI_BRANCH: "32",
    MULTI_FORM: "33",
    THINKING: "35",
    CONCURRENCY_LIMIT: "36"
  };
  const RATING_TEMPLATE_TYPE = {
    STAR: 1,
    NUMBER: 2
  };
  const TYPES = {
    MSG_CUSTOM: "TIMCustomElem",
    MSG_GROUP_TIP: "TIMGroupTipElem"
  };
  const EMOJI_TYPE = {
    BASIC: "basic",
    BIG: "big",
    CUSTOM: "CUSTOM"
  };
  const WHITE_LIST = [
    CUSTOM_MESSAGE_SRC.MENU,
    CUSTOM_MESSAGE_SRC.BRANCH,
    CUSTOM_MESSAGE_SRC.BRANCH_NUMBER,
    CUSTOM_MESSAGE_SRC.FROM_INPUT,
    CUSTOM_MESSAGE_SRC.PRODUCT_CARD,
    CUSTOM_MESSAGE_SRC.ROBOT_MSG,
    CUSTOM_MESSAGE_SRC.RICH_TEXT,
    CUSTOM_MESSAGE_SRC.STREAM_TEXT,
    CUSTOM_MESSAGE_SRC.MULTI_BRANCH,
    CUSTOM_MESSAGE_SRC.MULTI_FORM,
    CUSTOM_MESSAGE_SRC.CONCURRENCY_LIMIT,
    CUSTOM_MESSAGE_SRC.ORDER
  ];
  const TOOLBAR_BUTTON_TYPE = {
    HUMAN_SERVICE: "humanService",
    SERVICE_RATING: "serviceRating",
    END_HUMAN_SERVICE: "endHumanService"
  };
  function isJSON(str) {
    if (typeof str === "string") {
      try {
        const data = JSON.parse(str);
        if (data) {
          return true;
        }
        return false;
      } catch (error) {
        return false;
      }
    }
    return false;
  }
  function JSONToObject(str) {
    if (!isJSON(str)) {
      return str;
    }
    return JSON.parse(str);
  }
  function isCustomerServiceMessage(message) {
    var _a2;
    const customerServicePayload = JSONToObject((_a2 = message == null ? void 0 : message.payload) == null ? void 0 : _a2.data);
    return Number(customerServicePayload == null ? void 0 : customerServicePayload.customerServicePlugin) === 0 || Number(customerServicePayload == null ? void 0 : customerServicePayload.chatbotPlugin) === 1;
  }
  const isThinkingMessage = (message) => {
    var _a2;
    const isCustomMessage = (message == null ? void 0 : message.type) === TYPES.MSG_CUSTOM;
    const customerServicePayload = JSONToObject((_a2 = message == null ? void 0 : message.payload) == null ? void 0 : _a2.data);
    return isCustomMessage && (customerServicePayload == null ? void 0 : customerServicePayload.src) === CUSTOM_MESSAGE_SRC.THINKING && (customerServicePayload == null ? void 0 : customerServicePayload.thinkingStatus) === 0;
  };
  const isThinkingMessageOverTime = (message) => {
    const messageTime = message.time * 1e3;
    const minute = 60 * 1e3;
    const now = Date.now();
    if (now - messageTime > minute) {
      return false;
    }
    return true;
  };
  const isMessageInvisible = (message) => {
    var _a2, _b2;
    const customerServicePayload = JSONToObject((_a2 = message == null ? void 0 : message.payload) == null ? void 0 : _a2.data);
    const robotCommandArray = ["feedback", "updateBotStatus"];
    const isCustomerMessage = (message == null ? void 0 : message.type) === TYPES.MSG_CUSTOM;
    const isGroupTipMessage = (message == null ? void 0 : message.type) === TYPES.MSG_GROUP_TIP;
    const isCustomerInvisible = (customerServicePayload == null ? void 0 : customerServicePayload.src) && !WHITE_LIST.includes(customerServicePayload == null ? void 0 : customerServicePayload.src);
    const isMultiFormMessage = (customerServicePayload == null ? void 0 : customerServicePayload.src) !== null && (customerServicePayload == null ? void 0 : customerServicePayload.src) === CUSTOM_MESSAGE_SRC.MULTI_FORM && message.flow === "out";
    const isRobot = (customerServicePayload == null ? void 0 : customerServicePayload.src) === CUSTOM_MESSAGE_SRC.ROBOT && robotCommandArray.indexOf((_b2 = customerServicePayload == null ? void 0 : customerServicePayload.content) == null ? void 0 : _b2.command) !== -1;
    return isCustomerMessage && (isCustomerInvisible || isRobot || isMultiFormMessage) || isGroupTipMessage;
  };
  const isSupportedLang = (lang) => {
    return [
      "zh",
      // Simplified Chinese中文简体：zh
      "zh-TW",
      // Traditional Chinese中文繁体：zh-TW
      "en",
      // English英语：en
      "id",
      // Indonesian印度尼西亚语：id
      "vi",
      // Vietnamese越南语：vi
      "ja",
      // Japanese日语：ja
      "fil",
      // Filipino菲律宾语：fil
      "ru"
      // Russian俄语：ru
    ].indexOf(lang) !== -1;
  };
  const canIUseCookies = () => {
    var _a2;
    if (typeof window !== "undefined") {
      return ((_a2 = window.navigator) == null ? void 0 : _a2.cookieEnabled) && localStorage;
    }
    return false;
  };
  const clearChatStorage = (SDKAppID, userID) => {
    if (canIUseCookies()) {
      localStorage.removeItem(`TIM_${SDKAppID}_${userID}_conversationMap`);
    }
  };
  let _console;
  let method;
  if (typeof console !== "undefined") {
    _console = console;
  } else if (typeof global !== "undefined" && global.console) {
    _console = global.console;
  } else if (typeof window !== "undefined" && window.console) {
    _console = window.console;
  } else {
    _console = {};
  }
  const noop = function() {
  };
  const methods = [
    "assert",
    "clear",
    "count",
    "debug",
    "dir",
    "dirxml",
    "error",
    "group",
    "groupCollapsed",
    "groupEnd",
    "info",
    "log",
    "profile",
    "profileEnd",
    "table",
    "time",
    "timeEnd",
    "timeStamp",
    "trace",
    "warn"
  ];
  let length = methods.length;
  while (length--) {
    method = methods[length];
    if (!console[method]) {
      _console[method] = noop;
    }
  }
  const console$1 = _console;
  let _offset = 0;
  const getTimestamp = function() {
    return (/* @__PURE__ */ new Date()).getTime() + _offset;
  };
  const getDate = function() {
    const now = /* @__PURE__ */ new Date();
    now.setTime(getTimestamp());
    return now;
  };
  const getType = function(input) {
    return Object.prototype.toString.call(input).match(/^\[object (.*)\]$/)[1].toLowerCase();
  };
  const isArray$1 = function(input) {
    if (typeof Array.isArray === "function") {
      return Array.isArray(input);
    }
    return getType(input) === "array";
  };
  const isObject = function(input) {
    return input !== null && typeof input === "object";
  };
  const isInstanceOfError = function(input) {
    return input instanceof Error;
  };
  const isArrayOrObject = function(input) {
    return isArray$1(input) || isObject(input);
  };
  function padMs(ms) {
    const len = ms.toString().length;
    let ret;
    switch (len) {
      case 1:
        ret = "00" + ms;
        break;
      case 2:
        ret = "0" + ms;
        break;
      default:
        ret = ms;
        break;
    }
    return ret;
  }
  function getPrefix() {
    return "ai-desk-customer";
  }
  function getTime() {
    const date2 = getDate();
    return date2.toLocaleTimeString("en-US", { hour12: false }) + "." + padMs(date2.getMilliseconds());
  }
  const Log = {
    // 将函数参数拼成字符串
    arguments2String(args) {
      let s2 = "";
      if (args.length === 1) {
        s2 = args[0];
      } else {
        for (let i2 = 0, length2 = args.length; i2 < length2; i2++) {
          if (isArrayOrObject(args[i2])) {
            try {
              s2 += isInstanceOfError(args[i2]) ? JSON.stringify(args[i2], ["message", "code"]) : JSON.stringify(args[i2]);
            } catch (error) {
              s2 += error ? error.message : "";
              break;
            }
          } else {
            s2 += args[i2];
          }
          s2 += " ";
        }
      }
      return s2;
    },
    _exec(api, log) {
      {
        console$1[api](`${getPrefix()} ${getTime()} ${log}`);
      }
    },
    /**
     * 打印调试日志
     */
    d: function() {
      const s2 = this.arguments2String(arguments);
      this._exec("debug", s2);
    },
    /**
     * 打印普通日志
     */
    l: function() {
      const s2 = this.arguments2String(arguments);
      this._exec("log", s2);
    },
    /**
     * 打印普通日志，等同于 Log.i，为了兼容低版本的本地审核插件（其内部调用了 Logger.log）
     */
    log: function() {
      const s2 = this.arguments2String(arguments);
      this._exec("log", s2);
    },
    /**
     * 打印release日志
     */
    i: function() {
      const s2 = this.arguments2String(arguments);
      this._exec("info", s2);
    },
    /**
     * 打印告警日志
     */
    w: function() {
      const s2 = this.arguments2String(arguments);
      this._exec("warn", s2);
    },
    /**
     * 打印错误日志
     */
    e: function() {
      const s2 = this.arguments2String(arguments);
      this._exec("error", s2);
    }
  };
  function deepCopy(data, hash = /* @__PURE__ */ new WeakMap()) {
    if (typeof data !== "object" || data === null || data === void 0) {
      return data;
    }
    if (hash.has(data)) {
      return hash.get(data);
    }
    const newData = Object.create(Object.getPrototypeOf(data));
    const dataKeys = Object.keys(data);
    dataKeys.forEach((value) => {
      const currentDataValue = data[value];
      if (typeof currentDataValue !== "object" || currentDataValue === null) {
        newData[value] = currentDataValue;
      } else if (Array.isArray(currentDataValue)) {
        newData[value] = [...currentDataValue];
      } else if (currentDataValue instanceof Set) {
        newData[value] = /* @__PURE__ */ new Set([...currentDataValue]);
      } else if (currentDataValue instanceof Map) {
        newData[value] = new Map([...currentDataValue]);
      } else {
        hash.set(data, data);
        newData[value] = deepCopy(currentDataValue, hash);
      }
    });
    return newData;
  }
  function isEnabledMessageReadReceiptGlobal() {
    return Jt.getData(o$2.USER, "displayMessageReadReceipt") && Jt.getData(o$2.APP, "enabledMessageReadReceipt");
  }
  function shallowCopyMessage(message) {
    return Object.assign({}, message);
  }
  function calculateTimestamp(timestamp) {
    const todayZero = (/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0);
    const thisYear = new Date(
      (/* @__PURE__ */ new Date()).getFullYear(),
      0,
      1,
      0,
      0,
      0,
      0
    ).getTime();
    const target = new Date(timestamp);
    const oneDay = 24 * 60 * 60 * 1e3;
    const oneWeek = 7 * oneDay;
    const diff = todayZero - target.getTime();
    function formatNum(num) {
      return num < 10 ? "0" + num : num.toString();
    }
    if (diff <= 0) {
      return `${formatNum(target.getHours())}:${formatNum(target.getMinutes())}`;
    } else if (diff <= oneDay) {
      return `${Wt.t("Time.昨天")} ${formatNum(
        target.getHours()
      )}:${formatNum(target.getMinutes())}`;
    } else if (diff <= oneWeek - oneDay) {
      const weekdays = [
        "星期日",
        "星期一",
        "星期二",
        "星期三",
        "星期四",
        "星期五",
        "星期六"
      ];
      const weekday = weekdays[target.getDay()];
      return `${Wt.t("Time." + weekday)} ${formatNum(
        target.getHours()
      )}:${formatNum(target.getMinutes())}`;
    } else if (target.getTime() >= thisYear) {
      return `${target.getMonth() + 1}/${target.getDate()} ${formatNum(
        target.getHours()
      )}:${formatNum(target.getMinutes())}`;
    } else {
      return `${target.getFullYear()}/${target.getMonth() + 1}/${target.getDate()} ${formatNum(target.getHours())}:${formatNum(
        target.getMinutes()
      )}`;
    }
  }
  const isVue2App = isApp && vueVersion === 2;
  const isVue3App = isApp && vueVersion === 3;
  const needHackForStreamText = (data) => {
    if (isVue2App && JSONToObject(data).src === CUSTOM_MESSAGE_SRC.STREAM_TEXT) {
      return true;
    }
    return false;
  };
  function getSafeUrl(url2) {
    try {
      const decodedUrl = decodeURIComponent(url2);
      if (typeof URL !== "undefined") {
        const parsedUrl = new URL(decodedUrl);
        if (!["http:", "https:"].includes(parsedUrl.protocol)) {
          return null;
        }
        parsedUrl.username = "";
        parsedUrl.password = "";
        return parsedUrl.href;
      }
      return decodedUrl;
    } catch (e2) {
      return null;
    }
  }
  function openSafeUrl(content) {
    const safeUrl = getSafeUrl(content);
    if (safeUrl) {
      if (isApp) {
        plus.runtime.openURL(safeUrl);
      } else {
        window.open(safeUrl, "_blank", "noopener,noreferrer");
      }
    } else {
      Log.w(`Invalid URL provided:${content}`);
    }
  }
  function switchReadStatus(value) {
    if (value !== 1) {
      Zt.switchMessageReadStatus(false);
    } else {
      Zt.switchMessageReadStatus(true);
    }
  }
  function getTo(conversation) {
    var _a2, _b2;
    return ((_a2 = conversation == null ? void 0 : conversation.groupProfile) == null ? void 0 : _a2.groupID) || ((_b2 = conversation == null ? void 0 : conversation.userProfile) == null ? void 0 : _b2.userID);
  }
  const _sfc_main$13 = /* @__PURE__ */ vue$1.defineComponent({
    __name: "message-container",
    props: {
      sender: { type: String, required: true, default: "" },
      avatar: { type: String, required: true, default: "" },
      type: { type: String, required: true },
      time: { type: Number, required: true }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const { computed: computed2 } = vue;
      const props = __props;
      const TYPES2 = qt.TYPES;
      const isNoPadding = computed2(() => {
        return [TYPES2.MSG_IMAGE, TYPES2.MSG_VIDEO, TYPES2.MSG_MERGER].includes(
          props.type
        );
      });
      const __returned__ = { computed: computed2, props, TYPES: TYPES2, isNoPadding, Avatar, get calculateTimestamp() {
        return calculateTimestamp;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$12(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("div", { class: "simple-message-container" }, [
      vue$1.createElementVNode("div", { class: "simple-message-avatar" }, [
        vue$1.createVNode($setup["Avatar"], {
          url: $setup.props.avatar
        }, null, 8, ["url"])
      ]),
      vue$1.createElementVNode("div", null, [
        vue$1.createElementVNode(
          "div",
          { class: "simple-message-sender" },
          vue$1.toDisplayString($setup.props.sender),
          1
          /* TEXT */
        ),
        vue$1.createElementVNode("div", { class: "simple-message-body" }, [
          vue$1.createElementVNode(
            "div",
            {
              class: vue$1.normalizeClass({
                "simple-message-content": true,
                "no-padding": $setup.isNoPadding
              })
            },
            [
              vue$1.renderSlot(_ctx.$slots, "default", {}, void 0, true)
            ],
            2
            /* CLASS */
          ),
          vue$1.createElementVNode(
            "div",
            { class: "timestamp" },
            vue$1.toDisplayString($setup.calculateTimestamp($setup.props.time * 1e3)),
            1
            /* TEXT */
          )
        ])
      ])
    ]);
  }
  const MessageContainer = /* @__PURE__ */ _export_sfc(_sfc_main$13, [["render", _sfc_render$12], ["__scopeId", "data-v-d866ea0e"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/simple-message-list/message-container.vue"]]);
  const CUSTOM_BIG_EMOJI_URL = "";
  const CUSTOM_BIG_EMOJI_GROUP_LIST = [];
  const Emoji$2 = {
    "[TUIEmoji_Smile]": "[微笑]",
    "[TUIEmoji_Expect]": "[期待]",
    "[TUIEmoji_Blink]": "[眨眼]",
    "[TUIEmoji_Guffaw]": "[大笑]",
    "[TUIEmoji_KindSmile]": "[姨母笑]",
    "[TUIEmoji_Haha]": "[哈哈哈]",
    "[TUIEmoji_Cheerful]": "[愉快]",
    "[TUIEmoji_Speechless]": "[无语]",
    "[TUIEmoji_Amazed]": "[惊讶]",
    "[TUIEmoji_Sorrow]": "[悲伤]",
    "[TUIEmoji_Complacent]": "[得意]",
    "[TUIEmoji_Silly]": "[傻了]",
    "[TUIEmoji_Lustful]": "[色]",
    "[TUIEmoji_Giggle]": "[憨笑]",
    "[TUIEmoji_Kiss]": "[亲亲]",
    "[TUIEmoji_Wail]": "[大哭]",
    "[TUIEmoji_TearsLaugh]": "[哭笑]",
    "[TUIEmoji_Trapped]": "[困]",
    "[TUIEmoji_Mask]": "[口罩]",
    "[TUIEmoji_Fear]": "[恐惧]",
    "[TUIEmoji_BareTeeth]": "[龇牙]",
    "[TUIEmoji_FlareUp]": "[发怒]",
    "[TUIEmoji_Yawn]": "[打哈欠]",
    "[TUIEmoji_Tact]": "[机智]",
    "[TUIEmoji_Stareyes]": "[星星眼]",
    "[TUIEmoji_ShutUp]": "[闭嘴]",
    "[TUIEmoji_Sigh]": "[叹气]",
    "[TUIEmoji_Hehe]": "[呵呵]",
    "[TUIEmoji_Silent]": "[收声]",
    "[TUIEmoji_Surprised]": "[惊喜]",
    "[TUIEmoji_Askance]": "[白眼]",
    "[TUIEmoji_Ok]": "[OK]",
    "[TUIEmoji_Shit]": "[便便]",
    "[TUIEmoji_Monster]": "[怪兽]",
    "[TUIEmoji_Daemon]": "[恶魔]",
    "[TUIEmoji_Rage]": "[恶魔怒]",
    "[TUIEmoji_Fool]": "[衰]",
    "[TUIEmoji_Pig]": "[猪]",
    "[TUIEmoji_Cow]": "[牛]",
    "[TUIEmoji_Ai]": "[AI]",
    "[TUIEmoji_Skull]": "[骷髅]",
    "[TUIEmoji_Bombs]": "[炸弹]",
    "[TUIEmoji_Coffee]": "[咖啡]",
    "[TUIEmoji_Cake]": "[蛋糕]",
    "[TUIEmoji_Beer]": "[啤酒]",
    "[TUIEmoji_Flower]": "[花]",
    "[TUIEmoji_Watermelon]": "[瓜]",
    "[TUIEmoji_Rich]": "[壕]",
    "[TUIEmoji_Heart]": "[爱心]",
    "[TUIEmoji_Moon]": "[月亮]",
    "[TUIEmoji_Sun]": "[太阳]",
    "[TUIEmoji_Star]": "[星星]",
    "[TUIEmoji_RedPacket]": "[红包]",
    "[TUIEmoji_Celebrate]": "[庆祝]",
    "[TUIEmoji_Bless]": "[福]",
    "[TUIEmoji_Fortune]": "[发]",
    "[TUIEmoji_Convinced]": "[服]",
    "[TUIEmoji_Prohibit]": "[禁]",
    "[TUIEmoji_666]": "[666]",
    "[TUIEmoji_857]": "[857]",
    "[TUIEmoji_Knife]": "[刀]",
    "[TUIEmoji_Like]": "[赞]"
  };
  const Emoji$1 = {
    "[TUIEmoji_Smile]": "[Smile]",
    "[TUIEmoji_Expect]": "[Expect]",
    "[TUIEmoji_Blink]": "[Blink]",
    "[TUIEmoji_Guffaw]": "[Guffaw]",
    "[TUIEmoji_KindSmile]": "[KindSmile]",
    "[TUIEmoji_Haha]": "[Haha]",
    "[TUIEmoji_Cheerful]": "[Cheerful]",
    "[TUIEmoji_Speechless]": "[Speechless]",
    "[TUIEmoji_Amazed]": "[Amazed]",
    "[TUIEmoji_Sorrow]": "[Sorrow]",
    "[TUIEmoji_Complacent]": "[Complacent]",
    "[TUIEmoji_Silly]": "[Silly]",
    "[TUIEmoji_Lustful]": "[Lustful]",
    "[TUIEmoji_Giggle]": "[Giggle]",
    "[TUIEmoji_Kiss]": "[Kiss]",
    "[TUIEmoji_Wail]": "[Wail]",
    "[TUIEmoji_TearsLaugh]": "[TearsLaugh]",
    "[TUIEmoji_Trapped]": "[Trapped]",
    "[TUIEmoji_Mask]": "[Mask]",
    "[TUIEmoji_Fear]": "[Fear]",
    "[TUIEmoji_BareTeeth]": "[BareTeeth]",
    "[TUIEmoji_FlareUp]": "[FlareUp]",
    "[TUIEmoji_Yawn]": "[Yawn]",
    "[TUIEmoji_Tact]": "[Tact]",
    "[TUIEmoji_Stareyes]": "[StarEyes]",
    "[TUIEmoji_ShutUp]": "[ShutUp]",
    "[TUIEmoji_Sigh]": "[Sigh]",
    "[TUIEmoji_Hehe]": "[Hehe]",
    "[TUIEmoji_Silent]": "[Silent]",
    "[TUIEmoji_Surprised]": "[Surprised]",
    "[TUIEmoji_Askance]": "[Askance]]",
    "[TUIEmoji_Ok]": "[OK]",
    "[TUIEmoji_Shit]": "[Shit]",
    "[TUIEmoji_Monster]": "[Monster]",
    "[TUIEmoji_Daemon]": "[Daemon]",
    "[TUIEmoji_Rage]": "[Rage]",
    "[TUIEmoji_Fool]": "[Fool]",
    "[TUIEmoji_Pig]": "[Pig]",
    "[TUIEmoji_Cow]": "[Cow]",
    "[TUIEmoji_Ai]": "[AI]",
    "[TUIEmoji_Skull]": "[Skull]",
    "[TUIEmoji_Bombs]": "[Bombs]",
    "[TUIEmoji_Coffee]": "[Coffee]",
    "[TUIEmoji_Cake]": "[Cake]",
    "[TUIEmoji_Beer]": "[Beer]",
    "[TUIEmoji_Flower]": "[Flower]",
    "[TUIEmoji_Watermelon]": "[Watermelon]",
    "[TUIEmoji_Rich]": "[Rich]",
    "[TUIEmoji_Heart]": "[Heart]",
    "[TUIEmoji_Moon]": "[Moon]",
    "[TUIEmoji_Sun]": "[Sun]",
    "[TUIEmoji_Star]": "[Star]",
    "[TUIEmoji_RedPacket]": "[RedPacket]",
    "[TUIEmoji_Celebrate]": "[Celebrate]",
    "[TUIEmoji_Bless]": "[Bless]",
    "[TUIEmoji_Fortune]": "[Fortune]",
    "[TUIEmoji_Convinced]": "[Convinced]",
    "[TUIEmoji_Prohibit]": "[Prohibit]",
    "[TUIEmoji_666]": "[666]",
    "[TUIEmoji_857]": "[857]",
    "[TUIEmoji_Knife]": "[Knife]",
    "[TUIEmoji_Like]": "[Like]"
  };
  const DEFAULT_BASIC_EMOJI_URL = "https://web.sdk.qcloud.com/im/assets/emoji-plugin/";
  const DEFAULT_BIG_EMOJI_URL = "https://web.sdk.qcloud.com/im/assets/face-elem/";
  const DEFAULT_BASIC_EMOJI_URL_MAPPING = {
    "[TUIEmoji_Expect]": "emoji_0@2x.png",
    "[TUIEmoji_Blink]": "emoji_1@2x.png",
    "[TUIEmoji_Guffaw]": "emoji_2@2x.png",
    "[TUIEmoji_KindSmile]": "emoji_3@2x.png",
    "[TUIEmoji_Haha]": "emoji_4@2x.png",
    "[TUIEmoji_Cheerful]": "emoji_5@2x.png",
    "[TUIEmoji_Smile]": "emoji_6@2x.png",
    "[TUIEmoji_Sorrow]": "emoji_7@2x.png",
    "[TUIEmoji_Speechless]": "emoji_8@2x.png",
    "[TUIEmoji_Amazed]": "emoji_9@2x.png",
    "[TUIEmoji_Complacent]": "emoji_10@2x.png",
    "[TUIEmoji_Lustful]": "emoji_11@2x.png",
    "[TUIEmoji_Stareyes]": "emoji_12@2x.png",
    "[TUIEmoji_Giggle]": "emoji_13@2x.png",
    "[TUIEmoji_Daemon]": "emoji_14@2x.png",
    "[TUIEmoji_Rage]": "emoji_15@2x.png",
    "[TUIEmoji_Yawn]": "emoji_16@2x.png",
    "[TUIEmoji_TearsLaugh]": "emoji_17@2x.png",
    "[TUIEmoji_Silly]": "emoji_18@2x.png",
    "[TUIEmoji_Wail]": "emoji_19@2x.png",
    "[TUIEmoji_Kiss]": "emoji_20@2x.png",
    "[TUIEmoji_Trapped]": "emoji_21@2x.png",
    "[TUIEmoji_Fear]": "emoji_22@2x.png",
    "[TUIEmoji_BareTeeth]": "emoji_23@2x.png",
    "[TUIEmoji_FlareUp]": "emoji_24@2x.png",
    "[TUIEmoji_Tact]": "emoji_25@2x.png",
    "[TUIEmoji_Shit]": "emoji_26@2x.png",
    "[TUIEmoji_ShutUp]": "emoji_27@2x.png",
    "[TUIEmoji_Sigh]": "emoji_28@2x.png",
    "[TUIEmoji_Hehe]": "emoji_29@2x.png",
    "[TUIEmoji_Silent]": "emoji_30@2x.png",
    "[TUIEmoji_Skull]": "emoji_31@2x.png",
    "[TUIEmoji_Mask]": "emoji_32@2x.png",
    "[TUIEmoji_Beer]": "emoji_33@2x.png",
    "[TUIEmoji_Cake]": "emoji_34@2x.png",
    "[TUIEmoji_RedPacket]": "emoji_35@2x.png",
    "[TUIEmoji_Bombs]": "emoji_36@2x.png",
    "[TUIEmoji_Ai]": "emoji_37@2x.png",
    "[TUIEmoji_Celebrate]": "emoji_38@2x.png",
    "[TUIEmoji_Bless]": "emoji_39@2x.png",
    "[TUIEmoji_Flower]": "emoji_40@2x.png",
    "[TUIEmoji_Watermelon]": "emoji_41@2x.png",
    "[TUIEmoji_Cow]": "emoji_42@2x.png",
    "[TUIEmoji_Fool]": "emoji_43@2x.png",
    "[TUIEmoji_Surprised]": "emoji_44@2x.png",
    "[TUIEmoji_Askance]": "emoji_45@2x.png",
    "[TUIEmoji_Monster]": "emoji_46@2x.png",
    "[TUIEmoji_Pig]": "emoji_47@2x.png",
    "[TUIEmoji_Coffee]": "emoji_48@2x.png",
    "[TUIEmoji_Ok]": "emoji_49@2x.png",
    "[TUIEmoji_Heart]": "emoji_50@2x.png",
    "[TUIEmoji_Sun]": "emoji_51@2x.png",
    "[TUIEmoji_Moon]": "emoji_52@2x.png",
    "[TUIEmoji_Star]": "emoji_53@2x.png",
    "[TUIEmoji_Rich]": "emoji_54@2x.png",
    "[TUIEmoji_Fortune]": "emoji_55@2x.png",
    "[TUIEmoji_857]": "emoji_56@2x.png",
    "[TUIEmoji_666]": "emoji_57@2x.png",
    "[TUIEmoji_Prohibit]": "emoji_58@2x.png",
    "[TUIEmoji_Convinced]": "emoji_59@2x.png",
    "[TUIEmoji_Knife]": "emoji_60@2x.png",
    "[TUIEmoji_Like]": "emoji_61@2x.png"
  };
  const BIG_EMOJI_GROUP_LIST = [
    {
      emojiGroupID: 1,
      type: EMOJI_TYPE.BIG,
      url: DEFAULT_BIG_EMOJI_URL,
      list: [
        "yz00",
        "yz01",
        "yz02",
        "yz03",
        "yz04",
        "yz05",
        "yz06",
        "yz07",
        "yz08",
        "yz09",
        "yz10",
        "yz11",
        "yz12",
        "yz13",
        "yz14",
        "yz15",
        "yz16",
        "yz17"
      ]
    },
    {
      emojiGroupID: 2,
      type: EMOJI_TYPE.BIG,
      url: DEFAULT_BIG_EMOJI_URL,
      list: [
        "ys00",
        "ys01",
        "ys02",
        "ys03",
        "ys04",
        "ys05",
        "ys06",
        "ys07",
        "ys08",
        "ys09",
        "ys10",
        "ys11",
        "ys12",
        "ys13",
        "ys14",
        "ys15"
      ]
    },
    {
      emojiGroupID: 3,
      type: EMOJI_TYPE.BIG,
      url: DEFAULT_BIG_EMOJI_URL,
      list: [
        "gcs00",
        "gcs01",
        "gcs02",
        "gcs03",
        "gcs04",
        "gcs05",
        "gcs06",
        "gcs07",
        "gcs08",
        "gcs09",
        "gcs10",
        "gcs11",
        "gcs12",
        "gcs13",
        "gcs14",
        "gcs15",
        "gcs16"
      ]
    }
  ];
  const BASIC_EMOJI_NAME_TO_KEY_MAPPING = {
    ...Object.fromEntries(
      (_a = Object.entries(Emoji$2)) == null ? void 0 : _a.map(([key, val]) => [val, key])
    ),
    ...Object.fromEntries(
      (_b = Object.entries(Emoji$1)) == null ? void 0 : _b.map(([key, val]) => [val, key])
    )
  };
  const BASIC_EMOJI_URL = DEFAULT_BASIC_EMOJI_URL;
  const BASIC_EMOJI_URL_MAPPING = DEFAULT_BASIC_EMOJI_URL_MAPPING;
  const EMOJI_GROUP_LIST = [
    {
      emojiGroupID: 0,
      type: EMOJI_TYPE.BASIC,
      url: BASIC_EMOJI_URL,
      list: Object.keys(BASIC_EMOJI_URL_MAPPING)
    },
    ...BIG_EMOJI_GROUP_LIST,
    ...CUSTOM_BIG_EMOJI_GROUP_LIST
  ];
  const convertKeyToEmojiName = (key) => {
    return isWeChat ? Emoji$2[key] : Wt.t(`Emoji.${key}`);
  };
  const transformTextWithKeysToEmojiNames = (text) => {
    if (!text) {
      return "";
    }
    const reg = /(\[.+?\])/g;
    let txt = text;
    if (reg.test(text)) {
      txt = text.replace(reg, (match) => BASIC_EMOJI_URL_MAPPING[match] ? convertKeyToEmojiName(match) : match);
    }
    return txt;
  };
  const transformTextWithEmojiNamesToKeys = (text) => {
    if (!text) {
      return "";
    }
    const reg = /(\[.+?\])/g;
    let txt = text;
    if (reg.test(text)) {
      txt = text.replace(reg, (match) => BASIC_EMOJI_NAME_TO_KEY_MAPPING[match] || match);
    }
    return txt;
  };
  ({
    emojiBaseUrl: BASIC_EMOJI_URL,
    emojiUrlMapping: BASIC_EMOJI_URL_MAPPING,
    emojiNameMapping: {
      ...Emoji$2
    }
  });
  const parseTextToRenderArray = (text) => {
    const emojiRegex = /\[([^\]]+)\]/g;
    const result = [];
    let match;
    let lastIndex = 0;
    while ((match = emojiRegex.exec(text)) !== null) {
      const startIndex = match.index;
      const endIndex = emojiRegex.lastIndex;
      const emojiKey = match[0];
      if (startIndex > lastIndex) {
        result.push({ type: "text", content: text.substring(lastIndex, startIndex) });
      }
      const emojiUrl = BASIC_EMOJI_URL + BASIC_EMOJI_URL_MAPPING[emojiKey];
      if (emojiUrl) {
        result.push({ type: "image", content: emojiUrl, emojiKey });
      } else {
        result.push({ type: "text", content: emojiKey });
      }
      lastIndex = endIndex;
      emojiRegex.lastIndex = lastIndex;
    }
    if (lastIndex < text.length) {
      result.push({ type: "text", content: text.substring(lastIndex) });
    }
    return result;
  };
  const _sfc_main$12 = /* @__PURE__ */ vue$1.defineComponent({
    __name: "index",
    props: {
      renderData: { type: Object, required: true },
      disabled: { type: Boolean, required: false, default: false },
      messageItem: { type: Object, required: false, default: () => ({}) }
    },
    emits: ["assignMessageIDInUniapp"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const { ref: ref2, withDefaults } = vue;
      const emits = __emit;
      const props = __props;
      const isMessageListVisible = ref2(false);
      function openMergeDetail() {
        if (props.disabled) {
          return;
        }
        emits("assignMessageIDInUniapp", props.messageItem.ID);
      }
      function closeMergeDetail() {
        isMessageListVisible.value = false;
      }
      const __returned__ = { ref: ref2, withDefaults, emits, props, isMessageListVisible, openMergeDetail, closeMergeDetail, get TUITranslateService() {
        return Wt;
      }, get transformTextWithKeysToEmojiNames() {
        return transformTextWithKeysToEmojiNames;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$11(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("div", null, [
      vue$1.createElementVNode("div", {
        class: "message-record-container",
        onClick: $setup.openMergeDetail
      }, [
        vue$1.createElementVNode(
          "div",
          { class: "record-title" },
          vue$1.toDisplayString($setup.props.renderData.title),
          1
          /* TEXT */
        ),
        vue$1.createElementVNode("div", { class: "record-abstract-container" }, [
          (vue$1.openBlock(true), vue$1.createElementBlock(
            vue$1.Fragment,
            null,
            vue$1.renderList($setup.props.renderData.abstractList.slice(0, 7), (item, index) => {
              return vue$1.openBlock(), vue$1.createElementBlock(
                "div",
                {
                  key: index,
                  class: "record-abstract-item"
                },
                vue$1.toDisplayString($setup.transformTextWithKeysToEmojiNames(item)),
                1
                /* TEXT */
              );
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ]),
        vue$1.createElementVNode(
          "div",
          { class: "record-footer" },
          vue$1.toDisplayString($setup.TUITranslateService.t("TUIChat.聊天记录")),
          1
          /* TEXT */
        )
      ])
    ]);
  }
  const MessageRecord = /* @__PURE__ */ _export_sfc(_sfc_main$12, [["render", _sfc_render$11], ["__scopeId", "data-v-759e4160"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-record/index.vue"]]);
  const _sfc_main$11 = /* @__PURE__ */ vue$1.defineComponent({
    __name: "index",
    props: {
      messageID: { type: String, required: false, default: "" },
      isMounted: { type: Boolean, required: false, default: false }
    },
    emits: ["closeOverlay"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const { computed: computed2, ref: ref2, watch } = vue;
      const emits = __emit;
      const props = __props;
      const TYPES2 = qt.TYPES;
      const isDownloadOccurError = ref2(false);
      const messageListStack = ref2([]);
      const currentMergeMessageInfo = ref2({
        title: "",
        messageList: []
      });
      const simpleMessageListRef = ref2();
      watch(
        () => messageListStack.value.length,
        async (newValue) => {
          isDownloadOccurError.value = false;
          if (newValue < 1) {
            return;
          }
          const stackTopMessageInfo = messageListStack.value[messageListStack.value.length - 1];
          if (stackTopMessageInfo.downloadKey && stackTopMessageInfo.messageList.length === 0) {
            try {
              const res = await Qt.downloadMergedMessages({
                payload: stackTopMessageInfo,
                type: qt.TYPES.MSG_MERGER
              });
              messageListStack.value[messageListStack.value.length - 1] = res.payload;
            } catch (error) {
              isDownloadOccurError.value = true;
            }
          }
          currentMergeMessageInfo.value = messageListStack.value[messageListStack.value.length - 1];
        }
      );
      watch(
        () => props.isMounted,
        (newValue) => {
          if (newValue) {
            if (!props.messageID) {
              throw new Error(
                "messageID is required when first render of simple-message-list."
              );
            }
            const sdkMessagePayload = Jt.getMessageModel(
              props.messageID
            ).getMessage().payload;
            messageListStack.value = [sdkMessagePayload];
          } else {
            messageListStack.value = [];
          }
        },
        {
          immediate: true
        }
      );
      const isReturn = computed2(() => {
        return messageListStack.value.length > 1;
      });
      const isMergeMessageInfoLoaded = computed2(() => {
        var _a2;
        return ((_a2 = currentMergeMessageInfo.value) == null ? void 0 : _a2.messageList) ? currentMergeMessageInfo.value.messageList.length > 0 : false;
      });
      function entryNextLevel(e2, sdkMessage) {
        messageListStack.value.push(sdkMessage.messageBody[0].payload);
        e2.stopPropagation();
      }
      function backPreviousLevel() {
        messageListStack.value.pop();
        if (messageListStack.value.length < 1) {
          emits("closeOverlay");
        }
      }
      function previewVideoInUniapp(url2) {
        const encodedUrl = encodeURIComponent(url2);
        uni.navigateTo({
          url: `/TUIKit/components/TUIChat/video-play?videoUrl=${encodedUrl}`
        });
      }
      function resolveBigFaceUrl(bigFaceKey) {
        let url2 = "";
        if (bigFaceKey.indexOf("@custom") > -1) {
          url2 = CUSTOM_BIG_EMOJI_URL + bigFaceKey;
        } else {
          url2 = DEFAULT_BIG_EMOJI_URL + bigFaceKey;
          if (url2.indexOf("@2x") === -1) {
            url2 += "@2x.png";
          } else {
            url2 += ".png";
          }
        }
        return url2;
      }
      const __returned__ = { computed: computed2, ref: ref2, watch, emits, props, TYPES: TYPES2, isDownloadOccurError, messageListStack, currentMergeMessageInfo, simpleMessageListRef, isReturn, isMergeMessageInfoLoaded, entryNextLevel, backPreviousLevel, previewVideoInUniapp, resolveBigFaceUrl, get TUITranslateService() {
        return Wt;
      }, get addIcon() {
        return addIcon;
      }, get playIcon() {
        return playIcon;
      }, Icon: Icon$1, MessageContainer, MessageRecord, get parseTextToRenderArray() {
        return parseTextToRenderArray;
      }, get isMobile() {
        return isMobile;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$10(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock(
      "div",
      {
        class: vue$1.normalizeClass({
          "simple-message-list-container": true,
          "simple-message-list-container-mobile": $setup.isMobile
        })
      },
      [
        vue$1.createElementVNode("div", { class: "header-container" }, [
          vue$1.createElementVNode("span", {
            class: "back",
            onClick: $setup.backPreviousLevel
          }, [
            vue$1.createVNode($setup["Icon"], {
              class: "close-icon",
              file: $setup.addIcon,
              size: "18px"
            }, null, 8, ["file"]),
            $setup.isReturn ? (vue$1.openBlock(), vue$1.createElementBlock(
              "span",
              { key: 0 },
              vue$1.toDisplayString($setup.TUITranslateService.t("TUIChat.返回")),
              1
              /* TEXT */
            )) : (vue$1.openBlock(), vue$1.createElementBlock(
              "span",
              { key: 1 },
              vue$1.toDisplayString($setup.TUITranslateService.t("TUIChat.关闭")),
              1
              /* TEXT */
            ))
          ]),
          vue$1.createElementVNode(
            "span",
            { class: "title" },
            vue$1.toDisplayString($setup.currentMergeMessageInfo.title),
            1
            /* TEXT */
          )
        ]),
        $setup.isDownloadOccurError ? (vue$1.openBlock(), vue$1.createElementBlock("div", { key: 0 }, " Load Merge Message Error ")) : $setup.isMergeMessageInfoLoaded ? (vue$1.openBlock(), vue$1.createElementBlock(
          "div",
          {
            key: 1,
            ref: "simpleMessageListRef",
            class: "message-list"
          },
          [
            (vue$1.openBlock(true), vue$1.createElementBlock(
              vue$1.Fragment,
              null,
              vue$1.renderList($setup.currentMergeMessageInfo.messageList, (item) => {
                return vue$1.openBlock(), vue$1.createElementBlock("div", {
                  key: item.ID,
                  class: vue$1.normalizeClass({
                    "message-item": true
                  })
                }, [
                  vue$1.createVNode($setup["MessageContainer"], {
                    sender: item.nick,
                    avatar: item.avatar,
                    type: item.messageBody[0].type,
                    time: item.time
                  }, {
                    default: vue$1.withCtx(() => [
                      vue$1.createCommentVNode(" text "),
                      item.messageBody[0].type === $setup.TYPES.MSG_TEXT ? (vue$1.openBlock(), vue$1.createElementBlock("div", {
                        key: 0,
                        class: "message-text"
                      }, [
                        (vue$1.openBlock(true), vue$1.createElementBlock(
                          vue$1.Fragment,
                          null,
                          vue$1.renderList($setup.parseTextToRenderArray(
                            item.messageBody[0].payload["text"]
                          ), (textInfo, index) => {
                            return vue$1.openBlock(), vue$1.createElementBlock("span", {
                              key: index,
                              class: "message-text-container"
                            }, [
                              textInfo.type === "text" ? (vue$1.openBlock(), vue$1.createElementBlock(
                                "span",
                                {
                                  key: 0,
                                  class: "text"
                                },
                                vue$1.toDisplayString(textInfo.content),
                                1
                                /* TEXT */
                              )) : (vue$1.openBlock(), vue$1.createElementBlock("img", {
                                key: 1,
                                class: "simple-emoji",
                                src: textInfo.content,
                                alt: "small-face"
                              }, null, 8, ["src"]))
                            ]);
                          }),
                          128
                          /* KEYED_FRAGMENT */
                        ))
                      ])) : item.messageBody[0].type === $setup.TYPES.MSG_IMAGE ? (vue$1.openBlock(), vue$1.createElementBlock(
                        vue$1.Fragment,
                        { key: 1 },
                        [
                          vue$1.createCommentVNode(" image "),
                          vue$1.createElementVNode("div", { class: "message-image" }, [
                            vue$1.createElementVNode("img", {
                              class: "image",
                              src: item.messageBody[0].payload["imageInfoArray"][2]["url"],
                              mode: "widthFix",
                              alt: "image"
                            }, null, 8, ["src"])
                          ])
                        ],
                        2112
                        /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
                      )) : item.messageBody[0].type === $setup.TYPES.MSG_VIDEO ? (vue$1.openBlock(), vue$1.createElementBlock(
                        vue$1.Fragment,
                        { key: 2 },
                        [
                          vue$1.createCommentVNode(" video "),
                          vue$1.createElementVNode("div", { class: "message-video" }, [
                            vue$1.createElementVNode("div", {
                              onClick: ($event) => $setup.previewVideoInUniapp(
                                item.messageBody[0].payload["remoteVideoUrl"]
                              )
                            }, [
                              vue$1.createElementVNode("image", {
                                class: "image",
                                src: item.messageBody[0].payload["thumbUrl"],
                                mode: "widthFix",
                                alt: "image"
                              }, null, 8, ["src"]),
                              vue$1.createVNode($setup["Icon"], {
                                class: "video-play-icon",
                                file: $setup.playIcon
                              }, null, 8, ["file"])
                            ], 8, ["onClick"])
                          ])
                        ],
                        2112
                        /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
                      )) : item.messageBody[0].type === $setup.TYPES.MSG_AUDIO ? (vue$1.openBlock(), vue$1.createElementBlock(
                        vue$1.Fragment,
                        { key: 3 },
                        [
                          vue$1.createCommentVNode(" audio "),
                          vue$1.createElementVNode("div", { class: "message-audio" }, [
                            vue$1.createElementVNode(
                              "span",
                              null,
                              vue$1.toDisplayString($setup.TUITranslateService.t("TUIChat.语音")) + " ",
                              1
                              /* TEXT */
                            ),
                            vue$1.createElementVNode(
                              "span",
                              null,
                              vue$1.toDisplayString(item.messageBody[0].payload.second) + "s",
                              1
                              /* TEXT */
                            )
                          ])
                        ],
                        2112
                        /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
                      )) : item.messageBody[0].type === $setup.TYPES.MSG_FACE ? (vue$1.openBlock(), vue$1.createElementBlock(
                        vue$1.Fragment,
                        { key: 4 },
                        [
                          vue$1.createCommentVNode(" big face "),
                          vue$1.createElementVNode("div", { class: "message-face" }, [
                            vue$1.createElementVNode("img", {
                              class: "image",
                              src: $setup.resolveBigFaceUrl(item.messageBody[0].payload.data),
                              alt: "face"
                            }, null, 8, ["src"])
                          ])
                        ],
                        2112
                        /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
                      )) : item.messageBody[0].type === $setup.TYPES.MSG_FILE ? (vue$1.openBlock(), vue$1.createElementBlock(
                        vue$1.Fragment,
                        { key: 5 },
                        [
                          vue$1.createCommentVNode(" file "),
                          vue$1.createElementVNode(
                            "div",
                            { class: "message-file" },
                            vue$1.toDisplayString($setup.TUITranslateService.t("TUIChat.[文件]")),
                            1
                            /* TEXT */
                          )
                        ],
                        2112
                        /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
                      )) : item.messageBody[0].type === $setup.TYPES.MSG_LOCATION ? (vue$1.openBlock(), vue$1.createElementBlock(
                        vue$1.Fragment,
                        { key: 6 },
                        [
                          vue$1.createCommentVNode(" location "),
                          vue$1.createElementVNode(
                            "div",
                            null,
                            vue$1.toDisplayString($setup.TUITranslateService.t("TUIChat.[地理位置]")),
                            1
                            /* TEXT */
                          )
                        ],
                        2112
                        /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
                      )) : item.messageBody[0].type === $setup.TYPES.MSG_MERGER ? (vue$1.openBlock(), vue$1.createElementBlock(
                        vue$1.Fragment,
                        { key: 7 },
                        [
                          vue$1.createCommentVNode(" merger "),
                          vue$1.createElementVNode("div", {
                            class: "message-merger",
                            onClickCapture: ($event) => $setup.entryNextLevel($event, item)
                          }, [
                            vue$1.createVNode($setup["MessageRecord"], {
                              disabled: "",
                              renderData: item.messageBody[0].payload
                            }, null, 8, ["renderData"])
                          ], 40, ["onClickCapture"])
                        ],
                        2112
                        /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
                      )) : item.messageBody[0].type === $setup.TYPES.MSG_CUSTOM ? (vue$1.openBlock(), vue$1.createElementBlock(
                        vue$1.Fragment,
                        { key: 8 },
                        [
                          vue$1.createCommentVNode(" custom "),
                          vue$1.createElementVNode(
                            "div",
                            null,
                            vue$1.toDisplayString($setup.TUITranslateService.t("TUIChat.[自定义消息]")),
                            1
                            /* TEXT */
                          )
                        ],
                        2112
                        /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
                      )) : vue$1.createCommentVNode("v-if", true)
                    ]),
                    _: 2
                    /* DYNAMIC */
                  }, 1032, ["sender", "avatar", "type", "time"])
                ]);
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ],
          512
          /* NEED_PATCH */
        )) : vue$1.createCommentVNode("v-if", true)
      ],
      2
      /* CLASS */
    );
  }
  const SimpleMessageList = /* @__PURE__ */ _export_sfc(_sfc_main$11, [["render", _sfc_render$10], ["__scopeId", "data-v-1cbb14e0"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/simple-message-list/index.vue"]]);
  const _sfc_main$10 = /* @__PURE__ */ vue$1.defineComponent({
    __name: "message-text",
    props: {
      content: { type: Object, required: true, default: () => ({}) }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const { watchEffect: watchEffect2, ref: ref2 } = vue;
      const props = __props;
      const data = ref2();
      watchEffect2(() => {
        var _a2;
        data.value = props.content;
        (_a2 = data.value.text) == null ? void 0 : _a2.forEach(
          (item) => {
            if (item.name === "img" && (item == null ? void 0 : item.type) === "custom") {
              {
                formatAppLog(
                  "warn",
                  "at pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-text.vue:47",
                  "CUSTOM_BASIC_EMOJI_URL is required for custom emoji, please check your CUSTOM_BASIC_EMOJI_URL."
                );
              }
            }
          }
        );
      });
      const __returned__ = { watchEffect: watchEffect2, ref: ref2, props, data };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$$(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("div", {
      class: vue$1.normalizeClass(["message-text-container"])
    }, [
      (vue$1.openBlock(true), vue$1.createElementBlock(
        vue$1.Fragment,
        null,
        vue$1.renderList($setup.data.text, (item, index) => {
          return vue$1.openBlock(), vue$1.createElementBlock("span", { key: index }, [
            item.name === "text" ? (vue$1.openBlock(), vue$1.createElementBlock(
              "span",
              {
                key: 0,
                class: "text"
              },
              vue$1.toDisplayString(item.text),
              1
              /* TEXT */
            )) : (vue$1.openBlock(), vue$1.createElementBlock("img", {
              key: 1,
              class: "emoji",
              src: item.src,
              alt: item.emojiKey
            }, null, 8, ["src", "alt"]))
          ]);
        }),
        128
        /* KEYED_FRAGMENT */
      ))
    ]);
  }
  const MessageText = /* @__PURE__ */ _export_sfc(_sfc_main$10, [["render", _sfc_render$$], ["__scopeId", "data-v-d1e23efb"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-text.vue"]]);
  const DEFAULT_MAX_SIZE = 155;
  const _sfc_main$$ = /* @__PURE__ */ vue$1.defineComponent({
    __name: "message-image-uniapp",
    props: {
      content: { type: Object, required: true, default: () => ({}) },
      messageItem: { type: Object, required: true, default: () => ({}) }
    },
    emits: ["previewImage"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const { watchEffect: watchEffect2, ref: ref2 } = vue;
      const emits = __emit;
      const props = __props;
      const imageStyles = ref2({ width: "auto", height: "auto" });
      const genImageStyles = (value) => {
        const { width, height } = value;
        if (width === 0 || height === 0) {
          return;
        }
        let imageWidth = 0;
        let imageHeight = 0;
        if (width >= height) {
          imageWidth = DEFAULT_MAX_SIZE;
          imageHeight = DEFAULT_MAX_SIZE * height / width;
        } else {
          imageWidth = DEFAULT_MAX_SIZE * width / height;
          imageHeight = DEFAULT_MAX_SIZE;
        }
        imageStyles.value.width = imageWidth + "px";
        imageStyles.value.height = imageHeight + "px";
      };
      watchEffect2(() => {
        genImageStyles(props.content);
      });
      const imageLoad = (event) => {
        genImageStyles(event.detail);
      };
      const handleImagePreview = () => {
        var _a2;
        if (((_a2 = props.messageItem) == null ? void 0 : _a2.status) === "success" || props.messageItem.progress === 1) {
          emits("previewImage");
        }
      };
      const __returned__ = { watchEffect: watchEffect2, ref: ref2, emits, props, DEFAULT_MAX_SIZE, imageStyles, genImageStyles, imageLoad, handleImagePreview };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$_(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("div", {
      class: "image-container",
      onClick: $setup.handleImagePreview
    }, [
      vue$1.createElementVNode("image", {
        class: "message-image",
        mode: "aspectFit",
        src: $setup.props.content.url,
        style: vue$1.normalizeStyle({ width: $setup.imageStyles.width, height: $setup.imageStyles.height }),
        onLoad: $setup.imageLoad
      }, null, 44, ["src"])
    ]);
  }
  const MessageImage = /* @__PURE__ */ _export_sfc(_sfc_main$$, [["render", _sfc_render$_], ["__scopeId", "data-v-af89fe5b"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-image-uniapp.vue"]]);
  const TOAST_TYPE = {
    SUCCESS: "success",
    WARNING: "warning",
    ERROR: "error",
    NORMAL: "normal"
  };
  const Toast = (options) => {
    i.showToast({
      title: options.message || "Toast",
      duration: options.duration || 1500,
      icon: handleIconType(options.type)
    });
  };
  const handleIconType = (type) => {
    if (!type) {
      return "none";
    }
    switch (type) {
      case TOAST_TYPE.ERROR:
        return "none";
      case TOAST_TYPE.WARNING:
        return "none";
      case TOAST_TYPE.SUCCESS:
        return "success";
      case TOAST_TYPE.NORMAL:
        return "none";
      default:
        return "none";
    }
  };
  const audioRecordIcon = "/assets/msg-audio.ac2cd1c9.svg";
  const _sfc_main$_ = /* @__PURE__ */ vue$1.defineComponent({
    __name: "message-audio-uniapp",
    props: {
      broadcastNewAudioSrc: { type: String, required: true },
      messageItem: { type: Object, required: true, default: () => ({}) },
      content: { type: Object, required: true, default: () => ({}) }
    },
    emits: ["getGlobalAudioContext", "setAudioPlayed"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const { onUnmounted: onUnmounted2, ref: ref2, watch } = vue;
      const emits = __emit;
      const props = __props;
      const audioMap = /* @__PURE__ */ new Map();
      const isAudioPlaying = ref2(false);
      onUnmounted2(() => {
        var _a2;
        const audioContext = getAudio();
        if (isAudioPlaying.value) {
          stopAudio();
        }
        (_a2 = audioContext == null ? void 0 : audioContext.destroy) == null ? void 0 : _a2.call(audioContext);
        audioMap.delete("audio");
      });
      watch(
        () => props.broadcastNewAudioSrc,
        (newSrc) => {
          if (newSrc !== props.content.url && isAudioPlaying.value) {
            stopAudio();
            isAudioPlaying.value = false;
          }
        }
      );
      function toggleClick() {
        emits("getGlobalAudioContext", audioMap, { newAudioSrc: props.content.url });
        if (props.messageItem.hasRiskContent || !props.content.url) {
          Toast({
            message: "暂不支持播放"
          });
          return;
        }
        const audioContext = getAudio();
        if (!audioContext) {
          audioMap.set("audio", uni.createInnerAudioContext());
          initAudioSrc();
        }
        toggleAudioPlayState();
      }
      function toggleAudioPlayState() {
        if (!isAudioPlaying.value) {
          playAudio();
        } else {
          stopAudio();
        }
      }
      function initAudioSrc() {
        const audioContext = getAudio();
        if (!audioContext) {
          return;
        }
        audioContext.src = props.content.url;
        isAudioPlaying.value = false;
        audioContext.onPlay(onAudioPlay);
        audioContext.onStop(onAudioStop);
        audioContext.onEnded(onAudioEnded);
        audioContext.onError(onAudioError);
      }
      function playAudio() {
        const audioContext = getAudio();
        if (!audioContext) {
          return;
        }
        audioContext.play();
        if (props.messageItem.flow === "in") {
          emits("setAudioPlayed", props.messageItem.ID);
        }
      }
      function stopAudio() {
        const audioContext = getAudio();
        if (!audioContext) {
          return;
        }
        try {
          audioContext.stop();
        } catch {
        }
      }
      function onAudioPlay() {
        isAudioPlaying.value = true;
      }
      function onAudioStop() {
        isAudioPlaying.value = false;
      }
      function onAudioEnded() {
        isAudioPlaying.value = false;
      }
      function onAudioError() {
        formatAppLog("warn", "at pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-audio-uniapp.vue:160", "audio played error");
      }
      function getAudio() {
        return audioMap.get("audio");
      }
      const __returned__ = { onUnmounted: onUnmounted2, ref: ref2, watch, emits, props, audioMap, isAudioPlaying, toggleClick, toggleAudioPlayState, initAudioSrc, playAudio, stopAudio, onAudioPlay, onAudioStop, onAudioEnded, onAudioError, getAudio, Icon: Icon$1, get audioIcon() {
        return audioRecordIcon;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$Z(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock(
      "div",
      {
        class: vue$1.normalizeClass({
          "message-audio": true,
          reserve: $setup.props.messageItem.flow === "out"
        }),
        onClick: $setup.toggleClick
      },
      [
        vue$1.createElementVNode("div", { class: "audio-icon-container" }, [
          vue$1.createCommentVNode(' <div :class="{ mask: true, play: isAudioPlaying }" /> '),
          vue$1.createVNode($setup["Icon"], {
            class: vue$1.normalizeClass({ icon: true, play: $setup.isAudioPlaying }),
            width: "15px",
            height: "20px",
            file: $setup.audioIcon
          }, null, 8, ["class", "file"])
        ]),
        vue$1.createElementVNode(
          "div",
          {
            class: "time",
            style: vue$1.normalizeStyle({ width: `${$setup.props.content.second * 5}px` })
          },
          vue$1.toDisplayString($setup.props.content.second || 1) + ' " ',
          5
          /* TEXT, STYLE */
        )
      ],
      2
      /* CLASS */
    );
  }
  const MessageAudio = /* @__PURE__ */ _export_sfc(_sfc_main$_, [["render", _sfc_render$Z], ["__scopeId", "data-v-a15eca10"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-audio-uniapp.vue"]]);
  const files = "/assets/files.75008e25.svg";
  const _sfc_main$Z = /* @__PURE__ */ vue$1.defineComponent({
    __name: "message-file",
    props: {
      content: { type: Object, required: true, default: () => ({}) },
      messageItem: { type: Object, required: true, default: () => ({}) }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const { withDefaults } = vue;
      const props = __props;
      const download = () => {
        if (props.messageItem.hasRiskContent || props.messageItem.flow === "out") {
          return;
        }
        if (isWeChat) {
          formatAppLog("log", "at pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-file.vue:47", "isWechat", props.content.url);
          wx.downloadFile({
            url: props.content.url,
            filePath: wx.env.USER_DATA_PATH + "/" + props.content.name,
            success: function(res) {
              var filePath = res.filePath;
              const lastIndex = filePath.lastIndexOf(".");
              const fileType = filePath.substring(lastIndex + 1);
              formatAppLog("log", "at pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-file.vue:56", fileType);
              wx.openDocument({
                filePath,
                showMenu: true,
                fileType,
                success: function(res2) {
                  formatAppLog("log", "at pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-file.vue:62", "打开文档成功");
                },
                fail: function() {
                  formatAppLog("log", "at pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-file.vue:65", "fail");
                }
              });
            }
          });
        } else if (isUniFrameWork) {
          const lastIndex = props.content.url.lastIndexOf(".");
          const fileType = props.content.url.substring(lastIndex + 1);
          uni.downloadFile({
            url: props.content.url,
            success: function(res) {
              if (res.statusCode == 200) {
                formatAppLog("log", "at pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-file.vue:77", res);
                const tempFilePaths = res.tempFilePath;
                uni.showToast({
                  title: "下载成功" + tempFilePaths,
                  icon: "success",
                  duration: 2e3
                });
                formatAppLog("log", "at pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-file.vue:84", tempFilePaths);
                uni.openDocument({
                  filePath: tempFilePaths,
                  fileType,
                  success: function() {
                    formatAppLog("log", "at pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-file.vue:89", "打开文档成功");
                  },
                  fail: function() {
                    formatAppLog("log", "at pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-file.vue:92", "打开文档失败");
                  }
                });
              }
            }
          });
        } else {
          formatAppLog("log", "at pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-file.vue:111", "no window here");
          const a2 = document.createElement("a");
          a2.href = props.content.url;
          a2.target = "_blank";
          a2.download = props.content.name;
          a2.click();
        }
      };
      const __returned__ = { withDefaults, props, download, get TUITranslateService() {
        return Wt;
      }, Icon: Icon$1, get files() {
        return files;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$Y(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("div", {
      class: vue$1.normalizeClass(["file-message-montainer", $props.messageItem.flow === "in" ? "file-in" : ""]),
      title: $setup.TUITranslateService.t("TUIChat.单击下载"),
      onClick: $setup.download
    }, [
      vue$1.createVNode($setup["Icon"], {
        file: $setup.files,
        class: "file-icon"
      }, null, 8, ["file"]),
      vue$1.createElementVNode("div", null, [
        vue$1.createElementVNode(
          "div",
          null,
          vue$1.toDisplayString($setup.props.content.name),
          1
          /* TEXT */
        ),
        vue$1.createElementVNode(
          "div",
          null,
          vue$1.toDisplayString($setup.props.content.size),
          1
          /* TEXT */
        )
      ])
    ], 10, ["title"]);
  }
  const MessageFile = /* @__PURE__ */ _export_sfc(_sfc_main$Z, [["render", _sfc_render$Y], ["__scopeId", "data-v-8f99a2a7"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-file.vue"]]);
  const _sfc_main$Y = /* @__PURE__ */ vue$1.defineComponent({
    __name: "message-face",
    props: {
      content: {
        type: Object,
        default: () => ({})
      }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const { ref: ref2, onMounted: onMounted2 } = vue;
      const props = __props;
      const url2 = ref2(props.content.url);
      onMounted2(() => {
        if (props.content.type === "custom") {
          {
            formatAppLog(
              "warn",
              "at pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-face.vue:28",
              "CUSTOM_BIG_EMOJI_URL is required for custom emoji, please check your CUSTOM_BIG_EMOJI_URL."
            );
          }
        }
      });
      const __returned__ = { ref: ref2, onMounted: onMounted2, props, url: url2 };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$X(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("div", { class: "message-image" }, [
      vue$1.createElementVNode("img", {
        mode: "aspectFit",
        class: "message-image",
        src: $setup.url
      }, null, 8, ["src"])
    ]);
  }
  const MessageFace = /* @__PURE__ */ _export_sfc(_sfc_main$Y, [["render", _sfc_render$X], ["__scopeId", "data-v-4be76d8b"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-face.vue"]]);
  const _sfc_main$X = /* @__PURE__ */ vue$1.defineComponent({
    __name: "message-custom",
    setup(__props, { expose: __expose }) {
      __expose();
      const __returned__ = { get TUITranslateService() {
        return Wt;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$W(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock(
      "div",
      null,
      vue$1.toDisplayString($setup.TUITranslateService.t("TUIChat.[自定义消息]")),
      1
      /* TEXT */
    );
  }
  const MessageCustom = /* @__PURE__ */ _export_sfc(_sfc_main$X, [["render", _sfc_render$W], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-custom.vue"]]);
  const ReadStatus$1 = true;
  var ReadState = /* @__PURE__ */ ((ReadState2) => {
    ReadState2[ReadState2["Read"] = 0] = "Read";
    ReadState2[ReadState2["Unread"] = 1] = "Unread";
    ReadState2[ReadState2["AllRead"] = 2] = "AllRead";
    ReadState2[ReadState2["NotShow"] = 3] = "NotShow";
    ReadState2[ReadState2["PartiallyRead"] = 4] = "PartiallyRead";
    return ReadState2;
  })(ReadState || {});
  const _sfc_main$W = /* @__PURE__ */ vue$1.defineComponent({
    __name: "index",
    props: {
      message: { type: Object, required: true, default: () => ({}) }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const { computed: computed2, ref: ref2, onMounted: onMounted2, onUnmounted: onUnmounted2 } = vue;
      const props = __props;
      const TYPES2 = qt.TYPES;
      const isDisplayMessageReadReceipt = ref2(
        // TUIStore.getData(StoreName.USER, 'displayMessageReadReceipt'),
        true
      );
      onMounted2(() => {
        Jt.watch(o$2.USER, {
          displayMessageReadReceipt: onDisplayMessageReadReceiptUpdate
        });
      });
      onUnmounted2(() => {
        Jt.unwatch(o$2.USER, {
          displayMessageReadReceipt: onDisplayMessageReadReceiptUpdate
        });
      });
      const isShowReadStatus = computed2(() => {
        if (!isDisplayMessageReadReceipt.value) {
          return false;
        }
        const {
          ID,
          type,
          flow,
          status,
          hasRiskContent,
          conversationID,
          conversationType,
          needReadReceipt = false
        } = props.message;
        if (hasRiskContent) {
          return false;
        }
        const { groupProfile } = Jt.getConversationModel(conversationID) || {};
        if ((groupProfile == null ? void 0 : groupProfile.type) === TYPES2.GRP_AVCHATROOM || (groupProfile == null ? void 0 : groupProfile.type) === TYPES2.GRP_COMMUNITY) {
          return false;
        }
        if (type === TYPES2.MSG_CUSTOM) {
          const message = Jt.getMessageModel(ID);
          if ((message == null ? void 0 : message.getSignalingInfo()) !== null) {
            return false;
          }
        }
        if (flow !== "out" || status !== "success") {
          return false;
        }
        if (conversationType === "GROUP") {
          return needReadReceipt;
        } else if (conversationType === "C2C") {
          return true;
        }
        return false;
      });
      const readState = computed2(() => {
        const {
          conversationType,
          needReadReceipt = false,
          isPeerRead = false
        } = props.message;
        const {
          readCount = 0,
          unreadCount = 0,
          isPeerRead: isReceiptPeerRead = false
        } = props.message.readReceiptInfo;
        if (conversationType === "C2C") {
          if (needReadReceipt) {
            return isReceiptPeerRead ? 0 : 1;
          } else {
            return isPeerRead ? 0 : 1;
          }
        } else if (conversationType === "GROUP") {
          if (needReadReceipt) {
            if (readCount === 0) {
              return 1;
            } else if (unreadCount === 0) {
              return 2;
            } else {
              return 4;
            }
          } else {
            return 3;
          }
        }
        return 1;
      });
      const readStatusText = computed2(() => {
        const { readCount = 0 } = props.message.readReceiptInfo;
        switch (readState.value) {
          case 0:
            return Wt.t("TUIChat.已读");
          case 1:
            return Wt.t("TUIChat.未读");
          case 2:
            return Wt.t("TUIChat.全部已读");
          case 4:
            return `${readCount}${Wt.t("TUIChat.人已读")}`;
          default:
            return "";
        }
      });
      const isUseUnreadStyle = computed2(() => {
        const { conversationType } = props.message;
        if (conversationType === "C2C") {
          return readState.value !== 0;
        } else if (conversationType === "GROUP") {
          return readState.value !== 2;
        }
        return false;
      });
      function onDisplayMessageReadReceiptUpdate(isDisplay) {
        isDisplayMessageReadReceipt.value = isDisplay;
      }
      const __returned__ = { computed: computed2, ref: ref2, onMounted: onMounted2, onUnmounted: onUnmounted2, props, ReadStatus: ReadStatus$1, ReadState, TYPES: TYPES2, isDisplayMessageReadReceipt, isShowReadStatus, readState, readStatusText, isUseUnreadStyle, onDisplayMessageReadReceiptUpdate };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$V(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.withDirectives((vue$1.openBlock(), vue$1.createElementBlock(
      "div",
      {
        class: vue$1.normalizeClass({
          "message-label": true,
          unread: $setup.isUseUnreadStyle
        })
      },
      [
        vue$1.createElementVNode(
          "span",
          null,
          vue$1.toDisplayString($setup.readStatusText),
          1
          /* TEXT */
        )
      ],
      2
      /* CLASS */
    )), [
      [vue$1.vShow, $setup.isShowReadStatus]
    ]);
  }
  const ReadStatus = /* @__PURE__ */ _export_sfc(_sfc_main$W, [["render", _sfc_render$V], ["__scopeId", "data-v-f016b86f"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/read-status/index.vue"]]);
  var MessageQuoteTypeEnum = /* @__PURE__ */ ((MessageQuoteTypeEnum2) => {
    MessageQuoteTypeEnum2[MessageQuoteTypeEnum2["TYPE_NONE"] = 0] = "TYPE_NONE";
    MessageQuoteTypeEnum2[MessageQuoteTypeEnum2["TYPE_TEXT"] = 1] = "TYPE_TEXT";
    MessageQuoteTypeEnum2[MessageQuoteTypeEnum2["TYPE_CUSTOM"] = 2] = "TYPE_CUSTOM";
    MessageQuoteTypeEnum2[MessageQuoteTypeEnum2["TYPE_IMAGE"] = 3] = "TYPE_IMAGE";
    MessageQuoteTypeEnum2[MessageQuoteTypeEnum2["TYPE_SOUND"] = 4] = "TYPE_SOUND";
    MessageQuoteTypeEnum2[MessageQuoteTypeEnum2["TYPE_VIDEO"] = 5] = "TYPE_VIDEO";
    MessageQuoteTypeEnum2[MessageQuoteTypeEnum2["TYPE_FILE"] = 6] = "TYPE_FILE";
    MessageQuoteTypeEnum2[MessageQuoteTypeEnum2["TYPE_LOCATION"] = 7] = "TYPE_LOCATION";
    MessageQuoteTypeEnum2[MessageQuoteTypeEnum2["TYPE_FACE"] = 8] = "TYPE_FACE";
    MessageQuoteTypeEnum2[MessageQuoteTypeEnum2["TYPE_GROUP_TIPS"] = 9] = "TYPE_GROUP_TIPS";
    MessageQuoteTypeEnum2[MessageQuoteTypeEnum2["TYPE_MERGER"] = 10] = "TYPE_MERGER";
    return MessageQuoteTypeEnum2;
  })(MessageQuoteTypeEnum || {});
  const _sfc_main$V = /* @__PURE__ */ vue$1.defineComponent({
    __name: "index-uniapp",
    props: {
      message: { type: Object, required: true, default: () => ({}) }
    },
    emits: ["scrollTo", "blinkMessage"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const { computed: computed2, ref: ref2, onMounted: onMounted2 } = vue;
      const emits = __emit;
      const props = __props;
      let selfAddValue = 0;
      const messageQuoteText = ref2("");
      const hasQuoteContent = ref2(false);
      const messageQuoteContent = ref2({});
      const isMessageRevoked = computed2(() => {
        var _a2;
        try {
          const cloudCustomData = JSON.parse(
            ((_a2 = props.message) == null ? void 0 : _a2.cloudCustomData) || "{}"
          );
          const quotedMessageModel = Jt.getMessageModel(
            cloudCustomData.messageReply.messageID
          );
          return quotedMessageModel == null ? void 0 : quotedMessageModel.isRevoked;
        } catch (error) {
          return true;
        }
      });
      onMounted2(() => {
        var _a2;
        try {
          const cloudCustomData = JSON.parse(
            ((_a2 = props.message) == null ? void 0 : _a2.cloudCustomData) || "{}"
          );
          hasQuoteContent.value = Boolean(cloudCustomData.messageReply);
          if (hasQuoteContent.value) {
            messageQuoteContent.value = cloudCustomData.messageReply;
            messageQuoteText.value = performQuoteContent(messageQuoteContent.value);
          }
        } catch (error) {
          hasQuoteContent.value = false;
        }
      });
      function performQuoteContent(params) {
        let messageKey = "";
        let quoteContent = "";
        switch (params.messageType) {
          case MessageQuoteTypeEnum.TYPE_TEXT:
            messageKey = "[文本]";
            break;
          case MessageQuoteTypeEnum.TYPE_CUSTOM:
            messageKey = "[自定义消息]";
            break;
          case MessageQuoteTypeEnum.TYPE_IMAGE:
            messageKey = "[图片]";
            break;
          case MessageQuoteTypeEnum.TYPE_SOUND:
            messageKey = "[音频]";
            break;
          case MessageQuoteTypeEnum.TYPE_VIDEO:
            messageKey = "[视频]";
            break;
          case MessageQuoteTypeEnum.TYPE_FILE:
            messageKey = "[文件]";
            break;
          case MessageQuoteTypeEnum.TYPE_LOCATION:
            messageKey = "[地理位置]";
            break;
          case MessageQuoteTypeEnum.TYPE_FACE:
            messageKey = "[动画表情]";
            break;
          case MessageQuoteTypeEnum.TYPE_GROUP_TIPS:
            messageKey = "[群提示]";
            break;
          case MessageQuoteTypeEnum.TYPE_MERGER:
            messageKey = "[聊天记录]";
            break;
          default:
            messageKey = "[消息]";
            break;
        }
        if ([MessageQuoteTypeEnum.TYPE_TEXT, MessageQuoteTypeEnum.TYPE_MERGER].includes(
          params.messageType
        )) {
          quoteContent = params.messageAbstract;
        }
        return quoteContent ? quoteContent : Wt.t(`TUIChat.${messageKey}`);
      }
      async function scrollToOriginalMessage() {
        var _a2;
        if (isMessageRevoked.value) {
          return;
        }
        const originMessageID = (_a2 = messageQuoteContent.value) == null ? void 0 : _a2.messageID;
        const currentMessageList = Jt.getData(o$2.CHAT, "messageList");
        const isOriginalMessageInScreen = currentMessageList.some(
          (msg) => msg.ID === originMessageID
        );
        if (originMessageID && isOriginalMessageInScreen) {
          try {
            const scrollViewRect = await T(
              "#messageScrollList",
              "messageList"
            );
            const originalMessageRect = await T(
              "#tui-" + originMessageID,
              "messageList"
            );
            const { scrollTop } = await P(
              "#messageScrollList",
              "messageList"
            );
            const finalScrollTop = originalMessageRect.top + scrollTop - scrollViewRect.top - selfAddValue++ % 2;
            const isNeedScroll = originalMessageRect.top < scrollViewRect.top;
            if (isNeedScroll) {
              emits("scrollTo", finalScrollTop);
            }
            emits("blinkMessage", originMessageID);
          } catch (error) {
            formatAppLog("error", "at pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-quote/index-uniapp.vue:196", error);
          }
        } else {
          Toast({
            message: Wt.t("TUIChat.无法定位到原消息"),
            type: TOAST_TYPE.WARNING
          });
        }
      }
      const __returned__ = { computed: computed2, ref: ref2, onMounted: onMounted2, emits, props, get selfAddValue() {
        return selfAddValue;
      }, set selfAddValue(v2) {
        selfAddValue = v2;
      }, messageQuoteText, hasQuoteContent, messageQuoteContent, isMessageRevoked, performQuoteContent, scrollToOriginalMessage, get TUITranslateService() {
        return Wt;
      }, get transformTextWithKeysToEmojiNames() {
        return transformTextWithKeysToEmojiNames;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$U(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("div", { style: { "display": "flex", "width": "fit-content" } }, [
      $setup.hasQuoteContent ? (vue$1.openBlock(), vue$1.createElementBlock(
        "div",
        {
          key: 0,
          class: vue$1.normalizeClass({
            "mobile-left-box": true,
            reverse: $props.message.flow === "out",
            in: $props.message.flow === "in"
          })
        },
        null,
        2
        /* CLASS */
      )) : vue$1.createCommentVNode("v-if", true),
      $setup.hasQuoteContent ? (vue$1.openBlock(), vue$1.createElementBlock(
        "div",
        {
          key: 1,
          class: vue$1.normalizeClass({
            "reference-content": true,
            reverse: $props.message.flow === "out",
            in: $props.message.flow === "in",
            "isMobile": true
          }),
          onClick: $setup.scrollToOriginalMessage
        },
        [
          $setup.isMessageRevoked ? (vue$1.openBlock(), vue$1.createElementBlock(
            "div",
            {
              key: 0,
              class: "revoked-text"
            },
            vue$1.toDisplayString($setup.TUITranslateService.t("TUIChat.引用内容已撤回")),
            1
            /* TEXT */
          )) : (vue$1.openBlock(), vue$1.createElementBlock("div", { key: 1 }, [
            vue$1.createElementVNode(
              "div",
              { class: "mobile-quote-sender" },
              vue$1.toDisplayString($setup.messageQuoteContent.messageSender),
              1
              /* TEXT */
            ),
            vue$1.createElementVNode(
              "div",
              { class: "max-double-line" },
              vue$1.toDisplayString($setup.transformTextWithKeysToEmojiNames($setup.messageQuoteText)),
              1
              /* TEXT */
            )
          ]))
        ],
        2
        /* CLASS */
      )) : vue$1.createCommentVNode("v-if", true)
    ]);
  }
  const MessageQuote$1 = /* @__PURE__ */ _export_sfc(_sfc_main$V, [["render", _sfc_render$U], ["__scopeId", "data-v-17895d44"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-quote/index-uniapp.vue"]]);
  const loadingIcon = "/assets/loading.2a143778.png";
  const state = {
    data: {},
    // listeners: [],
    // 获取数据
    get(key) {
      return this.data[key];
    },
    // 设置数据
    set(key, value) {
      this.data[key] = value;
    }
    // // 监听数据变化
    // subscribe(callback) {
    //   this.listeners.push(callback);
    //   return () => {
    //     this.listeners = this.listeners.filter(cb => cb !== callback);
    //   };
    // },
    // // 通知所有监听器
    // notifyListeners() {
    //   this.listeners.forEach(cb => cb(this.data));
    // }
  };
  const riskImageReplaceUrl = "https://web.sdk.qcloud.com/component/TUIKit/assets/has_risk_default.png";
  const _sfc_main$U = /* @__PURE__ */ vue$1.defineComponent({
    __name: "message-bubble-uniapp",
    props: {
      messageItem: { type: Object, required: true, default: () => ({}) },
      content: { type: null, required: false, default: () => ({}) },
      classNameList: { type: Array, required: false, default: () => [] },
      blinkMessageIDList: { type: Array, required: false, default: () => [] },
      isAudioPlayed: { type: Boolean, required: false, skipCheck: true, default: false }
    },
    emits: ["resendMessage", "blinkMessage", "scrollTo", "handleTouchStart", "handleTouchEnd", "handleToggleMessageItem"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const { computed: computed2, toRefs: toRefs2 } = vue;
      const emits = __emit;
      const props = __props;
      const TYPES2 = qt.TYPES;
      const needLoadingIconMessageType = [
        TYPES2.MSG_LOCATION,
        TYPES2.MSG_TEXT,
        TYPES2.MSG_CUSTOM,
        TYPES2.MSG_MERGER,
        TYPES2.MSG_FACE
      ];
      const { blinkMessageIDList, messageItem: message } = toRefs2(props);
      const {
        showAvatar,
        showNickName,
        robotAvatar,
        staffAvatar,
        userAvatar,
        robotNickName,
        staffNickName,
        userNickName
      } = state.get("avatarNickName");
      const isDisplayUnplayMark = computed2(() => {
        return message.value.flow === "in" && message.value.status === "success" && message.value.type === TYPES2.MSG_AUDIO && !props.isAudioPlayed;
      });
      const isMultiBranchMsg = computed2(() => {
        var _a2;
        if (((_a2 = message.value) == null ? void 0 : _a2.type) === "TIMCustomElem") {
          const src = JSON.parse(message.value.payload.data).src;
          if (src === CUSTOM_MESSAGE_SRC.MULTI_BRANCH || src === CUSTOM_MESSAGE_SRC.BRANCH || src === CUSTOM_MESSAGE_SRC.BRANCH_NUMBER) {
            return true;
          }
        }
        return false;
      });
      function isFromRobot(cloudCustomData) {
        try {
          const jsonObj = JSONToObject(cloudCustomData);
          return jsonObj.hasOwnProperty("role") && jsonObj.role === "robot";
        } catch (e2) {
          return false;
        }
      }
      const avatarUrl = computed2(() => {
        var _a2, _b2, _c2, _d, _e2;
        let url2 = "";
        if (((_a2 = message.value) == null ? void 0 : _a2.flow) === "in") {
          if (isFromRobot((_b2 = message.value) == null ? void 0 : _b2.cloudCustomData)) {
            url2 = robotAvatar || ((_c2 = message.value) == null ? void 0 : _c2.avatar) || customerAvatar;
          } else {
            url2 = staffAvatar || ((_d = message.value) == null ? void 0 : _d.avatar);
          }
        } else {
          url2 = userAvatar || ((_e2 = message.value) == null ? void 0 : _e2.avatar) || "";
        }
        return url2;
      });
      const nickName = computed2(() => {
        var _a2, _b2;
        let nick = "";
        if (((_a2 = message.value) == null ? void 0 : _a2.flow) === "in") {
          if (isFromRobot((_b2 = message.value) == null ? void 0 : _b2.cloudCustomData)) {
            nick = robotNickName || props.content.showName;
          } else {
            nick = staffNickName || props.content.showName;
          }
        } else {
          nick = userNickName || props.content.showName;
        }
        return nick;
      });
      const containerClassNameList = computed2(() => {
        return ["message-bubble", ...props.classNameList];
      });
      const isProductCardOrOrderMessage = computed2(() => {
        var _a2;
        if (((_a2 = message.value) == null ? void 0 : _a2.type) == "TIMCustomElem") {
          const src = JSON.parse(message.value.payload.data).src;
          if (src === CUSTOM_MESSAGE_SRC.PRODUCT_CARD || src === CUSTOM_MESSAGE_SRC.ORDER) {
            return true;
          }
        }
        return false;
      });
      const isNoPadding = computed2(() => {
        return [TYPES2.MSG_IMAGE, TYPES2.MSG_VIDEO, TYPES2.MSG_MERGER].includes(
          message.value.type
        );
      });
      const riskContentText = computed2(() => {
        let content = Wt.t("TUIChat.涉及敏感内容") + ", ";
        if (message.value.flow === "out") {
          content += Wt.t("TUIChat.发送失败");
        } else {
          content += Wt.t(
            message.value.type === TYPES2.MSG_AUDIO ? "TUIChat.无法收听" : "TUIChat.无法查看"
          );
        }
        return content;
      });
      const isBlink = computed2(() => {
        var _a2, _b2;
        if ((_a2 = message.value) == null ? void 0 : _a2.ID) {
          return (_b2 = blinkMessageIDList == null ? void 0 : blinkMessageIDList.value) == null ? void 0 : _b2.includes(message.value.ID);
        }
        return false;
      });
      function resendMessage() {
        var _a2;
        if (!((_a2 = message.value) == null ? void 0 : _a2.hasRiskContent)) {
          emits("resendMessage");
        }
      }
      function blinkMessage(messageID) {
        emits("blinkMessage", messageID);
      }
      function scrollTo(scrollHeight) {
        emits("scrollTo", scrollHeight);
      }
      function handleToggle() {
        formatAppLog("log", "at pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-bubble-uniapp.vue:308", "handleToggle");
        emits("handleToggleMessageItem");
      }
      function handleTouchStart() {
        formatAppLog("log", "at pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-bubble-uniapp.vue:312", "handleTouchStart");
        emits("handleTouchStart");
      }
      function handleTouchEnd() {
        emits("handleTouchEnd");
      }
      const __returned__ = { computed: computed2, toRefs: toRefs2, emits, props, TYPES: TYPES2, riskImageReplaceUrl, needLoadingIconMessageType, blinkMessageIDList, message, showAvatar, showNickName, robotAvatar, staffAvatar, userAvatar, robotNickName, staffNickName, userNickName, isDisplayUnplayMark, isMultiBranchMsg, isFromRobot, avatarUrl, nickName, containerClassNameList, isProductCardOrOrderMessage, isNoPadding, riskContentText, isBlink, resendMessage, blinkMessage, scrollTo, handleToggle, handleTouchStart, handleTouchEnd, Icon: Icon$1, ReadStatus, MessageQuote: MessageQuote$1, Avatar, get loadingIcon() {
        return loadingIcon;
      }, get shallowCopyMessage() {
        return shallowCopyMessage;
      }, get isPC() {
        return isPC;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$T(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock(
      "div",
      {
        class: vue$1.normalizeClass($setup.containerClassNameList)
      },
      [
        vue$1.createElementVNode(
          "div",
          {
            class: vue$1.normalizeClass({
              "control-reverse": $setup.message.flow === "out"
            })
          },
          [
            vue$1.createCommentVNode(" message-bubble-container "),
            vue$1.createElementVNode("div", { class: "message-bubble-content" }, [
              vue$1.createElementVNode(
                "div",
                {
                  class: vue$1.normalizeClass(["message-bubble-main-content", [$setup.message.flow === "in" ? "" : "reverse"]]),
                  onLongpress: $setup.handleToggle,
                  onTouchstart: $setup.handleTouchStart,
                  onTouchend: $setup.handleTouchEnd,
                  onMouseover: $setup.handleTouchEnd
                },
                [
                  $setup.isPC && $setup.showAvatar === 1 ? (vue$1.openBlock(), vue$1.createBlock($setup["Avatar"], {
                    key: 0,
                    useSkeletonAnimation: "",
                    url: $setup.avatarUrl,
                    style: { flex: "0 0 auto" }
                  }, null, 8, ["url"])) : vue$1.createCommentVNode("v-if", true),
                  vue$1.createElementVNode("main", {
                    class: "message-body",
                    onClick: _cache[1] || (_cache[1] = vue$1.withModifiers(() => {
                    }, ["stop"]))
                  }, [
                    $setup.isPC && $setup.showNickName === 1 ? (vue$1.openBlock(), vue$1.createElementBlock(
                      "div",
                      {
                        key: 0,
                        class: "message-body-nick-name"
                      },
                      vue$1.toDisplayString($setup.nickName),
                      1
                      /* TEXT */
                    )) : vue$1.createCommentVNode("v-if", true),
                    vue$1.createElementVNode(
                      "div",
                      {
                        class: vue$1.normalizeClass([
                          "message-body-main",
                          $setup.message.flow === "out" && "message-body-main-reverse"
                        ])
                      },
                      [
                        vue$1.createElementVNode(
                          "div",
                          {
                            class: vue$1.normalizeClass([
                              "blink",
                              "message-body-content",
                              $setup.message.flow === "out" ? "content-out" : "content-in",
                              $setup.message.hasRiskContent && "content-has-risk",
                              $setup.isNoPadding ? "content-no-padding" : "",
                              $setup.isNoPadding && $setup.isBlink ? "blink-shadow" : "",
                              !$setup.isNoPadding && $setup.isBlink ? "blink-content" : "",
                              $setup.isMultiBranchMsg ? "multi-branch-message" : "",
                              $setup.isProductCardOrOrderMessage ? "product-order-message-bubble" : ""
                            ])
                          },
                          [
                            vue$1.createCommentVNode(" message extra area "),
                            vue$1.createElementVNode("div", { class: "message-bubble-extra-content" }, [
                              vue$1.createCommentVNode(" extra: message quote "),
                              vue$1.createVNode($setup["MessageQuote"], {
                                class: vue$1.normalizeClass($setup.message.flow === "out" ? "reverse" : "flex-row"),
                                message: $setup.message,
                                onBlinkMessage: $setup.blinkMessage,
                                onScrollTo: $setup.scrollTo
                              }, null, 8, ["class", "message"])
                            ]),
                            vue$1.createElementVNode("div", { class: "content-main" }, [
                              ($setup.message.type === $setup.TYPES.MSG_IMAGE || $setup.message.type === $setup.TYPES.MSG_VIDEO) && $setup.message.hasRiskContent ? (vue$1.openBlock(), vue$1.createElementBlock("img", {
                                key: 0,
                                class: vue$1.normalizeClass([
                                  "message-risk-replace",
                                  "message-risk-replace-h5"
                                ]),
                                src: $setup.riskImageReplaceUrl
                              })) : vue$1.renderSlot(_ctx.$slots, "default", { key: 1 }, void 0, true)
                            ]),
                            vue$1.createCommentVNode(" Risk Content Tips "),
                            $setup.message.hasRiskContent ? (vue$1.openBlock(), vue$1.createElementBlock(
                              "div",
                              {
                                key: 0,
                                class: "content-has-risk-tips"
                              },
                              vue$1.toDisplayString($setup.riskContentText),
                              1
                              /* TEXT */
                            )) : vue$1.createCommentVNode("v-if", true)
                          ],
                          2
                          /* CLASS */
                        ),
                        vue$1.createCommentVNode(" audio unplay mark "),
                        $setup.isDisplayUnplayMark ? (vue$1.openBlock(), vue$1.createElementBlock("div", {
                          key: 0,
                          class: "audio-unplay-mark"
                        })) : vue$1.createCommentVNode("v-if", true),
                        vue$1.createCommentVNode(" Fail Icon "),
                        $setup.message.status === "fail" || $setup.message.hasRiskContent ? (vue$1.openBlock(), vue$1.createElementBlock("div", {
                          key: 1,
                          class: "message-label fail",
                          onClick: _cache[0] || (_cache[0] = ($event) => $setup.resendMessage())
                        }, " ! ")) : vue$1.createCommentVNode("v-if", true),
                        vue$1.createCommentVNode(" Loading Icon "),
                        $setup.message.status === "unSend" && $setup.needLoadingIconMessageType.includes($setup.message.type) ? (vue$1.openBlock(), vue$1.createBlock($setup["Icon"], {
                          key: 2,
                          class: "message-label loading-circle",
                          file: $setup.loadingIcon,
                          width: "15px",
                          height: "15px"
                        }, null, 8, ["file"])) : vue$1.createCommentVNode("v-if", true),
                        vue$1.createCommentVNode(" Read & Unread "),
                        vue$1.createVNode($setup["ReadStatus"], {
                          class: "message-label align-self-bottom",
                          message: $setup.shallowCopyMessage($setup.message)
                        }, null, 8, ["message"])
                      ],
                      2
                      /* CLASS */
                    )
                  ])
                ],
                34
                /* CLASS, NEED_HYDRATION */
              )
            ])
          ],
          2
          /* CLASS */
        )
      ],
      2
      /* CLASS */
    );
  }
  const MessageBubble = /* @__PURE__ */ _export_sfc(_sfc_main$U, [["render", _sfc_render$T], ["__scopeId", "data-v-0a47cd8c"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-bubble-uniapp.vue"]]);
  const _sfc_main$T = /* @__PURE__ */ vue$1.defineComponent({
    __name: "message-location",
    props: {
      content: {
        type: Object,
        default: () => ({})
      }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const { watchEffect: watchEffect2, ref: ref2 } = vue;
      const props = __props;
      const data = ref2();
      watchEffect2(() => {
        data.value = props.content;
      });
      const __returned__ = { watchEffect: watchEffect2, ref: ref2, props, data, get TUITranslateService() {
        return Wt;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$S(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("a", {
      class: "message-location",
      href: $setup.data.href,
      target: "_blank",
      title: $setup.TUITranslateService.t("AIDesk.跳转")
    }, [
      vue$1.createElementVNode(
        "span",
        { class: "el-icon-location-outline" },
        vue$1.toDisplayString($setup.data.description),
        1
        /* TEXT */
      ),
      vue$1.createElementVNode("img", {
        src: $setup.data.url
      }, null, 8, ["src"])
    ], 8, ["href", "title"]);
  }
  const MessageLocation = /* @__PURE__ */ _export_sfc(_sfc_main$T, [["render", _sfc_render$S], ["__scopeId", "data-v-733083df"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-location.vue"]]);
  const _sfc_main$S = /* @__PURE__ */ vue$1.defineComponent({
    __name: "message-timestamp",
    props: {
      currTime: {
        type: Number,
        default: 0
      },
      prevTime: {
        type: Number,
        default: 0
      }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const { toRefs: toRefs2, ref: ref2, watch } = vue;
      const props = __props;
      const { currTime, prevTime } = toRefs2(props);
      const timestampShowFlag = ref2(false);
      const timestampShowContent = ref2("");
      const handleItemTime = (currTime2, prevTime2) => {
        timestampShowFlag.value = false;
        if (currTime2 <= 0) {
          return "";
        } else if (!prevTime2 || prevTime2 <= 0) {
          timestampShowFlag.value = true;
          return calculateTimestamp(currTime2 * 1e3);
        } else {
          const minDiffToShow = 10 * 60;
          const diff = currTime2 - prevTime2;
          if (diff >= minDiffToShow) {
            timestampShowFlag.value = true;
            return calculateTimestamp(currTime2 * 1e3);
          }
        }
        return "";
      };
      watch(
        () => [currTime.value, prevTime.value],
        (newVal, oldVal) => {
          if ((newVal == null ? void 0 : newVal.toString()) === (oldVal == null ? void 0 : oldVal.toString())) {
            return;
          } else {
            timestampShowContent.value = handleItemTime(
              currTime.value,
              prevTime.value
            );
          }
        },
        {
          immediate: true
        }
      );
      const __returned__ = { toRefs: toRefs2, ref: ref2, watch, props, currTime, prevTime, timestampShowFlag, timestampShowContent, handleItemTime };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$R(_ctx, _cache, $props, $setup, $data, $options) {
    return $setup.timestampShowFlag ? (vue$1.openBlock(), vue$1.createElementBlock(
      "div",
      {
        key: 0,
        class: "message-timestamp"
      },
      vue$1.toDisplayString($setup.timestampShowContent),
      1
      /* TEXT */
    )) : vue$1.createCommentVNode("v-if", true);
  }
  const MessageTimestamp = /* @__PURE__ */ _export_sfc(_sfc_main$S, [["render", _sfc_render$R], ["__scopeId", "data-v-7a869af6"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-timestamp.vue"]]);
  const _sfc_main$R = /* @__PURE__ */ vue$1.defineComponent({
    __name: "message-video-uniapp",
    props: {
      content: { type: Object, required: true, default: () => ({}) },
      messageItem: { type: Object, required: true, default: () => ({}) }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const { withDefaults, ref: ref2 } = vue;
      const props = __props;
      const videoData = ref2();
      const showVideo = ref2(false);
      function playVideo() {
        showVideo.value = true;
        videoData.value = props.content.url;
      }
      function closeVideo() {
        showVideo.value = false;
      }
      const __returned__ = { withDefaults, ref: ref2, props, videoData, showVideo, playVideo, closeVideo, Icon: Icon$1, get playIcon() {
        return playIcon;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$Q(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("div", null, [
      vue$1.createElementVNode("div", { class: "message-video" }, [
        vue$1.createElementVNode("div", {
          class: "message-video-box",
          onClick: $setup.playVideo
        }, [
          vue$1.createElementVNode("image", {
            src: $setup.props.content.snapshotUrl,
            class: "message-video-box",
            mode: "widthFix"
          }, null, 8, ["src"]),
          $setup.props.messageItem.status === "success" || $setup.props.messageItem.progress === 1 ? (vue$1.openBlock(), vue$1.createBlock($setup["Icon"], {
            key: 0,
            class: "video-play",
            file: $setup.playIcon
          }, null, 8, ["file"])) : vue$1.createCommentVNode("v-if", true)
        ])
      ]),
      $setup.showVideo ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
        key: 0,
        class: "video-overlay"
      }, [
        vue$1.createCommentVNode(" 半透明背景 "),
        vue$1.createElementVNode("view", {
          class: "overlay-background",
          onClick: $setup.closeVideo
        }),
        vue$1.createElementVNode("video", {
          class: "video-container",
          src: $setup.videoData,
          controls: ""
        }, null, 8, ["src"])
      ])) : vue$1.createCommentVNode("v-if", true)
    ]);
  }
  const MessageVideo = /* @__PURE__ */ _export_sfc(_sfc_main$R, [["render", _sfc_render$Q], ["__scopeId", "data-v-bbed5c4d"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-video-uniapp.vue"]]);
  const copyIcon = "/assets/msg-copy.91b797d7.svg";
  const revokeIcon = "/assets/msg-revoke.a0b46d31.svg";
  function enableSampleTaskStatus(taskKey) {
    const tasks = Jt.getData(o$2.APP, "tasks");
    if (taskKey in tasks && !tasks[taskKey]) {
      tasks[taskKey] = true;
      Jt.update(o$2.APP, "tasks", tasks);
    }
  }
  const _sfc_main$Q = /* @__PURE__ */ vue$1.defineComponent({
    __name: "index-uniapp",
    props: {
      messageItem: { type: Object, required: true, default: () => ({}) }
    },
    setup(__props, { expose: __expose }) {
      const { ref: ref2, watchEffect: watchEffect2, computed: computed2 } = vue;
      const props = __props;
      const TYPES2 = qt.TYPES;
      const actionItems = ref2([
        {
          key: "copy",
          text: Wt.t("TUIChat.复制"),
          iconUrl: copyIcon,
          renderCondition() {
            if (!message.value)
              return false;
            return message.value.type === TYPES2.MSG_TEXT;
          },
          clickEvent: copyMessage
        },
        {
          key: "revoke",
          text: Wt.t("TUIChat.撤回"),
          iconUrl: revokeIcon,
          renderCondition() {
            if (!message.value)
              return false;
            return message.value.flow === "out" && message.value.status === "success";
          },
          clickEvent: revokeMessage
        }
        // {
        //   key: 'delete',
        //   text: TUITranslateService.t('TUIChat.删除'),
        //   iconUrl: delIcon,
        //   renderCondition() {
        //     if (!message.value) return false;
        //     return message.value.status === 'success';
        //   },
        //   clickEvent: deleteMessage,
        // },
        // {
        //   key: 'quote',
        //   text: TUITranslateService.t('TUIChat.引用'),
        //   iconUrl: quoteIcon,
        //   renderCondition() {
        //     if (!message.value) return false;
        //     const _message = TUIStore.getMessageModel(message.value.ID);
        //     return message.value.status === 'success' && !_message.getSignalingInfo();
        //   },
        //   clickEvent: quoteMessage,
        // },
        // {
        //   key:'image',
        //   text:'查看图片',
        //   iconUrl:imgIcon,
        //   renderCondition() {
        //     if (!message.value || !isUniFrameWork) return false;
        //     return message.value.type === TYPES.MSG_CUSTOM && JSONToObject(message.value.payload.data).src === CUSTOM_MESSAGE_SRC.RICH_TEXT;
        //   },
        //   clickEvent:showImageInRichText,
        // }
      ]);
      const message = ref2();
      const messageToolDom = ref2();
      watchEffect2(() => {
        message.value = Jt.getMessageModel(props.messageItem.ID);
      });
      const isAllActionItemInvalid = computed2(() => {
        for (let i2 = 0; i2 < actionItems.value.length; ++i2) {
          if (actionItems.value[i2].renderCondition()) {
            return false;
          }
        }
        return true;
      });
      function getFunction(index) {
        actionItems.value[index].clickEvent();
      }
      function openMessage() {
        var _a2;
        let url2 = "";
        switch ((_a2 = message.value) == null ? void 0 : _a2.type) {
          case qt.TYPES.MSG_FILE:
            url2 = message.value.payload.fileUrl;
            break;
          case qt.TYPES.MSG_VIDEO:
            url2 = message.value.payload.remoteVideoUrl;
            break;
          case qt.TYPES.MSG_IMAGE:
            url2 = message.value.payload.imageInfoArray[0].url;
            break;
        }
        window == null ? void 0 : window.open(url2, "_blank");
      }
      function revokeMessage() {
        if (!message.value)
          return;
        const messageModel = Jt.getMessageModel(message.value.ID);
        messageModel.revokeMessage().then(() => {
          enableSampleTaskStatus("revokeMessage");
        }).catch((error) => {
          if (error.code === 20016) {
            const message2 = Wt.t("TUIChat.已过撤回时限");
            Toast({
              message: message2,
              type: TOAST_TYPE.ERROR
            });
          }
        });
      }
      function deleteMessage() {
        if (!message.value)
          return;
        const messageModel = Jt.getMessageModel(message.value.ID);
        messageModel.deleteMessage();
      }
      async function copyMessage() {
        var _a2, _b2;
        i == null ? void 0 : i.setClipboardData({
          data: transformTextWithKeysToEmojiNames((_b2 = (_a2 = message.value) == null ? void 0 : _a2.payload) == null ? void 0 : _b2.text)
        });
      }
      function beforeCopy(key) {
        if (key !== "copy" || isH5) {
          return;
        }
      }
      function quoteMessage() {
        if (!message.value)
          return;
        message.value.quoteMessage();
      }
      __expose({
        messageToolDom
      });
      const __returned__ = { ref: ref2, watchEffect: watchEffect2, computed: computed2, props, TYPES: TYPES2, actionItems, message, messageToolDom, isAllActionItemInvalid, getFunction, openMessage, revokeMessage, deleteMessage, copyMessage, beforeCopy, quoteMessage, Icon: Icon$1 };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$P(_ctx, _cache, $props, $setup, $data, $options) {
    return !$setup.isAllActionItemInvalid && !$props.messageItem.hasRiskContent ? (vue$1.openBlock(), vue$1.createElementBlock(
      "div",
      {
        key: 0,
        ref: "messageToolDom",
        class: vue$1.normalizeClass(["dialog-item", "dialog-item-h5"])
      },
      [
        vue$1.createElementVNode("div", {
          class: vue$1.normalizeClass(["dialog-item-list", "dialog-item-list-h5"])
        }, [
          (vue$1.openBlock(true), vue$1.createElementBlock(
            vue$1.Fragment,
            null,
            vue$1.renderList($setup.actionItems, (item, index) => {
              return vue$1.openBlock(), vue$1.createElementBlock(
                vue$1.Fragment,
                null,
                [
                  item.renderCondition() ? (vue$1.openBlock(), vue$1.createElementBlock("div", {
                    key: item.key,
                    class: "list-item",
                    onClick: ($event) => $setup.getFunction(index),
                    onMousedown: ($event) => $setup.beforeCopy(item.key)
                  }, [
                    vue$1.createVNode($setup["Icon"], {
                      file: item.iconUrl,
                      size: "15px"
                    }, null, 8, ["file"]),
                    vue$1.createElementVNode(
                      "span",
                      { class: "list-item-text" },
                      vue$1.toDisplayString(item.text),
                      1
                      /* TEXT */
                    )
                  ], 40, ["onClick", "onMousedown"])) : vue$1.createCommentVNode("v-if", true)
                ],
                64
                /* STABLE_FRAGMENT */
              );
            }),
            256
            /* UNKEYED_FRAGMENT */
          ))
        ])
      ],
      512
      /* NEED_PATCH */
    )) : vue$1.createCommentVNode("v-if", true);
  }
  const MessageTool = /* @__PURE__ */ _export_sfc(_sfc_main$Q, [["render", _sfc_render$P], ["__scopeId", "data-v-9600d769"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-tool/index-uniapp.vue"]]);
  const _sfc_main$P = /* @__PURE__ */ vue$1.defineComponent({
    __name: "message-revoked",
    props: {
      isEdit: {
        type: Boolean,
        default: () => false
      },
      messageItem: {
        type: Object,
        default: () => ({})
      }
    },
    emits: ["messageEdit"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const { watchEffect: watchEffect2, ref: ref2 } = vue;
      const props = __props;
      const message = ref2();
      const isEditMsg = ref2(false);
      const emits = __emit;
      watchEffect2(() => {
        message.value = props.messageItem;
        isEditMsg.value = props.isEdit;
      });
      const messageEdit = () => {
        emits("messageEdit");
      };
      const __returned__ = { watchEffect: watchEffect2, ref: ref2, props, message, isEditMsg, emits, messageEdit, get TUITranslateService() {
        return Wt;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$O(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("div", { class: "revoke" }, [
      $setup.message.flow === "in" ? (vue$1.openBlock(), vue$1.createElementBlock(
        "span",
        { key: 0 },
        vue$1.toDisplayString($setup.message.nick || $setup.message.from),
        1
        /* TEXT */
      )) : $setup.message.from === $setup.message.revoker ? (vue$1.openBlock(), vue$1.createElementBlock(
        "span",
        { key: 1 },
        vue$1.toDisplayString($setup.TUITranslateService.t("TUIChat.您")),
        1
        /* TEXT */
      )) : (vue$1.openBlock(), vue$1.createElementBlock(
        "span",
        { key: 2 },
        vue$1.toDisplayString($setup.message.revoker),
        1
        /* TEXT */
      )),
      vue$1.createElementVNode(
        "span",
        null,
        vue$1.toDisplayString($setup.TUITranslateService.t("TUIChat.撤回了一条消息")),
        1
        /* TEXT */
      ),
      $setup.message.flow === "out" && $setup.isEditMsg ? (vue$1.openBlock(), vue$1.createElementBlock(
        "span",
        {
          key: 3,
          class: "edit",
          onClick: $setup.messageEdit
        },
        vue$1.toDisplayString($setup.TUITranslateService.t("TUIChat.重新编辑")),
        1
        /* TEXT */
      )) : vue$1.createCommentVNode("v-if", true)
    ]);
  }
  const MessageRevoked = /* @__PURE__ */ _export_sfc(_sfc_main$P, [["render", _sfc_render$O], ["__scopeId", "data-v-86ce1023"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-tool/message-revoked.vue"]]);
  const version$1 = "1.4.0";
  let TUICustomerServer$1 = (_c = class {
    constructor() {
      __publicField(this, "isLoggedIn");
      __publicField(this, "customerServiceAccounts");
      __publicField(this, "loggedInUserID");
      __publicField(this, "myProfile");
      R.registerService(E$1.TUICustomerServicePlugin.SERVICE.NAME, this);
      R.registerExtension(E$1.TUIContact.EXTENSION.CONTACT_LIST.EXT_ID, this);
      this.customerServiceAccounts = ["@customer_service_account"];
      this.isLoggedIn = false;
      this.loggedInUserID = "";
      this.myProfile = {};
    }
    static getInstance() {
      if (!_c.instance) {
        _c.instance = new _c();
      }
      return _c.instance;
    }
    loginCustomerUIKit(SDKAppID, userID, userSig) {
      clearChatStorage(SDKAppID, userID);
      qt.login({
        SDKAppID,
        userID,
        userSig,
        useUploadPlugin: true
      }).then(() => {
        Log.i(`login success. userID:${userID}`);
        this.isLoggedIn = true;
        this.loggedInUserID = userID;
        Xt.switchConversation("C2C@customer_service_account");
        switchReadStatus(state.get("showReadStatus"));
        qt.chat.callExperimentalAPI("isFeatureEnabledForStat", Math.pow(2, 42));
      }).catch((error) => {
        Toast({
          message: Wt.t("TUIChat.登录失败"),
          type: TOAST_TYPE.ERROR,
          duration: 3e4
        });
        Log.l(error);
      });
    }
    init(SDKAppID, userID, userSig) {
      Log.l(`TUICustomerServer.init vue:${vueVersion} version:${version$1} SDKAppID:${SDKAppID} userID:${userID} isLoggedIn:${this.isLoggedIn} loggedInUserID:${this.loggedInUserID}`);
      if (this.isLoggedIn) {
        if (this.loggedInUserID === userID) {
          return;
        }
        this.unInit().finally(() => {
          this.isLoggedIn = false;
          this.loginCustomerUIKit(SDKAppID, userID, userSig);
        });
      } else {
        this.loginCustomerUIKit(SDKAppID, userID, userSig);
      }
    }
    initWithProfile(options) {
      const { SDKAppID, userID, userSig, nickName, avatar } = options;
      Log.l(`TUICustomerServer.initWithProfile version:${version$1}`);
      if (nickName) {
        this.myProfile.nick = nickName;
      }
      if (avatar) {
        this.myProfile.avatar = avatar;
      }
      this.init(SDKAppID, userID, userSig);
    }
    unInit() {
      return qt.logout();
    }
    sendTextMessage(options, sendMessageOptions) {
      return Qt.sendTextMessage(options, sendMessageOptions);
    }
    sendCustomMessage(options, sendMessageOptions) {
      return Qt.sendCustomMessage(options, sendMessageOptions);
    }
    changeLanguage(language) {
      return Wt.changeLanguage(language).then(() => {
        Log.i(`language changed to ${language}`);
      });
    }
    getLoggedInUserID() {
      return this.loggedInUserID;
    }
    // Determine if the current session is a customer service session
    isCustomerConversation(conversationID) {
      const userID = conversationID && conversationID.slice(3) || "";
      return this.customerServiceAccounts.indexOf(userID) > -1;
    }
    // Determine if the current message is a customer service message
    isCustomerServicePluginMessage(message) {
      if (!message || !this.isCustomerConversation(message.conversationID)) {
        return false;
      }
      if (isThinkingMessage(message)) {
        return false;
      }
      return isCustomerServiceMessage(message) || isMessageInvisible(message);
    }
    onGetExtension(extensionID) {
      if (extensionID === E$1.TUIContact.EXTENSION.CONTACT_LIST.EXT_ID) {
        return [
          {
            weight: 0,
            icon: "",
            text: "智能客服",
            data: {
              name: "customer",
              accountList: this.customerServiceAccounts
            }
          }
        ];
      }
    }
    onCall(method2, params) {
      Log.l(`TUICustomerServer.onCall method:${method2} params:`, params);
      if (method2 === E$1.TUICustomerServicePlugin.SERVICE.METHOD.ACTIVE_CONVERSATION) {
        if (this.isCustomerConversation(params.conversationID)) {
          if (Object.keys(this.myProfile).length > 0) {
            Log.l(`TUICustomerServer.onCall updateMyProfile:${JSON.stringify(this.myProfile)}`);
            Zt.updateMyProfile({ ...this.myProfile }).finally(() => {
              this.activeServiceFlow(params);
            });
          } else {
            this.activeServiceFlow(params);
          }
        }
      }
    }
    // 激活会话服务流
    activeServiceFlow(params) {
      Qt.sendCustomMessage({
        to: params.conversationID.slice(3),
        conversationType: qt.TYPES.CONV_C2C,
        payload: {
          data: JSON.stringify({
            src: "7",
            customerServicePlugin: 0,
            triggeredContent: typeof params.robotLang === "undefined" ? void 0 : { language: params.robotLang }
          })
        }
      }, { onlineUserOnly: true });
    }
  }, __publicField(_c, "instance"), _c);
  const TUICustomerServer = TUICustomerServer$1.getInstance();
  const isCustomerServicePluginMessage = TUICustomerServer.isCustomerServicePluginMessage.bind(TUICustomerServer);
  const isCustomerConversation = TUICustomerServer.isCustomerConversation.bind(TUICustomerServer);
  const _sfc_main$O = /* @__PURE__ */ vue$1.defineComponent({
    __name: "message-plugin-layout-uniapp",
    props: {
      message: { type: Object, required: true, default: () => ({}) },
      showStyle: { type: String, required: true, default: "" },
      bubbleClassNameList: { type: Array, required: false, default: () => [] },
      blinkMessageIDList: { type: Array, required: false, default: () => [] }
    },
    emits: [
      "resendMessage",
      "handleToggleMessageItem",
      "handleH5LongPress"
    ],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const { computed: computed2 } = vue;
      const props = __props;
      const emits = __emit;
      const messageModel = computed2(
        () => {
          var _a2;
          return Jt.getMessageModel((_a2 = props.message) == null ? void 0 : _a2.ID);
        }
      );
      const resendMessage = (message) => {
        emits("resendMessage", message);
      };
      const handleToggleMessageItem = (e2, message, isLongpress = false) => {
        emits("handleToggleMessageItem", e2, message, isLongpress);
      };
      const handleH5LongPress = (e2, message, type) => {
        emits("handleH5LongPress", e2, message, type);
      };
      const __returned__ = { computed: computed2, props, emits, messageModel, resendMessage, handleToggleMessageItem, handleH5LongPress, MessageBubble };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$N(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("div", { class: "message-plugin" }, [
      vue$1.createCommentVNode(" The following is displayed in the form of messageTip "),
      $setup.props.showStyle === "tip" ? (vue$1.openBlock(), vue$1.createElementBlock("div", {
        key: 0,
        class: "message-plugin-tip"
      }, [
        vue$1.renderSlot(_ctx.$slots, "messageTip", {}, void 0, true)
      ])) : $setup.props.showStyle === "bubble" ? (vue$1.openBlock(), vue$1.createElementBlock(
        vue$1.Fragment,
        { key: 1 },
        [
          vue$1.createCommentVNode(" The following is displayed in the form of messageBubble "),
          vue$1.createElementVNode(
            "div",
            {
              class: "message-plugin-bubble-content",
              onLongpress: _cache[1] || (_cache[1] = ($event) => $setup.handleToggleMessageItem($event, $setup.messageModel, true)),
              onContextmenu: _cache[2] || (_cache[2] = vue$1.withModifiers(($event) => $setup.handleToggleMessageItem($event, $setup.messageModel), ["prevent", "right"])),
              onTouchstart: _cache[3] || (_cache[3] = ($event) => $setup.handleH5LongPress($event, $setup.messageModel, "touchstart")),
              onTouchend: _cache[4] || (_cache[4] = ($event) => $setup.handleH5LongPress($event, $setup.messageModel, "touchend")),
              onMouseover: _cache[5] || (_cache[5] = ($event) => $setup.handleH5LongPress($event, $setup.messageModel, "touchend"))
            },
            [
              vue$1.createVNode($setup["MessageBubble"], {
                messageItem: $setup.messageModel,
                content: $setup.messageModel.getMessageContent(),
                blinkMessageIDList: $setup.props.blinkMessageIDList,
                classNameList: $setup.props.bubbleClassNameList,
                onResendMessage: _cache[0] || (_cache[0] = ($event) => $setup.resendMessage($setup.messageModel))
              }, {
                default: vue$1.withCtx(() => [
                  vue$1.createCommentVNode(" uni-app message-bubble is an anonymous slot, no slotName "),
                  vue$1.renderSlot(_ctx.$slots, "messageBubble", {}, void 0, true)
                ]),
                _: 3
                /* FORWARDED */
              }, 8, ["messageItem", "content", "blinkMessageIDList", "classNameList"])
            ],
            32
            /* NEED_HYDRATION */
          )
        ],
        2112
        /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
      )) : vue$1.createCommentVNode("v-if", true)
    ]);
  }
  const MessagePluginLayout = /* @__PURE__ */ _export_sfc(_sfc_main$O, [["render", _sfc_render$N], ["__scopeId", "data-v-de7218ee"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-desk/message-plugin-layout-uniapp.vue"]]);
  const star = "/assets/star.0d13712b.png";
  const starLine = "/assets/starLine.f4211758.png";
  const _sfc_main$N = {
    props: {
      src: {
        type: String,
        default: ""
      },
      width: {
        type: String,
        default: "16px"
      },
      height: {
        type: String,
        default: "16px"
      }
    },
    setup(props) {
      return {
        props,
        isApp
      };
    }
  };
  function _sfc_render$M(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock(
      vue$1.Fragment,
      null,
      [
        vue$1.createCommentVNode("本地 icon 资源, uniapp 打包到 app 仅支持标签 image, 打包小程序和 H5 均可支持标签 img "),
        vue$1.createElementVNode("div", { class: "common-icon-container" }, [
          $setup.isApp ? (vue$1.openBlock(), vue$1.createElementBlock("image", {
            key: 0,
            class: "common-icon",
            src: $setup.props.src,
            style: vue$1.normalizeStyle({ width: $setup.props.width, height: $setup.props.height })
          }, null, 12, ["src"])) : (vue$1.openBlock(), vue$1.createElementBlock("img", {
            key: 1,
            class: "common-icon",
            src: $setup.props.src,
            style: vue$1.normalizeStyle({ width: $setup.props.width, height: $setup.props.height })
          }, null, 12, ["src"]))
        ])
      ],
      2112
      /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
    );
  }
  const Icon = /* @__PURE__ */ _export_sfc(_sfc_main$N, [["render", _sfc_render$M], ["__scopeId", "data-v-488ba04c"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-desk/message-desk-elements/customer-icon.vue"]]);
  const { computed: computed$b, ref: ref$8, watchEffect: watchEffect$2 } = vue;
  const _sfc_main$M = {
    components: {
      Icon
    },
    props: {
      ratingTemplate: {
        type: Object,
        default: () => ({})
      }
    },
    emits: ["sendMessage"],
    setup(props, { emit }) {
      const hasReply = ref$8(false);
      const sessionId = ref$8("");
      const value = ref$8(-1);
      const hoverValue = ref$8(-1);
      const hasExpire = ref$8(false);
      watchEffect$2(() => {
        sessionId.value = props.ratingTemplate.sessionId || "";
        if (props.ratingTemplate.selected != void 0) {
          for (let i2 = 0; i2 < props.ratingTemplate.menu.length; i2++) {
            if (props.ratingTemplate.menu[i2].id == props.ratingTemplate.selected.id) {
              hasReply.value = true;
              value.value = i2;
              break;
            }
          }
        }
        const timestamp = Math.floor((/* @__PURE__ */ new Date()).getTime() / 1e3);
        if (timestamp > props.ratingTemplate.expireTime) {
          hasExpire.value = true;
        }
      });
      const desc = computed$b(() => {
        var _a2;
        return (_a2 = props.ratingTemplate) == null ? void 0 : _a2.menu.map((item) => {
          return item.content;
        });
      });
      const starList = computed$b(() => {
        var _a2;
        return (_a2 = props.ratingTemplate) == null ? void 0 : _a2.menu.map((item, index) => {
          if (hoverValue.value !== -1) {
            return index <= hoverValue.value ? 1 : 0;
          } else {
            return index <= value.value ? 1 : 0;
          }
        });
      });
      const setValue = (val) => {
        if (hasReply.value) {
          return;
        }
        value.value = val;
      };
      const setHoverValue = (value2) => {
        if (hasReply.value) {
          return;
        }
        hoverValue.value = value2;
      };
      const submitRatingStar = async () => {
        if (value.value < 0) {
          return;
        }
        const submitData = {
          data: JSON.stringify({
            src: CUSTOM_MESSAGE_SRC.MENU_SELECTED,
            menuSelected: {
              id: props.ratingTemplate.menu[value.value].id,
              content: props.ratingTemplate.menu[value.value].content,
              sessionId: sessionId.value
            },
            customerServicePlugin: 0
          })
        };
        hasReply.value = true;
        emit("sendMessage", submitData);
      };
      return {
        props,
        hasReply,
        sessionId,
        value,
        hoverValue,
        hasExpire,
        desc,
        starList,
        setValue,
        setHoverValue,
        submitRatingStar,
        star,
        starLine,
        TUITranslateService: Wt
      };
    }
  };
  function _sfc_render$L(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_Icon = vue$1.resolveComponent("Icon");
    return vue$1.openBlock(), vue$1.createElementBlock("div", { class: "message-rating-star" }, [
      vue$1.createElementVNode(
        "p",
        { class: "rating-head" },
        vue$1.toDisplayString($setup.props.ratingTemplate.head),
        1
        /* TEXT */
      ),
      vue$1.createElementVNode("div", { class: "rating-card" }, [
        vue$1.createElementVNode(
          "span",
          { class: "card-title" },
          vue$1.toDisplayString($setup.TUITranslateService.t("AIDesk.请对本次服务进行评价")),
          1
          /* TEXT */
        ),
        vue$1.createElementVNode("div", { class: "card-wrapper" }, [
          vue$1.createElementVNode("div", { style: { "max-width": "200px" } }, [
            (vue$1.openBlock(true), vue$1.createElementBlock(
              vue$1.Fragment,
              null,
              vue$1.renderList($setup.starList, (item, index) => {
                return vue$1.openBlock(), vue$1.createElementBlock("div", {
                  key: index,
                  style: { "display": "inline-block" },
                  onClick: ($event) => $setup.setValue(index),
                  onMouseenter: ($event) => $setup.setHoverValue(index),
                  onMouseleave: _cache[0] || (_cache[0] = ($event) => $setup.setHoverValue(-1))
                }, [
                  item === 1 ? (vue$1.openBlock(), vue$1.createBlock(_component_Icon, {
                    key: 0,
                    src: $setup.star,
                    width: "25px",
                    height: "25px"
                  }, null, 8, ["src"])) : (vue$1.openBlock(), vue$1.createBlock(_component_Icon, {
                    key: 1,
                    src: $setup.starLine,
                    width: "25px",
                    height: "25px"
                  }, null, 8, ["src"]))
                ], 40, ["onClick", "onMouseenter"]);
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ])
        ]),
        vue$1.createElementVNode(
          "div",
          { style: { marginTop: "10px", marginBottom: "10px", wordBreak: "normal" } },
          vue$1.toDisplayString($setup.hoverValue === -1 ? $setup.value === -1 ? $setup.TUITranslateService.t("AIDesk.如果满意请给好评哦～") : $setup.desc[$setup.value] : $setup.desc[$setup.hoverValue]),
          1
          /* TEXT */
        ),
        vue$1.createElementVNode("button", {
          class: "submit-button",
          disabled: $setup.hasReply || $setup.hasExpire,
          onClick: _cache[1] || (_cache[1] = (...args) => $setup.submitRatingStar && $setup.submitRatingStar(...args))
        }, vue$1.toDisplayString($setup.TUITranslateService.t("AIDesk.提交评价")), 9, ["disabled"])
      ]),
      $setup.hasReply ? (vue$1.openBlock(), vue$1.createElementBlock(
        "p",
        {
          key: 0,
          class: "rating-tail",
          style: {
            marginTop: "20px"
          }
        },
        vue$1.toDisplayString($setup.props.ratingTemplate.tail),
        1
        /* TEXT */
      )) : vue$1.createCommentVNode("v-if", true)
    ]);
  }
  const RatingStar = /* @__PURE__ */ _export_sfc(_sfc_main$M, [["render", _sfc_render$L], ["__scopeId", "data-v-f075765c"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-desk/message-desk-elements/message-rating/message-rating-star.vue"]]);
  const { computed: computed$a, ref: ref$7, watchEffect: watchEffect$1 } = vue;
  const _sfc_main$L = {
    props: {
      ratingTemplate: {
        type: Object,
        default: () => ({})
      }
    },
    emits: ["sendMessage"],
    setup(props, { emit }) {
      const hasReply = ref$7(false);
      const sessionId = ref$7("");
      const selectValue = ref$7(-1);
      const hoverValue = ref$7(-1);
      const hasExpire = ref$7(false);
      const desc = computed$a(() => {
        var _a2;
        return (_a2 = props.ratingTemplate) == null ? void 0 : _a2.menu.map((item) => item.content);
      });
      const numberList = computed$a(() => {
        var _a2;
        return (_a2 = props.ratingTemplate) == null ? void 0 : _a2.menu.map((item, index) => index);
      });
      watchEffect$1(() => {
        sessionId.value = props.ratingTemplate.sessionId || "";
        if (props.ratingTemplate.selected != void 0) {
          for (let i2 = 0; i2 < props.ratingTemplate.menu.length; i2++) {
            if (props.ratingTemplate.menu[i2].id == props.ratingTemplate.selected.id) {
              hasReply.value = true;
              selectValue.value = i2;
              break;
            }
          }
        }
        const timestamp = Math.floor((/* @__PURE__ */ new Date()).getTime() / 1e3);
        if (timestamp > props.ratingTemplate.expireTime) {
          hasExpire.value = true;
        }
      });
      const setValue = (val) => {
        if (!hasReply.value) {
          selectValue.value = val;
        }
      };
      const setHoverValue = (value) => {
        if (!hasReply.value) {
          hoverValue.value = value;
        }
      };
      const submitRatingStar = () => {
        if (selectValue.value >= 0) {
          const submitData = {
            data: JSON.stringify({
              src: CUSTOM_MESSAGE_SRC.MENU_SELECTED,
              menuSelected: {
                id: props.ratingTemplate.menu[selectValue.value].id,
                content: props.ratingTemplate.menu[selectValue.value].content,
                sessionId: sessionId.value
              },
              customerServicePlugin: 0
            })
          };
          hasReply.value = true;
          emit("sendMessage", submitData);
        }
      };
      return {
        props,
        hasReply,
        sessionId,
        selectValue,
        hoverValue,
        hasExpire,
        desc,
        numberList,
        setValue,
        setHoverValue,
        submitRatingStar,
        TUITranslateService: Wt
      };
    }
  };
  function _sfc_render$K(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("div", { class: "message-rating-star" }, [
      vue$1.createElementVNode(
        "p",
        { class: "rating-head" },
        vue$1.toDisplayString($setup.props.ratingTemplate.head),
        1
        /* TEXT */
      ),
      vue$1.createElementVNode("div", { class: "rating-card" }, [
        vue$1.createElementVNode(
          "span",
          { class: "card-title" },
          vue$1.toDisplayString($setup.TUITranslateService.t("AIDesk.请对本次服务进行评价")),
          1
          /* TEXT */
        ),
        vue$1.createElementVNode("div", { class: "card-wrapper" }, [
          vue$1.createElementVNode("div", { style: { "max-width": "250px" } }, [
            (vue$1.openBlock(true), vue$1.createElementBlock(
              vue$1.Fragment,
              null,
              vue$1.renderList($setup.numberList, (item, index) => {
                return vue$1.openBlock(), vue$1.createElementBlock("div", {
                  key: index,
                  class: vue$1.normalizeClass({
                    "active": !(index !== $setup.selectValue && index !== $setup.hoverValue),
                    "de-active": index !== $setup.selectValue && index !== $setup.hoverValue
                  }),
                  style: vue$1.normalizeStyle({
                    marginLeft: index === 0 ? "0px" : "20px",
                    margin: "5px"
                  }),
                  onClick: ($event) => $setup.setValue(index),
                  onMouseenter: ($event) => $setup.setHoverValue(index),
                  onMouseleave: _cache[0] || (_cache[0] = ($event) => $setup.setHoverValue(-1))
                }, vue$1.toDisplayString(item + 1), 47, ["onClick", "onMouseenter"]);
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ])
        ]),
        vue$1.createElementVNode(
          "div",
          { style: { marginTop: "10px", marginBottom: "10px", wordBreak: "normal" } },
          vue$1.toDisplayString($setup.hoverValue === -1 ? $setup.selectValue === -1 ? $setup.TUITranslateService.t("AIDesk.如果满意请给好评哦～") : $setup.desc[$setup.selectValue] : $setup.desc[$setup.hoverValue]),
          1
          /* TEXT */
        ),
        vue$1.createElementVNode("button", {
          class: "submit-button",
          disabled: $setup.hasReply || $setup.hasExpire,
          onClick: _cache[1] || (_cache[1] = (...args) => $setup.submitRatingStar && $setup.submitRatingStar(...args))
        }, vue$1.toDisplayString($setup.TUITranslateService.t("AIDesk.提交评价")), 9, ["disabled"])
      ]),
      $setup.hasReply ? (vue$1.openBlock(), vue$1.createElementBlock(
        "p",
        {
          key: 0,
          class: "rating-tail",
          style: {
            marginTop: "20px"
          }
        },
        vue$1.toDisplayString($setup.props.ratingTemplate.tail),
        1
        /* TEXT */
      )) : vue$1.createCommentVNode("v-if", true)
    ]);
  }
  const RatingNumber = /* @__PURE__ */ _export_sfc(_sfc_main$L, [["render", _sfc_render$K], ["__scopeId", "data-v-e6481d49"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-desk/message-desk-elements/message-rating/message-rating-number.vue"]]);
  const { computed: computed$9 } = vue;
  const _sfc_main$K = {
    components: {
      RatingStar,
      RatingNumber
    },
    props: {
      message: {
        type: Object,
        default: () => ({})
      }
    },
    emits: ["sendMessage"],
    setup(props, { emit }) {
      const ratingTemplate = computed$9(() => {
        const data = props.message && JSONToObject(props.message.payload.data);
        return data == null ? void 0 : data.menuContent;
      });
      const sendCustomMessage = (data) => {
        emit("sendMessage", data);
      };
      return {
        sendCustomMessage,
        ratingTemplate,
        RATING_TEMPLATE_TYPE
      };
    }
  };
  function _sfc_render$J(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_RatingStar = vue$1.resolveComponent("RatingStar");
    const _component_RatingNumber = vue$1.resolveComponent("RatingNumber");
    return $setup.ratingTemplate.type === $setup.RATING_TEMPLATE_TYPE.STAR ? (vue$1.openBlock(), vue$1.createBlock(_component_RatingStar, {
      key: 0,
      ratingTemplate: $setup.ratingTemplate,
      onSendMessage: $setup.sendCustomMessage
    }, null, 8, ["ratingTemplate", "onSendMessage"])) : (vue$1.openBlock(), vue$1.createBlock(_component_RatingNumber, {
      key: 1,
      ratingTemplate: $setup.ratingTemplate,
      onSendMessage: $setup.sendCustomMessage
    }, null, 8, ["ratingTemplate", "onSendMessage"]));
  }
  const MessageRating = /* @__PURE__ */ _export_sfc(_sfc_main$K, [["render", _sfc_render$J], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-desk/message-desk-elements/message-rating/index.vue"]]);
  const iconRight = "/assets/iconRight.eac74a1a.svg";
  const iconQuestion = "/assets/icon_question.3adf663c.png";
  const { computed: computed$8, ref: ref$6 } = vue;
  const _sfc_main$J = {
    components: {
      Icon
    },
    props: {
      payload: {
        type: Object,
        default: () => ({})
      }
    },
    emits: ["sendMessage", "heightChanged"],
    setup(props, { emit }) {
      const isSelected = ref$6(false);
      const content = computed$8(() => {
        var _a2;
        return ((_a2 = props == null ? void 0 : props.payload) == null ? void 0 : _a2.content) || {
          header: void 0,
          items: []
        };
      });
      const handleContentListItemClick = (branch) => {
        if (!branch.content) {
          return;
        }
        if (!isSelected.value) {
          isSelected.value = true;
          emit("sendMessage", { text: branch.content });
        }
      };
      return {
        content,
        handleContentListItemClick,
        iconRight,
        iconQuestion,
        isSelected,
        isPC,
        TUITranslateService: Wt
      };
    },
    mounted() {
      this.$emit("heightChanged");
    }
  };
  function _sfc_render$I(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_Icon = vue$1.resolveComponent("Icon");
    return vue$1.openBlock(), vue$1.createElementBlock("div", { class: "branch-card" }, [
      $setup.content.header || $setup.content.title ? (vue$1.openBlock(), vue$1.createElementBlock(
        "div",
        {
          key: 0,
          class: vue$1.normalizeClass(["branch-body", $setup.isPC ? "branch-bubble" : "branch-bubble-h5"])
        },
        [
          vue$1.createVNode(_component_Icon, {
            src: $setup.iconQuestion,
            class: "branch-title-icon"
          }, null, 8, ["src"]),
          vue$1.createTextVNode(
            " " + vue$1.toDisplayString($setup.content.header || $setup.content.title),
            1
            /* TEXT */
          )
        ],
        2
        /* CLASS */
      )) : vue$1.createCommentVNode("v-if", true),
      (vue$1.openBlock(true), vue$1.createElementBlock(
        vue$1.Fragment,
        null,
        vue$1.renderList($setup.content.items, (item, index) => {
          return vue$1.openBlock(), vue$1.createElementBlock("div", {
            key: index,
            class: vue$1.normalizeClass(["branch-body", $setup.isPC ? "branch-bubble" : "branch-bubble-h5", "branch-item", $setup.isSelected ? "branch-item-selected" : "", item.content ? "" : "warning-item"]),
            style: vue$1.normalizeStyle({ borderWidth: $setup.content.header ? "1px 0 0px 0" : "" }),
            onClick: ($event) => $setup.handleContentListItemClick(item)
          }, vue$1.toDisplayString(item.content || $setup.TUITranslateService.t("AIDesk.分支选项异常")), 15, ["onClick"]);
        }),
        128
        /* KEYED_FRAGMENT */
      ))
    ]);
  }
  const MessageBranch = /* @__PURE__ */ _export_sfc(_sfc_main$J, [["render", _sfc_render$I], ["__scopeId", "data-v-498aa225"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-desk/message-desk-elements/message-branch.vue"]]);
  const _sfc_main$I = {
    props: {
      title: {
        type: String,
        default: ""
      },
      list: {
        type: Array,
        default: () => []
      }
    },
    emits: ["input-click"],
    setup(props, { emit }) {
      const listItemClick = (branch) => {
        emit("input-click", branch);
      };
      return {
        props,
        listItemClick
      };
    }
  };
  function _sfc_render$H(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("div", { class: "form-branch-container" }, [
      $setup.props.title ? (vue$1.openBlock(), vue$1.createElementBlock(
        "p",
        {
          key: 0,
          class: "card-title"
        },
        vue$1.toDisplayString($setup.props.title),
        1
        /* TEXT */
      )) : vue$1.createCommentVNode("v-if", true),
      (vue$1.openBlock(true), vue$1.createElementBlock(
        vue$1.Fragment,
        null,
        vue$1.renderList($setup.props.list, (item, index) => {
          return vue$1.openBlock(), vue$1.createElementBlock("div", {
            key: index,
            class: "form-branch-item",
            onClick: ($event) => $setup.listItemClick(item)
          }, vue$1.toDisplayString(item.content), 9, ["onClick"]);
        }),
        128
        /* KEYED_FRAGMENT */
      ))
    ]);
  }
  const FormBranch = /* @__PURE__ */ _export_sfc(_sfc_main$I, [["render", _sfc_render$H], ["__scopeId", "data-v-e0722c76"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-desk/message-desk-elements/message-single-form/form-branch.vue"]]);
  const iconForm = "/assets/icon_form.3e84e438.png";
  const iconSucess = "/assets/icon_success.ff1614ac.png";
  const { computed: computed$7, ref: ref$5 } = vue;
  const _sfc_main$H = {
    components: {
      Icon
    },
    props: {
      title: {
        type: String,
        default: ""
      }
    },
    emits: ["input-submit"],
    setup(props, { emit }) {
      const disabled = ref$5(false);
      const text = ref$5("");
      const isShowForm = ref$5(false);
      const isFinish = ref$5(false);
      const listItemClick = () => {
        disabled.value = true;
        isShowForm.value = false;
        isFinish.value = true;
      };
      const showForm = () => {
        isShowForm.value = true;
      };
      return {
        disabled,
        text,
        listItemClick,
        props,
        iconForm,
        isShowForm,
        showForm,
        iconSucess,
        isFinish,
        TUITranslateService: Wt
      };
    }
  };
  function _sfc_render$G(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_Icon = vue$1.resolveComponent("Icon");
    return !$setup.isShowForm && !$setup.isFinish ? (vue$1.openBlock(), vue$1.createElementBlock("div", {
      key: 0,
      class: "form-container"
    }, [
      vue$1.createVNode(_component_Icon, {
        src: $setup.iconForm,
        width: "65px",
        height: "65px"
      }, null, 8, ["src"]),
      vue$1.createElementVNode("div", { class: "right-container" }, [
        vue$1.createElementVNode(
          "div",
          { class: "card-title" },
          vue$1.toDisplayString($setup.props.title),
          1
          /* TEXT */
        ),
        vue$1.createElementVNode(
          "div",
          {
            class: "form-button",
            onClick: _cache[0] || (_cache[0] = (...args) => $setup.showForm && $setup.showForm(...args))
          },
          vue$1.toDisplayString($setup.TUITranslateService.t("AIDesk.立即填写")),
          1
          /* TEXT */
        )
      ])
    ])) : $setup.isShowForm && !$setup.isFinish ? (vue$1.openBlock(), vue$1.createElementBlock("div", {
      key: 1,
      class: "form-input-container"
    }, [
      vue$1.createElementVNode("div", { class: "card-title" }, [
        vue$1.createCommentVNode(" {{ props.title }} "),
        vue$1.createTextVNode(" title ")
      ]),
      vue$1.createElementVNode("div", { class: "form-input-box" }, [
        vue$1.createElementVNode("div", { class: "form-input-line" }, [
          vue$1.createElementVNode("div", { class: "form-label" }, [
            (vue$1.openBlock(), vue$1.createElementBlock("span", {
              key: 0,
              class: "required-icon"
            }, vue$1.toDisplayString("*"))),
            vue$1.createElementVNode("label", null, "label")
          ]),
          vue$1.withDirectives(vue$1.createElementVNode(
            "input",
            {
              "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $setup.text = $event),
              class: "form-input",
              placeholder: "TUITranslateService.t('AIDesk.请输入内容')"
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue$1.vModelText, $setup.text]
          ])
        ])
      ])
    ])) : $setup.isFinish ? (vue$1.openBlock(), vue$1.createElementBlock("div", {
      key: 2,
      class: "form-finish-container"
    }, [
      vue$1.createElementVNode("div", { class: "card-title" }, [
        vue$1.createElementVNode(
          "div",
          null,
          vue$1.toDisplayString($setup.props.title),
          1
          /* TEXT */
        ),
        vue$1.createElementVNode("div", { class: "form-finish-title-right" }, [
          vue$1.createVNode(_component_Icon, {
            src: $setup.iconSucess,
            style: { "margin": "0px 4px" }
          }, null, 8, ["src"]),
          vue$1.createTextVNode(
            " " + vue$1.toDisplayString($setup.TUITranslateService.t("AIDesk.已提交")),
            1
            /* TEXT */
          )
        ])
      ]),
      vue$1.createElementVNode(
        "div",
        null,
        vue$1.toDisplayString($setup.text),
        1
        /* TEXT */
      )
    ])) : vue$1.createCommentVNode("v-if", true);
  }
  const FormInput = /* @__PURE__ */ _export_sfc(_sfc_main$H, [["render", _sfc_render$G], ["__scopeId", "data-v-08a2207e"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-desk/message-desk-elements/message-single-form/form-input.vue"]]);
  const { computed: computed$6 } = vue;
  const _sfc_main$G = {
    components: {
      FormBranch,
      FormInput
    },
    props: {
      payload: {
        type: Object,
        default: () => ({})
      }
    },
    emits: ["sendMessage"],
    setup(props, { emit }) {
      const content = computed$6(() => {
        var _a2;
        return ((_a2 = props.payload) == null ? void 0 : _a2.content) || {
          type: 0,
          header: "",
          items: []
        };
      });
      const handleContentListItemClick = (branch) => {
        emit("sendMessage", { text: branch.content });
      };
      const handleFormSaveInputSubmit = (text) => {
        emit("sendMessage", { text });
      };
      return {
        content,
        handleContentListItemClick,
        handleFormSaveInputSubmit
      };
    }
  };
  function _sfc_render$F(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_FormBranch = vue$1.resolveComponent("FormBranch");
    const _component_FormInput = vue$1.resolveComponent("FormInput");
    return $setup.content.type === 1 ? (vue$1.openBlock(), vue$1.createElementBlock("div", {
      key: 0,
      class: "message-form"
    }, [
      vue$1.createElementVNode("div", { class: "message-form" }, [
        vue$1.createVNode(_component_FormBranch, {
          title: $setup.content.header,
          list: $setup.content.items,
          onInputClick: $setup.handleContentListItemClick
        }, null, 8, ["title", "list", "onInputClick"])
      ])
    ])) : (vue$1.openBlock(), vue$1.createElementBlock("div", {
      key: 1,
      class: "message-form"
    }, [
      vue$1.createVNode(_component_FormInput, {
        title: $setup.content.header,
        onInputSubmit: $setup.handleFormSaveInputSubmit
      }, null, 8, ["title", "onInputSubmit"])
    ]));
  }
  const MessageForm = /* @__PURE__ */ _export_sfc(_sfc_main$G, [["render", _sfc_render$F], ["__scopeId", "data-v-aea47d7e"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-desk/message-desk-elements/message-single-form/index.vue"]]);
  const imRobotGuess = "/assets/imRobotGuess.5fc0b4ca.svg";
  const refresh = "/assets/refresh.8efc59f5.svg";
  const iconRefresh = "/assets/icon_refresh.d269e542.png";
  const { reactive, toRefs } = vue;
  const _sfc_main$F = {
    components: {
      Icon
    },
    props: {
      payload: {
        type: Object,
        default: () => ({ content: { title: "", items: [] } })
      }
    },
    emits: ["sendMessage"],
    setup(props, { emit }) {
      var _a2, _b2, _c2, _d, _e2, _f;
      const data = reactive({
        // title
        title: ((_b2 = (_a2 = props.payload) == null ? void 0 : _a2.content) == null ? void 0 : _b2.title) || "",
        // all branch list
        list: ((_d = (_c2 = props.payload) == null ? void 0 : _c2.content) == null ? void 0 : _d.items) || [],
        // current branch list
        showList: (((_f = (_e2 = props.payload) == null ? void 0 : _e2.content) == null ? void 0 : _f.items) || []).slice(0, 3),
        // current page number
        pageNumber: 1
      });
      const handleContentListItemClick = (branch) => {
        emit("sendMessage", { text: branch.content });
      };
      const changeBranchList = () => {
        var _a3, _b3;
        if (data.pageNumber * 3 >= ((_a3 = data.list) == null ? void 0 : _a3.length)) {
          data.pageNumber = 0;
        }
        data.showList = (_b3 = data.list) == null ? void 0 : _b3.slice(
          data.pageNumber * 3,
          data.pageNumber * 3 + 3
        );
        data.pageNumber += 1;
      };
      return {
        ...toRefs(data),
        handleContentListItemClick,
        imRobotGuess,
        refresh,
        iconRight,
        changeBranchList,
        iconQuestion,
        iconRefresh
      };
    }
  };
  function _sfc_render$E(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_Icon = vue$1.resolveComponent("Icon");
    return vue$1.openBlock(), vue$1.createElementBlock("div", { class: "welcome-card" }, [
      vue$1.createElementVNode("div", { class: "welcome-title" }, [
        vue$1.createElementVNode("div", { class: "welcome-title-left-container" }, [
          vue$1.createVNode(_component_Icon, { src: $setup.iconQuestion }, null, 8, ["src"]),
          _ctx.title ? (vue$1.openBlock(), vue$1.createElementBlock(
            "p",
            {
              key: 0,
              class: "card-title"
            },
            vue$1.toDisplayString(_ctx.title),
            1
            /* TEXT */
          )) : vue$1.createCommentVNode("v-if", true)
        ]),
        vue$1.createElementVNode("div", {
          class: "change-wrapper",
          onClick: _cache[0] || (_cache[0] = ($event) => $setup.changeBranchList())
        }, [
          vue$1.createVNode(_component_Icon, { src: $setup.iconRefresh }, null, 8, ["src"])
        ])
      ]),
      (vue$1.openBlock(true), vue$1.createElementBlock(
        vue$1.Fragment,
        null,
        vue$1.renderList(_ctx.showList, (item, index) => {
          return vue$1.openBlock(), vue$1.createElementBlock("div", {
            key: index,
            class: "welcome-item",
            onClick: ($event) => $setup.handleContentListItemClick(item)
          }, [
            vue$1.createElementVNode(
              "div",
              null,
              vue$1.toDisplayString(item.content),
              1
              /* TEXT */
            )
          ], 8, ["onClick"]);
        }),
        128
        /* KEYED_FRAGMENT */
      ))
    ]);
  }
  const MessageIMRobotWelcome = /* @__PURE__ */ _export_sfc(_sfc_main$F, [["render", _sfc_render$E], ["__scopeId", "data-v-92f1d019"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-desk/message-desk-elements/message-robot-welcome.vue"]]);
  const _sfc_main$E = {
    props: {
      payload: {
        type: Object,
        default: () => ({})
      }
    },
    emits: ["sendMessage"],
    setup(props) {
      const jumpProductCard = () => {
        const { url: url2 } = props.payload.content;
        if (url2.startsWith("https://") || url2.startsWith("http://")) {
          plus.runtime.openURL(url2);
        } else {
          uni.navigateTo({
            url: url2
          });
        }
      };
      return {
        props,
        isApp,
        jumpProductCard,
        TUITranslateService: Wt
      };
    }
  };
  function _sfc_render$D(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("div", { class: "message-product-card" }, [
      $setup.isApp ? (vue$1.openBlock(), vue$1.createElementBlock("image", {
        key: 0,
        class: "product-img",
        src: $setup.props.payload.content.pic
      }, null, 8, ["src"])) : (vue$1.openBlock(), vue$1.createElementBlock("img", {
        key: 1,
        class: "product-img",
        src: $setup.props.payload.content.pic
      }, null, 8, ["src"])),
      vue$1.createElementVNode("div", { class: "product-card-information" }, [
        vue$1.createElementVNode(
          "div",
          { class: "product-card-title" },
          vue$1.toDisplayString($setup.props.payload.content.header),
          1
          /* TEXT */
        ),
        vue$1.createElementVNode("div", { class: "product-card-description-block" }, [
          vue$1.createElementVNode(
            "div",
            { class: "product-card-description" },
            vue$1.toDisplayString($setup.props.payload.content.desc),
            1
            /* TEXT */
          ),
          vue$1.createElementVNode(
            "div",
            {
              class: "product-card-link",
              onClick: _cache[0] || (_cache[0] = (...args) => $setup.jumpProductCard && $setup.jumpProductCard(...args))
            },
            vue$1.toDisplayString($setup.TUITranslateService.t("AIDesk.跳转")),
            1
            /* TEXT */
          )
        ])
      ])
    ]);
  }
  const MessageProductCard = /* @__PURE__ */ _export_sfc(_sfc_main$E, [["render", _sfc_render$D], ["__scopeId", "data-v-18b13f09"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-desk/message-desk-elements/message-product-card.vue"]]);
  function getDefaults() {
    return {
      baseUrl: null,
      breaks: false,
      extensions: null,
      gfm: true,
      headerIds: true,
      headerPrefix: "",
      highlight: null,
      langPrefix: "language-",
      mangle: true,
      pedantic: false,
      renderer: null,
      sanitize: false,
      sanitizer: null,
      silent: false,
      smartLists: false,
      smartypants: false,
      tokenizer: null,
      walkTokens: null,
      xhtml: false
    };
  }
  let defaults = getDefaults();
  function changeDefaults(newDefaults) {
    defaults = newDefaults;
  }
  const escapeTest = /[&<>"']/;
  const escapeReplace = /[&<>"']/g;
  const escapeTestNoEncode = /[<>"']|&(?!#?\w+;)/;
  const escapeReplaceNoEncode = /[<>"']|&(?!#?\w+;)/g;
  const escapeReplacements = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#39;"
  };
  const getEscapeReplacement = (ch) => escapeReplacements[ch];
  function escape$1(html, encode) {
    if (encode) {
      if (escapeTest.test(html)) {
        return html.replace(escapeReplace, getEscapeReplacement);
      }
    } else {
      if (escapeTestNoEncode.test(html)) {
        return html.replace(escapeReplaceNoEncode, getEscapeReplacement);
      }
    }
    return html;
  }
  const unescapeTest = /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig;
  function unescape$1(html) {
    return html.replace(unescapeTest, (_2, n2) => {
      n2 = n2.toLowerCase();
      if (n2 === "colon")
        return ":";
      if (n2.charAt(0) === "#") {
        return n2.charAt(1) === "x" ? String.fromCharCode(parseInt(n2.substring(2), 16)) : String.fromCharCode(+n2.substring(1));
      }
      return "";
    });
  }
  const caret = /(^|[^\[])\^/g;
  function edit(regex, opt) {
    regex = regex.source || regex;
    opt = opt || "";
    const obj = {
      replace: (name, val) => {
        val = val.source || val;
        val = val.replace(caret, "$1");
        regex = regex.replace(name, val);
        return obj;
      },
      getRegex: () => {
        return new RegExp(regex, opt);
      }
    };
    return obj;
  }
  const nonWordAndColonTest = /[^\w:]/g;
  const originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;
  function cleanUrl(sanitize, base, href) {
    if (sanitize) {
      let prot;
      try {
        prot = decodeURIComponent(unescape$1(href)).replace(nonWordAndColonTest, "").toLowerCase();
      } catch (e2) {
        return null;
      }
      if (prot.indexOf("javascript:") === 0 || prot.indexOf("vbscript:") === 0 || prot.indexOf("data:") === 0) {
        return null;
      }
    }
    if (base && !originIndependentUrl.test(href)) {
      href = resolveUrl(base, href);
    }
    try {
      href = encodeURI(href).replace(/%25/g, "%");
    } catch (e2) {
      return null;
    }
    return href;
  }
  const baseUrls = {};
  const justDomain = /^[^:]+:\/*[^/]*$/;
  const protocol = /^([^:]+:)[\s\S]*$/;
  const domain = /^([^:]+:\/*[^/]*)[\s\S]*$/;
  function resolveUrl(base, href) {
    if (!baseUrls[" " + base]) {
      if (justDomain.test(base)) {
        baseUrls[" " + base] = base + "/";
      } else {
        baseUrls[" " + base] = rtrim(base, "/", true);
      }
    }
    base = baseUrls[" " + base];
    const relativeBase = base.indexOf(":") === -1;
    if (href.substring(0, 2) === "//") {
      if (relativeBase) {
        return href;
      }
      return base.replace(protocol, "$1") + href;
    } else if (href.charAt(0) === "/") {
      if (relativeBase) {
        return href;
      }
      return base.replace(domain, "$1") + href;
    } else {
      return base + href;
    }
  }
  const noopTest = { exec: function noopTest2() {
  } };
  function merge(obj) {
    let i2 = 1, target, key;
    for (; i2 < arguments.length; i2++) {
      target = arguments[i2];
      for (key in target) {
        if (Object.prototype.hasOwnProperty.call(target, key)) {
          obj[key] = target[key];
        }
      }
    }
    return obj;
  }
  function splitCells(tableRow, count) {
    const row = tableRow.replace(/\|/g, (match, offset, str) => {
      let escaped = false, curr = offset;
      while (--curr >= 0 && str[curr] === "\\")
        escaped = !escaped;
      if (escaped) {
        return "|";
      } else {
        return " |";
      }
    }), cells = row.split(/ \|/);
    let i2 = 0;
    if (!cells[0].trim()) {
      cells.shift();
    }
    if (!cells[cells.length - 1].trim()) {
      cells.pop();
    }
    if (cells.length > count) {
      cells.splice(count);
    } else {
      while (cells.length < count)
        cells.push("");
    }
    for (; i2 < cells.length; i2++) {
      cells[i2] = cells[i2].trim().replace(/\\\|/g, "|");
    }
    return cells;
  }
  function rtrim(str, c2, invert) {
    const l2 = str.length;
    if (l2 === 0) {
      return "";
    }
    let suffLen = 0;
    while (suffLen < l2) {
      const currChar = str.charAt(l2 - suffLen - 1);
      if (currChar === c2 && !invert) {
        suffLen++;
      } else if (currChar !== c2 && invert) {
        suffLen++;
      } else {
        break;
      }
    }
    return str.substr(0, l2 - suffLen);
  }
  function findClosingBracket(str, b2) {
    if (str.indexOf(b2[1]) === -1) {
      return -1;
    }
    const l2 = str.length;
    let level = 0, i2 = 0;
    for (; i2 < l2; i2++) {
      if (str[i2] === "\\") {
        i2++;
      } else if (str[i2] === b2[0]) {
        level++;
      } else if (str[i2] === b2[1]) {
        level--;
        if (level < 0) {
          return i2;
        }
      }
    }
    return -1;
  }
  function checkSanitizeDeprecation(opt) {
    if (opt && opt.sanitize && !opt.silent) {
      formatAppLog("warn", "at pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-desk/message-desk-elements/lib-marked.js:261", "marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options");
    }
  }
  function repeatString(pattern, count) {
    if (count < 1) {
      return "";
    }
    let result = "";
    while (count > 1) {
      if (count & 1) {
        result += pattern;
      }
      count >>= 1;
      pattern += pattern;
    }
    return result + pattern;
  }
  function outputLink(cap, link, raw, lexer) {
    const href = link.href;
    const title = link.title ? escape$1(link.title) : null;
    const text = cap[1].replace(/\\([\[\]])/g, "$1");
    if (cap[0].charAt(0) !== "!") {
      lexer.state.inLink = true;
      const token = {
        type: "link",
        raw,
        href,
        title,
        text,
        tokens: lexer.inlineTokens(text, [])
      };
      lexer.state.inLink = false;
      return token;
    } else {
      return {
        type: "image",
        raw,
        href,
        title,
        text: escape$1(text)
      };
    }
  }
  function indentCodeCompensation(raw, text) {
    const matchIndentToCode = raw.match(/^(\s+)(?:```)/);
    if (matchIndentToCode === null) {
      return text;
    }
    const indentToCode = matchIndentToCode[1];
    return text.split("\n").map((node2) => {
      const matchIndentInNode = node2.match(/^\s+/);
      if (matchIndentInNode === null) {
        return node2;
      }
      const [indentInNode] = matchIndentInNode;
      if (indentInNode.length >= indentToCode.length) {
        return node2.slice(indentToCode.length);
      }
      return node2;
    }).join("\n");
  }
  class Tokenizer {
    constructor(options) {
      this.options = options || defaults;
    }
    space(src) {
      const cap = this.rules.block.newline.exec(src);
      if (cap) {
        if (cap[0].length > 1) {
          return {
            type: "space",
            raw: cap[0]
          };
        }
        return { raw: "\n" };
      }
    }
    code(src) {
      const cap = this.rules.block.code.exec(src);
      if (cap) {
        const text = cap[0].replace(/^ {1,4}/gm, "");
        return {
          type: "code",
          raw: cap[0],
          codeBlockStyle: "indented",
          text: !this.options.pedantic ? rtrim(text, "\n") : text
        };
      }
    }
    fences(src) {
      const cap = this.rules.block.fences.exec(src);
      if (cap) {
        const raw = cap[0];
        const text = indentCodeCompensation(raw, cap[3] || "");
        return {
          type: "code",
          raw,
          lang: cap[2] ? cap[2].trim() : cap[2],
          text
        };
      }
    }
    heading(src) {
      const cap = this.rules.block.heading.exec(src);
      if (cap) {
        let text = cap[2].trim();
        if (/#$/.test(text)) {
          const trimmed = rtrim(text, "#");
          if (this.options.pedantic) {
            text = trimmed.trim();
          } else if (!trimmed || / $/.test(trimmed)) {
            text = trimmed.trim();
          }
        }
        const token = {
          type: "heading",
          raw: cap[0],
          depth: cap[1].length,
          text,
          tokens: []
        };
        this.lexer.inline(token.text, token.tokens);
        return token;
      }
    }
    hr(src) {
      const cap = this.rules.block.hr.exec(src);
      if (cap) {
        return {
          type: "hr",
          raw: cap[0]
        };
      }
    }
    blockquote(src) {
      const cap = this.rules.block.blockquote.exec(src);
      if (cap) {
        const text = cap[0].replace(/^ *> ?/gm, "");
        return {
          type: "blockquote",
          raw: cap[0],
          tokens: this.lexer.blockTokens(text, []),
          text
        };
      }
    }
    list(src) {
      let cap = this.rules.block.list.exec(src);
      if (cap) {
        let raw, istask, ischecked, indent, i2, blankLine, endsWithBlankLine, line, lines, itemContents;
        let bull = cap[1].trim();
        const isordered = bull.length > 1;
        const list = {
          type: "list",
          raw: "",
          ordered: isordered,
          start: isordered ? +bull.slice(0, -1) : "",
          loose: false,
          items: []
        };
        bull = isordered ? `\\d{1,9}\\${bull.slice(-1)}` : `\\${bull}`;
        if (this.options.pedantic) {
          bull = isordered ? bull : "[*+-]";
        }
        const itemRegex = new RegExp(`^( {0,3}${bull})((?: [^\\n]*| *)(?:\\n[^\\n]*)*(?:\\n|$))`);
        while (src) {
          if (this.rules.block.hr.test(src)) {
            break;
          }
          if (!(cap = itemRegex.exec(src))) {
            break;
          }
          lines = cap[2].split("\n");
          if (this.options.pedantic) {
            indent = 2;
            itemContents = lines[0].trimLeft();
          } else {
            indent = cap[2].search(/[^ ]/);
            indent = cap[1].length + (indent > 4 ? 1 : indent);
            itemContents = lines[0].slice(indent - cap[1].length);
          }
          blankLine = false;
          raw = cap[0];
          if (!lines[0] && /^ *$/.test(lines[1])) {
            raw = cap[1] + lines.slice(0, 2).join("\n") + "\n";
            list.loose = true;
            lines = [];
          }
          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\d{1,9}[.)])`);
          for (i2 = 1; i2 < lines.length; i2++) {
            line = lines[i2];
            if (this.options.pedantic) {
              line = line.replace(/^ {1,4}(?=( {4})*[^ ])/g, "  ");
            }
            if (nextBulletRegex.test(line)) {
              raw = cap[1] + lines.slice(0, i2).join("\n") + "\n";
              break;
            }
            if (!blankLine) {
              if (!line.trim()) {
                blankLine = true;
              }
              if (line.search(/[^ ]/) >= indent) {
                itemContents += "\n" + line.slice(indent);
              } else {
                itemContents += "\n" + line;
              }
              continue;
            }
            if (line.search(/[^ ]/) >= indent || !line.trim()) {
              itemContents += "\n" + line.slice(indent);
              continue;
            } else {
              raw = cap[1] + lines.slice(0, i2).join("\n") + "\n";
              break;
            }
          }
          if (!list.loose) {
            if (endsWithBlankLine) {
              list.loose = true;
            } else if (/\n *\n *$/.test(raw)) {
              endsWithBlankLine = true;
            }
          }
          if (this.options.gfm) {
            istask = /^\[[ xX]\] /.exec(itemContents);
            if (istask) {
              ischecked = istask[0] !== "[ ] ";
              itemContents = itemContents.replace(/^\[[ xX]\] +/, "");
            }
          }
          list.items.push({
            type: "list_item",
            raw,
            task: !!istask,
            checked: ischecked,
            loose: false,
            text: itemContents
          });
          list.raw += raw;
          src = src.slice(raw.length);
        }
        list.items[list.items.length - 1].raw = raw.trimRight();
        list.items[list.items.length - 1].text = itemContents.trimRight();
        list.raw = list.raw.trimRight();
        const l2 = list.items.length;
        for (i2 = 0; i2 < l2; i2++) {
          this.lexer.state.top = false;
          list.items[i2].tokens = this.lexer.blockTokens(list.items[i2].text, []);
          if (list.items[i2].tokens.some((t2) => t2.type === "space")) {
            list.loose = true;
            list.items[i2].loose = true;
          }
        }
        return list;
      }
    }
    html(src) {
      const cap = this.rules.block.html.exec(src);
      if (cap) {
        const token = {
          type: "html",
          raw: cap[0],
          pre: !this.options.sanitizer && (cap[1] === "pre" || cap[1] === "script" || cap[1] === "style"),
          text: cap[0]
        };
        if (this.options.sanitize) {
          token.type = "paragraph";
          token.text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape$1(cap[0]);
          token.tokens = [];
          this.lexer.inline(token.text, token.tokens);
        }
        return token;
      }
    }
    def(src) {
      const cap = this.rules.block.def.exec(src);
      if (cap) {
        if (cap[3])
          cap[3] = cap[3].substring(1, cap[3].length - 1);
        const tag = cap[1].toLowerCase().replace(/\s+/g, " ");
        return {
          type: "def",
          tag,
          raw: cap[0],
          href: cap[2],
          title: cap[3]
        };
      }
    }
    table(src) {
      const cap = this.rules.block.table.exec(src);
      if (cap) {
        const item = {
          type: "table",
          header: splitCells(cap[1]).map((c2) => {
            return { text: c2 };
          }),
          align: cap[2].replace(/^ *|\| *$/g, "").split(/ *\| */),
          rows: cap[3] ? cap[3].replace(/\n$/, "").split("\n") : []
        };
        if (item.header.length === item.align.length) {
          item.raw = cap[0];
          let l2 = item.align.length;
          let i2, j2, k2, row;
          for (i2 = 0; i2 < l2; i2++) {
            if (/^ *-+: *$/.test(item.align[i2])) {
              item.align[i2] = "right";
            } else if (/^ *:-+: *$/.test(item.align[i2])) {
              item.align[i2] = "center";
            } else if (/^ *:-+ *$/.test(item.align[i2])) {
              item.align[i2] = "left";
            } else {
              item.align[i2] = null;
            }
          }
          l2 = item.rows.length;
          for (i2 = 0; i2 < l2; i2++) {
            item.rows[i2] = splitCells(item.rows[i2], item.header.length).map((c2) => {
              return { text: c2 };
            });
          }
          l2 = item.header.length;
          for (j2 = 0; j2 < l2; j2++) {
            item.header[j2].tokens = [];
            this.lexer.inlineTokens(item.header[j2].text, item.header[j2].tokens);
          }
          l2 = item.rows.length;
          for (j2 = 0; j2 < l2; j2++) {
            row = item.rows[j2];
            for (k2 = 0; k2 < row.length; k2++) {
              row[k2].tokens = [];
              this.lexer.inlineTokens(row[k2].text, row[k2].tokens);
            }
          }
          return item;
        }
      }
    }
    lheading(src) {
      const cap = this.rules.block.lheading.exec(src);
      if (cap) {
        const token = {
          type: "heading",
          raw: cap[0],
          depth: cap[2].charAt(0) === "=" ? 1 : 2,
          text: cap[1],
          tokens: []
        };
        this.lexer.inline(token.text, token.tokens);
        return token;
      }
    }
    paragraph(src) {
      const cap = this.rules.block.paragraph.exec(src);
      if (cap) {
        const token = {
          type: "paragraph",
          raw: cap[0],
          text: cap[1].charAt(cap[1].length - 1) === "\n" ? cap[1].slice(0, -1) : cap[1],
          tokens: []
        };
        this.lexer.inline(token.text, token.tokens);
        return token;
      }
    }
    text(src) {
      const cap = this.rules.block.text.exec(src);
      if (cap) {
        const token = {
          type: "text",
          raw: cap[0],
          text: cap[0],
          tokens: []
        };
        this.lexer.inline(token.text, token.tokens);
        return token;
      }
    }
    escape(src) {
      const cap = this.rules.inline.escape.exec(src);
      if (cap) {
        return {
          type: "escape",
          raw: cap[0],
          text: escape$1(cap[1])
        };
      }
    }
    tag(src) {
      const cap = this.rules.inline.tag.exec(src);
      if (cap) {
        if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {
          this.lexer.state.inLink = true;
        } else if (this.lexer.state.inLink && /^<\/a>/i.test(cap[0])) {
          this.lexer.state.inLink = false;
        }
        if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
          this.lexer.state.inRawBlock = true;
        } else if (this.lexer.state.inRawBlock && /^<\/(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
          this.lexer.state.inRawBlock = false;
        }
        return {
          type: this.options.sanitize ? "text" : "html",
          raw: cap[0],
          inLink: this.lexer.state.inLink,
          inRawBlock: this.lexer.state.inRawBlock,
          text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape$1(cap[0]) : cap[0]
        };
      }
    }
    link(src) {
      const cap = this.rules.inline.link.exec(src);
      if (cap) {
        const trimmedUrl = cap[2].trim();
        if (!this.options.pedantic && /^</.test(trimmedUrl)) {
          if (!/>$/.test(trimmedUrl)) {
            return;
          }
          const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), "\\");
          if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {
            return;
          }
        } else {
          const lastParenIndex = findClosingBracket(cap[2], "()");
          if (lastParenIndex > -1) {
            const start = cap[0].indexOf("!") === 0 ? 5 : 4;
            const linkLen = start + cap[1].length + lastParenIndex;
            cap[2] = cap[2].substring(0, lastParenIndex);
            cap[0] = cap[0].substring(0, linkLen).trim();
            cap[3] = "";
          }
        }
        let href = cap[2];
        let title = "";
        if (this.options.pedantic) {
          const link = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(href);
          if (link) {
            href = link[1];
            title = link[3];
          }
        } else {
          title = cap[3] ? cap[3].slice(1, -1) : "";
        }
        href = href.trim();
        if (/^</.test(href)) {
          if (this.options.pedantic && !/>$/.test(trimmedUrl)) {
            href = href.slice(1);
          } else {
            href = href.slice(1, -1);
          }
        }
        return outputLink(cap, {
          href: href ? href.replace(this.rules.inline._escapes, "$1") : href,
          title: title ? title.replace(this.rules.inline._escapes, "$1") : title
        }, cap[0], this.lexer);
      }
    }
    reflink(src, links) {
      let cap;
      if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {
        let link = (cap[2] || cap[1]).replace(/\s+/g, " ");
        link = links[link.toLowerCase()];
        if (!link || !link.href) {
          const text = cap[0].charAt(0);
          return {
            type: "text",
            raw: text,
            text
          };
        }
        return outputLink(cap, link, cap[0], this.lexer);
      }
    }
    emStrong(src, maskedSrc, prevChar = "") {
      let match = this.rules.inline.emStrong.lDelim.exec(src);
      if (!match)
        return;
      if (match[3] && prevChar.match(/(?:[0-9A-Za-z\xAA\xB2\xB3\xB5\xB9\xBA\xBC-\xBE\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u0660-\u0669\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u0904-\u0939\u093D\u0950\u0958-\u0961\u0966-\u096F\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09E6-\u09F1\u09F4-\u09F9\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A66-\u0A6F\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AE6-\u0AEF\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B66-\u0B6F\u0B71-\u0B77\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0BE6-\u0BF2\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C66-\u0C6F\u0C78-\u0C7E\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CE6-\u0CEF\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D58-\u0D61\u0D66-\u0D78\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DE6-\u0DEF\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F20-\u0F33\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F-\u1049\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u1090-\u1099\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1369-\u137C\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A16\u1A20-\u1A54\u1A80-\u1A89\u1A90-\u1A99\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B50-\u1B59\u1B83-\u1BA0\u1BAE-\u1BE5\u1C00-\u1C23\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2070\u2071\u2074-\u2079\u207F-\u2089\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2150-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2CFD\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u3192-\u3195\u31A0-\u31BF\u31F0-\u31FF\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA830-\uA835\uA840-\uA873\uA882-\uA8B3\uA8D0-\uA8D9\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA900-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF-\uA9D9\uA9E0-\uA9E4\uA9E6-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA50-\uAA59\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDE80-\uDE9C\uDEA0-\uDED0\uDEE1-\uDEFB\uDF00-\uDF23\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC58-\uDC76\uDC79-\uDC9E\uDCA7-\uDCAF\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDD1B\uDD20-\uDD39\uDD80-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE40-\uDE48\uDE60-\uDE7E\uDE80-\uDE9F\uDEC0-\uDEC7\uDEC9-\uDEE4\uDEEB-\uDEEF\uDF00-\uDF35\uDF40-\uDF55\uDF58-\uDF72\uDF78-\uDF91\uDFA9-\uDFAF]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDD23\uDD30-\uDD39\uDE60-\uDE7E\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF27\uDF30-\uDF45\uDF51-\uDF54\uDFB0-\uDFCB\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC52-\uDC6F\uDC83-\uDCAF\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD03-\uDD26\uDD36-\uDD3F\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDD0-\uDDDA\uDDDC\uDDE1-\uDDF4\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDEF0-\uDEF9\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC50-\uDC59\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE50-\uDE59\uDE80-\uDEAA\uDEB8\uDEC0-\uDEC9\uDF00-\uDF1A\uDF30-\uDF3B]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCF2\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDD50-\uDD59\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC50-\uDC6C\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD50-\uDD59\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDDA0-\uDDA9\uDEE0-\uDEF2\uDFB0\uDFC0-\uDFD4]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE96\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD40-\uDD49\uDD4E\uDEC0-\uDEEB\uDEF0-\uDEF9]|\uD83A[\uDC00-\uDCC4\uDCC7-\uDCCF\uDD00-\uDD43\uDD4B\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83C[\uDD00-\uDD0C]|\uD83E[\uDFF0-\uDFF9]|\uD869[\uDC00-\uDEDD\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])/))
        return;
      const nextChar = match[1] || match[2] || "";
      if (!nextChar || nextChar && (prevChar === "" || this.rules.inline.punctuation.exec(prevChar))) {
        const lLength = match[0].length - 1;
        let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;
        const endReg = match[0][0] === "*" ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;
        endReg.lastIndex = 0;
        maskedSrc = maskedSrc.slice(-1 * src.length + lLength);
        while ((match = endReg.exec(maskedSrc)) != null) {
          rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];
          if (!rDelim)
            continue;
          rLength = rDelim.length;
          if (match[3] || match[4]) {
            delimTotal += rLength;
            continue;
          } else if (match[5] || match[6]) {
            if (lLength % 3 && !((lLength + rLength) % 3)) {
              midDelimTotal += rLength;
              continue;
            }
          }
          delimTotal -= rLength;
          if (delimTotal > 0)
            continue;
          rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);
          if (Math.min(lLength, rLength) % 2) {
            const text2 = src.slice(1, lLength + match.index + rLength);
            return {
              type: "em",
              raw: src.slice(0, lLength + match.index + rLength + 1),
              text: text2,
              tokens: this.lexer.inlineTokens(text2, [])
            };
          }
          const text = src.slice(2, lLength + match.index + rLength - 1);
          return {
            type: "strong",
            raw: src.slice(0, lLength + match.index + rLength + 1),
            text,
            tokens: this.lexer.inlineTokens(text, [])
          };
        }
      }
    }
    codespan(src) {
      const cap = this.rules.inline.code.exec(src);
      if (cap) {
        let text = cap[2].replace(/\n/g, " ");
        const hasNonSpaceChars = /[^ ]/.test(text);
        const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);
        if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {
          text = text.substring(1, text.length - 1);
        }
        text = escape$1(text, true);
        return {
          type: "codespan",
          raw: cap[0],
          text
        };
      }
    }
    br(src) {
      const cap = this.rules.inline.br.exec(src);
      if (cap) {
        return {
          type: "br",
          raw: cap[0]
        };
      }
    }
    del(src) {
      const cap = this.rules.inline.del.exec(src);
      if (cap) {
        return {
          type: "del",
          raw: cap[0],
          text: cap[2],
          tokens: this.lexer.inlineTokens(cap[2], [])
        };
      }
    }
    autolink(src, mangle2) {
      const cap = this.rules.inline.autolink.exec(src);
      if (cap) {
        let text, href;
        if (cap[2] === "@") {
          text = escape$1(this.options.mangle ? mangle2(cap[1]) : cap[1]);
          href = "mailto:" + text;
        } else {
          text = escape$1(cap[1]);
          href = text;
        }
        return {
          type: "link",
          raw: cap[0],
          text,
          href,
          tokens: [
            {
              type: "text",
              raw: text,
              text
            }
          ]
        };
      }
    }
    url(src, mangle2) {
      let cap;
      if (cap = this.rules.inline.url.exec(src)) {
        let text, href;
        if (cap[2] === "@") {
          text = escape$1(this.options.mangle ? mangle2(cap[0]) : cap[0]);
          href = "mailto:" + text;
        } else {
          let prevCapZero;
          do {
            prevCapZero = cap[0];
            cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];
          } while (prevCapZero !== cap[0]);
          text = escape$1(cap[0]);
          if (cap[1] === "www.") {
            href = "http://" + text;
          } else {
            href = text;
          }
        }
        return {
          type: "link",
          raw: cap[0],
          text,
          href,
          tokens: [
            {
              type: "text",
              raw: text,
              text
            }
          ]
        };
      }
    }
    inlineText(src, smartypants2) {
      const cap = this.rules.inline.text.exec(src);
      if (cap) {
        let text;
        if (this.lexer.state.inRawBlock) {
          text = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape$1(cap[0]) : cap[0];
        } else {
          text = escape$1(this.options.smartypants ? smartypants2(cap[0]) : cap[0]);
        }
        return {
          type: "text",
          raw: cap[0],
          text
        };
      }
    }
  }
  const block = {
    newline: /^(?: *(?:\n|$))+/,
    code: /^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/,
    fences: /^ {0,3}(`{3,}(?=[^`\n]*\n)|~{3,})([^\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?=\n|$)|$)/,
    hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\* *){3,})(?:\n+|$)/,
    heading: /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,
    blockquote: /^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,
    list: /^( {0,3}bull)( [^\n]+?)?(?:\n|$)/,
    html: "^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$))",
    def: /^ {0,3}\[(label)\]: *\n? *<?([^\s>]+)>?(?:(?: +\n? *| *\n *)(title))? *(?:\n+|$)/,
    table: noopTest,
    lheading: /^([^\n]+)\n {0,3}(=+|-+) *(?:\n+|$)/,
    // regex template, placeholders will be replaced according to different paragraph
    // interruption rules of commonmark and the original markdown spec:
    _paragraph: /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html| +\n)[^\n]+)*)/,
    text: /^[^\n]+/
  };
  block._label = /(?!\s*\])(?:\\[\[\]]|[^\[\]])+/;
  block._title = /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/;
  block.def = edit(block.def).replace("label", block._label).replace("title", block._title).getRegex();
  block.bullet = /(?:[*+-]|\d{1,9}[.)])/;
  block.listItemStart = edit(/^( *)(bull) */).replace("bull", block.bullet).getRegex();
  block.list = edit(block.list).replace(/bull/g, block.bullet).replace("hr", "\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def", "\\n+(?=" + block.def.source + ")").getRegex();
  block._tag = "address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul";
  block._comment = /<!--(?!-?>)[\s\S]*?(?:-->|$)/;
  block.html = edit(block.html, "i").replace("comment", block._comment).replace("tag", block._tag).replace("attribute", / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex();
  block.paragraph = edit(block._paragraph).replace("hr", block.hr).replace("heading", " {0,3}#{1,6} ").replace("|lheading", "").replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block._tag).getRegex();
  block.blockquote = edit(block.blockquote).replace("paragraph", block.paragraph).getRegex();
  block.normal = merge({}, block);
  block.gfm = merge({}, block.normal, {
    table: "^ *([^\\n ].*\\|.*)\\n {0,3}(?:\\| *)?(:?-+:? *(?:\\| *:?-+:? *)*)(?:\\| *)?(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)"
    // Cells
  });
  block.gfm.table = edit(block.gfm.table).replace("hr", block.hr).replace("heading", " {0,3}#{1,6} ").replace("blockquote", " {0,3}>").replace("code", " {4}[^\\n]").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block._tag).getRegex();
  block.pedantic = merge({}, block.normal, {
    html: edit(
      `^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:"[^"]*"|'[^']*'|\\s[^'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))`
    ).replace("comment", block._comment).replace(/tag/g, "(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),
    def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
    heading: /^(#{1,6})(.*)(?:\n+|$)/,
    fences: noopTest,
    // fences not supported
    paragraph: edit(block.normal._paragraph).replace("hr", block.hr).replace("heading", " *#{1,6} *[^\n]").replace("lheading", block.lheading).replace("blockquote", " {0,3}>").replace("|fences", "").replace("|list", "").replace("|html", "").getRegex()
  });
  const inline = {
    escape: /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,
    autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/,
    url: noopTest,
    tag: "^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",
    // CDATA section
    link: /^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,
    reflink: /^!?\[(label)\]\[(?!\s*\])((?:\\[\[\]]?|[^\[\]\\])+)\]/,
    nolink: /^!?\[(?!\s*\])((?:\[[^\[\]]*\]|\\[\[\]]|[^\[\]])*)\](?:\[\])?/,
    reflinkSearch: "reflink|nolink(?!\\()",
    emStrong: {
      lDelim: /^(?:\*+(?:([punct_])|[^\s*]))|^_+(?:([punct*])|([^\s_]))/,
      //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.
      //        () Skip orphan delim inside strong    (1) #***                (2) a***#, a***                   (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a
      rDelimAst: /^[^_*]*?\_\_[^_*]*?\*[^_*]*?(?=\_\_)|[punct_](\*+)(?=[\s]|$)|[^punct*_\s](\*+)(?=[punct_\s]|$)|[punct_\s](\*+)(?=[^punct*_\s])|[\s](\*+)(?=[punct_])|[punct_](\*+)(?=[punct_])|[^punct*_\s](\*+)(?=[^punct*_\s])/,
      rDelimUnd: /^[^_*]*?\*\*[^_*]*?\_[^_*]*?(?=\*\*)|[punct*](\_+)(?=[\s]|$)|[^punct*_\s](\_+)(?=[punct*\s]|$)|[punct*\s](\_+)(?=[^punct*_\s])|[\s](\_+)(?=[punct*])|[punct*](\_+)(?=[punct*])/
      // ^- Not allowed for _
    },
    code: /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,
    br: /^( {2,}|\\)\n(?!\s*$)/,
    del: noopTest,
    text: /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,
    punctuation: /^([\spunctuation])/
  };
  inline._punctuation = "!\"#$%&'()+\\-.,/:;<=>?@\\[\\]`^{|}~";
  inline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex();
  inline.blockSkip = /\[[^\]]*?\]\([^\)]*?\)|`[^`]*?`|<[^>]*?>/g;
  inline.escapedEmSt = /\\\*|\\_/g;
  inline._comment = edit(block._comment).replace("(?:-->|$)", "-->").getRegex();
  inline.emStrong.lDelim = edit(inline.emStrong.lDelim).replace(/punct/g, inline._punctuation).getRegex();
  inline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, "g").replace(/punct/g, inline._punctuation).getRegex();
  inline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, "g").replace(/punct/g, inline._punctuation).getRegex();
  inline._escapes = /\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g;
  inline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;
  inline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;
  inline.autolink = edit(inline.autolink).replace("scheme", inline._scheme).replace("email", inline._email).getRegex();
  inline._attribute = /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/;
  inline.tag = edit(inline.tag).replace("comment", inline._comment).replace("attribute", inline._attribute).getRegex();
  inline._label = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
  inline._href = /<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/;
  inline._title = /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/;
  inline.link = edit(inline.link).replace("label", inline._label).replace("href", inline._href).replace("title", inline._title).getRegex();
  inline.reflink = edit(inline.reflink).replace("label", inline._label).getRegex();
  inline.reflinkSearch = edit(inline.reflinkSearch, "g").replace("reflink", inline.reflink).replace("nolink", inline.nolink).getRegex();
  inline.normal = merge({}, inline);
  inline.pedantic = merge({}, inline.normal, {
    strong: {
      start: /^__|\*\*/,
      middle: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
      endAst: /\*\*(?!\*)/g,
      endUnd: /__(?!_)/g
    },
    em: {
      start: /^_|\*/,
      middle: /^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/,
      endAst: /\*(?!\*)/g,
      endUnd: /_(?!_)/g
    },
    link: edit(/^!?\[(label)\]\((.*?)\)/).replace("label", inline._label).getRegex(),
    reflink: edit(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label", inline._label).getRegex()
  });
  inline.gfm = merge({}, inline.normal, {
    escape: edit(inline.escape).replace("])", "~|])").getRegex(),
    _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,
    url: /^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,
    _backpedal: /(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,
    del: /^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,
    text: /^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/
  });
  inline.gfm.url = edit(inline.gfm.url, "i").replace("email", inline.gfm._extended_email).getRegex();
  inline.breaks = merge({}, inline.gfm, {
    br: edit(inline.br).replace("{2,}", "*").getRegex(),
    text: edit(inline.gfm.text).replace("\\b_", "\\b_| {2,}\\n").replace(/\{2,\}/g, "*").getRegex()
  });
  function smartypants(text) {
    return text.replace(/---/g, "—").replace(/--/g, "–").replace(/(^|[-\u2014/(\[{"\s])'/g, "$1‘").replace(/'/g, "’").replace(/(^|[-\u2014/(\[{\u2018\s])"/g, "$1“").replace(/"/g, "”").replace(/\.{3}/g, "…");
  }
  function mangle(text) {
    let out = "", i2, ch;
    const l2 = text.length;
    for (i2 = 0; i2 < l2; i2++) {
      ch = text.charCodeAt(i2);
      if (Math.random() > 0.5) {
        ch = "x" + ch.toString(16);
      }
      out += "&#" + ch + ";";
    }
    return out;
  }
  let Lexer$1 = class Lexer2 {
    constructor(options) {
      this.tokens = [];
      this.tokens.links = /* @__PURE__ */ Object.create(null);
      this.options = options || defaults;
      this.options.tokenizer = this.options.tokenizer || new Tokenizer();
      this.tokenizer = this.options.tokenizer;
      this.tokenizer.options = this.options;
      this.tokenizer.lexer = this;
      this.inlineQueue = [];
      this.state = {
        inLink: false,
        inRawBlock: false,
        top: true
      };
      const rules = {
        block: block.normal,
        inline: inline.normal
      };
      if (this.options.pedantic) {
        rules.block = block.pedantic;
        rules.inline = inline.pedantic;
      } else if (this.options.gfm) {
        rules.block = block.gfm;
        if (this.options.breaks) {
          rules.inline = inline.breaks;
        } else {
          rules.inline = inline.gfm;
        }
      }
      this.tokenizer.rules = rules;
    }
    /**
     * Expose Rules
     */
    static get rules() {
      return {
        block,
        inline
      };
    }
    /**
     * Static Lex Method
     */
    static lex(src, options) {
      const lexer = new Lexer2(options);
      return lexer.lex(src);
    }
    /**
     * Static Lex Inline Method
     */
    static lexInline(src, options) {
      const lexer = new Lexer2(options);
      return lexer.inlineTokens(src);
    }
    /**
     * Preprocessing
     */
    lex(src) {
      src = src.replace(/\r\n|\r/g, "\n").replace(/\t/g, "    ");
      this.blockTokens(src, this.tokens);
      let next;
      while (next = this.inlineQueue.shift()) {
        this.inlineTokens(next.src, next.tokens);
      }
      return this.tokens;
    }
    /**
     * Lexing
     */
    blockTokens(src, tokens = []) {
      if (this.options.pedantic) {
        src = src.replace(/^ +$/gm, "");
      }
      let token, lastToken, cutSrc, lastParagraphClipped;
      while (src) {
        if (this.options.extensions && this.options.extensions.block && this.options.extensions.block.some((extTokenizer) => {
          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            return true;
          }
          return false;
        })) {
          continue;
        }
        if (token = this.tokenizer.space(src)) {
          src = src.substring(token.raw.length);
          if (token.type) {
            tokens.push(token);
          }
          continue;
        }
        if (token = this.tokenizer.code(src)) {
          src = src.substring(token.raw.length);
          lastToken = tokens[tokens.length - 1];
          if (lastToken && (lastToken.type === "paragraph" || lastToken.type === "text")) {
            lastToken.raw += "\n" + token.raw;
            lastToken.text += "\n" + token.text;
            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
          } else {
            tokens.push(token);
          }
          continue;
        }
        if (token = this.tokenizer.fences(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.heading(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.hr(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.blockquote(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.list(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.html(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.def(src)) {
          src = src.substring(token.raw.length);
          lastToken = tokens[tokens.length - 1];
          if (lastToken && (lastToken.type === "paragraph" || lastToken.type === "text")) {
            lastToken.raw += "\n" + token.raw;
            lastToken.text += "\n" + token.raw;
            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
          } else if (!this.tokens.links[token.tag]) {
            this.tokens.links[token.tag] = {
              href: token.href,
              title: token.title
            };
          }
          continue;
        }
        if (token = this.tokenizer.table(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.lheading(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        cutSrc = src;
        if (this.options.extensions && this.options.extensions.startBlock) {
          let startIndex = Infinity;
          const tempSrc = src.slice(1);
          let tempStart;
          this.options.extensions.startBlock.forEach(function(getStartIndex) {
            tempStart = getStartIndex.call({ lexer: this }, tempSrc);
            if (typeof tempStart === "number" && tempStart >= 0) {
              startIndex = Math.min(startIndex, tempStart);
            }
          });
          if (startIndex < Infinity && startIndex >= 0) {
            cutSrc = src.substring(0, startIndex + 1);
          }
        }
        if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {
          lastToken = tokens[tokens.length - 1];
          if (lastParagraphClipped && lastToken.type === "paragraph") {
            lastToken.raw += "\n" + token.raw;
            lastToken.text += "\n" + token.text;
            this.inlineQueue.pop();
            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
          } else {
            tokens.push(token);
          }
          lastParagraphClipped = cutSrc.length !== src.length;
          src = src.substring(token.raw.length);
          continue;
        }
        if (token = this.tokenizer.text(src)) {
          src = src.substring(token.raw.length);
          lastToken = tokens[tokens.length - 1];
          if (lastToken && lastToken.type === "text") {
            lastToken.raw += "\n" + token.raw;
            lastToken.text += "\n" + token.text;
            this.inlineQueue.pop();
            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
          } else {
            tokens.push(token);
          }
          continue;
        }
        if (src) {
          const errMsg = "Infinite loop on byte: " + src.charCodeAt(0);
          if (this.options.silent) {
            formatAppLog("error", "at pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-desk/message-desk-elements/lib-marked.js:1600", errMsg);
            break;
          } else {
            throw new Error(errMsg);
          }
        }
      }
      this.state.top = true;
      return tokens;
    }
    inline(src, tokens) {
      this.inlineQueue.push({ src, tokens });
    }
    /**
     * Lexing/Compiling
     */
    inlineTokens(src, tokens = []) {
      let token, lastToken, cutSrc;
      let maskedSrc = src;
      let match;
      let keepPrevChar, prevChar;
      if (this.tokens.links) {
        const links = Object.keys(this.tokens.links);
        if (links.length > 0) {
          while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {
            if (links.includes(match[0].slice(match[0].lastIndexOf("[") + 1, -1))) {
              maskedSrc = maskedSrc.slice(0, match.index) + "[" + repeatString("a", match[0].length - 2) + "]" + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);
            }
          }
        }
      }
      while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {
        maskedSrc = maskedSrc.slice(0, match.index) + "[" + repeatString("a", match[0].length - 2) + "]" + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
      }
      while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {
        maskedSrc = maskedSrc.slice(0, match.index) + "++" + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);
      }
      while (src) {
        if (!keepPrevChar) {
          prevChar = "";
        }
        keepPrevChar = false;
        if (this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some((extTokenizer) => {
          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            return true;
          }
          return false;
        })) {
          continue;
        }
        if (token = this.tokenizer.escape(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.tag(src)) {
          src = src.substring(token.raw.length);
          lastToken = tokens[tokens.length - 1];
          if (lastToken && token.type === "text" && lastToken.type === "text") {
            lastToken.raw += token.raw;
            lastToken.text += token.text;
          } else {
            tokens.push(token);
          }
          continue;
        }
        if (token = this.tokenizer.link(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.reflink(src, this.tokens.links)) {
          src = src.substring(token.raw.length);
          lastToken = tokens[tokens.length - 1];
          if (lastToken && token.type === "text" && lastToken.type === "text") {
            lastToken.raw += token.raw;
            lastToken.text += token.text;
          } else {
            tokens.push(token);
          }
          continue;
        }
        if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.codespan(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.br(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.del(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.autolink(src, mangle)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        cutSrc = src;
        if (this.options.extensions && this.options.extensions.startInline) {
          let startIndex = Infinity;
          const tempSrc = src.slice(1);
          let tempStart;
          this.options.extensions.startInline.forEach(function(getStartIndex) {
            tempStart = getStartIndex.call({ lexer: this }, tempSrc);
            if (typeof tempStart === "number" && tempStart >= 0) {
              startIndex = Math.min(startIndex, tempStart);
            }
          });
          if (startIndex < Infinity && startIndex >= 0) {
            cutSrc = src.substring(0, startIndex + 1);
          }
        }
        if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {
          src = src.substring(token.raw.length);
          if (token.raw.slice(-1) !== "_") {
            prevChar = token.raw.slice(-1);
          }
          keepPrevChar = true;
          lastToken = tokens[tokens.length - 1];
          if (lastToken && lastToken.type === "text") {
            lastToken.raw += token.raw;
            lastToken.text += token.text;
          } else {
            tokens.push(token);
          }
          continue;
        }
        if (src) {
          const errMsg = "Infinite loop on byte: " + src.charCodeAt(0);
          if (this.options.silent) {
            formatAppLog("error", "at pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-desk/message-desk-elements/lib-marked.js:1784", errMsg);
            break;
          } else {
            throw new Error(errMsg);
          }
        }
      }
      return tokens;
    }
  };
  class Renderer {
    constructor(options) {
      this.options = options || defaults;
    }
    code(code2, infostring, escaped) {
      const lang = (infostring || "").match(/\S*/)[0];
      if (this.options.highlight) {
        const out = this.options.highlight(code2, lang);
        if (out != null && out !== code2) {
          escaped = true;
          code2 = out;
        }
      }
      code2 = code2.replace(/\n$/, "") + "\n";
      if (!lang) {
        return "<pre><code>" + (escaped ? code2 : escape$1(code2, true)) + "</code></pre>\n";
      }
      return '<pre><code class="' + this.options.langPrefix + escape$1(lang, true) + '">' + (escaped ? code2 : escape$1(code2, true)) + "</code></pre>\n";
    }
    blockquote(quote) {
      return "<blockquote>\n" + quote + "</blockquote>\n";
    }
    html(html) {
      return html;
    }
    heading(text, level, raw, slugger) {
      if (this.options.headerIds) {
        return "<h" + level + ' id="' + this.options.headerPrefix + slugger.slug(raw) + '">' + text + "</h" + level + ">\n";
      }
      return "<h" + level + ">" + text + "</h" + level + ">\n";
    }
    hr() {
      return this.options.xhtml ? "<hr/>\n" : "<hr>\n";
    }
    list(body, ordered, start) {
      const type = ordered ? "ol" : "ul", startatt = ordered && start !== 1 ? ' start="' + start + '"' : "";
      return "<" + type + startatt + ">\n" + body + "</" + type + ">\n";
    }
    listitem(text) {
      return "<li>" + text + "</li>\n";
    }
    checkbox(checked) {
      return "<input " + (checked ? 'checked="" ' : "") + 'disabled="" type="checkbox"' + (this.options.xhtml ? " /" : "") + "> ";
    }
    paragraph(text) {
      return "<p>" + text + "</p>\n";
    }
    table(header, body) {
      if (body)
        body = "<tbody>" + body + "</tbody>";
      return "<table>\n<thead>\n" + header + "</thead>\n" + body + "</table>\n";
    }
    tablerow(content) {
      return "<tr>\n" + content + "</tr>\n";
    }
    tablecell(content, flags) {
      const type = flags.header ? "th" : "td";
      const tag = flags.align ? "<" + type + ' align="' + flags.align + '">' : "<" + type + ">";
      return tag + content + "</" + type + ">\n";
    }
    // span level renderer
    strong(text) {
      return "<strong>" + text + "</strong>";
    }
    em(text) {
      return "<em>" + text + "</em>";
    }
    codespan(text) {
      return "<code>" + text + "</code>";
    }
    br() {
      return this.options.xhtml ? "<br/>" : "<br>";
    }
    del(text) {
      return "<del>" + text + "</del>";
    }
    link(href, title, text) {
      href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);
      if (href === null) {
        return text;
      }
      let out = '<a href="' + escape$1(href) + '"';
      if (title) {
        out += ' title="' + title + '"';
      }
      out += ">" + text + "</a>";
      return out;
    }
    image(href, title, text) {
      href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);
      if (href === null) {
        return text;
      }
      let out = '<img src="' + href + '" alt="' + text + '"';
      if (title) {
        out += ' title="' + title + '"';
      }
      out += this.options.xhtml ? "/>" : ">";
      return out;
    }
    text(text) {
      return text;
    }
  }
  class TextRenderer {
    // no need for block level renderers
    strong(text) {
      return text;
    }
    em(text) {
      return text;
    }
    codespan(text) {
      return text;
    }
    del(text) {
      return text;
    }
    html(text) {
      return text;
    }
    text(text) {
      return text;
    }
    link(href, title, text) {
      return "" + text;
    }
    image(href, title, text) {
      return "" + text;
    }
    br() {
      return "";
    }
  }
  class Slugger {
    constructor() {
      this.seen = {};
    }
    serialize(value) {
      return value.toLowerCase().trim().replace(/<[!\/a-z].*?>/ig, "").replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g, "").replace(/\s/g, "-");
    }
    /**
     * Finds the next safe (unique) slug to use
     */
    getNextSafeSlug(originalSlug, isDryRun) {
      let slug = originalSlug;
      let occurenceAccumulator = 0;
      if (this.seen.hasOwnProperty(slug)) {
        occurenceAccumulator = this.seen[originalSlug];
        do {
          occurenceAccumulator++;
          slug = originalSlug + "-" + occurenceAccumulator;
        } while (this.seen.hasOwnProperty(slug));
      }
      if (!isDryRun) {
        this.seen[originalSlug] = occurenceAccumulator;
        this.seen[slug] = 0;
      }
      return slug;
    }
    /**
     * Convert string to unique id
     * @param {object} options
     * @param {boolean} options.dryrun Generates the next unique slug without updating the internal accumulator.
     */
    slug(value, options = {}) {
      const slug = this.serialize(value);
      return this.getNextSafeSlug(slug, options.dryrun);
    }
  }
  let Parser$1 = class Parser2 {
    constructor(options) {
      this.options = options || defaults;
      this.options.renderer = this.options.renderer || new Renderer();
      this.renderer = this.options.renderer;
      this.renderer.options = this.options;
      this.textRenderer = new TextRenderer();
      this.slugger = new Slugger();
    }
    /**
     * Static Parse Method
     */
    static parse(tokens, options) {
      const parser = new Parser2(options);
      return parser.parse(tokens);
    }
    /**
     * Static Parse Inline Method
     */
    static parseInline(tokens, options) {
      const parser = new Parser2(options);
      return parser.parseInline(tokens);
    }
    /**
     * Parse Loop
     */
    parse(tokens, top = true) {
      let out = "", i2, j2, k2, l2, l3, row, cell, header, body, token, ordered, start, loose, itemBody, item, checked, task, checkbox, ret;
      const l4 = tokens.length;
      for (i2 = 0; i2 < l4; i2++) {
        token = tokens[i2];
        if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
          ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);
          if (ret !== false || !["space", "hr", "heading", "code", "table", "blockquote", "list", "html", "paragraph", "text"].includes(token.type)) {
            out += ret || "";
            continue;
          }
        }
        switch (token.type) {
          case "space": {
            continue;
          }
          case "hr": {
            out += this.renderer.hr();
            continue;
          }
          case "heading": {
            out += this.renderer.heading(
              this.parseInline(token.tokens),
              token.depth,
              unescape$1(this.parseInline(token.tokens, this.textRenderer)),
              this.slugger
            );
            continue;
          }
          case "code": {
            out += this.renderer.code(
              token.text,
              token.lang,
              token.escaped
            );
            continue;
          }
          case "table": {
            header = "";
            cell = "";
            l2 = token.header.length;
            for (j2 = 0; j2 < l2; j2++) {
              cell += this.renderer.tablecell(
                this.parseInline(token.header[j2].tokens),
                { header: true, align: token.align[j2] }
              );
            }
            header += this.renderer.tablerow(cell);
            body = "";
            l2 = token.rows.length;
            for (j2 = 0; j2 < l2; j2++) {
              row = token.rows[j2];
              cell = "";
              l3 = row.length;
              for (k2 = 0; k2 < l3; k2++) {
                cell += this.renderer.tablecell(
                  this.parseInline(row[k2].tokens),
                  { header: false, align: token.align[k2] }
                );
              }
              body += this.renderer.tablerow(cell);
            }
            out += this.renderer.table(header, body);
            continue;
          }
          case "blockquote": {
            body = this.parse(token.tokens);
            out += this.renderer.blockquote(body);
            continue;
          }
          case "list": {
            ordered = token.ordered;
            start = token.start;
            loose = token.loose;
            l2 = token.items.length;
            body = "";
            for (j2 = 0; j2 < l2; j2++) {
              item = token.items[j2];
              checked = item.checked;
              task = item.task;
              itemBody = "";
              if (item.task) {
                checkbox = this.renderer.checkbox(checked);
                if (loose) {
                  if (item.tokens.length > 0 && item.tokens[0].type === "paragraph") {
                    item.tokens[0].text = checkbox + " " + item.tokens[0].text;
                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === "text") {
                      item.tokens[0].tokens[0].text = checkbox + " " + item.tokens[0].tokens[0].text;
                    }
                  } else {
                    item.tokens.unshift({
                      type: "text",
                      text: checkbox
                    });
                  }
                } else {
                  itemBody += checkbox;
                }
              }
              itemBody += this.parse(item.tokens, loose);
              body += this.renderer.listitem(itemBody, task, checked);
            }
            out += this.renderer.list(body, ordered, start);
            continue;
          }
          case "html": {
            out += this.renderer.html(token.text);
            continue;
          }
          case "paragraph": {
            out += this.renderer.paragraph(this.parseInline(token.tokens));
            continue;
          }
          case "text": {
            body = token.tokens ? this.parseInline(token.tokens) : token.text;
            while (i2 + 1 < l4 && tokens[i2 + 1].type === "text") {
              token = tokens[++i2];
              body += "\n" + (token.tokens ? this.parseInline(token.tokens) : token.text);
            }
            out += top ? this.renderer.paragraph(body) : body;
            continue;
          }
          default: {
            const errMsg = 'Token with "' + token.type + '" type was not found.';
            if (this.options.silent) {
              formatAppLog("error", "at pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-desk/message-desk-elements/lib-marked.js:2238", errMsg);
              return;
            } else {
              throw new Error(errMsg);
            }
          }
        }
      }
      return out;
    }
    /**
     * Parse Inline Tokens
     */
    parseInline(tokens, renderer) {
      renderer = renderer || this.renderer;
      let out = "", i2, token, ret;
      const l2 = tokens.length;
      for (i2 = 0; i2 < l2; i2++) {
        token = tokens[i2];
        if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
          ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);
          if (ret !== false || !["escape", "html", "link", "image", "strong", "em", "codespan", "br", "del", "text"].includes(token.type)) {
            out += ret || "";
            continue;
          }
        }
        switch (token.type) {
          case "escape": {
            out += renderer.text(token.text);
            break;
          }
          case "html": {
            out += renderer.html(token.text);
            break;
          }
          case "link": {
            out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));
            break;
          }
          case "image": {
            out += renderer.image(token.href, token.title, token.text);
            break;
          }
          case "strong": {
            out += renderer.strong(this.parseInline(token.tokens, renderer));
            break;
          }
          case "em": {
            out += renderer.em(this.parseInline(token.tokens, renderer));
            break;
          }
          case "codespan": {
            out += renderer.codespan(token.text);
            break;
          }
          case "br": {
            out += renderer.br();
            break;
          }
          case "del": {
            out += renderer.del(this.parseInline(token.tokens, renderer));
            break;
          }
          case "text": {
            out += renderer.text(token.text);
            break;
          }
          default: {
            const errMsg = 'Token with "' + token.type + '" type was not found.';
            if (this.options.silent) {
              formatAppLog("error", "at pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-desk/message-desk-elements/lib-marked.js:2317", errMsg);
              return;
            } else {
              throw new Error(errMsg);
            }
          }
        }
      }
      return out;
    }
  };
  function marked(src, opt, callback) {
    if (typeof src === "undefined" || src === null) {
      throw new Error("marked(): input parameter is undefined or null");
    }
    if (typeof src !== "string") {
      throw new Error("marked(): input parameter is of type " + Object.prototype.toString.call(src) + ", string expected");
    }
    if (typeof opt === "function") {
      callback = opt;
      opt = null;
    }
    opt = merge({}, marked.defaults, opt || {});
    checkSanitizeDeprecation(opt);
    if (callback) {
      const highlight = opt.highlight;
      let tokens;
      try {
        tokens = Lexer$1.lex(src, opt);
      } catch (e2) {
        return callback(e2);
      }
      const done = function(err) {
        let out;
        if (!err) {
          try {
            if (opt.walkTokens) {
              marked.walkTokens(tokens, opt.walkTokens);
            }
            out = Parser$1.parse(tokens, opt);
          } catch (e2) {
            err = e2;
          }
        }
        opt.highlight = highlight;
        return err ? callback(err) : callback(null, out);
      };
      if (!highlight || highlight.length < 3) {
        return done();
      }
      delete opt.highlight;
      if (!tokens.length)
        return done();
      let pending = 0;
      marked.walkTokens(tokens, function(token) {
        if (token.type === "code") {
          pending++;
          setTimeout(() => {
            highlight(token.text, token.lang, function(err, code2) {
              if (err) {
                return done(err);
              }
              if (code2 != null && code2 !== token.text) {
                token.text = code2;
                token.escaped = true;
              }
              pending--;
              if (pending === 0) {
                done();
              }
            });
          }, 0);
        }
      });
      if (pending === 0) {
        done();
      }
      return;
    }
    try {
      const tokens = Lexer$1.lex(src, opt);
      if (opt.walkTokens) {
        marked.walkTokens(tokens, opt.walkTokens);
      }
      return Parser$1.parse(tokens, opt);
    } catch (e2) {
      e2.message += "\nPlease report this to https://github.com/markedjs/marked.";
      if (opt.silent) {
        return "<p>An error occurred:</p><pre>" + escape$1(e2.message + "", true) + "</pre>";
      }
      throw e2;
    }
  }
  marked.options = marked.setOptions = function(opt) {
    merge(marked.defaults, opt);
    changeDefaults(marked.defaults);
    return marked;
  };
  marked.getDefaults = getDefaults;
  marked.defaults = defaults;
  marked.use = function(...args) {
    const opts = merge({}, ...args);
    const extensions = marked.defaults.extensions || { renderers: {}, childTokens: {} };
    let hasExtensions;
    args.forEach((pack) => {
      if (pack.extensions) {
        hasExtensions = true;
        pack.extensions.forEach((ext) => {
          if (!ext.name) {
            throw new Error("extension name required");
          }
          if (ext.renderer) {
            const prevRenderer = extensions.renderers ? extensions.renderers[ext.name] : null;
            if (prevRenderer) {
              extensions.renderers[ext.name] = function(...args2) {
                let ret = ext.renderer.apply(this, args2);
                if (ret === false) {
                  ret = prevRenderer.apply(this, args2);
                }
                return ret;
              };
            } else {
              extensions.renderers[ext.name] = ext.renderer;
            }
          }
          if (ext.tokenizer) {
            if (!ext.level || ext.level !== "block" && ext.level !== "inline") {
              throw new Error("extension level must be 'block' or 'inline'");
            }
            if (extensions[ext.level]) {
              extensions[ext.level].unshift(ext.tokenizer);
            } else {
              extensions[ext.level] = [ext.tokenizer];
            }
            if (ext.start) {
              if (ext.level === "block") {
                if (extensions.startBlock) {
                  extensions.startBlock.push(ext.start);
                } else {
                  extensions.startBlock = [ext.start];
                }
              } else if (ext.level === "inline") {
                if (extensions.startInline) {
                  extensions.startInline.push(ext.start);
                } else {
                  extensions.startInline = [ext.start];
                }
              }
            }
          }
          if (ext.childTokens) {
            extensions.childTokens[ext.name] = ext.childTokens;
          }
        });
      }
      if (pack.renderer) {
        const renderer = marked.defaults.renderer || new Renderer();
        for (const prop in pack.renderer) {
          const prevRenderer = renderer[prop];
          renderer[prop] = (...args2) => {
            let ret = pack.renderer[prop].apply(renderer, args2);
            if (ret === false) {
              ret = prevRenderer.apply(renderer, args2);
            }
            return ret;
          };
        }
        opts.renderer = renderer;
      }
      if (pack.tokenizer) {
        const tokenizer = marked.defaults.tokenizer || new Tokenizer();
        for (const prop in pack.tokenizer) {
          const prevTokenizer = tokenizer[prop];
          tokenizer[prop] = (...args2) => {
            let ret = pack.tokenizer[prop].apply(tokenizer, args2);
            if (ret === false) {
              ret = prevTokenizer.apply(tokenizer, args2);
            }
            return ret;
          };
        }
        opts.tokenizer = tokenizer;
      }
      if (pack.walkTokens) {
        const walkTokens = marked.defaults.walkTokens;
        opts.walkTokens = function(token) {
          pack.walkTokens.call(this, token);
          if (walkTokens) {
            walkTokens.call(this, token);
          }
        };
      }
      if (hasExtensions) {
        opts.extensions = extensions;
      }
      marked.setOptions(opts);
    });
  };
  marked.walkTokens = function(tokens, callback) {
    for (const token of tokens) {
      callback.call(marked, token);
      switch (token.type) {
        case "table": {
          for (const cell of token.header) {
            marked.walkTokens(cell.tokens, callback);
          }
          for (const row of token.rows) {
            for (const cell of row) {
              marked.walkTokens(cell.tokens, callback);
            }
          }
          break;
        }
        case "list": {
          marked.walkTokens(token.items, callback);
          break;
        }
        default: {
          if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) {
            marked.defaults.extensions.childTokens[token.type].forEach(function(childTokens) {
              marked.walkTokens(token[childTokens], callback);
            });
          } else if (token.tokens) {
            marked.walkTokens(token.tokens, callback);
          }
        }
      }
    }
  };
  marked.parseInline = function(src, opt) {
    if (typeof src === "undefined" || src === null) {
      throw new Error("marked.parseInline(): input parameter is undefined or null");
    }
    if (typeof src !== "string") {
      throw new Error("marked.parseInline(): input parameter is of type " + Object.prototype.toString.call(src) + ", string expected");
    }
    opt = merge({}, marked.defaults, opt || {});
    checkSanitizeDeprecation(opt);
    try {
      const tokens = Lexer$1.lexInline(src, opt);
      if (opt.walkTokens) {
        marked.walkTokens(tokens, opt.walkTokens);
      }
      return Parser$1.parseInline(tokens, opt);
    } catch (e2) {
      e2.message += "\nPlease report this to https://github.com/markedjs/marked.";
      if (opt.silent) {
        return "<p>An error occurred:</p><pre>" + escape$1(e2.message + "", true) + "</pre>";
      }
      throw e2;
    }
  };
  marked.Parser = Parser$1;
  marked.parser = Parser$1.parse;
  marked.Renderer = Renderer;
  marked.TextRenderer = TextRenderer;
  marked.Lexer = Lexer$1;
  marked.lexer = Lexer$1.lex;
  marked.Tokenizer = Tokenizer;
  marked.Slugger = Slugger;
  marked.parse = marked;
  marked.options;
  marked.setOptions;
  marked.use;
  marked.walkTokens;
  marked.parseInline;
  Parser$1.parse;
  Lexer$1.lex;
  const rendererMD = new marked.Renderer();
  rendererMD.image = (href, title, text) => {
    return `
        <img src="${href}" alt="${text}" style="max-width: 100%;">
    `;
  };
  rendererMD.link = (href, title, text) => {
    if (href && /[^\x00-\x7F]/g.test(href)) {
      return text;
    }
    return `<a target="_blank" rel="noreferrer noopenner" class="message-marked_link" href="${href || ""}" title="${title}">${text}</a>`;
  };
  marked.setOptions({
    gfm: true,
    breaks: true,
    pedantic: false,
    sanitize: false,
    smartLists: true,
    smartypants: false
  });
  const parseMarkdown = (text) => {
    return marked.parse(text, { renderer: rendererMD });
  };
  const block0 = (Comp) => {
    (Comp.$wxs || (Comp.$wxs = [])).push("handler");
    (Comp.$wxsModules || (Comp.$wxsModules = {}))["handler"] = "550457a8";
  };
  const _sfc_main$D = {
    name: "node",
    options: {},
    data() {
      return {
        ctrl: {}
      };
    },
    props: {
      name: String,
      attrs: {
        type: Object,
        default() {
          return {};
        }
      },
      childs: Array,
      opts: Array
    },
    components: {},
    mounted() {
      this.$nextTick(() => {
        for (this.root = this.$parent; this.root.$options.name !== "mp-html"; this.root = this.root.$parent)
          ;
      });
      if (this.opts[0]) {
        let i2;
        for (i2 = this.childs.length; i2--; ) {
          if (this.childs[i2].name === "img")
            break;
        }
        if (i2 !== -1) {
          this.observer = uni.createIntersectionObserver(this).relativeToViewport({
            top: 500,
            bottom: 500
          });
          this.observer.observe("._img", (res) => {
            if (res.intersectionRatio) {
              this.$set(this.ctrl, "load", 1);
              this.observer.disconnect();
            }
          });
        }
      }
    },
    beforeDestroy() {
      if (this.observer) {
        this.observer.disconnect();
      }
    },
    methods: {
      /**
       * @description 播放视频事件
       * @param {Event} e
       */
      play(e2) {
        const i2 = e2.currentTarget.dataset.i;
        const node2 = this.childs[i2];
        this.root.$emit("play", {
          source: node2.name,
          attrs: {
            ...node2.attrs,
            src: node2.src[this.ctrl[i2] || 0]
          }
        });
      },
      /**
       * @description 图片点击事件
       * @param {Event} e
       */
      imgTap(e2) {
        const node2 = this.childs[e2.currentTarget.dataset.i];
        if (node2.a) {
          this.linkTap(node2.a);
          return;
        }
        if (node2.attrs.ignore)
          return;
        node2.attrs.src = node2.attrs.src || node2.attrs["data-src"];
        this.root.$emit("imgtap", node2.attrs);
        if (this.root.previewImg) {
          uni.previewImage({
            current: parseInt(node2.attrs.i),
            urls: this.root.imgList
          });
        }
      },
      /**
       * @description 图片长按
       */
      imgLongTap(e2) {
        const attrs = this.childs[e2.currentTarget.dataset.i].attrs;
        if (this.opts[3] && !attrs.ignore) {
          uni.showActionSheet({
            itemList: ["保存图片"],
            success: () => {
              const save = (path) => {
                uni.saveImageToPhotosAlbum({
                  filePath: path,
                  success() {
                    uni.showToast({
                      title: "保存成功"
                    });
                  }
                });
              };
              if (this.root.imgList[attrs.i].startsWith("http")) {
                uni.downloadFile({
                  url: this.root.imgList[attrs.i],
                  success: (res) => save(res.tempFilePath)
                });
              } else {
                save(this.root.imgList[attrs.i]);
              }
            }
          });
        }
      },
      /**
       * @description 图片加载完成事件
       * @param {Event} e
       */
      imgLoad(e2) {
        const i2 = e2.currentTarget.dataset.i;
        if (!this.childs[i2].w) {
          this.$set(this.ctrl, i2, e2.detail.width);
        } else if (this.opts[1] && !this.ctrl[i2] || this.ctrl[i2] === -1) {
          this.$set(this.ctrl, i2, 1);
        }
        this.checkReady();
      },
      /**
       * @description 检查是否所有图片加载完毕
       */
      checkReady() {
        if (this.root && !this.root.lazyLoad) {
          this.root._unloadimgs -= 1;
          if (!this.root._unloadimgs) {
            setTimeout(() => {
              this.root.getRect().then((rect) => {
                this.root.$emit("ready", rect);
              }).catch(() => {
                this.root.$emit("ready", {});
              });
            }, 350);
          }
        }
      },
      /**
       * @description 链接点击事件
       * @param {Event} e
       */
      linkTap(e2) {
        const node2 = e2.currentTarget ? this.childs[e2.currentTarget.dataset.i] : {};
        const attrs = node2.attrs || e2;
        const href = attrs.href;
        this.root.$emit("linktap", Object.assign({
          innerText: this.root.getText(node2.children || [])
          // 链接内的文本内容
        }, attrs));
        if (href) {
          if (href[0] === "#") {
            this.root.navigateTo(href.substring(1)).catch(() => {
            });
          } else if (href.split("?")[0].includes("://")) {
            if (this.root.copyLink) {
              plus.runtime.openWeb(href);
            }
          } else {
            uni.navigateTo({
              url: href,
              fail() {
                uni.switchTab({
                  url: href,
                  fail() {
                  }
                });
              }
            });
          }
        }
      },
      /**
       * @description 错误事件
       * @param {Event} e
       */
      mediaError(e2) {
        const i2 = e2.currentTarget.dataset.i;
        const node2 = this.childs[i2];
        if (node2.name === "video" || node2.name === "audio") {
          let index = (this.ctrl[i2] || 0) + 1;
          if (index > node2.src.length) {
            index = 0;
          }
          if (index < node2.src.length) {
            this.$set(this.ctrl, i2, index);
            return;
          }
        } else if (node2.name === "img") {
          if (this.opts[2]) {
            this.$set(this.ctrl, i2, -1);
          }
          this.checkReady();
        }
        if (this.root) {
          this.root.$emit("error", {
            source: node2.name,
            attrs: node2.attrs,
            errMsg: e2.detail.errMsg
          });
        }
      }
    }
  };
  function _sfc_render$C(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_node = vue$1.resolveComponent("node", true);
    return vue$1.openBlock(), vue$1.createElementBlock("view", {
      id: $props.attrs.id,
      class: vue$1.normalizeClass("_block _" + $props.name + " " + $props.attrs.class),
      style: vue$1.normalizeStyle($props.attrs.style)
    }, [
      (vue$1.openBlock(true), vue$1.createElementBlock(
        vue$1.Fragment,
        null,
        vue$1.renderList($props.childs, (n2, i2) => {
          return vue$1.openBlock(), vue$1.createElementBlock(
            vue$1.Fragment,
            { key: i2 },
            [
              vue$1.createCommentVNode(" 图片 "),
              vue$1.createCommentVNode(" 占位图 "),
              n2.name === "img" && !n2.t && ($props.opts[1] && !$data.ctrl[i2] || $data.ctrl[i2] < 0) ? (vue$1.openBlock(), vue$1.createElementBlock("image", {
                key: 0,
                class: "_img",
                style: vue$1.normalizeStyle(n2.attrs.style),
                src: $data.ctrl[i2] < 0 ? $props.opts[2] : $props.opts[1],
                mode: "widthFix"
              }, null, 12, ["src"])) : vue$1.createCommentVNode("v-if", true),
              vue$1.createCommentVNode(" 显示图片 "),
              vue$1.createCommentVNode(" 表格中的图片，使用 rich-text 防止大小不正确 "),
              n2.name === "img" && n2.t ? (vue$1.openBlock(), vue$1.createElementBlock("rich-text", {
                key: 1,
                style: vue$1.normalizeStyle("display:" + n2.t),
                nodes: [{ attrs: { style: n2.attrs.style || "", src: n2.attrs.src }, name: "img" }],
                "data-i": i2,
                onClick: _cache[0] || (_cache[0] = vue$1.withModifiers((...args) => $options.imgTap && $options.imgTap(...args), ["stop"]))
              }, null, 12, ["nodes", "data-i"])) : n2.name === "img" ? (vue$1.openBlock(), vue$1.createElementBlock("image", {
                key: 2,
                id: n2.attrs.id,
                class: vue$1.normalizeClass("_img " + n2.attrs.class),
                style: vue$1.normalizeStyle(($data.ctrl[i2] === -1 ? "display:none;" : "") + "width:" + ($data.ctrl[i2] || 1) + "px;" + n2.attrs.style),
                src: n2.attrs.src || ($data.ctrl.load ? n2.attrs["data-src"] : ""),
                mode: !n2.h ? "widthFix" : !n2.w ? "heightFix" : n2.m || "",
                "data-i": i2,
                onLoad: _cache[1] || (_cache[1] = (...args) => $options.imgLoad && $options.imgLoad(...args)),
                onError: _cache[2] || (_cache[2] = (...args) => $options.mediaError && $options.mediaError(...args)),
                onClick: _cache[3] || (_cache[3] = vue$1.withModifiers((...args) => $options.imgTap && $options.imgTap(...args), ["stop"])),
                onLongpress: _cache[4] || (_cache[4] = (...args) => $options.imgLongTap && $options.imgLongTap(...args))
              }, null, 46, ["id", "src", "mode", "data-i"])) : n2.text ? (vue$1.openBlock(), vue$1.createElementBlock(
                vue$1.Fragment,
                { key: 3 },
                [
                  vue$1.createCommentVNode(" 文本 "),
                  vue$1.createElementVNode(
                    "text",
                    { decode: "" },
                    vue$1.toDisplayString(n2.text),
                    1
                    /* TEXT */
                  )
                ],
                2112
                /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
              )) : n2.name === "br" ? (vue$1.openBlock(), vue$1.createElementBlock("text", { key: 4 }, "\\n")) : n2.name === "a" ? (vue$1.openBlock(), vue$1.createElementBlock(
                vue$1.Fragment,
                { key: 5 },
                [
                  vue$1.createCommentVNode(" 链接 "),
                  vue$1.createElementVNode("view", {
                    id: n2.attrs.id,
                    class: vue$1.normalizeClass((n2.attrs.href ? "_a " : "") + n2.attrs.class),
                    "hover-class": "_hover",
                    style: vue$1.normalizeStyle("display:inline;" + n2.attrs.style),
                    "data-i": i2,
                    onClick: _cache[5] || (_cache[5] = vue$1.withModifiers((...args) => $options.linkTap && $options.linkTap(...args), ["stop"]))
                  }, [
                    vue$1.createVNode(_component_node, {
                      name: "span",
                      childs: n2.children,
                      opts: $props.opts,
                      style: { "display": "inherit" }
                    }, null, 8, ["childs", "opts"])
                  ], 14, ["id", "data-i"])
                ],
                2112
                /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
              )) : n2.html ? (vue$1.openBlock(), vue$1.createElementBlock(
                vue$1.Fragment,
                { key: 6 },
                [
                  vue$1.createCommentVNode(" 视频 "),
                  vue$1.createElementVNode("view", {
                    id: n2.attrs.id,
                    class: vue$1.normalizeClass("_video " + n2.attrs.class),
                    style: vue$1.normalizeStyle(n2.attrs.style),
                    innerHTML: n2.html,
                    onVplay: _cache[6] || (_cache[6] = vue$1.withModifiers((...args) => $options.play && $options.play(...args), ["stop"]))
                  }, null, 46, ["id", "innerHTML"])
                ],
                2112
                /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
              )) : n2.name === "iframe" ? (vue$1.openBlock(), vue$1.createElementBlock("iframe", {
                key: 7,
                style: vue$1.normalizeStyle(n2.attrs.style),
                allowfullscreen: n2.attrs.allowfullscreen,
                frameborder: n2.attrs.frameborder,
                src: n2.attrs.src
              }, null, 12, ["allowfullscreen", "frameborder", "src"])) : n2.name === "embed" ? (vue$1.openBlock(), vue$1.createElementBlock("embed", {
                key: 8,
                style: vue$1.normalizeStyle(n2.attrs.style),
                src: n2.attrs.src
              }, null, 12, ["src"])) : n2.name === "table" && n2.c || n2.name === "li" ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
                key: 9,
                id: n2.attrs.id,
                class: vue$1.normalizeClass("_" + n2.name + " " + n2.attrs.class),
                style: vue$1.normalizeStyle(n2.attrs.style)
              }, [
                n2.name === "li" ? (vue$1.openBlock(), vue$1.createBlock(_component_node, {
                  key: 0,
                  childs: n2.children,
                  opts: $props.opts
                }, null, 8, ["childs", "opts"])) : (vue$1.openBlock(true), vue$1.createElementBlock(
                  vue$1.Fragment,
                  { key: 1 },
                  vue$1.renderList(n2.children, (tbody, x2) => {
                    return vue$1.openBlock(), vue$1.createElementBlock(
                      "view",
                      {
                        key: x2,
                        class: vue$1.normalizeClass("_" + tbody.name + " " + tbody.attrs.class),
                        style: vue$1.normalizeStyle(tbody.attrs.style)
                      },
                      [
                        tbody.name === "td" || tbody.name === "th" ? (vue$1.openBlock(), vue$1.createBlock(_component_node, {
                          key: 0,
                          childs: tbody.children,
                          opts: $props.opts
                        }, null, 8, ["childs", "opts"])) : (vue$1.openBlock(true), vue$1.createElementBlock(
                          vue$1.Fragment,
                          { key: 1 },
                          vue$1.renderList(tbody.children, (tr, y2) => {
                            return vue$1.openBlock(), vue$1.createElementBlock(
                              vue$1.Fragment,
                              { key: y2 },
                              [
                                tr.name === "td" || tr.name === "th" ? (vue$1.openBlock(), vue$1.createElementBlock(
                                  "view",
                                  {
                                    key: 0,
                                    class: vue$1.normalizeClass("_" + tr.name + " " + tr.attrs.class),
                                    style: vue$1.normalizeStyle(tr.attrs.style)
                                  },
                                  [
                                    vue$1.createVNode(_component_node, {
                                      childs: tr.children,
                                      opts: $props.opts
                                    }, null, 8, ["childs", "opts"])
                                  ],
                                  6
                                  /* CLASS, STYLE */
                                )) : (vue$1.openBlock(), vue$1.createElementBlock(
                                  "view",
                                  {
                                    key: 1,
                                    class: vue$1.normalizeClass("_" + tr.name + " " + tr.attrs.class),
                                    style: vue$1.normalizeStyle(tr.attrs.style)
                                  },
                                  [
                                    (vue$1.openBlock(true), vue$1.createElementBlock(
                                      vue$1.Fragment,
                                      null,
                                      vue$1.renderList(tr.children, (td, z2) => {
                                        return vue$1.openBlock(), vue$1.createElementBlock(
                                          "view",
                                          {
                                            key: z2,
                                            class: vue$1.normalizeClass("_" + td.name + " " + td.attrs.class),
                                            style: vue$1.normalizeStyle(td.attrs.style)
                                          },
                                          [
                                            vue$1.createVNode(_component_node, {
                                              childs: td.children,
                                              opts: $props.opts
                                            }, null, 8, ["childs", "opts"])
                                          ],
                                          6
                                          /* CLASS, STYLE */
                                        );
                                      }),
                                      128
                                      /* KEYED_FRAGMENT */
                                    ))
                                  ],
                                  6
                                  /* CLASS, STYLE */
                                ))
                              ],
                              64
                              /* STABLE_FRAGMENT */
                            );
                          }),
                          128
                          /* KEYED_FRAGMENT */
                        ))
                      ],
                      6
                      /* CLASS, STYLE */
                    );
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ], 14, ["id"])) : !n2.c ? (vue$1.openBlock(), vue$1.createElementBlock(
                vue$1.Fragment,
                { key: 10 },
                [
                  vue$1.createCommentVNode(" 富文本 "),
                  vue$1.createElementVNode("rich-text", {
                    id: n2.attrs.id,
                    style: vue$1.normalizeStyle("display:inline;" + n2.f),
                    preview: false,
                    selectable: $props.opts[4],
                    "user-select": $props.opts[4],
                    nodes: [n2]
                  }, null, 12, ["id", "selectable", "user-select", "nodes"])
                ],
                2112
                /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
              )) : n2.c === 2 ? (vue$1.openBlock(), vue$1.createElementBlock(
                vue$1.Fragment,
                { key: 11 },
                [
                  vue$1.createCommentVNode(" 继续递归 "),
                  vue$1.createElementVNode("view", {
                    id: n2.attrs.id,
                    class: vue$1.normalizeClass("_block _" + n2.name + " " + n2.attrs.class),
                    style: vue$1.normalizeStyle(n2.f + ";" + n2.attrs.style)
                  }, [
                    (vue$1.openBlock(true), vue$1.createElementBlock(
                      vue$1.Fragment,
                      null,
                      vue$1.renderList(n2.children, (n22, j2) => {
                        return vue$1.openBlock(), vue$1.createBlock(_component_node, {
                          key: j2,
                          style: vue$1.normalizeStyle(n22.f),
                          name: n22.name,
                          attrs: n22.attrs,
                          childs: n22.children,
                          opts: $props.opts
                        }, null, 8, ["style", "name", "attrs", "childs", "opts"]);
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    ))
                  ], 14, ["id"])
                ],
                2112
                /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
              )) : (vue$1.openBlock(), vue$1.createBlock(_component_node, {
                key: 12,
                style: vue$1.normalizeStyle(n2.f),
                name: n2.name,
                attrs: n2.attrs,
                childs: n2.children,
                opts: $props.opts
              }, null, 8, ["style", "name", "attrs", "childs", "opts"]))
            ],
            64
            /* STABLE_FRAGMENT */
          );
        }),
        128
        /* KEYED_FRAGMENT */
      ))
    ], 14, ["id"]);
  }
  if (typeof block0 === "function")
    block0(_sfc_main$D);
  const node = /* @__PURE__ */ _export_sfc(_sfc_main$D, [["render", _sfc_render$C], ["__scopeId", "data-v-24e3152b"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/common/RichText/dist/uni-app/components/mp-html/node/node.vue"]]);
  const config$1 = {
    // 信任的标签（保持标签名不变）
    trustTags: makeMap("a,abbr,ad,audio,b,blockquote,br,code,col,colgroup,dd,del,dl,dt,div,em,fieldset,h1,h2,h3,h4,h5,h6,hr,i,img,ins,label,legend,li,ol,p,q,ruby,rt,source,span,strong,sub,sup,table,tbody,td,tfoot,th,thead,tr,title,ul,video"),
    // 块级标签（转为 div，其他的非信任标签转为 span）
    blockTags: makeMap("address,article,aside,body,caption,center,cite,footer,header,html,nav,pre,section"),
    // 行内标签
    inlineTags: makeMap("abbr,b,big,code,del,em,i,ins,label,q,small,span,strong,sub,sup"),
    // 要移除的标签
    ignoreTags: makeMap("area,base,canvas,embed,frame,head,iframe,input,link,map,meta,param,rp,script,source,style,textarea,title,track,wbr"),
    // 自闭合的标签
    voidTags: makeMap("area,base,br,col,circle,ellipse,embed,frame,hr,img,input,line,link,meta,param,path,polygon,rect,source,track,use,wbr"),
    // html 实体
    entities: {
      lt: "<",
      gt: ">",
      quot: '"',
      apos: "'",
      ensp: " ",
      emsp: " ",
      nbsp: " ",
      semi: ";",
      ndash: "–",
      mdash: "—",
      middot: "·",
      lsquo: "‘",
      rsquo: "’",
      ldquo: "“",
      rdquo: "”",
      bull: "•",
      hellip: "…",
      larr: "←",
      uarr: "↑",
      rarr: "→",
      darr: "↓"
    },
    // 默认的标签样式
    tagStyle: {
      address: "font-style:italic",
      big: "display:inline;font-size:1.2em",
      caption: "display:table-caption;text-align:center",
      center: "text-align:center",
      cite: "font-style:italic",
      dd: "margin-left:40px",
      mark: "background-color:yellow",
      pre: "font-family:monospace;white-space:pre",
      s: "text-decoration:line-through",
      small: "display:inline;font-size:0.8em",
      strike: "text-decoration:line-through",
      u: "text-decoration:underline"
    },
    // svg 大小写对照表
    svgDict: {
      animatetransform: "animateTransform",
      lineargradient: "linearGradient",
      viewbox: "viewBox",
      attributename: "attributeName",
      repeatcount: "repeatCount",
      repeatdur: "repeatDur",
      foreignobject: "foreignObject"
    }
  };
  const tagSelector = {};
  const {
    windowWidth
  } = uni.getSystemInfoSync();
  const blankChar = makeMap(" ,\r,\n,	,\f");
  let idIndex = 0;
  config$1.ignoreTags.iframe = void 0;
  config$1.trustTags.iframe = true;
  config$1.ignoreTags.embed = void 0;
  config$1.trustTags.embed = true;
  function makeMap(str) {
    const map = /* @__PURE__ */ Object.create(null);
    const list = str.split(",");
    for (let i2 = list.length; i2--; ) {
      map[list[i2]] = true;
    }
    return map;
  }
  function decodeEntity(str, amp) {
    let i2 = str.indexOf("&");
    while (i2 !== -1) {
      const j2 = str.indexOf(";", i2 + 3);
      let code2;
      if (j2 === -1)
        break;
      if (str[i2 + 1] === "#") {
        code2 = parseInt((str[i2 + 2] === "x" ? "0" : "") + str.substring(i2 + 2, j2));
        if (!isNaN(code2)) {
          str = str.substr(0, i2) + String.fromCharCode(code2) + str.substr(j2 + 1);
        }
      } else {
        code2 = str.substring(i2 + 1, j2);
        if (config$1.entities[code2] || code2 === "amp" && amp) {
          str = str.substr(0, i2) + (config$1.entities[code2] || "&") + str.substr(j2 + 1);
        }
      }
      i2 = str.indexOf("&", i2 + 1);
    }
    return str;
  }
  function mergeNodes(nodes) {
    let i2 = nodes.length - 1;
    for (let j2 = i2; j2 >= -1; j2--) {
      if (j2 === -1 || nodes[j2].c || !nodes[j2].name || nodes[j2].name !== "div" && nodes[j2].name !== "p" && nodes[j2].name[0] !== "h" || (nodes[j2].attrs.style || "").includes("inline")) {
        if (i2 - j2 >= 5) {
          nodes.splice(j2 + 1, i2 - j2, {
            name: "div",
            attrs: {},
            children: nodes.slice(j2 + 1, i2 + 1)
          });
        }
        i2 = j2 - 1;
      }
    }
  }
  function Parser(vm) {
    this.options = vm || {};
    this.tagStyle = Object.assign({}, config$1.tagStyle, this.options.tagStyle);
    this.imgList = vm.imgList || [];
    this.imgList._unloadimgs = 0;
    this.plugins = vm.plugins || [];
    this.attrs = /* @__PURE__ */ Object.create(null);
    this.stack = [];
    this.nodes = [];
    this.pre = (this.options.containerStyle || "").includes("white-space") && this.options.containerStyle.includes("pre") ? 2 : 0;
  }
  Parser.prototype.parse = function(content) {
    for (let i2 = this.plugins.length; i2--; ) {
      if (this.plugins[i2].onUpdate) {
        content = this.plugins[i2].onUpdate(content, config$1) || content;
      }
    }
    new Lexer(this).parse(content);
    while (this.stack.length) {
      this.popNode();
    }
    if (this.nodes.length > 50) {
      mergeNodes(this.nodes);
    }
    return this.nodes;
  };
  Parser.prototype.expose = function() {
    for (let i2 = this.stack.length; i2--; ) {
      const item = this.stack[i2];
      if (item.c || item.name === "a" || item.name === "video" || item.name === "audio")
        return;
      item.c = 1;
    }
  };
  Parser.prototype.hook = function(node2) {
    for (let i2 = this.plugins.length; i2--; ) {
      if (this.plugins[i2].onParse && this.plugins[i2].onParse(node2, this) === false) {
        return false;
      }
    }
    return true;
  };
  Parser.prototype.getUrl = function(url2) {
    const domain2 = this.options.domain;
    if (url2[0] === "/") {
      if (url2[1] === "/") {
        url2 = (domain2 ? domain2.split("://")[0] : "http") + ":" + url2;
      } else if (domain2) {
        url2 = domain2 + url2;
      } else {
        url2 = plus.io.convertLocalFileSystemURL(url2);
      }
    } else if (!url2.includes("data:") && !url2.includes("://")) {
      if (domain2) {
        url2 = domain2 + "/" + url2;
      } else {
        url2 = plus.io.convertLocalFileSystemURL(url2);
      }
    }
    return url2;
  };
  Parser.prototype.parseStyle = function(node2) {
    const attrs = node2.attrs;
    const list = (this.tagStyle[node2.name] || "").split(";").concat((attrs.style || "").split(";"));
    const styleObj = {};
    let tmp = "";
    if (attrs.id && !this.xml) {
      if (this.options.useAnchor) {
        this.expose();
      } else if (node2.name !== "img" && node2.name !== "a" && node2.name !== "video" && node2.name !== "audio") {
        attrs.id = void 0;
      }
    }
    if (attrs.width) {
      styleObj.width = parseFloat(attrs.width) + (attrs.width.includes("%") ? "%" : "px");
      attrs.width = void 0;
    }
    if (attrs.height) {
      styleObj.height = parseFloat(attrs.height) + (attrs.height.includes("%") ? "%" : "px");
      attrs.height = void 0;
    }
    for (let i2 = 0, len = list.length; i2 < len; i2++) {
      const info = list[i2].split(":");
      if (info.length < 2)
        continue;
      const key = info.shift().trim().toLowerCase();
      let value = info.join(":").trim();
      if (value[0] === "-" && value.lastIndexOf("-") > 0 || value.includes("safe")) {
        tmp += `;${key}:${value}`;
      } else if (!styleObj[key] || value.includes("import") || !styleObj[key].includes("import")) {
        if (value.includes("url")) {
          let j2 = value.indexOf("(") + 1;
          if (j2) {
            while (value[j2] === '"' || value[j2] === "'" || blankChar[value[j2]]) {
              j2++;
            }
            value = value.substr(0, j2) + this.getUrl(value.substr(j2));
          }
        } else if (value.includes("rpx")) {
          value = value.replace(/[0-9.]+\s*rpx/g, ($2) => parseFloat($2) * windowWidth / 750 + "px");
        }
        styleObj[key] = value;
      }
    }
    node2.attrs.style = tmp;
    return styleObj;
  };
  Parser.prototype.onTagName = function(name) {
    this.tagName = this.xml ? name : name.toLowerCase();
    if (this.tagName === "svg") {
      this.xml = (this.xml || 0) + 1;
      config$1.ignoreTags.style = void 0;
    }
  };
  Parser.prototype.onAttrName = function(name) {
    name = this.xml ? name : name.toLowerCase();
    if (name.includes("?") || name.includes(";")) {
      this.attrName = void 0;
      return;
    }
    if (name.substr(0, 5) === "data-") {
      if (name === "data-src" && !this.attrs.src) {
        this.attrName = "src";
      } else if (this.tagName === "img" || this.tagName === "a") {
        this.attrName = name;
      } else {
        this.attrName = void 0;
      }
    } else {
      this.attrName = name;
      this.attrs[name] = "T";
    }
  };
  Parser.prototype.onAttrVal = function(val) {
    const name = this.attrName || "";
    if (name === "style" || name === "href") {
      this.attrs[name] = decodeEntity(val, true);
    } else if (name.includes("src")) {
      this.attrs[name] = this.getUrl(decodeEntity(val, true));
    } else if (name) {
      this.attrs[name] = val;
    }
  };
  Parser.prototype.onOpenTag = function(selfClose) {
    const node2 = /* @__PURE__ */ Object.create(null);
    node2.name = this.tagName;
    node2.attrs = this.attrs;
    if (this.options.nodes.length) {
      node2.type = "node";
    }
    this.attrs = /* @__PURE__ */ Object.create(null);
    const attrs = node2.attrs;
    const parent = this.stack[this.stack.length - 1];
    const siblings = parent ? parent.children : this.nodes;
    const close = this.xml ? selfClose : config$1.voidTags[node2.name];
    if (tagSelector[node2.name]) {
      attrs.class = tagSelector[node2.name] + (attrs.class ? " " + attrs.class : "");
    }
    if (node2.name === "embed") {
      this.expose();
    }
    if (node2.name === "video" || node2.name === "audio") {
      if (node2.name === "video" && !attrs.id) {
        attrs.id = "v" + idIndex++;
      }
      if (!attrs.controls && !attrs.autoplay) {
        attrs.controls = "T";
      }
      node2.src = [];
      if (attrs.src) {
        node2.src.push(attrs.src);
        attrs.src = void 0;
      }
      this.expose();
    }
    if (close) {
      if (!this.hook(node2) || config$1.ignoreTags[node2.name]) {
        if (node2.name === "base" && !this.options.domain) {
          this.options.domain = attrs.href;
        } else if (node2.name === "source" && parent && (parent.name === "video" || parent.name === "audio") && attrs.src) {
          parent.src.push(attrs.src);
        }
        return;
      }
      const styleObj = this.parseStyle(node2);
      if (node2.name === "img") {
        if (attrs.src) {
          if (attrs.src.includes("webp")) {
            node2.webp = "T";
          }
          if (attrs.src.includes("data:") && this.options.previewImg !== "all" && !attrs["original-src"]) {
            attrs.ignore = "T";
          }
          if (!attrs.ignore || node2.webp || attrs.src.includes("cloud://")) {
            for (let i2 = this.stack.length; i2--; ) {
              const item = this.stack[i2];
              if (item.name === "a") {
                node2.a = item.attrs;
              }
              if (item.name === "table" && !node2.webp && !attrs.src.includes("cloud://")) {
                if (!styleObj.display || styleObj.display.includes("inline")) {
                  node2.t = "inline-block";
                } else {
                  node2.t = styleObj.display;
                }
                styleObj.display = void 0;
              }
              item.c = 1;
            }
            attrs.i = this.imgList.length.toString();
            let src = attrs["original-src"] || attrs.src;
            this.imgList.push(src);
            if (!node2.t) {
              this.imgList._unloadimgs += 1;
            }
            if (this.options.lazyLoad) {
              attrs["data-src"] = attrs.src;
              attrs.src = void 0;
            }
          }
        }
        if (styleObj.display === "inline") {
          styleObj.display = "";
        }
        if (attrs.ignore) {
          styleObj["max-width"] = styleObj["max-width"] || "100%";
          attrs.style += ";-webkit-touch-callout:none";
        }
        if (parseInt(styleObj.width) > windowWidth) {
          styleObj.height = void 0;
        }
        if (!isNaN(parseInt(styleObj.width))) {
          node2.w = "T";
        }
        if (!isNaN(parseInt(styleObj.height)) && (!styleObj.height.includes("%") || parent && (parent.attrs.style || "").includes("height"))) {
          node2.h = "T";
        }
        if (node2.w && node2.h && styleObj["object-fit"]) {
          if (styleObj["object-fit"] === "contain") {
            node2.m = "aspectFit";
          } else if (styleObj["object-fit"] === "cover") {
            node2.m = "aspectFill";
          }
        }
      } else if (node2.name === "svg") {
        siblings.push(node2);
        this.stack.push(node2);
        this.popNode();
        return;
      }
      for (const key in styleObj) {
        if (styleObj[key]) {
          attrs.style += `;${key}:${styleObj[key].replace(" !important", "")}`;
        }
      }
      attrs.style = attrs.style.substr(1) || void 0;
    } else {
      if ((node2.name === "pre" || (attrs.style || "").includes("white-space") && attrs.style.includes("pre")) && this.pre !== 2) {
        this.pre = node2.pre = 1;
      }
      node2.children = [];
      this.stack.push(node2);
    }
    siblings.push(node2);
  };
  Parser.prototype.onCloseTag = function(name) {
    name = this.xml ? name : name.toLowerCase();
    let i2;
    for (i2 = this.stack.length; i2--; ) {
      if (this.stack[i2].name === name)
        break;
    }
    if (i2 !== -1) {
      while (this.stack.length > i2) {
        this.popNode();
      }
    } else if (name === "p" || name === "br") {
      const siblings = this.stack.length ? this.stack[this.stack.length - 1].children : this.nodes;
      siblings.push({
        name,
        attrs: {
          class: tagSelector[name] || "",
          style: this.tagStyle[name] || ""
        }
      });
    }
  };
  Parser.prototype.popNode = function() {
    const node2 = this.stack.pop();
    let attrs = node2.attrs;
    const children = node2.children;
    const parent = this.stack[this.stack.length - 1];
    const siblings = parent ? parent.children : this.nodes;
    if (!this.hook(node2) || config$1.ignoreTags[node2.name]) {
      if (node2.name === "title" && children.length && children[0].type === "text" && this.options.setTitle) {
        uni.setNavigationBarTitle({
          title: children[0].text
        });
      }
      siblings.pop();
      return;
    }
    if (node2.pre && this.pre !== 2) {
      this.pre = node2.pre = void 0;
      for (let i2 = this.stack.length; i2--; ) {
        if (this.stack[i2].pre) {
          this.pre = 1;
        }
      }
    }
    const styleObj = {};
    if (node2.name === "svg") {
      if (this.xml > 1) {
        this.xml--;
        return;
      }
      let src = "";
      const style = attrs.style;
      attrs.style = "";
      attrs.xmlns = "http://www.w3.org/2000/svg";
      (function traversal(node3) {
        if (node3.type === "text") {
          src += node3.text;
          return;
        }
        const name = config$1.svgDict[node3.name] || node3.name;
        if (name === "foreignObject") {
          for (const child of node3.children || []) {
            if (child.attrs && !child.attrs.xmlns) {
              child.attrs.xmlns = "http://www.w3.org/1999/xhtml";
              break;
            }
          }
        }
        src += "<" + name;
        for (const item in node3.attrs) {
          const val = node3.attrs[item];
          if (val) {
            src += ` ${config$1.svgDict[item] || item}="${val.replace(/"/g, "")}"`;
          }
        }
        if (!node3.children) {
          src += "/>";
        } else {
          src += ">";
          for (let i2 = 0; i2 < node3.children.length; i2++) {
            traversal(node3.children[i2]);
          }
          src += "</" + name + ">";
        }
      })(node2);
      node2.name = "img";
      node2.attrs = {
        src: "data:image/svg+xml;utf8," + src.replace(/#/g, "%23"),
        style,
        ignore: "T"
      };
      node2.children = void 0;
      this.xml = false;
      config$1.ignoreTags.style = true;
      return;
    }
    if (attrs.align) {
      if (node2.name === "table") {
        if (attrs.align === "center") {
          styleObj["margin-inline-start"] = styleObj["margin-inline-end"] = "auto";
        } else {
          styleObj.float = attrs.align;
        }
      } else {
        styleObj["text-align"] = attrs.align;
      }
      attrs.align = void 0;
    }
    if (attrs.dir) {
      styleObj.direction = attrs.dir;
      attrs.dir = void 0;
    }
    if (node2.name === "font") {
      if (attrs.color) {
        styleObj.color = attrs.color;
        attrs.color = void 0;
      }
      if (attrs.face) {
        styleObj["font-family"] = attrs.face;
        attrs.face = void 0;
      }
      if (attrs.size) {
        let size = parseInt(attrs.size);
        if (!isNaN(size)) {
          if (size < 1) {
            size = 1;
          } else if (size > 7) {
            size = 7;
          }
          styleObj["font-size"] = ["x-small", "small", "medium", "large", "x-large", "xx-large", "xxx-large"][size - 1];
        }
        attrs.size = void 0;
      }
    }
    if ((attrs.class || "").includes("align-center")) {
      styleObj["text-align"] = "center";
    }
    Object.assign(styleObj, this.parseStyle(node2));
    if (node2.name !== "table" && parseInt(styleObj.width) > windowWidth) {
      styleObj["max-width"] = "100%";
      styleObj["box-sizing"] = "border-box";
    }
    if (config$1.blockTags[node2.name]) {
      node2.name = "div";
    } else if (!config$1.trustTags[node2.name] && !this.xml) {
      node2.name = "span";
    }
    if (node2.name === "a" || node2.name === "ad" || node2.name === "iframe") {
      this.expose();
    } else if (node2.name === "video") {
      if ((styleObj.height || "").includes("auto")) {
        styleObj.height = void 0;
      }
      let str = '<video style="width:100%;height:100%"';
      for (const item in attrs) {
        if (attrs[item]) {
          str += " " + item + '="' + attrs[item] + '"';
        }
      }
      if (this.options.pauseVideo) {
        str += ` onplay="this.dispatchEvent(new CustomEvent('vplay',{bubbles:!0}));for(var e=document.getElementsByTagName('video'),t=0;t<e.length;t++)e[t]!=this&&e[t].pause()"`;
      }
      str += ">";
      for (let i2 = 0; i2 < node2.src.length; i2++) {
        str += '<source src="' + node2.src[i2] + '">';
      }
      str += "</video>";
      node2.html = str;
    } else if ((node2.name === "ul" || node2.name === "ol") && node2.c) {
      const types = {
        a: "lower-alpha",
        A: "upper-alpha",
        i: "lower-roman",
        I: "upper-roman"
      };
      if (types[attrs.type]) {
        attrs.style += ";list-style-type:" + types[attrs.type];
        attrs.type = void 0;
      }
      for (let i2 = children.length; i2--; ) {
        if (children[i2].name === "li") {
          children[i2].c = 1;
        }
      }
    } else if (node2.name === "table") {
      let padding = parseFloat(attrs.cellpadding);
      let spacing = parseFloat(attrs.cellspacing);
      const border = parseFloat(attrs.border);
      const bordercolor = styleObj["border-color"];
      const borderstyle = styleObj["border-style"];
      if (node2.c) {
        if (isNaN(padding)) {
          padding = 2;
        }
        if (isNaN(spacing)) {
          spacing = 2;
        }
      }
      if (border) {
        attrs.style += `;border:${border}px ${borderstyle || "solid"} ${bordercolor || "gray"}`;
      }
      if (node2.flag && node2.c) {
        styleObj.display = "grid";
        if (styleObj["border-collapse"] === "collapse") {
          styleObj["border-collapse"] = void 0;
          spacing = 0;
        }
        if (spacing) {
          styleObj["grid-gap"] = spacing + "px";
          styleObj.padding = spacing + "px";
        } else if (border) {
          attrs.style += ";border-left:0;border-top:0";
        }
        const width = [];
        const trList = [];
        const cells = [];
        const map = {};
        (function traversal(nodes) {
          for (let i2 = 0; i2 < nodes.length; i2++) {
            if (nodes[i2].name === "tr") {
              trList.push(nodes[i2]);
            } else if (nodes[i2].name === "colgroup") {
              let colI = 1;
              for (const col of nodes[i2].children || []) {
                if (col.name === "col") {
                  const style = col.attrs.style || "";
                  const start = style.indexOf("width") ? style.indexOf(";width") : 0;
                  if (start !== -1) {
                    let end = style.indexOf(";", start + 6);
                    if (end === -1) {
                      end = style.length;
                    }
                    width[colI] = style.substring(start ? start + 7 : 6, end);
                  }
                  colI += 1;
                }
              }
            } else {
              traversal(nodes[i2].children || []);
            }
          }
        })(children);
        for (let row = 1; row <= trList.length; row++) {
          let col = 1;
          for (let j2 = 0; j2 < trList[row - 1].children.length; j2++) {
            const td = trList[row - 1].children[j2];
            if (td.name === "td" || td.name === "th") {
              while (map[row + "." + col]) {
                col++;
              }
              let style = td.attrs.style || "";
              let start = style.indexOf("width") ? style.indexOf(";width") : 0;
              if (start !== -1) {
                let end = style.indexOf(";", start + 6);
                if (end === -1) {
                  end = style.length;
                }
                if (!td.attrs.colspan) {
                  width[col] = style.substring(start ? start + 7 : 6, end);
                }
                style = style.substr(0, start) + style.substr(end);
              }
              style += ";display:flex";
              start = style.indexOf("vertical-align");
              if (start !== -1) {
                const val = style.substr(start + 15, 10);
                if (val.includes("middle")) {
                  style += ";align-items:center";
                } else if (val.includes("bottom")) {
                  style += ";align-items:flex-end";
                }
              } else {
                style += ";align-items:center";
              }
              start = style.indexOf("text-align");
              if (start !== -1) {
                const val = style.substr(start + 11, 10);
                if (val.includes("center")) {
                  style += ";justify-content: center";
                } else if (val.includes("right")) {
                  style += ";justify-content: right";
                }
              }
              style = (border ? `;border:${border}px ${borderstyle || "solid"} ${bordercolor || "gray"}` + (spacing ? "" : ";border-right:0;border-bottom:0") : "") + (padding ? `;padding:${padding}px` : "") + ";" + style;
              if (td.attrs.colspan) {
                style += `;grid-column-start:${col};grid-column-end:${col + parseInt(td.attrs.colspan)}`;
                if (!td.attrs.rowspan) {
                  style += `;grid-row-start:${row};grid-row-end:${row + 1}`;
                }
                col += parseInt(td.attrs.colspan) - 1;
              }
              if (td.attrs.rowspan) {
                style += `;grid-row-start:${row};grid-row-end:${row + parseInt(td.attrs.rowspan)}`;
                if (!td.attrs.colspan) {
                  style += `;grid-column-start:${col};grid-column-end:${col + 1}`;
                }
                for (let rowspan = 1; rowspan < td.attrs.rowspan; rowspan++) {
                  for (let colspan = 0; colspan < (td.attrs.colspan || 1); colspan++) {
                    map[row + rowspan + "." + (col - colspan)] = 1;
                  }
                }
              }
              if (style) {
                td.attrs.style = style;
              }
              cells.push(td);
              col++;
            }
          }
          if (row === 1) {
            let temp = "";
            for (let i2 = 1; i2 < col; i2++) {
              temp += (width[i2] ? width[i2] : "auto") + " ";
            }
            styleObj["grid-template-columns"] = temp;
          }
        }
        node2.children = cells;
      } else {
        if (node2.c) {
          styleObj.display = "table";
        }
        if (!isNaN(spacing)) {
          styleObj["border-spacing"] = spacing + "px";
        }
        if (border || padding) {
          (function traversal(nodes) {
            for (let i2 = 0; i2 < nodes.length; i2++) {
              const td = nodes[i2];
              if (td.name === "th" || td.name === "td") {
                if (border) {
                  td.attrs.style = `border:${border}px ${borderstyle || "solid"} ${bordercolor || "gray"};${td.attrs.style || ""}`;
                }
                if (padding) {
                  td.attrs.style = `padding:${padding}px;${td.attrs.style || ""}`;
                }
              } else if (td.children) {
                traversal(td.children);
              }
            }
          })(children);
        }
      }
      if (this.options.scrollTable && !(attrs.style || "").includes("inline")) {
        const table = Object.assign({}, node2);
        node2.name = "div";
        node2.attrs = {
          style: "overflow:auto"
        };
        node2.children = [table];
        attrs = table.attrs;
      }
    } else if ((node2.name === "tbody" || node2.name === "tr") && node2.flag && node2.c) {
      node2.flag = void 0;
      (function traversal(nodes) {
        for (let i2 = 0; i2 < nodes.length; i2++) {
          if (nodes[i2].name === "td") {
            for (const style of ["color", "background", "background-color"]) {
              if (styleObj[style]) {
                nodes[i2].attrs.style = style + ":" + styleObj[style] + ";" + (nodes[i2].attrs.style || "");
              }
            }
          } else {
            traversal(nodes[i2].children || []);
          }
        }
      })(children);
    } else if ((node2.name === "td" || node2.name === "th") && (attrs.colspan || attrs.rowspan)) {
      for (let i2 = this.stack.length; i2--; ) {
        if (this.stack[i2].name === "table" || this.stack[i2].name === "tbody" || this.stack[i2].name === "tr") {
          this.stack[i2].flag = 1;
        }
      }
    } else if (node2.name === "ruby") {
      node2.name = "span";
      for (let i2 = 0; i2 < children.length - 1; i2++) {
        if (children[i2].type === "text" && children[i2 + 1].name === "rt") {
          children[i2] = {
            name: "div",
            attrs: {
              style: "display:inline-block;text-align:center"
            },
            children: [{
              name: "div",
              attrs: {
                style: "font-size:50%;" + (children[i2 + 1].attrs.style || "")
              },
              children: children[i2 + 1].children
            }, children[i2]]
          };
          children.splice(i2 + 1, 1);
        }
      }
    } else if (node2.c) {
      (function traversal(node3) {
        node3.c = 2;
        for (let i2 = node3.children.length; i2--; ) {
          const child = node3.children[i2];
          if (child.name && (config$1.inlineTags[child.name] || (child.attrs.style || "").includes("inline") && child.children) && !child.c) {
            traversal(child);
          }
          if (!child.c || child.name === "table") {
            node3.c = 1;
          }
        }
      })(node2);
    }
    if ((styleObj.display || "").includes("flex") && !node2.c) {
      for (let i2 = children.length; i2--; ) {
        const item = children[i2];
        if (item.f) {
          item.attrs.style = (item.attrs.style || "") + item.f;
          item.f = void 0;
        }
      }
    }
    const flex = parent && ((parent.attrs.style || "").includes("flex") || (parent.attrs.style || "").includes("grid")) && !node2.c;
    if (flex) {
      node2.f = ";max-width:100%";
    }
    if (children.length >= 50 && node2.c && !(styleObj.display || "").includes("flex")) {
      mergeNodes(children);
    }
    for (const key in styleObj) {
      if (styleObj[key]) {
        const val = `;${key}:${styleObj[key].replace(" !important", "")}`;
        if (flex && (key.includes("flex") && key !== "flex-direction" || key === "align-self" || key.includes("grid") || styleObj[key][0] === "-" || key.includes("width") && val.includes("%"))) {
          node2.f += val;
          if (key === "width") {
            attrs.style += ";width:100%";
          }
        } else {
          attrs.style += val;
        }
      }
    }
    attrs.style = attrs.style.substr(1) || void 0;
  };
  Parser.prototype.onText = function(text) {
    if (!this.pre) {
      let trim2 = "";
      let flag;
      for (let i2 = 0, len = text.length; i2 < len; i2++) {
        if (!blankChar[text[i2]]) {
          trim2 += text[i2];
        } else {
          if (trim2[trim2.length - 1] !== " ") {
            trim2 += " ";
          }
          if (text[i2] === "\n" && !flag) {
            flag = true;
          }
        }
      }
      if (trim2 === " ") {
        if (flag)
          return;
        else {
          const parent = this.stack[this.stack.length - 1];
          if (parent && parent.name[0] === "t")
            return;
        }
      }
      text = trim2;
    }
    const node2 = /* @__PURE__ */ Object.create(null);
    node2.type = "text";
    node2.text = decodeEntity(text);
    if (this.hook(node2)) {
      const siblings = this.stack.length ? this.stack[this.stack.length - 1].children : this.nodes;
      siblings.push(node2);
    }
  };
  function Lexer(handler) {
    this.handler = handler;
  }
  Lexer.prototype.parse = function(content) {
    this.content = content || "";
    this.i = 0;
    this.start = 0;
    this.state = this.text;
    for (let len = this.content.length; this.i !== -1 && this.i < len; ) {
      this.state();
    }
  };
  Lexer.prototype.checkClose = function(method2) {
    const selfClose = this.content[this.i] === "/";
    if (this.content[this.i] === ">" || selfClose && this.content[this.i + 1] === ">") {
      if (method2) {
        this.handler[method2](this.content.substring(this.start, this.i));
      }
      this.i += selfClose ? 2 : 1;
      this.start = this.i;
      this.handler.onOpenTag(selfClose);
      if (this.handler.tagName === "script") {
        this.i = this.content.indexOf("</", this.i);
        if (this.i !== -1) {
          this.i += 2;
          this.start = this.i;
        }
        this.state = this.endTag;
      } else {
        this.state = this.text;
      }
      return true;
    }
    return false;
  };
  Lexer.prototype.text = function() {
    this.i = this.content.indexOf("<", this.i);
    if (this.i === -1) {
      if (this.start < this.content.length) {
        this.handler.onText(this.content.substring(this.start, this.content.length));
      }
      return;
    }
    const c2 = this.content[this.i + 1];
    if (c2 >= "a" && c2 <= "z" || c2 >= "A" && c2 <= "Z") {
      if (this.start !== this.i) {
        this.handler.onText(this.content.substring(this.start, this.i));
      }
      this.start = ++this.i;
      this.state = this.tagName;
    } else if (c2 === "/" || c2 === "!" || c2 === "?") {
      if (this.start !== this.i) {
        this.handler.onText(this.content.substring(this.start, this.i));
      }
      const next = this.content[this.i + 2];
      if (c2 === "/" && (next >= "a" && next <= "z" || next >= "A" && next <= "Z")) {
        this.i += 2;
        this.start = this.i;
        this.state = this.endTag;
        return;
      }
      let end = "-->";
      if (c2 !== "!" || this.content[this.i + 2] !== "-" || this.content[this.i + 3] !== "-") {
        end = ">";
      }
      this.i = this.content.indexOf(end, this.i);
      if (this.i !== -1) {
        this.i += end.length;
        this.start = this.i;
      }
    } else {
      this.i++;
    }
  };
  Lexer.prototype.tagName = function() {
    if (blankChar[this.content[this.i]]) {
      this.handler.onTagName(this.content.substring(this.start, this.i));
      while (blankChar[this.content[++this.i]])
        ;
      if (this.i < this.content.length && !this.checkClose()) {
        this.start = this.i;
        this.state = this.attrName;
      }
    } else if (!this.checkClose("onTagName")) {
      this.i++;
    }
  };
  Lexer.prototype.attrName = function() {
    let c2 = this.content[this.i];
    if (blankChar[c2] || c2 === "=") {
      this.handler.onAttrName(this.content.substring(this.start, this.i));
      let needVal = c2 === "=";
      const len = this.content.length;
      while (++this.i < len) {
        c2 = this.content[this.i];
        if (!blankChar[c2]) {
          if (this.checkClose())
            return;
          if (needVal) {
            this.start = this.i;
            this.state = this.attrVal;
            return;
          }
          if (this.content[this.i] === "=") {
            needVal = true;
          } else {
            this.start = this.i;
            this.state = this.attrName;
            return;
          }
        }
      }
    } else if (!this.checkClose("onAttrName")) {
      this.i++;
    }
  };
  Lexer.prototype.attrVal = function() {
    const c2 = this.content[this.i];
    const len = this.content.length;
    if (c2 === '"' || c2 === "'") {
      this.start = ++this.i;
      this.i = this.content.indexOf(c2, this.i);
      if (this.i === -1)
        return;
      this.handler.onAttrVal(this.content.substring(this.start, this.i));
    } else {
      for (; this.i < len; this.i++) {
        if (blankChar[this.content[this.i]]) {
          this.handler.onAttrVal(this.content.substring(this.start, this.i));
          break;
        } else if (this.checkClose("onAttrVal"))
          return;
      }
    }
    while (blankChar[this.content[++this.i]])
      ;
    if (this.i < len && !this.checkClose()) {
      this.start = this.i;
      this.state = this.attrName;
    }
  };
  Lexer.prototype.endTag = function() {
    const c2 = this.content[this.i];
    if (blankChar[c2] || c2 === ">" || c2 === "/") {
      this.handler.onCloseTag(this.content.substring(this.start, this.i));
      if (c2 !== ">") {
        this.i = this.content.indexOf(">", this.i);
        if (this.i === -1)
          return;
      }
      this.start = ++this.i;
      this.state = this.text;
    } else {
      this.i++;
    }
  };
  const plugins = [];
  const _sfc_main$C = {
    name: "mp-html",
    data() {
      return {
        nodes: []
      };
    },
    props: {
      containerStyle: {
        type: String,
        default: ""
      },
      content: {
        type: String,
        default: ""
      },
      copyLink: {
        type: [Boolean, String],
        default: true
      },
      domain: String,
      errorImg: {
        type: String,
        default: ""
      },
      lazyLoad: {
        type: [Boolean, String],
        default: false
      },
      loadingImg: {
        type: String,
        default: ""
      },
      pauseVideo: {
        type: [Boolean, String],
        default: true
      },
      previewImg: {
        type: [Boolean, String],
        default: true
      },
      scrollTable: [Boolean, String],
      selectable: [Boolean, String],
      setTitle: {
        type: [Boolean, String],
        default: true
      },
      showImgMenu: {
        type: [Boolean, String],
        default: true
      },
      tagStyle: Object,
      useAnchor: [Boolean, Number]
    },
    emits: ["load", "ready", "imgtap", "linktap", "play", "error"],
    components: {
      node
    },
    watch: {
      content(content) {
        this.setContent(content);
      }
    },
    created() {
      this.plugins = [];
      for (let i2 = plugins.length; i2--; ) {
        this.plugins.push(new plugins[i2](this));
      }
    },
    mounted() {
      if (this.content && !this.nodes.length) {
        this.setContent(this.content);
      }
    },
    beforeDestroy() {
      this._hook("onDetached");
    },
    methods: {
      /**
       * @description 将锚点跳转的范围限定在一个 scroll-view 内
       * @param {Object} page scroll-view 所在页面的示例
       * @param {String} selector scroll-view 的选择器
       * @param {String} scrollTop scroll-view scroll-top 属性绑定的变量名
       */
      in(page, selector, scrollTop) {
        if (page && selector && scrollTop) {
          this._in = {
            page,
            selector,
            scrollTop
          };
        }
      },
      /**
       * @description 锚点跳转
       * @param {String} id 要跳转的锚点 id
       * @param {Number} offset 跳转位置的偏移量
       * @returns {Promise}
       */
      navigateTo(id, offset) {
        return new Promise((resolve, reject) => {
          if (!this.useAnchor) {
            reject(Error("Anchor is disabled"));
            return;
          }
          offset = offset || parseInt(this.useAnchor) || 0;
          let deep = " ";
          const selector = uni.createSelectorQuery().in(this._in ? this._in.page : this).select((this._in ? this._in.selector : "._root") + (id ? `${deep}#${id}` : "")).boundingClientRect();
          if (this._in) {
            selector.select(this._in.selector).scrollOffset().select(this._in.selector).boundingClientRect();
          } else {
            selector.selectViewport().scrollOffset();
          }
          selector.exec((res) => {
            if (!res[0]) {
              reject(Error("Label not found"));
              return;
            }
            const scrollTop = res[1].scrollTop + res[0].top - (res[2] ? res[2].top : 0) + offset;
            if (this._in) {
              this._in.page[this._in.scrollTop] = scrollTop;
            } else {
              uni.pageScrollTo({
                scrollTop,
                duration: 300
              });
            }
            resolve();
          });
        });
      },
      /**
       * @description 获取文本内容
       * @return {String}
       */
      getText(nodes) {
        let text = "";
        (function traversal(nodes2) {
          for (let i2 = 0; i2 < nodes2.length; i2++) {
            const node2 = nodes2[i2];
            if (node2.type === "text") {
              text += node2.text.replace(/&amp;/g, "&");
            } else if (node2.name === "br") {
              text += "\n";
            } else {
              const isBlock = node2.name === "p" || node2.name === "div" || node2.name === "tr" || node2.name === "li" || node2.name[0] === "h" && node2.name[1] > "0" && node2.name[1] < "7";
              if (isBlock && text && text[text.length - 1] !== "\n") {
                text += "\n";
              }
              if (node2.children) {
                traversal(node2.children);
              }
              if (isBlock && text[text.length - 1] !== "\n") {
                text += "\n";
              } else if (node2.name === "td" || node2.name === "th") {
                text += "	";
              }
            }
          }
        })(nodes || this.nodes);
        return text;
      },
      /**
       * @description 获取内容大小和位置
       * @return {Promise}
       */
      getRect() {
        return new Promise((resolve, reject) => {
          uni.createSelectorQuery().in(this).select("#_root").boundingClientRect().exec((res) => res[0] ? resolve(res[0]) : reject(Error("Root label not found")));
        });
      },
      /**
       * @description 暂停播放媒体
       */
      pauseMedia() {
        for (let i2 = (this._videos || []).length; i2--; ) {
          this._videos[i2].pause();
        }
        const command = 'for(var e=document.getElementsByTagName("video"),i=e.length;i--;)e[i].pause()';
        let page = this.$parent;
        while (!page.$scope)
          page = page.$parent;
        page.$scope.$getAppWebview().evalJS(command);
      },
      /**
       * @description 设置媒体播放速率
       * @param {Number} rate 播放速率
       */
      setPlaybackRate(rate) {
        this.playbackRate = rate;
        for (let i2 = (this._videos || []).length; i2--; ) {
          this._videos[i2].playbackRate(rate);
        }
        const command = 'for(var e=document.getElementsByTagName("video"),i=e.length;i--;)e[i].playbackRate=' + rate;
        let page = this.$parent;
        while (!page.$scope)
          page = page.$parent;
        page.$scope.$getAppWebview().evalJS(command);
      },
      /**
       * @description 设置内容
       * @param {String} content html 内容
       * @param {Boolean} append 是否在尾部追加
       */
      setContent(content, append) {
        if (!append || !this.imgList) {
          this.imgList = [];
        }
        const nodes = new Parser(this).parse(content);
        this.$set(this, "nodes", append ? (this.nodes || []).concat(nodes) : nodes);
        this._videos = [];
        this.$nextTick(() => {
          this._hook("onLoad");
          this.$emit("load");
        });
        if (this.lazyLoad || this.imgList._unloadimgs < this.imgList.length / 2) {
          let height = 0;
          const callback = (rect) => {
            if (!rect || !rect.height)
              rect = {};
            if (rect.height === height) {
              this.$emit("ready", rect);
            } else {
              height = rect.height;
              setTimeout(() => {
                this.getRect().then(callback).catch(callback);
              }, 350);
            }
          };
          this.getRect().then(callback).catch(callback);
        } else {
          if (!this.imgList._unloadimgs) {
            this.getRect().then((rect) => {
              this.$emit("ready", rect);
            }).catch(() => {
              this.$emit("ready", {});
            });
          }
        }
      },
      /**
       * @description 调用插件钩子函数
       */
      _hook(name) {
        for (let i2 = plugins.length; i2--; ) {
          if (this.plugins[i2][name]) {
            this.plugins[i2][name]();
          }
        }
      }
    }
  };
  function _sfc_render$B(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_node = vue$1.resolveComponent("node");
    return vue$1.openBlock(), vue$1.createElementBlock(
      "view",
      {
        id: "_root",
        class: vue$1.normalizeClass(($props.selectable ? "_select " : "") + "_root"),
        style: vue$1.normalizeStyle($props.containerStyle)
      },
      [
        !$data.nodes[0] ? vue$1.renderSlot(_ctx.$slots, "default", { key: 0 }, void 0, true) : (vue$1.openBlock(), vue$1.createBlock(_component_node, {
          key: 1,
          childs: $data.nodes,
          opts: [$props.lazyLoad, $props.loadingImg, $props.errorImg, $props.showImgMenu, $props.selectable],
          name: "span"
        }, null, 8, ["childs", "opts"]))
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const mpHtml = /* @__PURE__ */ _export_sfc(_sfc_main$C, [["render", _sfc_render$B], ["__scopeId", "data-v-00983e60"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/common/RichText/dist/uni-app/components/mp-html/mp-html.vue"]]);
  const { computed: computed$5, ref: ref$4 } = vue;
  const _sfc_main$B = {
    components: {
      mpHtml
    },
    props: {
      payload: {
        type: Object,
        default: () => ({})
      }
    },
    setup(props) {
      const parsedContent = computed$5(() => {
        return parseMarkdown(props.payload.content);
      });
      return {
        props,
        parsedContent
      };
    }
  };
  function _sfc_render$A(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_mpHtml = vue$1.resolveComponent("mpHtml");
    return vue$1.openBlock(), vue$1.createElementBlock("div", null, [
      vue$1.createElementVNode("div", null, [
        vue$1.createVNode(_component_mpHtml, { content: $setup.parsedContent }, null, 8, ["content"])
      ])
    ]);
  }
  const MessageRichText = /* @__PURE__ */ _export_sfc(_sfc_main$B, [["render", _sfc_render$A], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-desk/message-desk-elements/message-rich-text.vue"]]);
  const chineseRegex = /[\u4e00-\u9fa5]/;
  const wordAndNonWordRegex = /\b\w+\b|[^\w]+/g;
  const isStringArray = (test2) => {
    return Array.isArray(test2) && !test2.some((value) => typeof value !== "string");
  };
  class TypeWriter {
    constructor(options) {
      /**
       * @property {array} strings strings to be typed
       */
      __publicField(this, "strings", []);
      /**
       * @property {boolean} isTyping current typing status
       */
      __publicField(this, "isTyping", false);
      /**
       * @property {number} typeSpeed type speed in milliseconds. If empty, using dynamic speed.
       */
      __publicField(this, "typeSpeed", 0);
      /**
       * @property {number} curArrayPos current typing string's position of all strings.
       */
      __publicField(this, "curArrayPos", 0);
      /**
       * @property {number} curCharPos current typing character's position in current strings.
       */
      __publicField(this, "curCharPos", 0);
      /**
       * @property {ReturnType<typeof setTimeout>} timer timer for type writer animation
       */
      __publicField(this, "timer");
      /**
       * On string is typing
       * @param {string} curStr
       * @param {number} arrayPos
       * @param {number} characterPos
       * @param {Typed} self
       */
      __publicField(this, "onTyping");
      /**
       * After start
       * @param {number} arrayPos
       * @param {number} characterPos
       * @param {TypeWriter} self
       */
      __publicField(this, "onStart");
      /**
       * After stop
       * @param {number} arrayPos
       * @param {number} characterPos
       * @param {TypeWriter} self
       */
      __publicField(this, "onStop");
      /**
       * All typing is complete
       * @param {Typed} self
       */
      __publicField(this, "onComplete");
      const { defaultStrings, typeSpeed, onTyping, onComplete, onStart, onStop } = options;
      if (defaultStrings && isStringArray(defaultStrings)) {
        this.add(defaultStrings);
      }
      if (typeof typeSpeed === "number") {
        this.typeSpeed = typeSpeed;
      }
      if (typeof onTyping === "function") {
        this.onTyping = onTyping;
      }
      if (typeof onComplete === "function") {
        this.onComplete = onComplete;
      }
      if (typeof onStart === "function") {
        this.onStart = onStart;
      }
      if (typeof onStop === "function") {
        this.onStop = onStop;
      }
    }
    add(addStrings) {
      if (!addStrings || !addStrings.length)
        return;
      addStrings.forEach((item) => {
        if (chineseRegex.test(item)) {
          const newValueArray = item.split("");
          this.strings.push(...newValueArray);
        } else {
          const newValueArray = item.match(wordAndNonWordRegex) || item.split("");
          this.strings.push(...newValueArray);
        }
      });
    }
    start() {
      if (this.isTyping) {
        return;
      }
      this.isTyping = true;
      this.onStart && this.onStart(this.curArrayPos, this.curCharPos, this);
      this._next();
    }
    stop() {
      if (!this.isTyping) {
        return;
      }
      this.isTyping = false;
      clearTimeout(this.timer);
      this.onStop && this.onStop(this.curArrayPos, this.curCharPos, this);
    }
    done() {
      var _a2;
      this.stop();
      let _str = this.strings[this.curArrayPos].slice(this.curCharPos);
      _str += this.strings.slice(this.curArrayPos + 1).join("");
      this.curArrayPos = this.strings.length - 1;
      this.curCharPos = ((_a2 = this.strings[this.curArrayPos]) == null ? void 0 : _a2.length) - 1;
      this.onTyping && this.onTyping(_str, this.curArrayPos, this.curCharPos, this);
      this.strings = [];
    }
    _consume() {
      var _a2, _b2, _c2;
      if (!this.strings.length) {
        return;
      }
      if (this.curArrayPos >= this.strings.length) {
        this.isTyping = false;
        (_a2 = this.onComplete) == null ? void 0 : _a2.call(this, this);
        return;
      }
      const item = (_b2 = this.strings[this.curArrayPos]) == null ? void 0 : _b2[this.curCharPos];
      if (item) {
        this.onTyping && this.onTyping(item, this.curArrayPos, this.curCharPos, this);
      }
      if (this.curCharPos < ((_c2 = this.strings[this.curArrayPos]) == null ? void 0 : _c2.length) - 1) {
        this.curCharPos++;
      } else {
        this.curArrayPos++;
        this.curCharPos = 0;
      }
    }
    _next() {
      this._consume();
      this.timer = setTimeout(() => {
        this._consume();
        if (this.isTyping) {
          this._next();
        }
      }, this.typeSpeed || this._dynamicSpeed());
    }
    _dynamicSpeed() {
      var _a2, _b2;
      let length2 = 0;
      length2 += (((_a2 = this.strings[this.curArrayPos]) == null ? void 0 : _a2.length) || 0) - this.curCharPos - 1;
      for (let i2 = this.curArrayPos + 1; i2 < this.strings.length; i2++) {
        length2 += ((_b2 = this.strings[i2]) == null ? void 0 : _b2.length) || 0;
      }
      if (length2 <= 0) {
        length2 = 10;
      }
      const speed = 1500 / length2;
      if (speed >= 150) {
        return 150;
      } else {
        return speed;
      }
    }
  }
  const _sfc_main$A = /* @__PURE__ */ vue$1.defineComponent({
    __name: "message-stream",
    props: {
      payload: { type: Object, required: true, default: () => ({}) },
      messageID: { type: String, required: true, default: "" }
    },
    emits: ["heightChanged"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const { ref: ref2, computed: computed2, withDefaults, defineProps, watch, onMounted: onMounted2, onUnmounted: onUnmounted2 } = vue;
      const props = __props;
      const isCursorBlinking = ref2(true);
      const isStreaming = ref2(false);
      const image2 = ref2(false);
      const imageSrc = ref2("");
      const chunks = ref2("");
      const isFinished = ref2(true);
      const prevChunksLength = ref2(0);
      const streamContent = ref2("");
      const displayedContent = ref2("");
      const preRef = ref2();
      const emits = __emit;
      const canIUseResizeObserver = typeof ResizeObserver === "undefined" ? false : true;
      const messageID = ref2("");
      let observer;
      let prevHeight = 0;
      let count = 0;
      const typeWriter = new TypeWriter({
        onTyping: (item) => {
          streamContent.value += item;
          displayedContent.value = parseMarkdown(streamContent.value);
        },
        onComplete() {
          isStreaming.value = false;
        }
      });
      function startStreaming(content) {
        if (!isStreaming.value) {
          isStreaming.value = true;
          typeWriter.add(content);
          typeWriter.start();
        } else {
          typeWriter.add(content);
        }
      }
      watch(
        () => props.payload,
        (newValue, oldValue) => {
          var _a2;
          if (newValue === oldValue) {
            return;
          }
          const _payloadObject = JSONToObject(props.payload);
          chunks.value = Array.isArray(_payloadObject.chunks) ? _payloadObject.chunks.join("") : _payloadObject.chunks;
          isFinished.value = _payloadObject.isFinished === 1;
          if (chunks.value.length > 0) {
            isCursorBlinking.value = false;
          }
          if (isWeChat || newValue && !oldValue && isFinished.value) {
            streamContent.value = chunks.value;
            prevChunksLength.value = chunks.value.length;
            displayedContent.value = parseMarkdown(streamContent.value);
          } else {
            if (chunks.value.length > prevChunksLength.value) {
              const _newChunksToAdd = (_a2 = chunks.value) == null ? void 0 : _a2.slice(prevChunksLength.value);
              prevChunksLength.value = chunks.value.length;
              startStreaming([_newChunksToAdd]);
            }
          }
        },
        {
          deep: true,
          immediate: true
        }
      );
      const onHackedMessageID = (data) => {
        if (data !== messageID.value || isFinished.value) {
          return;
        }
        const message = Jt.getMessageModel(data);
        if (!message) {
          return;
        }
        if (message.payload.data) {
          const obj = JSONToObject(message.payload.data);
          const chunk2String = Array.isArray(obj.chunks) ? obj.chunks.join("") : obj.chunks;
          if (chunk2String !== streamContent.value) {
            streamContent.value = chunk2String;
            prevChunksLength.value = chunk2String.length;
            displayedContent.value = parseMarkdown(streamContent.value);
          }
          if (chunk2String.length > 0) {
            isCursorBlinking.value = false;
          }
          isFinished.value = obj.isFinished;
        }
      };
      onMounted2(() => {
        messageID.value = props.messageID;
        Jt.watch(o$2.CUSTOM, {
          "hackedMessageID": onHackedMessageID
        });
        if (canIUseResizeObserver) {
          observer = new ResizeObserver((entries) => {
            for (let entry of entries) {
              observeHeightChanged(entry.contentRect.height);
            }
          });
          observer.observe(preRef.value);
        } else if (isVue3App) {
          observer = setInterval(() => {
            const query = uni.createSelectorQuery().in(this);
            query.selectAll(".message-stream").boundingClientRect((res) => {
              if (res.length >= 1) {
                const data = res[res.length - 1];
                observeHeightChanged(data.height);
              }
            }).exec();
          }, 100);
        }
      });
      onUnmounted2(() => {
        Jt.unwatch(o$2.CUSTOM, {
          "hackedMessageID": onHackedMessageID
        });
        if (canIUseResizeObserver) {
          if (observer) {
            observer.disconnect();
            observer = null;
          }
        } else {
          clearTimer();
        }
      });
      const observeHeightChanged = (newHeight) => {
        if (prevHeight !== newHeight) {
          prevHeight = newHeight;
          emits("heightChanged");
        } else if (!canIUseResizeObserver) {
          count += 1;
          if (count >= 80) {
            clearTimer();
          }
        }
      };
      const clearTimer = () => {
        clearInterval(observer);
        prevHeight = 0;
        count = 0;
      };
      const closeImage = () => {
        image2.value = !image2.value;
        imageSrc.value = "";
      };
      const onPreClicked = (event) => {
        if (isPC || isH5) {
          const target = event.target;
          const tagName = event.target.tagName.toLowerCase();
          if (tagName === "img" || tagName === "image") {
            image2.value = true;
            imageSrc.value = target.src;
          }
        }
      };
      const __returned__ = { ref: ref2, computed: computed2, withDefaults, defineProps, watch, onMounted: onMounted2, onUnmounted: onUnmounted2, props, isCursorBlinking, isStreaming, image: image2, imageSrc, chunks, isFinished, prevChunksLength, streamContent, displayedContent, preRef, emits, canIUseResizeObserver, messageID, get observer() {
        return observer;
      }, set observer(v2) {
        observer = v2;
      }, get prevHeight() {
        return prevHeight;
      }, set prevHeight(v2) {
        prevHeight = v2;
      }, get count() {
        return count;
      }, set count(v2) {
        count = v2;
      }, typeWriter, startStreaming, onHackedMessageID, observeHeightChanged, clearTimer, closeImage, onPreClicked };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$z(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("div", null, [
      vue$1.createElementVNode("div", { class: "message-stream" }, [
        $setup.isCursorBlinking ? (vue$1.openBlock(), vue$1.createElementBlock("span", {
          key: 0,
          class: "blinking-cursor"
        }, "|")) : vue$1.createCommentVNode("v-if", true),
        vue$1.createElementVNode("pre", {
          ref: "preRef",
          class: vue$1.normalizeClass(["message-marked"]),
          innerHTML: $setup.displayedContent,
          onClick: $setup.onPreClicked
        }, null, 8, ["innerHTML"])
      ]),
      $setup.image ? (vue$1.openBlock(), vue$1.createElementBlock("div", {
        key: 0,
        class: "markdown-image-previewer",
        onClick: $setup.closeImage
      }, [
        vue$1.createElementVNode("img", {
          class: "markdown-image",
          src: $setup.imageSrc
        }, null, 8, ["src"])
      ])) : vue$1.createCommentVNode("v-if", true)
    ]);
  }
  const MessageStream = /* @__PURE__ */ _export_sfc(_sfc_main$A, [["render", _sfc_render$z], ["__scopeId", "data-v-e9ed9752"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-desk/message-desk-elements/message-stream.vue"]]);
  const _sfc_main$z = {
    props: {
      payload: {
        type: Object,
        default: () => ({ content: { header: "", items: [] }, status: 0 })
      }
    },
    emits: ["input-click"],
    setup(props, { emit }) {
      let isClicked = false;
      const listItemClick = (branch) => {
        if (!branch.content) {
          return;
        }
        emit("input-click", branch);
        isClicked = true;
      };
      return {
        props,
        isClicked,
        listItemClick,
        isPC,
        TUITranslateService: Wt
      };
    }
  };
  function _sfc_render$y(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("div", { class: "form-branch-container" }, [
      $setup.props.payload.content.header ? (vue$1.openBlock(), vue$1.createElementBlock(
        "div",
        {
          key: 0,
          class: vue$1.normalizeClass(["card-title-container", $setup.isPC ? "card-title" : "card-title-h5"])
        },
        vue$1.toDisplayString($setup.props.payload.content.header),
        3
        /* TEXT, CLASS */
      )) : vue$1.createCommentVNode("v-if", true),
      $setup.props.payload.status == 0 && !$setup.isClicked ? (vue$1.openBlock(true), vue$1.createElementBlock(
        vue$1.Fragment,
        { key: 1 },
        vue$1.renderList($setup.props.payload.content.items, (item, index) => {
          return vue$1.openBlock(), vue$1.createElementBlock("div", {
            key: index,
            class: vue$1.normalizeClass(["form-branch-item", item.content ? "" : "warning-item"]),
            onClick: ($event) => $setup.listItemClick(item)
          }, vue$1.toDisplayString(item.content || $setup.TUITranslateService.t("AIDesk.分支选项异常")), 11, ["onClick"]);
        }),
        128
        /* KEYED_FRAGMENT */
      )) : vue$1.createCommentVNode("v-if", true)
    ]);
  }
  const BranchPc = /* @__PURE__ */ _export_sfc(_sfc_main$z, [["render", _sfc_render$y], ["__scopeId", "data-v-4601e268"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-desk/message-desk-elements/message-multi-branch/branch-pc.vue"]]);
  const { computed: computed$4 } = vue;
  const _sfc_main$y = {
    components: {
      BranchPc
    },
    props: {
      payload: {
        type: Object,
        default: () => ({})
      }
    },
    emits: ["sendMessage", "heightChanged"],
    setup(props, { emit }) {
      const payload = computed$4(() => {
        return props.payload;
      });
      const handleContentListItemClick = (branch) => {
        emit("sendMessage", { text: branch.content });
      };
      const handleFormSaveInputSubmit = (text) => {
        emit("sendMessage", { text });
      };
      return {
        payload,
        handleContentListItemClick,
        handleFormSaveInputSubmit
      };
    },
    mounted() {
      this.$emit("heightChanged");
    }
  };
  function _sfc_render$x(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_BranchPc = vue$1.resolveComponent("BranchPc");
    return vue$1.openBlock(), vue$1.createElementBlock("div", { class: "message-form" }, [
      vue$1.createVNode(_component_BranchPc, {
        payload: $setup.payload,
        onInputClick: $setup.handleContentListItemClick
      }, null, 8, ["payload", "onInputClick"])
    ]);
  }
  const MessageMultiBranch = /* @__PURE__ */ _export_sfc(_sfc_main$y, [["render", _sfc_render$x], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-desk/message-desk-elements/message-multi-branch/index.vue"]]);
  const iconFormFilled = "/assets/icon_form_filled.97201783.png";
  const iconClose = "/assets/dialog-close.263c1aa9.png";
  const _sfc_main$x = {
    props: {
      name: {
        type: String,
        default: ""
      },
      isRequired: {
        type: Number,
        default: 0
      }
    },
    setup(props) {
    }
  };
  function _sfc_render$w(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("div", { class: "form-label" }, [
      vue$1.createTextVNode(
        vue$1.toDisplayString($props.name) + " ",
        1
        /* TEXT */
      ),
      $props.isRequired ? (vue$1.openBlock(), vue$1.createElementBlock("div", {
        key: 0,
        style: { "color": "red" }
      }, "  * ")) : vue$1.createCommentVNode("v-if", true)
    ]);
  }
  const LabelMobile = /* @__PURE__ */ _export_sfc(_sfc_main$x, [["render", _sfc_render$w], ["__scopeId", "data-v-5e9e35d5"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-desk/message-desk-elements/message-multi-form/component-mobile/label-mobile.vue"]]);
  const { computed: computed$3, ref: ref$3 } = vue;
  const _sfc_main$w = {
    components: {
      LabelMobile
    },
    props: {
      placeholder: {
        type: String,
        default: ""
      },
      variableValue: {
        type: String,
        default: ""
      },
      name: {
        type: String,
        default: ""
      },
      isRequired: {
        type: Number,
        default: 0
      },
      nodeStatus: {
        type: Number,
        default: 0
      },
      validator: {
        type: Boolean,
        default: false
      }
    },
    emits: ["input-change"],
    setup(props, { emit }) {
      const text = ref$3("");
      if (props.variableValue.length != 0) {
        text.value = props.variableValue;
      }
      const onInputChanged = () => {
        emit("input-change", { name: props.name, value: text.value });
      };
      return {
        text,
        onInputChanged,
        props,
        TUITranslateService: Wt
      };
    }
  };
  function _sfc_render$v(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_LabelMobile = vue$1.resolveComponent("LabelMobile");
    return vue$1.openBlock(), vue$1.createElementBlock("div", { class: "form-input-box-mobile" }, [
      vue$1.createVNode(_component_LabelMobile, {
        name: $props.name,
        "is-required": $props.isRequired
      }, null, 8, ["name", "is-required"]),
      vue$1.createElementVNode("div", { class: "form-input-line" }, [
        vue$1.withDirectives(vue$1.createElementVNode("input", {
          class: "form-input-mobile",
          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $setup.text = $event),
          placeholder: $props.placeholder,
          onInput: _cache[1] || (_cache[1] = (...args) => $setup.onInputChanged && $setup.onInputChanged(...args))
        }, null, 40, ["placeholder"]), [
          [vue$1.vModelText, $setup.text]
        ]),
        $props.validator ? (vue$1.openBlock(), vue$1.createElementBlock(
          "div",
          {
            key: 0,
            class: "validator-line"
          },
          vue$1.toDisplayString($setup.TUITranslateService.t("AIDesk.请填写必填项")),
          1
          /* TEXT */
        )) : vue$1.createCommentVNode("v-if", true)
      ])
    ]);
  }
  const InputMobile = /* @__PURE__ */ _export_sfc(_sfc_main$w, [["render", _sfc_render$v], ["__scopeId", "data-v-087c925c"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-desk/message-desk-elements/message-multi-form/component-mobile/input-mobile.vue"]]);
  const radioUncheckIcon = "/assets/radio-uncheck.91f8c900.png";
  const radioCheckIcon = "/assets/radio-check.4ea41c38.png";
  const { ref: ref$2 } = vue;
  const _sfc_main$v = {
    components: {
      Label: LabelMobile,
      Icon
    },
    props: {
      chooseItemList: {
        type: Array,
        default: []
      },
      name: {
        type: String,
        default: ""
      },
      isRequired: {
        type: Number,
        default: 0
      },
      validator: {
        type: Boolean,
        default: false
      }
    },
    emits: ["input-change"],
    setup(props, { emit }) {
      const selectedOption = ref$2("");
      const checkedIcon = ref$2("");
      const changeSelectedIcon = (name) => {
        if (selectedOption.value === name)
          return radioCheckIcon;
        else
          return radioUncheckIcon;
      };
      const clickItem = (index) => {
        selectedOption.value = props.chooseItemList[index];
        emit("input-change", { name: props.name, value: selectedOption.value });
      };
      const onInputChanged = () => {
        emit("input-change", { name: props.name, value: selectedOption.value });
      };
      return {
        onInputChanged,
        selectedOption,
        clickItem,
        isUniFrameWork,
        radioUncheckIcon,
        radioCheckIcon,
        changeSelectedIcon,
        checkedIcon,
        TUITranslateService: Wt
      };
    }
  };
  function _sfc_render$u(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_Label = vue$1.resolveComponent("Label");
    return vue$1.openBlock(), vue$1.createElementBlock("div", { class: "label-container" }, [
      vue$1.createElementVNode("div", null, [
        vue$1.createVNode(_component_Label, {
          name: $props.name,
          "is-required": $props.isRequired
        }, null, 8, ["name", "is-required"])
      ]),
      vue$1.createElementVNode("div", { class: "radio-container" }, [
        $props.validator ? (vue$1.openBlock(), vue$1.createElementBlock(
          "div",
          {
            key: 0,
            class: "validator-line"
          },
          vue$1.toDisplayString($setup.TUITranslateService.t("AIDesk.请填写必填项")),
          1
          /* TEXT */
        )) : vue$1.createCommentVNode("v-if", true),
        (vue$1.openBlock(true), vue$1.createElementBlock(
          vue$1.Fragment,
          null,
          vue$1.renderList($props.chooseItemList, (item, index) => {
            return vue$1.openBlock(), vue$1.createElementBlock("div", {
              class: "form-radio-box-mobile",
              key: index
            }, [
              vue$1.createElementVNode("div", {
                class: "radio-container-uni",
                onClick: ($event) => $setup.clickItem(index)
              }, [
                vue$1.createElementVNode("div", { class: "radio-icon-uni" }, [
                  $setup.isUniFrameWork ? (vue$1.openBlock(), vue$1.createElementBlock("div", { key: 0 }, [
                    vue$1.createElementVNode("image", {
                      src: $setup.changeSelectedIcon(item),
                      alt: "",
                      style: { "width": "20px", "height": "20px", "vertical-align": "middle" }
                    }, null, 8, ["src"])
                  ])) : (vue$1.openBlock(), vue$1.createElementBlock("div", { key: 1 }, [
                    vue$1.createElementVNode("img", {
                      src: $setup.changeSelectedIcon(item),
                      alt: "",
                      style: { "width": "20px", "height": "20px", "vertical-align": "middle" }
                    }, null, 8, ["src"])
                  ]))
                ]),
                vue$1.createElementVNode(
                  "div",
                  { class: "radio-label-uni" },
                  vue$1.toDisplayString(item),
                  1
                  /* TEXT */
                )
              ], 8, ["onClick"])
            ]);
          }),
          128
          /* KEYED_FRAGMENT */
        ))
      ])
    ]);
  }
  const RadioMobile = /* @__PURE__ */ _export_sfc(_sfc_main$v, [["render", _sfc_render$u], ["__scopeId", "data-v-9955c410"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-desk/message-desk-elements/message-multi-form/component-mobile/radios-mobile.vue"]]);
  const _sfc_main$u = /* @__PURE__ */ vue$1.defineComponent({
    __name: "index",
    props: {
      // Whether to display the bottom pop-up dialog box
      show: {
        type: Boolean,
        default: false
      },
      // Whether a mask layer is required, the default is true
      modal: {
        type: Boolean,
        default: true
      },
      // Popup box content area height (excluding mask), default is fit-content
      height: {
        type: String,
        default: "fit-content"
      },
      // Whether the pop-up dialog box can be closed by clicking outside, the default is true
      // uniapp only supports closing the pop-up dialog box by clicking the mask
      closeByClickOutside: {
        type: Boolean,
        default: true
      },
      // The rounded angle of the top border corners is 0px by default, i.e. right angle by default
      borderRadius: {
        type: String,
        default: "0px"
      },
      title: {
        type: String,
        default: ""
      },
      // Whether to display the top close button, not displayed by default
      showHeaderCloseButton: {
        type: Boolean,
        default: false
      },
      // Whether to display the submit button at the bottom, not displayed by default
      showFooterSubmitButton: {
        type: Boolean,
        default: false
      },
      // Bottom submit button text, only valid when showFooterSubmitButton is true
      submitButtonContent: {
        type: String,
        default: () => Wt.t("确定")
      }
    },
    emits: ["onOpen", "onClose", "onSubmit"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const { ref: ref2, watch, nextTick } = vue;
      const props = __props;
      const emits = __emit;
      const dialogRef = ref2();
      watch(
        () => props.show,
        (newVal, oldVal) => {
          if (newVal === oldVal) {
            return;
          }
          switch (newVal) {
            case true:
              emits("onOpen", dialogRef);
              break;
            case false:
              emits("onClose", dialogRef);
              break;
          }
        }
      );
      const closeBottomPopup = () => {
        if (isUniFrameWork || isH5) {
          emits("onClose", dialogRef);
        }
      };
      const submit = () => {
        emits("onSubmit");
        closeBottomPopup();
      };
      const __returned__ = { ref: ref2, watch, nextTick, props, emits, dialogRef, closeBottomPopup, submit, get TUITranslateService() {
        return Wt;
      }, get isUniFrameWork() {
        return isUniFrameWork;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$t(_ctx, _cache, $props, $setup, $data, $options) {
    return $setup.props.show ? (vue$1.openBlock(), vue$1.createElementBlock("div", { key: 0 }, [
      vue$1.createElementVNode(
        "div",
        {
          class: vue$1.normalizeClass([
            "bottom-popup",
            $setup.isUniFrameWork && "bottom-popup-uni",
            "bottom-popup-h5",
            $setup.props.modal && "bottom-popup-modal"
          ]),
          onClick: $setup.closeBottomPopup
        },
        [
          vue$1.createElementVNode(
            "div",
            {
              ref: "dialogRef",
              class: vue$1.normalizeClass(["bottom-popup-main", "bottom-popup-h5-main"]),
              style: vue$1.normalizeStyle({
                height: $setup.props.height,
                borderTopLeftRadius: $setup.props.borderRadius,
                borderTopRightRadius: $setup.props.borderRadius
              }),
              onClick: _cache[0] || (_cache[0] = vue$1.withModifiers(() => {
              }, ["stop"]))
            },
            [
              $props.title || $props.showHeaderCloseButton ? (vue$1.openBlock(), vue$1.createElementBlock("div", {
                key: 0,
                class: "header"
              }, [
                $props.title ? (vue$1.openBlock(), vue$1.createElementBlock(
                  "div",
                  {
                    key: 0,
                    class: "header-title"
                  },
                  vue$1.toDisplayString($props.title),
                  1
                  /* TEXT */
                )) : vue$1.createCommentVNode("v-if", true),
                $props.showHeaderCloseButton ? (vue$1.openBlock(), vue$1.createElementBlock(
                  "div",
                  {
                    key: 1,
                    class: "header-close",
                    onClick: $setup.closeBottomPopup
                  },
                  vue$1.toDisplayString($setup.TUITranslateService.t("关闭")),
                  1
                  /* TEXT */
                )) : vue$1.createCommentVNode("v-if", true)
              ])) : vue$1.createCommentVNode("v-if", true),
              vue$1.renderSlot(_ctx.$slots, "default", {}, void 0, true),
              $props.showFooterSubmitButton ? (vue$1.openBlock(), vue$1.createElementBlock("div", {
                key: 1,
                class: "footer"
              }, [
                vue$1.createElementVNode(
                  "div",
                  {
                    class: "footer-submit",
                    onClick: $setup.submit
                  },
                  vue$1.toDisplayString($props.submitButtonContent),
                  1
                  /* TEXT */
                )
              ])) : vue$1.createCommentVNode("v-if", true)
            ],
            4
            /* STYLE */
          )
        ],
        2
        /* CLASS */
      )
    ])) : vue$1.createCommentVNode("v-if", true);
  }
  const BottomPopup = /* @__PURE__ */ _export_sfc(_sfc_main$u, [["render", _sfc_render$t], ["__scopeId", "data-v-376d9e0f"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/common/BottomPopup/index.vue"]]);
  const _sfc_main$t = /* @__PURE__ */ vue$1.defineComponent({
    __name: "form-popup",
    props: {
      show: { type: Boolean, required: true, default: false },
      title: { type: String, required: true, default: "" }
    },
    emits: ["onClose", "onSubmit"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const { withDefaults, defineProps, defineEmits } = vue;
      const props = __props;
      const emits = __emit;
      function onClose() {
        emits("onClose");
      }
      function onSubmit() {
        emits("onSubmit");
      }
      const __returned__ = { withDefaults, defineProps, defineEmits, props, emits, onClose, onSubmit, get BottomPopup() {
        return BottomPopup;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$s(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createBlock($setup["BottomPopup"], {
      class: "form-item-bottom-popup",
      show: $setup.props.show,
      title: $setup.props.title,
      borderRadius: "20px",
      onOnClose: $setup.onClose,
      onOnSubmit: $setup.onSubmit
    }, {
      default: vue$1.withCtx(() => [
        vue$1.renderSlot(_ctx.$slots, "default")
      ]),
      _: 3
      /* FORWARDED */
    }, 8, ["show", "title"]);
  }
  const FormPopup = /* @__PURE__ */ _export_sfc(_sfc_main$t, [["render", _sfc_render$s], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-desk/message-desk-elements/message-multi-form/component-mobile/form-popup.vue"]]);
  const { ref: ref$1, onMounted: onMounted$1, computed: computed$2 } = vue;
  const _sfc_main$s = {
    components: {
      Icon,
      InputMobile,
      RadioMobile,
      FormPopup,
      LabelMobile
    },
    props: {
      payload: {
        type: Object,
        default: () => ({})
      }
    },
    options: {
      styleIsolation: "apply-shared"
    },
    emits: ["sendMessage", "showFormPopup"],
    setup(props, { emit }) {
      const showDialog = ref$1(false);
      const mapValue = ref$1({});
      const isSubmit = ref$1(false);
      const finishSubmit = ref$1(false);
      const hasNullValue = ref$1(true);
      onMounted$1(() => {
        let inputVariables = props.payload.content.inputVariables ?? [];
        for (let i2 = 0; i2 < inputVariables.length; i2++) {
          const name = inputVariables[i2].name;
          const variableValue = inputVariables[i2].variableValue;
          mapValue.value[name] = variableValue;
        }
      });
      const clickShowDialog = () => {
        showDialog.value = true;
        emit("showFormPopup", true);
      };
      const closeDialog = () => {
        showDialog.value = false;
        emit("showFormPopup", false);
      };
      const checkValidator = (name) => {
        hasNullValue.value = false;
        if (isSubmit.value == true) {
          if (mapValue.value[name] == null || mapValue.value[name] == "") {
            hasNullValue.value = true;
            return true;
          }
        }
        return false;
      };
      const isValid = (name) => {
        return isSubmit.value && (mapValue.value[name] == null || mapValue.value[name] == "" || mapValue.value[name] == void 0);
      };
      const handleSendForm = (data) => {
        isSubmit.value = true;
        let list = props.payload.content.inputVariables;
        for (let i2 = 0; i2 < list.length; i2++) {
          let value = mapValue.value[list[i2].name];
          if (value != "" && value != null) {
            list[i2].variableValue = value;
          } else {
            if (list[i2].isRequired === 1 && checkValidator(list[i2].name)) {
              return;
            }
          }
        }
        const submitData = {
          data: JSON.stringify({
            src: CUSTOM_MESSAGE_SRC.MULTI_FORM,
            content: {
              inputVariables: list
            },
            customerServicePlugin: 0
          })
        };
        emit("sendMessage", submitData);
        finishSubmit.value = true;
        isSubmit.value = false;
      };
      const handleInputChange = ({ name, value }) => {
        mapValue.value[name] = value;
      };
      const showValue = (name, variableValue) => {
        if (variableValue != null && variableValue != "") {
          return variableValue;
        }
        return mapValue.value[name];
      };
      return {
        props,
        iconForm,
        iconFormFilled,
        showDialog,
        clickShowDialog,
        iconClose,
        checkValidator,
        finishSubmit,
        showValue,
        mapValue,
        isSubmit,
        handleInputChange,
        handleSendForm,
        closeDialog,
        isValid,
        TUITranslateService: Wt
      };
    }
  };
  function _sfc_render$r(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_Icon = vue$1.resolveComponent("Icon");
    const _component_InputMobile = vue$1.resolveComponent("InputMobile");
    const _component_RadioMobile = vue$1.resolveComponent("RadioMobile");
    const _component_FormPopup = vue$1.resolveComponent("FormPopup");
    return vue$1.openBlock(), vue$1.createElementBlock("div", null, [
      !$setup.finishSubmit && $setup.props.payload.nodeStatus == 0 ? (vue$1.openBlock(), vue$1.createElementBlock("div", {
        key: 0,
        class: "before-form"
      }, [
        vue$1.createVNode(_component_Icon, {
          src: $setup.iconForm,
          width: "60px",
          height: "60px",
          style: { "margin": "5px 4px" }
        }, null, 8, ["src"]),
        vue$1.createElementVNode(
          "div",
          {
            class: "form-button",
            onClick: _cache[0] || (_cache[0] = (...args) => $setup.clickShowDialog && $setup.clickShowDialog(...args))
          },
          vue$1.toDisplayString($setup.TUITranslateService.t("AIDesk.立即填写")),
          1
          /* TEXT */
        )
      ])) : vue$1.createCommentVNode("v-if", true),
      vue$1.createElementVNode("div", { class: "edit-form" }, [
        vue$1.createElementVNode("div", { class: "edit-form-item" }, [
          vue$1.createVNode(_component_FormPopup, {
            class: "form-item",
            show: $setup.showDialog,
            showHeaderCloseButton: false,
            onOnClose: $setup.closeDialog,
            title: ""
          }, {
            default: vue$1.withCtx(() => [
              vue$1.createElementVNode("div", { style: { "height": "100%", "overflow-y": "auto" } }, [
                vue$1.createElementVNode("div", { class: "dialog-title" }, [
                  vue$1.createElementVNode(
                    "div",
                    null,
                    vue$1.toDisplayString($setup.props.payload.content.tip),
                    1
                    /* TEXT */
                  ),
                  vue$1.createElementVNode("div", {
                    onClick: _cache[1] || (_cache[1] = (...args) => $setup.closeDialog && $setup.closeDialog(...args))
                  }, [
                    vue$1.createVNode(_component_Icon, {
                      src: $setup.iconClose,
                      width: "16px",
                      height: "16px"
                    }, null, 8, ["src"])
                  ])
                ]),
                (vue$1.openBlock(true), vue$1.createElementBlock(
                  vue$1.Fragment,
                  null,
                  vue$1.renderList($setup.props.payload.content.inputVariables, (item, index) => {
                    return vue$1.openBlock(), vue$1.createElementBlock("div", { key: index }, [
                      !$setup.finishSubmit && item.formType == 0 && $setup.props.payload.nodeStatus == 0 ? (vue$1.openBlock(), vue$1.createElementBlock("div", { key: 0 }, [
                        vue$1.createVNode(_component_InputMobile, {
                          placeholder: item.placeholder,
                          variableValue: item.variableValue,
                          name: item.name,
                          isRequired: item.isRequired,
                          onInputChange: $setup.handleInputChange,
                          validator: item.isRequired == 1 && $setup.isValid(item.name)
                        }, null, 8, ["placeholder", "variableValue", "name", "isRequired", "onInputChange", "validator"])
                      ])) : !$setup.finishSubmit && item.formType == 1 && $setup.props.payload.nodeStatus == 0 ? (vue$1.openBlock(), vue$1.createElementBlock("div", { key: 1 }, [
                        vue$1.createVNode(_component_RadioMobile, {
                          chooseItemList: item.chooseItemList,
                          name: item.name,
                          isRequired: item.isRequired,
                          onInputChange: $setup.handleInputChange,
                          validator: item.isRequired == 1 && $setup.isValid(item.name)
                        }, null, 8, ["chooseItemList", "name", "isRequired", "onInputChange", "validator"])
                      ])) : (vue$1.openBlock(), vue$1.createElementBlock("div", {
                        key: 2,
                        class: "variable-value-container-mobile"
                      }, [
                        vue$1.createElementVNode(
                          "div",
                          { style: { "width": "70px" } },
                          vue$1.toDisplayString(item.name),
                          1
                          /* TEXT */
                        ),
                        vue$1.createElementVNode(
                          "div",
                          null,
                          vue$1.toDisplayString(item.variableValue == "" || item.variableValue == null ? $setup.mapValue[item.name] : item.variableValue),
                          1
                          /* TEXT */
                        )
                      ]))
                    ]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                )),
                !$setup.finishSubmit && $setup.props.payload.nodeStatus == 0 ? (vue$1.openBlock(), vue$1.createElementBlock("div", {
                  key: 0,
                  class: "button-container"
                }, [
                  vue$1.createElementVNode(
                    "div",
                    {
                      class: "button",
                      onClick: _cache[2] || (_cache[2] = (...args) => $setup.handleSendForm && $setup.handleSendForm(...args))
                    },
                    vue$1.toDisplayString($setup.TUITranslateService.t("AIDesk.提交")),
                    1
                    /* TEXT */
                  )
                ])) : vue$1.createCommentVNode("v-if", true)
              ])
            ]),
            _: 1
            /* STABLE */
          }, 8, ["show", "onOnClose"])
        ])
      ]),
      $setup.finishSubmit || $setup.props.payload.nodeStatus != 0 ? (vue$1.openBlock(), vue$1.createElementBlock("div", {
        key: 1,
        class: "before-form"
      }, [
        vue$1.createElementVNode("div", { class: "icon-container" }, [
          vue$1.createVNode(_component_Icon, {
            class: "form-icon",
            src: $setup.iconForm,
            width: "60px",
            height: "60px",
            style: { "margin": "5px 4px" }
          }, null, 8, ["src"]),
          $setup.finishSubmit || $setup.props.payload.nodeStatus == 2 ? (vue$1.openBlock(), vue$1.createBlock(_component_Icon, {
            key: 0,
            class: "form-icon-check",
            width: "26px",
            height: "26px",
            src: $setup.iconFormFilled
          }, null, 8, ["src"])) : vue$1.createCommentVNode("v-if", true)
        ]),
        vue$1.createElementVNode(
          "div",
          {
            class: "form-button",
            onClick: _cache[3] || (_cache[3] = (...args) => $setup.clickShowDialog && $setup.clickShowDialog(...args))
          },
          vue$1.toDisplayString($setup.TUITranslateService.t("AIDesk.查看内容")),
          1
          /* TEXT */
        )
      ])) : vue$1.createCommentVNode("v-if", true)
    ]);
  }
  const FormMobile = /* @__PURE__ */ _export_sfc(_sfc_main$s, [["render", _sfc_render$r], ["__scopeId", "data-v-44acee17"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-desk/message-desk-elements/message-multi-form/form-mobile.vue"]]);
  const { computed: computed$1 } = vue;
  const _sfc_main$r = {
    components: {
      FormMobile
    },
    props: {
      payload: {
        type: Object,
        default: () => ({})
      }
    },
    emits: ["sendMessage", "showFormPopup"],
    setup(props, { emit }) {
      const payloads = computed$1(() => {
        return props.payload;
      });
      const handleSendForm = (data) => {
        emit("sendMessage", data);
      };
      const handleShowFormPopup = (data) => {
        emit("showFormPopup", data);
      };
      return {
        payloads,
        handleSendForm,
        handleShowFormPopup
      };
    }
  };
  function _sfc_render$q(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_FormMobile = vue$1.resolveComponent("FormMobile");
    return vue$1.openBlock(), vue$1.createElementBlock("div", null, [
      vue$1.createVNode(_component_FormMobile, {
        payload: $setup.payloads,
        onSendMessage: $setup.handleSendForm,
        onShowFormPopup: $setup.handleShowFormPopup
      }, null, 8, ["payload", "onSendMessage", "onShowFormPopup"])
    ]);
  }
  const MessageMultiForm = /* @__PURE__ */ _export_sfc(_sfc_main$r, [["render", _sfc_render$q], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-desk/message-desk-elements/message-multi-form/index.vue"]]);
  const _sfc_main$q = /* @__PURE__ */ vue$1.defineComponent({
    __name: "message-concurrency-limit",
    setup(__props, { expose: __expose }) {
      __expose();
      const __returned__ = { get TUITranslateService() {
        return Wt;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$p(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("div", {
      class: vue$1.normalizeClass(["message-text-container"])
    }, [
      vue$1.createElementVNode(
        "span",
        { class: "text" },
        vue$1.toDisplayString($setup.TUITranslateService.t("AIDesk.并发限制")),
        1
        /* TEXT */
      )
    ]);
  }
  const MessageConcurrencyLimit = /* @__PURE__ */ _export_sfc(_sfc_main$q, [["render", _sfc_render$p], ["__scopeId", "data-v-2410f128"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-desk/message-desk-elements/message-concurrency-limit.vue"]]);
  const _sfc_main$p = {
    props: {
      payload: {
        type: Object,
        default: () => ({})
      }
    },
    setup(props) {
      return {
        props
      };
    }
  };
  function _sfc_render$o(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("div", { class: "message-order" }, [
      vue$1.createElementVNode(
        "div",
        { class: "order-guide" },
        vue$1.toDisplayString($setup.props.payload.content.guide),
        1
        /* TEXT */
      ),
      vue$1.createElementVNode("div", { class: "order-main" }, [
        $setup.props.payload.content.pic ? (vue$1.openBlock(), vue$1.createElementBlock("img", {
          key: 0,
          class: "order-img",
          src: $setup.props.payload.content.pic
        }, null, 8, ["src"])) : vue$1.createCommentVNode("v-if", true),
        vue$1.createElementVNode("div", { class: "order-information" }, [
          vue$1.createElementVNode(
            "div",
            { class: "order-name" },
            vue$1.toDisplayString($setup.props.payload.content.name),
            1
            /* TEXT */
          ),
          vue$1.createElementVNode(
            "div",
            { class: "order-description" },
            vue$1.toDisplayString($setup.props.payload.content.desc),
            1
            /* TEXT */
          )
        ])
      ]),
      (vue$1.openBlock(true), vue$1.createElementBlock(
        vue$1.Fragment,
        null,
        vue$1.renderList($setup.props.payload.content.customField, (item) => {
          return vue$1.openBlock(), vue$1.createElementBlock("div", { class: "order-custom" }, [
            vue$1.createElementVNode("div", { class: "order-field" }, [
              vue$1.createElementVNode(
                "span",
                { class: "field-name" },
                vue$1.toDisplayString(item.name),
                1
                /* TEXT */
              ),
              vue$1.createElementVNode(
                "span",
                { class: "field-value" },
                vue$1.toDisplayString(item.value),
                1
                /* TEXT */
              ),
              vue$1.createElementVNode(
                "span",
                { class: "field-customer-value" },
                vue$1.toDisplayString(item.customerValue),
                1
                /* TEXT */
              )
            ])
          ]);
        }),
        256
        /* UNKEYED_FRAGMENT */
      ))
    ]);
  }
  const MessageOrder = /* @__PURE__ */ _export_sfc(_sfc_main$p, [["render", _sfc_render$o], ["__scopeId", "data-v-f6227dc8"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-desk/message-desk-elements/message-order.vue"]]);
  const { computed } = vue;
  const _sfc_main$o = {
    components: {
      MessageConcurrencyLimit,
      MessageBranch,
      MessageForm,
      MessageProductCard,
      MessageRichText,
      MessageIMRobotWelcome,
      MessageStream,
      MessageMultiBranch,
      MessageMultiForm,
      MessageRating,
      MessageOrder
    },
    props: {
      message: {
        type: Object,
        default: () => ({})
      }
    },
    emits: ["showFormPopup", "heightChanged"],
    setup(props, { emit }) {
      const payload = computed(() => {
        var _a2, _b2;
        return props.message && JSONToObject((_b2 = (_a2 = props.message) == null ? void 0 : _a2.payload) == null ? void 0 : _b2.data);
      });
      const messageID = computed(() => {
        return props.message.ID;
      });
      const sendTextMessage = (payload2) => {
        Qt.sendTextMessage({ payload: payload2 });
      };
      const sendCustomMessage = (payload2) => {
        Qt.sendCustomMessage({ payload: payload2 });
      };
      const handleShowFormPopup = (data) => {
        emit("showFormPopup", data);
      };
      const onHeightChanged = () => {
        emit("heightChanged");
      };
      return {
        payload,
        messageID,
        props,
        sendTextMessage,
        CUSTOM_MESSAGE_SRC,
        sendCustomMessage,
        handleShowFormPopup,
        onHeightChanged
      };
    }
  };
  function _sfc_render$n(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_MessageBranch = vue$1.resolveComponent("MessageBranch");
    const _component_MessageIMRobotWelcome = vue$1.resolveComponent("MessageIMRobotWelcome");
    const _component_MessageForm = vue$1.resolveComponent("MessageForm");
    const _component_MessageProductCard = vue$1.resolveComponent("MessageProductCard");
    const _component_MessageRichText = vue$1.resolveComponent("MessageRichText");
    const _component_MessageStream = vue$1.resolveComponent("MessageStream");
    const _component_MessageMultiBranch = vue$1.resolveComponent("MessageMultiBranch");
    const _component_MessageMultiForm = vue$1.resolveComponent("MessageMultiForm");
    const _component_MessageRating = vue$1.resolveComponent("MessageRating");
    const _component_MessageConcurrencyLimit = vue$1.resolveComponent("MessageConcurrencyLimit");
    const _component_MessageOrder = vue$1.resolveComponent("MessageOrder");
    return vue$1.openBlock(), vue$1.createElementBlock("div", { class: "message-custom" }, [
      vue$1.createElementVNode("div", { class: "custom" }, [
        $setup.payload.src === $setup.CUSTOM_MESSAGE_SRC.BRANCH || $setup.payload.src === $setup.CUSTOM_MESSAGE_SRC.BRANCH_NUMBER || $setup.payload.src === $setup.CUSTOM_MESSAGE_SRC.ROBOT_MSG && $setup.payload.subtype !== "welcome_msg" ? (vue$1.openBlock(), vue$1.createElementBlock("div", { key: 0 }, [
          vue$1.createVNode(_component_MessageBranch, {
            payload: $setup.payload,
            onSendMessage: $setup.sendTextMessage,
            onHeightChanged: $setup.onHeightChanged
          }, null, 8, ["payload", "onSendMessage", "onHeightChanged"])
        ])) : vue$1.createCommentVNode("v-if", true),
        $setup.payload.src === $setup.CUSTOM_MESSAGE_SRC.ROBOT_MSG ? (vue$1.openBlock(), vue$1.createElementBlock("div", { key: 1 }, [
          vue$1.createVNode(_component_MessageIMRobotWelcome, {
            payload: $setup.payload,
            onSendMessage: $setup.sendTextMessage
          }, null, 8, ["payload", "onSendMessage"])
        ])) : vue$1.createCommentVNode("v-if", true),
        $setup.payload.src === $setup.CUSTOM_MESSAGE_SRC.FROM_INPUT ? (vue$1.openBlock(), vue$1.createElementBlock("div", { key: 2 }, [
          vue$1.createVNode(_component_MessageForm, {
            payload: $setup.payload,
            onSendMessage: $setup.sendTextMessage
          }, null, 8, ["payload", "onSendMessage"])
        ])) : vue$1.createCommentVNode("v-if", true),
        $setup.payload.src === $setup.CUSTOM_MESSAGE_SRC.PRODUCT_CARD ? (vue$1.openBlock(), vue$1.createElementBlock("div", { key: 3 }, [
          vue$1.createVNode(_component_MessageProductCard, { payload: $setup.payload }, null, 8, ["payload"])
        ])) : vue$1.createCommentVNode("v-if", true),
        $setup.payload.src === $setup.CUSTOM_MESSAGE_SRC.RICH_TEXT ? (vue$1.openBlock(), vue$1.createElementBlock("div", { key: 4 }, [
          vue$1.createVNode(_component_MessageRichText, { payload: $setup.payload }, null, 8, ["payload"])
        ])) : vue$1.createCommentVNode("v-if", true),
        $setup.payload.src === $setup.CUSTOM_MESSAGE_SRC.STREAM_TEXT ? (vue$1.openBlock(), vue$1.createElementBlock("div", { key: 5 }, [
          vue$1.createVNode(_component_MessageStream, {
            payload: $setup.payload,
            messageID: $setup.messageID,
            onHeightChanged: $setup.onHeightChanged
          }, null, 8, ["payload", "messageID", "onHeightChanged"])
        ])) : vue$1.createCommentVNode("v-if", true),
        $setup.payload.src === $setup.CUSTOM_MESSAGE_SRC.MULTI_BRANCH ? (vue$1.openBlock(), vue$1.createElementBlock("div", { key: 6 }, [
          vue$1.createVNode(_component_MessageMultiBranch, {
            payload: $setup.payload,
            onSendMessage: $setup.sendTextMessage,
            onHeightChanged: $setup.onHeightChanged
          }, null, 8, ["payload", "onSendMessage", "onHeightChanged"])
        ])) : vue$1.createCommentVNode("v-if", true),
        $setup.payload.src === $setup.CUSTOM_MESSAGE_SRC.MULTI_FORM && $props.message.flow == "in" ? (vue$1.openBlock(), vue$1.createElementBlock("div", { key: 7 }, [
          vue$1.createVNode(_component_MessageMultiForm, {
            payload: $setup.payload,
            onSendMessage: $setup.sendCustomMessage,
            onShowFormPopup: $setup.handleShowFormPopup
          }, null, 8, ["payload", "onSendMessage", "onShowFormPopup"])
        ])) : vue$1.createCommentVNode("v-if", true),
        $setup.payload.src === $setup.CUSTOM_MESSAGE_SRC.MENU ? (vue$1.openBlock(), vue$1.createElementBlock("div", { key: 8 }, [
          vue$1.createVNode(_component_MessageRating, {
            message: $setup.props.message,
            onSendMessage: $setup.sendCustomMessage
          }, null, 8, ["message", "onSendMessage"])
        ])) : vue$1.createCommentVNode("v-if", true),
        $setup.payload.src === $setup.CUSTOM_MESSAGE_SRC.CONCURRENCY_LIMIT ? (vue$1.openBlock(), vue$1.createElementBlock("div", { key: 9 }, [
          vue$1.createVNode(_component_MessageConcurrencyLimit)
        ])) : vue$1.createCommentVNode("v-if", true),
        $setup.payload.src === $setup.CUSTOM_MESSAGE_SRC.ORDER ? (vue$1.openBlock(), vue$1.createElementBlock("div", { key: 10 }, [
          vue$1.createVNode(_component_MessageOrder, { payload: $setup.payload }, null, 8, ["payload"])
        ])) : vue$1.createCommentVNode("v-if", true)
      ])
    ]);
  }
  const MessageCustomerService = /* @__PURE__ */ _export_sfc(_sfc_main$o, [["render", _sfc_render$n], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-desk/message-desk-elements/message-desk.vue"]]);
  const _sfc_main$n = /* @__PURE__ */ vue$1.defineComponent({
    __name: "message-plugin-uniapp",
    props: {
      message: { type: Object, required: true, default: () => ({}) },
      blinkMessageIDList: { type: Array, required: false, default: () => [] }
    },
    emits: [
      "resendMessage",
      "handleToggleMessageItem",
      "handleH5LongPress",
      "showFormPopup",
      "heightChanged"
    ],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const { computed: computed2 } = vue;
      const props = __props;
      const emits = __emit;
      const messageModel = computed2(() => Jt.getMessageModel(props.message.ID));
      const pluginMessageType = computed2(
        () => {
          if (needHackForStreamText(messageModel.value.payload.data)) {
            Jt.update(o$2.CUSTOM, "hackedMessageID", props.message.ID);
          }
          let typeObj = { pluginType: "", showStyle: "" };
          if (isCustomerServicePluginMessage(messageModel.value)) {
            typeObj = {
              pluginType: "customer",
              showStyle: isMessageInvisible(messageModel.value) ? "" : "bubble"
            };
          }
          return typeObj;
        }
      );
      const resendMessage = (message) => {
        emits("resendMessage", message);
      };
      const handleToggleMessageItem = (e2, message, isLongpress = false) => {
        emits("handleToggleMessageItem", e2, message, isLongpress);
      };
      const handleH5LongPress = (e2, message, type) => {
        emits("handleH5LongPress", e2, message, type);
      };
      const handleShowFormPopup = (data) => {
        emits("showFormPopup", data);
      };
      const onHeightChanged = () => {
        emits("heightChanged");
      };
      const __returned__ = { computed: computed2, props, emits, messageModel, pluginMessageType, resendMessage, handleToggleMessageItem, handleH5LongPress, handleShowFormPopup, onHeightChanged, MessagePluginLayout, MessageCustomerService };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$m(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createBlock($setup["MessagePluginLayout"], {
      message: $setup.props.message,
      showStyle: $setup.pluginMessageType.showStyle,
      bubbleClassNameList: [
        $setup.pluginMessageType.pluginType === "room" ? "message-bubble-room" : ""
      ],
      onResendMessage: $setup.resendMessage,
      onHandleToggleMessageItem: $setup.handleToggleMessageItem,
      onHandleH5LongPress: $setup.handleH5LongPress
    }, {
      messageBubble: vue$1.withCtx(() => [
        $setup.pluginMessageType.pluginType === "customer" ? (vue$1.openBlock(), vue$1.createBlock($setup["MessageCustomerService"], {
          key: 0,
          message: $setup.props.message,
          onShowFormPopup: $setup.handleShowFormPopup,
          onHeightChanged: $setup.onHeightChanged
        }, null, 8, ["message"])) : vue$1.createCommentVNode("v-if", true)
      ]),
      _: 1
      /* STABLE */
    }, 8, ["message", "showStyle", "bubbleClassNameList"]);
  }
  const MessagePlugin = /* @__PURE__ */ _export_sfc(_sfc_main$n, [["render", _sfc_render$m], ["__scopeId", "data-v-78c548cc"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-desk/message-plugin-uniapp.vue"]]);
  const loading_message = "/assets/loading_message.5533086c.svg";
  const { ref, watchEffect, onMounted, onUnmounted } = vue;
  const _sfc_main$m = {
    components: {
      Icon: Icon$1
    },
    setup() {
      const icons = ref([false, false, false]);
      const index = ref(0);
      let intervalId;
      onMounted(() => {
        intervalId = setInterval(() => {
          if (index.value < icons.value.length) {
            icons.value = icons.value.map((v2, i2) => i2 === index.value ? true : v2);
            index.value += 1;
          } else {
            icons.value = icons.value.map(() => false);
            index.value = 0;
          }
        }, 500);
      });
      onUnmounted(() => {
        intervalId && clearInterval(intervalId);
        intervalId = null;
      });
      return { icons, loading_message };
    }
  };
  function _sfc_render$l(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_Icon = vue$1.resolveComponent("Icon");
    return vue$1.openBlock(), vue$1.createElementBlock("div", { class: "message-thinking" }, [
      (vue$1.openBlock(true), vue$1.createElementBlock(
        vue$1.Fragment,
        null,
        vue$1.renderList($setup.icons, (icon, index) => {
          return vue$1.openBlock(), vue$1.createElementBlock("div", { key: index }, [
            icon ? (vue$1.openBlock(), vue$1.createBlock(_component_Icon, {
              key: 0,
              file: $setup.loading_message,
              width: "14px",
              height: "14px"
            }, null, 8, ["file"])) : vue$1.createCommentVNode("v-if", true)
          ]);
        }),
        128
        /* KEYED_FRAGMENT */
      ))
    ]);
  }
  const MessageThinking = /* @__PURE__ */ _export_sfc(_sfc_main$m, [["render", _sfc_render$l], ["__scopeId", "data-v-dd592a30"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-thinking.vue"]]);
  const doubleArrowIcon = "/assets/double-arrow.a1a15b8b.svg";
  const _sfc_main$l = /* @__PURE__ */ vue$1.defineComponent({
    __name: "index",
    emits: ["scrollToLatestMessage"],
    setup(__props, { expose: __expose, emit: __emit }) {
      const { ref: ref2, onMounted: onMounted2, onUnmounted: onUnmounted2, computed: computed2, watch } = vue;
      const emits = __emit;
      const messageList = ref2([]);
      const currentConversationID = ref2("");
      const currentLastMessageTime = ref2(0);
      const newMessageCount = ref2(0);
      const isScrollOverOneScreen = ref2(false);
      const isExistLastMessage = ref2(false);
      const isScrollButtonVisible = ref2(false);
      const scrollButtonContent = computed2(
        () => newMessageCount.value ? `${newMessageCount.value}${Wt.t("TUIChat.条新消息")}` : Wt.t("TUIChat.回到最新位置")
      );
      watch(
        () => [isScrollOverOneScreen.value, isExistLastMessage.value],
        () => {
          isScrollButtonVisible.value = isScrollOverOneScreen.value || isExistLastMessage.value;
          if (!isScrollButtonVisible.value) {
            resetNewMessageCount();
          }
        },
        { immediate: true }
      );
      onMounted2(() => {
        Jt.watch(o$2.CHAT, {
          messageList: onMessageListUpdated,
          newMessageList: onNewMessageListUpdated
        });
        Jt.watch(o$2.CONV, {
          currentConversation: onCurrentConversationUpdated
        });
      });
      onUnmounted2(() => {
        Jt.unwatch(o$2.CHAT, {
          messageList: onMessageListUpdated,
          newMessageList: onNewMessageListUpdated
        });
        Jt.unwatch(o$2.CONV, {
          currentConversation: onCurrentConversationUpdated
        });
      });
      function isTypingMessage(message) {
        var _a2, _b2;
        return ((_b2 = JSONToObject((_a2 = message.payload) == null ? void 0 : _a2.data)) == null ? void 0 : _b2.businessID) === "user_typing_status";
      }
      function onMessageListUpdated(newMessageList) {
        var _a2, _b2;
        messageList.value = newMessageList || [];
        const lastMessage = (_b2 = messageList.value) == null ? void 0 : _b2[((_a2 = messageList.value) == null ? void 0 : _a2.length) - 1];
        isExistLastMessage.value = !!// 过滤在线消息
        // @ts-ignore
        (lastMessage && !(lastMessage == null ? void 0 : lastMessage._message._onlineOnlyFlag) && (lastMessage == null ? void 0 : lastMessage.time) < (currentLastMessageTime == null ? void 0 : currentLastMessageTime.value));
      }
      function onNewMessageListUpdated(newMessageList) {
        if (Array.isArray(newMessageList) && isScrollButtonVisible.value) {
          newMessageList.forEach((message) => {
            if (message && message.conversationID === currentConversationID.value && !message.isDeleted && !message.isRevoked && !isTypingMessage(message) && !message._message._onlineOnlyFlag) {
              newMessageCount.value += 1;
            }
          });
        }
      }
      function onCurrentConversationUpdated(conversation) {
        var _a2;
        if ((conversation == null ? void 0 : conversation.conversationID) !== currentConversationID.value) {
          resetNewMessageCount();
        }
        currentConversationID.value = (conversation == null ? void 0 : conversation.conversationID) || "";
        currentLastMessageTime.value = ((_a2 = conversation == null ? void 0 : conversation.lastMessage) == null ? void 0 : _a2.lastTime) || 0;
      }
      async function judgeScrollOverOneScreen(e2) {
        var _a2, _b2, _c2, _d, _e2;
        if (e2.target) {
          try {
            const { height } = await T(
              `#${(_a2 = e2.target) == null ? void 0 : _a2.id}`,
              "messageList"
            ) || {};
            const scrollHeight = ((_b2 = e2.target) == null ? void 0 : _b2.scrollHeight) || ((_c2 = e2.detail) == null ? void 0 : _c2.scrollHeight);
            const scrollTop = ((_d = e2.target) == null ? void 0 : _d.scrollTop) || ((_e2 = e2.detail) == null ? void 0 : _e2.scrollTop) || 0;
            if (scrollHeight - scrollTop > 2 * height) {
              isScrollOverOneScreen.value = true;
              return;
            }
            isScrollOverOneScreen.value = false;
          } catch (error) {
            isScrollOverOneScreen.value = false;
          }
        }
      }
      function resetMessageSource() {
        if (Jt.getData(o$2.CHAT, "messageSource") !== void 0) {
          Jt.update(o$2.CHAT, "messageSource", void 0);
        }
      }
      function resetNewMessageCount() {
        newMessageCount.value = 0;
      }
      function scrollToMessageListBottom() {
        resetMessageSource();
        resetNewMessageCount();
        emits("scrollToLatestMessage");
      }
      function hideScrollButton() {
        if (isScrollButtonVisible.value) {
          isScrollButtonVisible.value = false;
          resetNewMessageCount();
        }
      }
      __expose({
        judgeScrollOverOneScreen,
        isScrollButtonVisible,
        hideScrollButton
      });
      const __returned__ = { ref: ref2, onMounted: onMounted2, onUnmounted: onUnmounted2, computed: computed2, watch, emits, messageList, currentConversationID, currentLastMessageTime, newMessageCount, isScrollOverOneScreen, isExistLastMessage, isScrollButtonVisible, scrollButtonContent, isTypingMessage, onMessageListUpdated, onNewMessageListUpdated, onCurrentConversationUpdated, judgeScrollOverOneScreen, resetMessageSource, resetNewMessageCount, scrollToMessageListBottom, hideScrollButton, Icon: Icon$1, get doubleArrowIcon() {
        return doubleArrowIcon;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$k(_ctx, _cache, $props, $setup, $data, $options) {
    return $setup.isScrollButtonVisible ? (vue$1.openBlock(), vue$1.createElementBlock("div", {
      key: 0,
      class: "scroll-button",
      onClick: $setup.scrollToMessageListBottom
    }, [
      vue$1.createVNode($setup["Icon"], {
        width: "10px",
        height: "10px",
        file: $setup.doubleArrowIcon
      }, null, 8, ["file"]),
      vue$1.createElementVNode(
        "div",
        { class: "scroll-button-text" },
        vue$1.toDisplayString($setup.scrollButtonContent),
        1
        /* TEXT */
      )
    ])) : vue$1.createCommentVNode("v-if", true);
  }
  const ScrollButton = /* @__PURE__ */ _export_sfc(_sfc_main$l, [["render", _sfc_render$k], ["__scopeId", "data-v-063c826e"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/scroll-button/index.vue"]]);
  function isPluginMessage(message) {
    return message.type === qt.TYPES.MSG_CUSTOM && isCustomerServicePluginMessage(message);
  }
  const _sfc_main$k = /* @__PURE__ */ vue$1.defineComponent({
    __name: "index",
    props: {
      show: {
        type: Boolean,
        default: false
      },
      isHeaderShow: {
        type: Boolean,
        default: true
      },
      isFooterShow: {
        type: Boolean,
        default: true
      },
      background: {
        type: Boolean,
        default: true
      },
      title: {
        type: String,
        default: ""
      },
      center: {
        type: Boolean,
        default: false
      }
    },
    emits: ["update:show", "submit"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const { ref: ref2, watchEffect: watchEffect2 } = vue;
      const clickType = {
        OUTSIDE: "outside",
        INSIDE: "inside"
      };
      const props = __props;
      const showDialog = ref2(false);
      const isHeaderShowDialog = ref2(true);
      const isFooterShowDialog = ref2(true);
      const backgroundDialog = ref2(true);
      const showTitle = ref2("");
      watchEffect2(() => {
        showDialog.value = props.show;
        showTitle.value = props.title;
        isHeaderShowDialog.value = props.isHeaderShow;
        isFooterShowDialog.value = props.isFooterShow;
        backgroundDialog.value = props.background;
      });
      const emit = __emit;
      const toggleView = (type) => {
        if (type === clickType.OUTSIDE) {
          close();
        }
      };
      const close = () => {
        showDialog.value = !showDialog.value;
        emit("update:show", showDialog.value);
      };
      const submit = () => {
        emit("submit");
        close();
      };
      const __returned__ = { ref: ref2, watchEffect: watchEffect2, clickType, props, showDialog, isHeaderShowDialog, isFooterShowDialog, backgroundDialog, showTitle, emit, toggleView, close, submit, get TUITranslateService() {
        return Wt;
      }, get isH5() {
        return isH5;
      }, get isUniFrameWork() {
        return isUniFrameWork;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$j(_ctx, _cache, $props, $setup, $data, $options) {
    return $setup.showDialog ? (vue$1.openBlock(), vue$1.createElementBlock(
      "div",
      {
        key: 0,
        class: vue$1.normalizeClass(["dialog", ["dialog-h5", $props.center ? "center" : ""]]),
        onClick: _cache[1] || (_cache[1] = vue$1.withModifiers(($event) => $setup.toggleView($setup.clickType.OUTSIDE), ["stop", "prevent"]))
      },
      [
        vue$1.createElementVNode(
          "main",
          {
            class: vue$1.normalizeClass(["dialog-main", [!$setup.backgroundDialog ? "dialog-main-back" : ""]]),
            onClick: _cache[0] || (_cache[0] = vue$1.withModifiers(($event) => $setup.toggleView($setup.clickType.INSIDE), ["stop", "prevent"]))
          },
          [
            $setup.isHeaderShowDialog ? (vue$1.openBlock(), vue$1.createElementBlock("header", {
              key: 0,
              class: "dialog-main-header"
            }, [
              vue$1.createElementVNode(
                "h1",
                { class: "dialog-main-title" },
                vue$1.toDisplayString($setup.showTitle),
                1
                /* TEXT */
              ),
              vue$1.createElementVNode("i", {
                class: "icon icon-close",
                onClick: $setup.close
              })
            ])) : vue$1.createCommentVNode("v-if", true),
            vue$1.createElementVNode(
              "div",
              {
                class: vue$1.normalizeClass(["dialog-main-content", [$setup.isUniFrameWork && $setup.isH5 ? "dialog-main-content-uniapp" : ""]])
              },
              [
                vue$1.renderSlot(_ctx.$slots, "default", {}, void 0, true)
              ],
              2
              /* CLASS */
            ),
            $setup.isFooterShowDialog ? (vue$1.openBlock(), vue$1.createElementBlock("footer", {
              key: 1,
              class: "dialog-main-footer"
            }, [
              vue$1.createElementVNode(
                "button",
                {
                  class: "btn btn-cancel",
                  onClick: $setup.close
                },
                vue$1.toDisplayString($setup.TUITranslateService.t("取消")),
                1
                /* TEXT */
              ),
              vue$1.createElementVNode(
                "button",
                {
                  class: "btn btn-default",
                  onClick: $setup.submit
                },
                vue$1.toDisplayString($setup.TUITranslateService.t("确定")),
                1
                /* TEXT */
              )
            ])) : vue$1.createCommentVNode("v-if", true)
          ],
          2
          /* CLASS */
        )
      ],
      2
      /* CLASS */
    )) : vue$1.createCommentVNode("v-if", true);
  }
  const Dialog = /* @__PURE__ */ _export_sfc(_sfc_main$k, [["render", _sfc_render$j], ["__scopeId", "data-v-0dcf8461"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/common/Dialog/index.vue"]]);
  const _sfc_main$j = /* @__PURE__ */ vue$1.defineComponent({
    __name: "index",
    props: {
      visible: { type: Boolean, required: false, default: true },
      zIndex: { type: null, required: false, default: 9999 },
      useMask: { type: Boolean, required: false, skipCheck: true, default: true },
      maskColor: { type: null, required: false, default: "rgba(0, 0, 0, 0.6)" },
      isFullScreen: { type: Boolean, required: false, skipCheck: true, default: true },
      width: { type: String, required: false, default: "auto" },
      height: { type: String, required: false, default: "auto" }
    },
    emits: ["onOverlayClick"],
    setup(__props, { expose: __expose, emit: __emit }) {
      const { ref: ref2, watch, withDefaults } = vue;
      const emits = __emit;
      const props = __props;
      const overlayDomRef = ref2();
      const isOverlayShow = ref2(props.visible);
      watch(
        () => props.visible,
        (visible) => {
          if (visible) {
            isOverlayShow.value = true;
          } else {
            setTimeout(() => {
              isOverlayShow.value = false;
            }, 150);
          }
        },
        {
          immediate: true
        }
      );
      function onOverlayClick() {
        emits("onOverlayClick");
      }
      __expose({
        overlayDomRef
      });
      const __returned__ = { ref: ref2, watch, withDefaults, emits, props, overlayDomRef, isOverlayShow, onOverlayClick };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$i(_ctx, _cache, $props, $setup, $data, $options) {
    return $setup.isOverlayShow ? (vue$1.openBlock(), vue$1.createElementBlock(
      "div",
      {
        key: 0,
        ref: "overlayDomRef",
        class: "overlay-container",
        style: vue$1.normalizeStyle({
          position: $setup.props.isFullScreen ? "fixed" : "absolute",
          zIndex: $setup.props.zIndex
        })
      },
      [
        $setup.props.useMask ? (vue$1.openBlock(), vue$1.createElementBlock(
          "div",
          {
            key: 0,
            class: vue$1.normalizeClass({
              "overlay-mask": true,
              "fade-in": $setup.props.visible
            }),
            style: vue$1.normalizeStyle({
              backgroundColor: $setup.props.maskColor
            }),
            onClick: $setup.onOverlayClick,
            onTouchstart: vue$1.withModifiers($setup.onOverlayClick, ["prevent", "stop"])
          },
          null,
          38
          /* CLASS, STYLE, NEED_HYDRATION */
        )) : vue$1.createCommentVNode("v-if", true),
        vue$1.createElementVNode(
          "div",
          {
            class: vue$1.normalizeClass({
              "overlay-content": true,
              "full-screen": $setup.props.isFullScreen
            })
          },
          [
            vue$1.renderSlot(_ctx.$slots, "default", {}, void 0, true)
          ],
          2
          /* CLASS */
        )
      ],
      4
      /* STYLE */
    )) : vue$1.createCommentVNode("v-if", true);
  }
  const Overlay = /* @__PURE__ */ _export_sfc(_sfc_main$j, [["render", _sfc_render$i], ["__scopeId", "data-v-355a3c48"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/common/Overlay/index.vue"]]);
  const _sfc_main$i = /* @__PURE__ */ vue$1.defineComponent({
    __name: "index",
    props: {
      visible: { type: Boolean, required: true, default: true },
      popDirection: { type: String, required: true, default: "bottom" },
      useMask: { type: Boolean, required: false, default: true },
      isFullScreen: { type: Boolean, required: false, skipCheck: true, default: true },
      overlayColor: { type: null, required: false },
      drawerStyle: { type: Object, required: false, default: () => ({}) }
    },
    emits: ["onOverlayClick"],
    setup(__props, { expose: __expose, emit: __emit }) {
      var _a2;
      const { ref: ref2, watch } = vue;
      const emits = __emit;
      const props = __props;
      const drawerDomRef = ref2();
      const overlayDomInstanceRef = ref2();
      const isDrawerShow = ref2(false);
      const styles = ref2(props.drawerStyle[props.popDirection] || {});
      watch(
        () => props.visible,
        (visible) => {
          if (visible) {
            isDrawerShow.value = true;
          } else {
            setTimeout(() => {
              isDrawerShow.value = false;
            }, 150);
          }
        },
        {
          immediate: true
        }
      );
      function onOverlayClick(e2) {
        emits("onOverlayClick", e2);
      }
      __expose({
        drawerDomRef,
        overlayDomRef: (_a2 = overlayDomInstanceRef.value) == null ? void 0 : _a2.overlayDomRef
      });
      const __returned__ = { ref: ref2, watch, emits, props, drawerDomRef, overlayDomInstanceRef, isDrawerShow, styles, onOverlayClick, Overlay };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$h(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createBlock($setup["Overlay"], {
      ref: "overlayDomInstanceRef",
      visible: $setup.props.visible,
      useMask: $setup.props.useMask,
      maskColor: $setup.props.overlayColor,
      isFullScreen: $setup.props.isFullScreen,
      onOnOverlayClick: $setup.onOverlayClick
    }, {
      default: vue$1.withCtx(() => [
        $setup.isDrawerShow ? (vue$1.openBlock(), vue$1.createElementBlock(
          "div",
          {
            key: 0,
            ref: "drawerDomRef",
            class: vue$1.normalizeClass({
              drawer: true,
              "origin-bottom": $setup.props.popDirection === "bottom",
              "origin-right": $setup.props.popDirection === "right",
              "slide-bottom": $props.visible && $setup.props.popDirection === "bottom",
              "slide-right": $props.visible && $setup.props.popDirection === "right"
            }),
            style: vue$1.normalizeStyle({
              minHeight: $setup.styles.minHeight,
              maxHeight: $setup.styles.maxHeight,
              borderRadius: $setup.styles.borderRadius,
              boxShadow: $setup.styles.boxShadow,
              width: $setup.styles.width
            })
          },
          [
            vue$1.createElementVNode("div", { class: "drawer-container" }, [
              vue$1.renderSlot(_ctx.$slots, "default", {}, void 0, true)
            ])
          ],
          6
          /* CLASS, STYLE */
        )) : vue$1.createCommentVNode("v-if", true)
      ]),
      _: 3
      /* FORWARDED */
    }, 8, ["visible", "useMask", "maskColor", "isFullScreen"]);
  }
  const Drawer = /* @__PURE__ */ _export_sfc(_sfc_main$i, [["render", _sfc_render$h], ["__scopeId", "data-v-0aa80224"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/common/Drawer/index.vue"]]);
  const _sfc_main$h = /* @__PURE__ */ vue$1.defineComponent({
    __name: "index",
    props: {
      content: { type: Object, required: true, default: () => ({}) },
      messageItem: { type: Object, required: true, default: () => ({}) }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const { withDefaults } = vue;
      const props = __props;
      const __returned__ = { withDefaults, props };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$g(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("div", { class: "progress-message" }, [
      vue$1.renderSlot(_ctx.$slots, "default", {}, void 0, true),
      $setup.props.messageItem.status === "unSend" && $setup.props.messageItem.progress < 1 ? (vue$1.openBlock(), vue$1.createElementBlock("div", {
        key: 0,
        class: "progress-container"
      }, [
        vue$1.createElementVNode("progress", {
          activeColor: "#006EFF",
          class: "progress-common",
          percent: Math.round($setup.props.messageItem.progress * 100)
        }, null, 8, ["percent"])
      ])) : vue$1.createCommentVNode("v-if", true)
    ]);
  }
  const ProgressMessage = /* @__PURE__ */ _export_sfc(_sfc_main$h, [["render", _sfc_render$g], ["__scopeId", "data-v-1f515871"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/common/ProgressMessage/index.vue"]]);
  const _ChatStorage = class _ChatStorage {
    constructor() {
      __publicField(this, "chatStorage", null);
    }
    static getInstance() {
      if (!_ChatStorage.instance) {
        _ChatStorage.instance = new _ChatStorage();
      }
      return _ChatStorage.instance;
    }
    getChatStorage(key) {
      if (!this.chatStorage) {
        this.chatStorage = this.getChatStorageFromLocalStorage();
      }
      if (key) {
        return this.chatStorage[key];
      } else {
        throw new Error("No key provided");
      }
    }
    setChatStorage(key, value) {
      if (!this.chatStorage) {
        this.chatStorage = this.getChatStorageFromLocalStorage();
      }
      this.chatStorage[key] = value;
      try {
        if (isUniFrameWork) {
          i.setStorageSync(_ChatStorage.CHAT_STORAGE_KEY, JSON.stringify(this.chatStorage));
        } else {
          localStorage.setItem(_ChatStorage.CHAT_STORAGE_KEY, JSON.stringify(this.chatStorage));
        }
      } catch (error) {
        throw new Error("Fail to set chat storage");
      }
    }
    getChatStorageFromLocalStorage() {
      let chatStorageString = "";
      if (isUniFrameWork) {
        chatStorageString = i.getStorageSync(_ChatStorage.CHAT_STORAGE_KEY) || "";
      } else {
        chatStorageString = localStorage.getItem(_ChatStorage.CHAT_STORAGE_KEY) || "";
      }
      if (!chatStorageString) {
        return {};
      }
      try {
        this.chatStorage = JSON.parse(chatStorageString);
      } catch (error) {
        this.chatStorage = {};
      }
      return this.chatStorage;
    }
  };
  __publicField(_ChatStorage, "instance", null);
  __publicField(_ChatStorage, "CHAT_STORAGE_KEY", "TUI_CHAT_STORAGE");
  let ChatStorage = _ChatStorage;
  const chatStorage = ChatStorage.getInstance();
  const _sfc_main$g = /* @__PURE__ */ vue$1.defineComponent({
    __name: "index-uniapp",
    emits: ["closeInputToolBar", "handleEditor", "showFormPopup"],
    setup(__props, { expose: __expose, emit: __emit }) {
      var _a2;
      const { ref: ref2, nextTick, onMounted: onMounted2, onUnmounted: onUnmounted2, getCurrentInstance } = vue;
      const emits = __emit;
      let selfAddValue = 0;
      let observer = null;
      const sentReceiptMessageID = /* @__PURE__ */ new Set();
      const thisInstance = ((_a2 = getCurrentInstance()) == null ? void 0 : _a2.proxy) || getCurrentInstance();
      const messageList = ref2([]);
      const isCompleted = ref2(false);
      const currentConversationID = ref2("");
      const toggleID = ref2("");
      const scrollTop = ref2(5e3);
      const TYPES2 = ref2(qt.TYPES);
      const isLoadingMessage = ref2(false);
      const isLongpressing = ref2(false);
      const blinkMessageIDList = ref2([]);
      const messageTarget = ref2();
      const scrollButtonInstanceRef = ref2();
      const historyFirstMessageID = ref2("");
      const isShowSimpleMessageList = ref2(false);
      const simpleMessageListRenderMessageID = ref2();
      const audioPlayedMapping = ref2({});
      const broadcastNewAudioSrc = ref2("");
      const reSendDialogShow = ref2(false);
      const resendMessageData = ref2();
      const scrollToBottom = () => {
        scrollTop.value += 300;
        const timer2 = setTimeout(() => {
          scrollTop.value += 1;
          clearTimeout(timer2);
        }, 300);
      };
      const onCurrentConversationIDUpdated = (conversationID) => {
        currentConversationID.value = conversationID;
        if (Object.keys(audioPlayedMapping.value).length > 0) {
          chatStorage.setChatStorage("audioPlayedMapping", audioPlayedMapping.value);
        }
      };
      onMounted2(() => {
        audioPlayedMapping.value = chatStorage.getChatStorage("audioPlayedMapping") || {};
        Jt.watch(o$2.CONV, {
          currentConversationID: onCurrentConversationIDUpdated
        });
        Jt.watch(o$2.CHAT, {
          messageList: onMessageListUpdated,
          messageSource: onMessageSourceUpdated,
          isCompleted: onChatCompletedUpdated,
          newMessageList: onNewMessageList
        });
        v("messageList", thisInstance);
        uni.$on("scroll-to-bottom", scrollToLatestMessage);
      });
      onUnmounted2(() => {
        Jt.unwatch(o$2.CHAT, {
          messageList: onMessageListUpdated,
          messageSource: onMessageSourceUpdated,
          isCompleted: onChatCompletedUpdated,
          newMessageList: onNewMessageList
        });
        Jt.unwatch(o$2.CONV, {
          currentConversationID: onCurrentConversationIDUpdated
        });
        observer == null ? void 0 : observer.disconnect();
        observer = null;
        uni.$off("scroll-to-bottom");
        if (Object.keys(audioPlayedMapping.value).length > 0) {
          chatStorage.setChatStorage("audioPlayedMapping", audioPlayedMapping.value);
        }
      });
      const handelScrollListScroll = lodashExports.throttle(
        function(e2) {
          var _a3;
          (_a3 = scrollButtonInstanceRef.value) == null ? void 0 : _a3.judgeScrollOverOneScreen(e2);
        },
        500,
        { leading: true }
      );
      function getGlobalAudioContext(audioMap, options) {
        if (options == null ? void 0 : options.newAudioSrc) {
          broadcastNewAudioSrc.value = options.newAudioSrc;
        }
      }
      function onNewMessageList(list) {
        list.forEach((message) => {
          var _a3;
          if ((message == null ? void 0 : message.type) === qt.TYPES.MSG_CUSTOM) {
            const data = JSONToObject((_a3 = message == null ? void 0 : message.payload) == null ? void 0 : _a3.data);
            if ((data == null ? void 0 : data.src) === CUSTOM_MESSAGE_SRC.SEAT_STATUS) {
              if ((data == null ? void 0 : data.content.command) === "updateSeatStatus") {
                if (data.content.content === "inSeat") {
                  Jt.update(o$2.CUSTOM, "isInHumanService", true);
                } else if (data.content.content === "outSeat") {
                  Jt.update(o$2.CUSTOM, "isInHumanService", false);
                }
              }
            } else if ((data == null ? void 0 : data.src) === CUSTOM_MESSAGE_SRC.TYPING_STATE) {
              if ((data == null ? void 0 : data.typingStatus) === 1) {
                Jt.update(o$2.CUSTOM, "isTyping", true);
              } else {
                Jt.update(o$2.CUSTOM, "isTyping", false);
              }
            }
          }
        });
      }
      async function onMessageListUpdated(list) {
        var _a3;
        if (!isCustomerConversation(currentConversationID.value)) {
          return;
        }
        observer == null ? void 0 : observer.disconnect();
        messageList.value = list.filter((message) => {
          if (isThinkingMessage(message)) {
            return isThinkingMessageOverTime(message);
          }
          return !message.isDeleted && !isMessageInvisible(message);
        }).map((message) => {
          message.vueForRenderKey = `${message.ID}`;
          return message;
        });
        if (messageTarget.value) {
          scrollAndBlinkMessage(messageTarget.value);
        } else if (!isLoadingMessage.value && !(((_a3 = scrollButtonInstanceRef.value) == null ? void 0 : _a3.isScrollButtonVisible) && (newLastMessage == null ? void 0 : newLastMessage.flow) === "in")) {
          nextTick(() => {
            scrollToBottom();
          });
        }
        if (isEnabledMessageReadReceiptGlobal()) {
          nextTick(() => bindIntersectionObserver());
        }
      }
      async function scrollToLatestMessage() {
        var _a3;
        try {
          const { scrollHeight } = await P(
            "#messageScrollList",
            "messageList"
          );
          if (scrollHeight) {
            scrollTop.value === scrollHeight ? scrollTop.value = scrollHeight + 1 : scrollTop.value = scrollHeight;
          } else {
            scrollToBottom();
          }
        } catch (error) {
          scrollToBottom();
        }
        (_a3 = scrollButtonInstanceRef.value) == null ? void 0 : _a3.hideScrollButton();
      }
      async function onMessageSourceUpdated(message) {
        messageTarget.value = message;
        scrollAndBlinkMessage(messageTarget.value);
      }
      function scrollAndBlinkMessage(message) {
        var _a3;
        if ((_a3 = messageList.value) == null ? void 0 : _a3.some(
          (messageListItem) => (messageListItem == null ? void 0 : messageListItem.ID) === (message == null ? void 0 : message.ID)
        )) {
          nextTick(async () => {
            await scrollToTargetMessage(message);
            await blinkMessage(message == null ? void 0 : message.ID);
            messageTarget.value = void 0;
          });
        }
      }
      function onChatCompletedUpdated(flag) {
        isCompleted.value = flag;
      }
      const getHistoryMessageList = () => {
        var _a3, _b2;
        isLoadingMessage.value = true;
        const currentFirstMessageID = ((_b2 = (_a3 = messageList.value) == null ? void 0 : _a3[0]) == null ? void 0 : _b2.ID) || "";
        Qt.getMessageList().then(() => {
          nextTick(() => {
            historyFirstMessageID.value = currentFirstMessageID;
            const timer2 = setTimeout(() => {
              historyFirstMessageID.value = "";
              isLoadingMessage.value = false;
              clearTimeout(timer2);
            }, 500);
          });
        });
      };
      const handleToggleMessageItem = (e2, message, index, isLongpress = false) => {
        if (isLongpress) {
          isLongpressing.value = true;
        }
        toggleID.value = message.ID;
      };
      let timer;
      const handleH5LongPress = (e2, message, index, type) => {
        if (!isH5)
          return;
        function longPressHandler() {
          clearTimeout(timer);
          handleToggleMessageItem(e2, message, index, true);
        }
        function touchStartHandler() {
          timer = setTimeout(longPressHandler, 500);
        }
        function touchEndHandler() {
          clearTimeout(timer);
        }
        switch (type) {
          case "touchstart":
            touchStartHandler();
            break;
          case "touchend":
            touchEndHandler();
            setTimeout(() => {
              isLongpressing.value = false;
            }, 200);
            break;
        }
      };
      const handleEdit = (message) => {
        emits("handleEditor", message, "reedit");
      };
      const resendMessage = (message) => {
        reSendDialogShow.value = true;
        resendMessageData.value = message;
      };
      const handleImagePreview = (index) => {
        if (!messageList.value) {
          return;
        }
        const imageMessageIndex = [];
        const imageMessageList = messageList.value.filter(
          (item, index2) => {
            if (!item.isRevoked && !item.hasRiskContent && item.type === TYPES2.value.MSG_IMAGE) {
              imageMessageIndex.push(index2);
              return true;
            }
            return false;
          }
        );
        uni.previewImage({
          current: imageMessageIndex.indexOf(index),
          urls: imageMessageList.map(
            (message) => {
              var _a3;
              return (_a3 = message.payload.imageInfoArray) == null ? void 0 : _a3[2].url;
            }
          ),
          indicator: "number"
        });
      };
      const resendMessageConfirm = () => {
        reSendDialogShow.value = !reSendDialogShow.value;
        const messageModel = resendMessageData.value;
        messageModel.resendMessage();
      };
      function blinkMessage(messageID) {
        return new Promise((resolve) => {
          const index = blinkMessageIDList.value.indexOf(messageID);
          if (index < 0) {
            blinkMessageIDList.value.push(messageID);
            const timer2 = setTimeout(() => {
              blinkMessageIDList.value.splice(
                blinkMessageIDList.value.indexOf(messageID),
                1
              );
              clearTimeout(timer2);
              resolve();
            }, 3e3);
          }
        });
      }
      function scrollTo(scrollHeight) {
        scrollTop.value = scrollHeight;
      }
      async function bindIntersectionObserver() {
        if (!messageList.value || messageList.value.length === 0) {
          return;
        }
        observer == null ? void 0 : observer.disconnect();
        observer = uni.createIntersectionObserver(thisInstance, {
          threshold: [0.7],
          observeAll: true
          // In Uni-app, the `safetip` is also included, so a negative margin is needed to exclude it.
        }).relativeTo("#messageScrollList", { top: -70 });
        observer == null ? void 0 : observer.observe(".message-li.in .message-bubble-container", (res) => {
          var _a3;
          if (sentReceiptMessageID.has(res.id)) {
            return;
          }
          const matchingMessage = messageList.value.find((message) => {
            return res.id.indexOf(message.ID) > -1;
          });
          if (matchingMessage && matchingMessage.needReadReceipt && matchingMessage.flow === "in" && !((_a3 = matchingMessage.readReceiptInfo) == null ? void 0 : _a3.isPeerRead)) {
            Qt.sendMessageReadReceipt([matchingMessage]);
            sentReceiptMessageID.add(res.id);
          }
        });
      }
      async function scrollToTargetMessage(message) {
        const targetMessageID = message.ID;
        const isTargetMessageInScreen = messageList.value && messageList.value.some((msg) => msg.ID === targetMessageID);
        if (targetMessageID && isTargetMessageInScreen) {
          const timer2 = setTimeout(async () => {
            try {
              const scrollViewRect = await T(
                "#messageScrollList",
                "messageList"
              );
              const originalMessageRect = await T(
                "#tui-" + targetMessageID,
                "messageList"
              );
              const { scrollTop: scrollTop2 } = await P(
                "#messageScrollList",
                "messageList"
              );
              const finalScrollTop = originalMessageRect.top + scrollTop2 - scrollViewRect.top - selfAddValue++ % 2;
              scrollTo(finalScrollTop);
              clearTimeout(timer2);
            } catch (error) {
            }
          }, 500);
        } else {
          Toast({
            message: Wt.t("TUIChat.无法定位到原消息"),
            type: TOAST_TYPE.WARNING
          });
        }
      }
      function onMessageListBackgroundClick() {
        emits("closeInputToolBar");
      }
      function assignMessageIDInUniapp(messageID) {
        simpleMessageListRenderMessageID.value = messageID;
        isShowSimpleMessageList.value = true;
      }
      function setAudioPlayed(messageID) {
        audioPlayedMapping.value[messageID] = true;
      }
      function handleShowFormPopup(data) {
        formatAppLog("log", "at pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/index-uniapp.vue:658", "handleshowformpopup-messagelist", data);
        emits("showFormPopup", data);
      }
      function onHeightChanged() {
        scrollToBottom();
      }
      __expose({
        scrollToLatestMessage
      });
      const __returned__ = { ref: ref2, nextTick, onMounted: onMounted2, onUnmounted: onUnmounted2, getCurrentInstance, emits, get selfAddValue() {
        return selfAddValue;
      }, set selfAddValue(v2) {
        selfAddValue = v2;
      }, get observer() {
        return observer;
      }, set observer(v2) {
        observer = v2;
      }, sentReceiptMessageID, thisInstance, messageList, isCompleted, currentConversationID, toggleID, scrollTop, TYPES: TYPES2, isLoadingMessage, isLongpressing, blinkMessageIDList, messageTarget, scrollButtonInstanceRef, historyFirstMessageID, isShowSimpleMessageList, simpleMessageListRenderMessageID, audioPlayedMapping, broadcastNewAudioSrc, reSendDialogShow, resendMessageData, scrollToBottom, onCurrentConversationIDUpdated, handelScrollListScroll, getGlobalAudioContext, onNewMessageList, onMessageListUpdated, scrollToLatestMessage, onMessageSourceUpdated, scrollAndBlinkMessage, onChatCompletedUpdated, getHistoryMessageList, handleToggleMessageItem, get timer() {
        return timer;
      }, set timer(v2) {
        timer = v2;
      }, handleH5LongPress, handleEdit, resendMessage, handleImagePreview, resendMessageConfirm, blinkMessage, scrollTo, bindIntersectionObserver, scrollToTargetMessage, onMessageListBackgroundClick, assignMessageIDInUniapp, setAudioPlayed, handleShowFormPopup, onHeightChanged, get TUITranslateService() {
        return Wt;
      }, SimpleMessageList, MessageText, MessageImage, MessageAudio, MessageRecord, MessageFile, MessageFace, MessageCustom, MessageBubble, MessageLocation, MessageTimestamp, MessageVideo, MessageTool, MessageRevoked, MessagePlugin, MessageThinking, ScrollButton, get isPluginMessage() {
        return isPluginMessage;
      }, Dialog, Drawer, ProgressMessage, get deepCopy() {
        return deepCopy;
      }, get isUniFrameWork() {
        return isUniFrameWork;
      }, get isThinkingMessage() {
        return isThinkingMessage;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$f(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock(
      "div",
      {
        class: vue$1.normalizeClass({
          "tui-chat": true,
          "tui-chat-h5": $setup.isUniFrameWork
        }),
        onClick: $setup.onMessageListBackgroundClick
      },
      [
        vue$1.createElementVNode("div", { class: "tui-chat-main" }, [
          vue$1.createElementVNode("scroll-view", {
            id: "messageScrollList",
            class: "tui-message-list",
            "scroll-y": "true",
            "scroll-top": $setup.scrollTop,
            "scroll-into-view": `tui-${$setup.historyFirstMessageID}`,
            onScroll: _cache[1] || (_cache[1] = (...args) => $setup.handelScrollListScroll && $setup.handelScrollListScroll(...args))
          }, [
            $setup.messageList.length && !$setup.isCompleted ? (vue$1.openBlock(), vue$1.createElementBlock(
              "p",
              {
                key: 0,
                class: "message-more",
                onClick: $setup.getHistoryMessageList
              },
              vue$1.toDisplayString($setup.TUITranslateService.t("TUIChat.查看更多")),
              1
              /* TEXT */
            )) : vue$1.createCommentVNode("v-if", true),
            (vue$1.openBlock(true), vue$1.createElementBlock(
              vue$1.Fragment,
              null,
              vue$1.renderList($setup.messageList, (item, index) => {
                return vue$1.openBlock(), vue$1.createElementBlock("li", {
                  id: `tui-${item.ID}`,
                  key: item.vueForRenderKey,
                  class: vue$1.normalizeClass("message-li " + item.flow)
                }, [
                  vue$1.createVNode($setup["MessageTimestamp"], {
                    currTime: item.time,
                    prevTime: index > 0 ? $setup.messageList[index - 1].time : 0
                  }, null, 8, ["currTime", "prevTime"]),
                  vue$1.createElementVNode("div", {
                    class: "message-item",
                    onClick: _cache[0] || (_cache[0] = ($event) => $setup.toggleID = "")
                  }, [
                    !item.isRevoked && !$setup.isPluginMessage(item) ? (vue$1.openBlock(), vue$1.createElementBlock("div", {
                      key: 0,
                      id: `msg-bubble-${item.ID}`,
                      class: "message-bubble-container"
                    }, [
                      vue$1.createVNode($setup["MessageBubble"], {
                        messageItem: $setup.deepCopy(item),
                        content: item.getMessageContent(),
                        isAudioPlayed: $setup.audioPlayedMapping[item.ID],
                        blinkMessageIDList: $setup.blinkMessageIDList,
                        onResendMessage: ($event) => $setup.resendMessage(item),
                        onBlinkMessage: $setup.blinkMessage,
                        onScrollTo: $setup.scrollTo,
                        onHandleToggleMessageItem: ($event) => $setup.handleToggleMessageItem($event, item, index, true),
                        onHandleTouchStart: ($event) => $setup.handleH5LongPress($event, item, index, "touchstart"),
                        onHandleTouchEnd: ($event) => $setup.handleH5LongPress($event, item, index, "touchend")
                      }, {
                        default: vue$1.withCtx(() => [
                          $setup.isThinkingMessage(item) ? (vue$1.openBlock(), vue$1.createBlock($setup["MessageThinking"], { key: 0 })) : item.type === $setup.TYPES.MSG_TEXT ? (vue$1.openBlock(), vue$1.createBlock($setup["MessageText"], {
                            key: 1,
                            content: item.getMessageContent()
                          }, null, 8, ["content"])) : item.type === $setup.TYPES.MSG_IMAGE ? (vue$1.openBlock(), vue$1.createBlock($setup["ProgressMessage"], {
                            key: 2,
                            content: item.getMessageContent(),
                            messageItem: $setup.deepCopy(item)
                          }, {
                            default: vue$1.withCtx(() => [
                              vue$1.createVNode($setup["MessageImage"], {
                                content: item.getMessageContent(),
                                messageItem: item,
                                onPreviewImage: ($event) => $setup.handleImagePreview(index)
                              }, null, 8, ["content", "messageItem", "onPreviewImage"])
                            ]),
                            _: 2
                            /* DYNAMIC */
                          }, 1032, ["content", "messageItem"])) : item.type === $setup.TYPES.MSG_VIDEO ? (vue$1.openBlock(), vue$1.createBlock($setup["ProgressMessage"], {
                            key: 3,
                            content: item.getMessageContent(),
                            messageItem: $setup.deepCopy(item)
                          }, {
                            default: vue$1.withCtx(() => [
                              vue$1.createVNode($setup["MessageVideo"], {
                                content: item.getMessageContent(),
                                messageItem: item
                              }, null, 8, ["content", "messageItem"])
                            ]),
                            _: 2
                            /* DYNAMIC */
                          }, 1032, ["content", "messageItem"])) : item.type === $setup.TYPES.MSG_AUDIO ? (vue$1.openBlock(), vue$1.createBlock($setup["MessageAudio"], {
                            key: 4,
                            content: item.getMessageContent(),
                            messageItem: item,
                            broadcastNewAudioSrc: $setup.broadcastNewAudioSrc,
                            onSetAudioPlayed: $setup.setAudioPlayed,
                            onGetGlobalAudioContext: $setup.getGlobalAudioContext
                          }, null, 8, ["content", "messageItem", "broadcastNewAudioSrc"])) : item.type === $setup.TYPES.MSG_MERGER ? (vue$1.openBlock(), vue$1.createBlock($setup["MessageRecord"], {
                            key: 5,
                            renderData: item.payload,
                            messageItem: item,
                            onAssignMessageIDInUniapp: $setup.assignMessageIDInUniapp
                          }, null, 8, ["renderData", "messageItem"])) : item.type === $setup.TYPES.MSG_FILE ? (vue$1.openBlock(), vue$1.createBlock($setup["MessageFile"], {
                            key: 6,
                            content: item.getMessageContent()
                          }, null, 8, ["content"])) : item.type === $setup.TYPES.MSG_FACE ? (vue$1.openBlock(), vue$1.createBlock($setup["MessageFace"], {
                            key: 7,
                            content: item.getMessageContent()
                          }, null, 8, ["content"])) : item.type === $setup.TYPES.MSG_LOCATION ? (vue$1.openBlock(), vue$1.createBlock($setup["MessageLocation"], {
                            key: 8,
                            content: item.getMessageContent()
                          }, null, 8, ["content"])) : item.type === $setup.TYPES.MSG_CUSTOM ? (vue$1.openBlock(), vue$1.createBlock($setup["MessageCustom"], {
                            key: 9,
                            content: item.getMessageContent(),
                            messageItem: item
                          }, null, 8, ["content", "messageItem"])) : vue$1.createCommentVNode("v-if", true)
                        ]),
                        _: 2
                        /* DYNAMIC */
                      }, 1032, ["messageItem", "content", "isAudioPlayed", "blinkMessageIDList", "onResendMessage", "onHandleToggleMessageItem", "onHandleTouchStart", "onHandleTouchEnd"])
                    ], 8, ["id"])) : !item.isRevoked && $setup.isPluginMessage(item) ? (vue$1.openBlock(), vue$1.createBlock($setup["MessagePlugin"], {
                      key: 1,
                      message: $setup.deepCopy(item),
                      onResendMessage: $setup.resendMessage,
                      onHandleToggleMessageItem: $setup.handleToggleMessageItem,
                      onHandleH5LongPress: $setup.handleH5LongPress,
                      onShowFormPopup: $setup.handleShowFormPopup,
                      onHeightChanged: $setup.onHeightChanged
                    }, null, 8, ["message"])) : (vue$1.openBlock(), vue$1.createBlock($setup["MessageRevoked"], {
                      key: 2,
                      isEdit: item.type === $setup.TYPES.MSG_TEXT,
                      messageItem: item,
                      onMessageEdit: ($event) => $setup.handleEdit(item)
                    }, null, 8, ["isEdit", "messageItem", "onMessageEdit"])),
                    vue$1.createCommentVNode(" message tool "),
                    item.ID === $setup.toggleID ? (vue$1.openBlock(), vue$1.createBlock($setup["MessageTool"], {
                      key: 3,
                      class: vue$1.normalizeClass({
                        "message-tool": true,
                        "message-tool-out": item.flow === "out",
                        "message-tool-in": item.flow === "in"
                      }),
                      messageItem: item
                    }, null, 8, ["class", "messageItem"])) : vue$1.createCommentVNode("v-if", true)
                  ])
                ], 10, ["id"]);
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ], 40, ["scroll-top", "scroll-into-view"]),
          vue$1.createCommentVNode(" scroll button "),
          vue$1.createVNode(
            $setup["ScrollButton"],
            {
              ref: "scrollButtonInstanceRef",
              onScrollToLatestMessage: $setup.scrollToLatestMessage
            },
            null,
            512
            /* NEED_PATCH */
          ),
          $setup.reSendDialogShow ? (vue$1.openBlock(), vue$1.createBlock($setup["Dialog"], {
            key: 0,
            show: $setup.reSendDialogShow,
            isH5: true,
            center: true,
            isHeaderShow: false,
            onSubmit: _cache[2] || (_cache[2] = ($event) => $setup.resendMessageConfirm()),
            "onUpdate:show": _cache[3] || (_cache[3] = (e2) => $setup.reSendDialogShow = e2)
          }, {
            default: vue$1.withCtx(() => [
              vue$1.createElementVNode(
                "p",
                { class: "delDialog-title" },
                vue$1.toDisplayString($setup.TUITranslateService.t("TUIChat.确认重发该消息？")),
                1
                /* TEXT */
              )
            ]),
            _: 1
            /* STABLE */
          }, 8, ["show"])) : vue$1.createCommentVNode("v-if", true),
          vue$1.createCommentVNode(" simple message list "),
          vue$1.createVNode($setup["Drawer"], {
            visible: $setup.isShowSimpleMessageList,
            overlayColor: "transparent",
            popDirection: "right"
          }, {
            default: vue$1.withCtx(() => [
              vue$1.createVNode($setup["SimpleMessageList"], {
                style: { height: "100%" },
                isMounted: $setup.isShowSimpleMessageList,
                messageID: $setup.simpleMessageListRenderMessageID,
                onCloseOverlay: _cache[4] || (_cache[4] = ($event) => $setup.isShowSimpleMessageList = false)
              }, null, 8, ["isMounted", "messageID"])
            ]),
            _: 1
            /* STABLE */
          }, 8, ["visible"])
        ])
      ],
      2
      /* CLASS */
    );
  }
  const MessageList = /* @__PURE__ */ _export_sfc(_sfc_main$g, [["render", _sfc_render$f], ["__scopeId", "data-v-f4b2fc8d"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/index-uniapp.vue"]]);
  const _ConversationDraftManager = class _ConversationDraftManager {
    constructor() {
      __publicField(this, "quoteMessageMap", /* @__PURE__ */ new Map());
    }
    static getInstance() {
      if (!_ConversationDraftManager.instance) {
        _ConversationDraftManager.instance = new _ConversationDraftManager();
      }
      return _ConversationDraftManager.instance;
    }
    setStore(conversationID, draftContent, abstract, quoteMessage) {
      var _a2, _b2;
      if (conversationID && (this.isEditorNotEmpty(draftContent) || ((_a2 = quoteMessage == null ? void 0 : quoteMessage.message) == null ? void 0 : _a2.ID))) {
        let additionalDraftInfo = {};
        if ((_b2 = quoteMessage == null ? void 0 : quoteMessage.message) == null ? void 0 : _b2.ID) {
          this.quoteMessageMap.set(quoteMessage.message.ID, quoteMessage.message);
          additionalDraftInfo = { messageID: quoteMessage.message.ID, type: quoteMessage.type };
        }
        const draftParams = {
          conversationID,
          draftInfo: {
            html: draftContent,
            abstract,
            ...additionalDraftInfo
          }
        };
        Xt.setConversationDraft(draftParams);
        Jt.update(o$2.CHAT, "quoteMessage", { message: void 0, type: "quote" });
      }
    }
    getStore(conversationID, setEditorContentCallback) {
      const conversation = Jt.getConversationModel(conversationID);
      if (!conversation) {
        return;
      }
      if (conversation.conversationID && conversation.draftText) {
        const draftObject = JSONToObject(conversation.draftText);
        Jt.update(o$2.CHAT, "quoteMessage", { message: this.quoteMessageMap.get(draftObject.messageID) || void 0, type: draftObject.type });
        setEditorContentCallback(draftObject.html);
      }
      Xt.setConversationDraft({ conversationID: conversation.conversationID });
    }
    generateAbstract(editorContent) {
      let abstract = "";
      editorContent == null ? void 0 : editorContent.forEach((item) => {
        switch (item.type) {
          case "text":
            abstract += transformTextWithKeysToEmojiNames(item.payload.text || "");
            break;
          case "image":
            abstract += Wt.t("TUIChat.图片");
            break;
          case "video":
            abstract += Wt.t("TUIChat.视频");
            break;
          case "file":
            abstract += Wt.t("TUIChat.文件");
            break;
        }
      });
      return abstract;
    }
    isEditorNotEmpty(editorHTML) {
      return editorHTML && !editorHTML.includes("is-empty") && editorHTML !== "<p></p>";
    }
  };
  __publicField(_ConversationDraftManager, "instance", null);
  let ConversationDraftManager = _ConversationDraftManager;
  const DraftManager = ConversationDraftManager.getInstance();
  const sendMessages = async (messageList, currentConversation) => {
    if (Jt.getData(o$2.CHAT, "messageSource")) {
      Jt.update(o$2.CHAT, "messageSource", void 0);
    }
    messageList == null ? void 0 : messageList.forEach(async (content) => {
      var _a2, _b2, _c2, _d, _e2, _f, _g;
      try {
        const options = {
          to: ((_a2 = currentConversation == null ? void 0 : currentConversation.groupProfile) == null ? void 0 : _a2.groupID) || ((_b2 = currentConversation == null ? void 0 : currentConversation.userProfile) == null ? void 0 : _b2.userID),
          conversationType: currentConversation == null ? void 0 : currentConversation.type,
          payload: {},
          needReadReceipt: isEnabledMessageReadReceiptGlobal()
        };
        let textMessageContent;
        const sendMessageOptions = {
          offlinePushInfo: {}
        };
        switch (content == null ? void 0 : content.type) {
          case "text":
            textMessageContent = JSON.parse(JSON.stringify((_c2 = content.payload) == null ? void 0 : _c2.text));
            if (!textMessageContent) {
              break;
            }
            options.payload = {
              text: textMessageContent
            };
            if ((_d = content.payload) == null ? void 0 : _d.atUserList) {
              options.payload.atUserList = content.payload.atUserList;
              await Qt.sendTextAtMessage(options, sendMessageOptions);
            } else {
              await Qt.sendTextMessage(options, sendMessageOptions);
            }
            break;
          case "image":
            options.payload = {
              file: (_e2 = content.payload) == null ? void 0 : _e2.file
            };
            await Qt.sendImageMessage(options, sendMessageOptions);
            break;
          case "video":
            options.payload = {
              file: (_f = content.payload) == null ? void 0 : _f.file
            };
            await Qt.sendVideoMessage(options, sendMessageOptions);
            break;
          case "file":
            options.payload = {
              file: (_g = content.payload) == null ? void 0 : _g.file
            };
            await Qt.sendFileMessage(options, sendMessageOptions);
            break;
          default:
            break;
        }
        enableSampleTaskStatus("sendMessage");
      } catch (error) {
        formatAppLog("error", "at pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/utils/sendMessage.ts:114", error);
        if (Jt.getData(o$2.CHAT, "quoteMessage")) {
          Jt.update(o$2.CHAT, "quoteMessage", {});
        }
      }
    });
  };
  const sendTyping = (inputContentEmpty, inputBlur) => {
    if (!inputContentEmpty && !inputBlur) {
      Qt.enterTypingState();
    } else {
      Qt.leaveTypingState();
    }
  };
  const _sfc_main$f = /* @__PURE__ */ vue$1.defineComponent({
    __name: "message-input-editor-uniapp",
    props: {
      placeholder: {
        type: String,
        default: ""
      },
      replayOrReferenceMessage: {
        type: Object,
        default: () => ({}),
        required: false
      },
      isMuted: {
        type: Boolean,
        default: true
      },
      muteText: {
        type: String,
        default: ""
      },
      enableInput: {
        type: Boolean,
        default: true
      },
      enableTyping: {
        type: Boolean,
        default: true
      }
    },
    emits: ["onTyping", "onFocus", "isInputNotEmpty"],
    setup(__props, { expose: __expose, emit: __emit }) {
      const { ref: ref2, watch, onMounted: onMounted2, onUnmounted: onUnmounted2 } = vue;
      const props = __props;
      const emits = __emit;
      const inputText = ref2("");
      const inputRef = ref2();
      const inputBlur = ref2(true);
      const inputContentEmpty = ref2(true);
      const currentConversation = ref2();
      const currentConversationID = ref2("");
      const currentQuoteMessage = ref2();
      onMounted2(() => {
        Jt.watch(o$2.CONV, {
          currentConversation: onCurrentConversationUpdated
        });
        Jt.watch(o$2.CHAT, {
          quoteMessage: onQuoteMessageUpdated
        });
        uni.$on("insert-emoji", (data) => {
          var _a2;
          inputText.value += (_a2 = data == null ? void 0 : data.emoji) == null ? void 0 : _a2.name;
          emits("isInputNotEmpty", true);
        });
        uni.$on("send-message-in-emoji-picker", () => {
          handleSendMessage();
        });
      });
      onUnmounted2(() => {
        if (currentConversationID.value) {
          DraftManager.setStore(
            currentConversationID.value,
            inputText.value,
            inputText.value,
            currentQuoteMessage.value
          );
        }
        uni.$off("insertEmoji");
        uni.$off("send-message-in-emoji-picker");
        Jt.unwatch(o$2.CONV, {
          currentConversation: onCurrentConversationUpdated
        });
        Jt.unwatch(o$2.CHAT, {
          quoteMessage: onQuoteMessageUpdated
        });
        reset();
      });
      const handleSendMessage = () => {
        const messageList = getEditorContent();
        resetEditor();
        sendMessages(messageList, currentConversation.value);
      };
      const getEditorContent = () => {
        let text = inputText.value;
        text = transformTextWithEmojiNamesToKeys(text);
        const payload = {
          text
        };
        return [
          {
            type: "text",
            payload
          }
        ];
      };
      const resetEditor = () => {
        inputText.value = "";
        inputContentEmpty.value = true;
        emits("isInputNotEmpty", false);
      };
      const setEditorContent = (content) => {
        inputText.value = content;
      };
      const onBlur = () => {
        inputBlur.value = true;
      };
      const onFocus = (e2) => {
        var _a2;
        inputBlur.value = false;
        emits("onFocus", (_a2 = e2 == null ? void 0 : e2.detail) == null ? void 0 : _a2.height);
      };
      const isEditorContentEmpty = () => {
        var _a2;
        inputContentEmpty.value = ((_a2 = inputText == null ? void 0 : inputText.value) == null ? void 0 : _a2.length) ? false : true;
        emits("isInputNotEmpty", !inputContentEmpty.value);
      };
      const onInput = () => {
        isEditorContentEmpty();
      };
      watch(
        () => [inputContentEmpty.value, inputBlur.value],
        (newVal, oldVal) => {
          if (newVal !== oldVal) {
            emits("onTyping", inputContentEmpty.value, inputBlur.value);
          }
        },
        {
          immediate: true,
          deep: true
        }
      );
      function onCurrentConversationUpdated(conversation) {
        const prevConversationID = currentConversationID.value;
        currentConversation.value = conversation;
        currentConversationID.value = conversation == null ? void 0 : conversation.conversationID;
        if (prevConversationID !== currentConversationID.value) {
          if (prevConversationID) {
            DraftManager.setStore(
              prevConversationID,
              inputText.value,
              inputText.value,
              currentQuoteMessage.value
            );
          }
          resetEditor();
          if (currentConversationID.value) {
            DraftManager.getStore(currentConversationID.value, setEditorContent);
          }
        }
      }
      function onQuoteMessageUpdated(options) {
        currentQuoteMessage.value = options;
      }
      function reset() {
        inputBlur.value = true;
        currentConversation.value = null;
        currentConversationID.value = "";
        currentQuoteMessage.value = null;
        resetEditor();
      }
      __expose({
        resetEditor,
        setEditorContent,
        getEditorContent
      });
      const __returned__ = { ref: ref2, watch, onMounted: onMounted2, onUnmounted: onUnmounted2, props, emits, inputText, inputRef, inputBlur, inputContentEmpty, currentConversation, currentConversationID, currentQuoteMessage, handleSendMessage, getEditorContent, resetEditor, setEditorContent, onBlur, onFocus, isEditorContentEmpty, onInput, onCurrentConversationUpdated, onQuoteMessageUpdated, reset };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$e(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("div", {
      class: vue$1.normalizeClass({
        "message-input-container": true,
        "message-input-container-h5": true
      })
    }, [
      $setup.props.isMuted ? (vue$1.openBlock(), vue$1.createElementBlock(
        "div",
        {
          key: 0,
          class: "message-input-mute"
        },
        vue$1.toDisplayString($setup.props.muteText),
        1
        /* TEXT */
      )) : vue$1.createCommentVNode("v-if", true),
      vue$1.withDirectives(vue$1.createElementVNode(
        "input",
        {
          id: "editor",
          ref: "inputRef",
          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $setup.inputText = $event),
          "adjust-position": true,
          "cursor-spacing": "20",
          "confirm-type": "send",
          "confirm-hold": true,
          type: "text",
          class: "message-input-area",
          "auto-blur": "",
          onConfirm: $setup.handleSendMessage,
          onInput: $setup.onInput,
          onBlur: $setup.onBlur,
          onFocus: $setup.onFocus
        },
        null,
        544
        /* NEED_HYDRATION, NEED_PATCH */
      ), [
        [vue$1.vModelText, $setup.inputText]
      ])
    ]);
  }
  const MessageInputEditor = /* @__PURE__ */ _export_sfc(_sfc_main$f, [["render", _sfc_render$e], ["__scopeId", "data-v-00dab55f"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-input/message-input-editor-uniapp.vue"]]);
  const audioIcon = "/assets/audio-blue.0f75fab8.png";
  const keyboardIcon = "/assets/keyboard_icon.805d32e0.png";
  const audioBeforeDeleteIcon = "/assets/audio-before-delete.3d34f0bf.svg";
  const audioDeleteIcon = "/assets/audio-delete.c78dd270.svg";
  const audioBubbleBlue = "/assets/audio-bubble-blue.d189d196.svg";
  const audioBubbleRed = "/assets/audio-bubble-red.a6dbf796.svg";
  const _sfc_main$e = /* @__PURE__ */ vue$1.defineComponent({
    __name: "message-input-audio-uniapp",
    props: {
      isEnableAudio: { type: Boolean, required: true, default: false }
    },
    emits: ["changeDisplayType"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const { ref: ref2, onMounted: onMounted2, onUnmounted: onUnmounted2 } = vue;
      const emits = __emit;
      const props = __props;
      let recordTime = 0;
      let isManualCancelBySlide = false;
      let recordTimer;
      let firstTouchPageY = -1;
      let isFingerTouchingScreen = false;
      let isFirstAuthrizedRecord = false;
      const recorderManager = i == null ? void 0 : i.getRecorderManager();
      const isRecording = ref2(false);
      const touchBarText = ref2("按住说话");
      const modalText = ref2("正在录音");
      const isAudioTouchBarShow = ref2(false);
      const currentConversation = ref2();
      const willCancelBySlide = ref2(false);
      const recordConfig = {
        // Duration of the recording, in ms, with a maximum value of 600000 (10 minutes)
        duration: 6e4,
        // Sampling rate
        sampleRate: 44100,
        // Number of recording channels
        numberOfChannels: 1,
        // Encoding bit rate
        encodeBitRate: 192e3,
        // Audio format
        // Select this format to create audio messages that can be interoperable across all chat platforms (Android, iOS, WeChat Mini Programs, and Web).
        format: "mp3"
      };
      function switchAudio() {
        emits("changeDisplayType", props.isEnableAudio ? "editor" : "audio");
      }
      onMounted2(() => {
        recorderManager.onStart(onRecorderStart);
        recorderManager.onStop(onRecorderStop);
        recorderManager.onError(onRecorderError);
        Jt.watch(o$2.CONV, {
          currentConversation: onCurrentConverstaionUpdated
        });
      });
      onUnmounted2(() => {
        Jt.unwatch(o$2.CONV, {
          currentConversation: onCurrentConverstaionUpdated
        });
      });
      function onCurrentConverstaionUpdated(conversation) {
        currentConversation.value = conversation;
      }
      function initRecorder() {
        initRecorderData();
        initRecorderView();
      }
      function initRecorderView() {
        isRecording.value = false;
        touchBarText.value = "按住说话";
        modalText.value = "正在录音";
      }
      function initRecorderData(options) {
        clearInterval(recordTimer);
        recordTimer = void 0;
        recordTime = 0;
        firstTouchPageY = -1;
        isManualCancelBySlide = false;
        if (!(options == null ? void 0 : options.hasError)) {
          recorderManager.stop();
        }
      }
      function handleTouchStart() {
        if (isFingerTouchingScreen) {
          isFirstAuthrizedRecord = true;
        }
      }
      function handleLongPress() {
        isFingerTouchingScreen = true;
        recorderManager.start(recordConfig);
      }
      const handleTouchMove = lodashExports.throttle(function(e2) {
        if (isRecording.value) {
          const pageY = e2.changedTouches[e2.changedTouches.length - 1].pageY;
          if (firstTouchPageY < 0) {
            firstTouchPageY = pageY;
          }
          const offset = firstTouchPageY - pageY;
          if (offset > 110) {
            touchBarText.value = "抬起取消";
            modalText.value = "松开手指 取消发送";
            isManualCancelBySlide = true;
            willCancelBySlide.value = true;
          } else if (offset > 50) {
            touchBarText.value = "抬起发送";
            modalText.value = "继续上滑可取消";
            isManualCancelBySlide = false;
            willCancelBySlide.value = false;
          } else {
            touchBarText.value = "抬起发送";
            modalText.value = "正在录音";
            isManualCancelBySlide = false;
            willCancelBySlide.value = false;
          }
        }
      }, 100);
      function handleTouchEnd() {
        isFingerTouchingScreen = false;
        recorderManager.stop();
      }
      function onRecorderStart() {
        if (!isFingerTouchingScreen) {
          isFirstAuthrizedRecord = true;
          recorderManager.stop();
          return;
        }
        recordTimer = setInterval(() => {
          recordTime += 1;
        }, 1e3);
        touchBarText.value = "抬起发送";
        isRecording.value = true;
      }
      function onRecorderStop(res) {
        var _a2, _b2, _c2, _d, _e2;
        if (isFirstAuthrizedRecord) {
          isFirstAuthrizedRecord = false;
          initRecorder();
          return;
        }
        if (isManualCancelBySlide || !isRecording.value) {
          initRecorder();
          return;
        }
        clearInterval(recordTimer);
        const tempFilePath = res.tempFilePath;
        const duration = res.duration ? res.duration : recordTime * 1e3;
        const fileSize = res.fileSize ? res.fileSize : 48 * recordTime / 8 * 1024;
        if (duration < 1e3) {
          Toast({
            message: "录音时间太短",
            type: TOAST_TYPE.NORMAL,
            duration: 1500
          });
        } else {
          const options = {
            to: ((_b2 = (_a2 = currentConversation == null ? void 0 : currentConversation.value) == null ? void 0 : _a2.groupProfile) == null ? void 0 : _b2.groupID) || ((_d = (_c2 = currentConversation == null ? void 0 : currentConversation.value) == null ? void 0 : _c2.userProfile) == null ? void 0 : _d.userID),
            conversationType: (_e2 = currentConversation == null ? void 0 : currentConversation.value) == null ? void 0 : _e2.type,
            payload: { file: { duration, tempFilePath, fileSize } },
            needReadReceipt: isEnabledMessageReadReceiptGlobal()
          };
          Qt == null ? void 0 : Qt.sendAudioMessage(options);
        }
        initRecorder();
      }
      function onRecorderError() {
        initRecorderData({ hasError: true });
        initRecorderView();
      }
      const __returned__ = { ref: ref2, onMounted: onMounted2, onUnmounted: onUnmounted2, emits, props, get recordTime() {
        return recordTime;
      }, set recordTime(v2) {
        recordTime = v2;
      }, get isManualCancelBySlide() {
        return isManualCancelBySlide;
      }, set isManualCancelBySlide(v2) {
        isManualCancelBySlide = v2;
      }, get recordTimer() {
        return recordTimer;
      }, set recordTimer(v2) {
        recordTimer = v2;
      }, get firstTouchPageY() {
        return firstTouchPageY;
      }, set firstTouchPageY(v2) {
        firstTouchPageY = v2;
      }, get isFingerTouchingScreen() {
        return isFingerTouchingScreen;
      }, set isFingerTouchingScreen(v2) {
        isFingerTouchingScreen = v2;
      }, get isFirstAuthrizedRecord() {
        return isFirstAuthrizedRecord;
      }, set isFirstAuthrizedRecord(v2) {
        isFirstAuthrizedRecord = v2;
      }, recorderManager, isRecording, touchBarText, modalText, isAudioTouchBarShow, currentConversation, willCancelBySlide, recordConfig, switchAudio, onCurrentConverstaionUpdated, initRecorder, initRecorderView, initRecorderData, handleTouchStart, handleLongPress, handleTouchMove, handleTouchEnd, onRecorderStart, onRecorderStop, onRecorderError, get TUITranslateService() {
        return Wt;
      }, Icon: Icon$1, get audioIcon() {
        return audioIcon;
      }, get keyboardIcon() {
        return keyboardIcon;
      }, get audioRecordIcon() {
        return audioRecordIcon;
      }, get audioBeforeDeleteIcon() {
        return audioBeforeDeleteIcon;
      }, get audioDeleteIcon() {
        return audioDeleteIcon;
      }, get audioBubbleBlue() {
        return audioBubbleBlue;
      }, get audioBubbleRed() {
        return audioBubbleRed;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$d(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock(
      "div",
      {
        class: vue$1.normalizeClass({
          "message-input-audio": true,
          "message-input-audio-open": $setup.isAudioTouchBarShow
        })
      },
      [
        vue$1.createElementVNode("div", { class: "audio-message-icon-container" }, [
          vue$1.createVNode($setup["Icon"], {
            class: "audio-message-icon",
            file: $setup.props.isEnableAudio ? $setup.keyboardIcon : $setup.audioIcon,
            size: "23px",
            hotAreaSize: "3px",
            onOnClick: $setup.switchAudio
          }, null, 8, ["file"])
        ]),
        $setup.props.isEnableAudio ? (vue$1.openBlock(), vue$1.createElementBlock(
          "view",
          {
            key: 0,
            class: "audio-input-touch-bar",
            onTouchstart: $setup.handleTouchStart,
            onLongpress: $setup.handleLongPress,
            onTouchmove: _cache[0] || (_cache[0] = (...args) => $setup.handleTouchMove && $setup.handleTouchMove(...args)),
            onTouchend: $setup.handleTouchEnd
          },
          [
            vue$1.createElementVNode(
              "span",
              null,
              vue$1.toDisplayString($setup.TUITranslateService.t(`TUIChat.${$setup.touchBarText}`)),
              1
              /* TEXT */
            ),
            $setup.isRecording ? (vue$1.openBlock(), vue$1.createElementBlock("view", {
              key: 0,
              class: "record-container"
            }, [
              vue$1.createElementVNode("view", { class: "audio-bubble-blue" }, [
                vue$1.createVNode($setup["Icon"], {
                  file: $setup.willCancelBySlide ? $setup.audioBubbleRed : $setup.audioBubbleBlue,
                  width: "160px",
                  height: "74px"
                }, null, 8, ["file"]),
                vue$1.createElementVNode("view", { class: "loading" }, [
                  vue$1.createElementVNode("view", { class: "line1" }),
                  vue$1.createElementVNode("view", { class: "line3" }),
                  vue$1.createElementVNode("view", { class: "line2" }),
                  vue$1.createElementVNode("view", { class: "line4" }),
                  vue$1.createElementVNode("view", { class: "line1" }),
                  vue$1.createElementVNode("view", { class: "line3" }),
                  vue$1.createElementVNode("view", { class: "line4" }),
                  vue$1.createElementVNode("view", { class: "line1" }),
                  vue$1.createElementVNode("view", { class: "line2" }),
                  vue$1.createElementVNode("view", { class: "line1" }),
                  vue$1.createElementVNode("view", { class: "line4" }),
                  vue$1.createElementVNode("view", { class: "line3" })
                ])
              ]),
              vue$1.createElementVNode(
                "view",
                { class: "modal-text" },
                vue$1.toDisplayString($setup.TUITranslateService.t(`TUIChat.${$setup.modalText}`)),
                1
                /* TEXT */
              ),
              vue$1.createVNode($setup["Icon"], {
                class: "audio-delete-icon",
                file: $setup.willCancelBySlide ? $setup.audioDeleteIcon : $setup.audioBeforeDeleteIcon,
                width: "54px",
                height: "54px"
              }, null, 8, ["file"]),
              vue$1.createVNode($setup["Icon"], {
                class: "audio-record-icon",
                width: "16px",
                height: "20px",
                file: $setup.audioRecordIcon
              }, null, 8, ["file"]),
              vue$1.createElementVNode("view", { class: "icon-container" })
            ])) : vue$1.createCommentVNode("v-if", true)
          ],
          32
          /* NEED_HYDRATION */
        )) : vue$1.createCommentVNode("v-if", true)
      ],
      2
      /* CLASS */
    );
  }
  const MessageInputAudio = /* @__PURE__ */ _export_sfc(_sfc_main$e, [["render", _sfc_render$d], ["__scopeId", "data-v-fb05c1e1"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-input/message-input-audio-uniapp.vue"]]);
  const closeIcon = "/assets/close-quote-icon.6181703e.svg";
  const _sfc_main$d = /* @__PURE__ */ vue$1.defineComponent({
    __name: "index",
    props: {
      displayType: { type: String, required: false, default: "editor" }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const { ref: ref2, computed: computed2, onMounted: onMounted2, onUnmounted: onUnmounted2 } = vue;
      const props = __props;
      const TYPES2 = qt.TYPES;
      const quoteMessage = ref2();
      onMounted2(() => {
        Jt.watch(o$2.CHAT, {
          quoteMessage: onQuoteMessageUpdated
        });
      });
      onUnmounted2(() => {
        Jt.unwatch(o$2.CHAT, {
          quoteMessage: onQuoteMessageUpdated
        });
      });
      const quoteContentText = computed2(() => {
        var _a2, _b2;
        let _quoteContentText;
        switch ((_a2 = quoteMessage.value) == null ? void 0 : _a2.type) {
          case TYPES2.MSG_TEXT:
            _quoteContentText = transformTextWithKeysToEmojiNames(
              (_b2 = quoteMessage.value.payload) == null ? void 0 : _b2.text
            );
            break;
          case TYPES2.MSG_IMAGE:
            _quoteContentText = Wt.t("TUIChat.图片");
            break;
          case TYPES2.MSG_AUDIO:
            _quoteContentText = Wt.t("TUIChat.语音");
            break;
          case TYPES2.MSG_VIDEO:
            _quoteContentText = Wt.t("TUIChat.视频");
            break;
          case TYPES2.MSG_FILE:
            _quoteContentText = Wt.t("TUIChat.文件");
            break;
          case TYPES2.MSG_CUSTOM:
            _quoteContentText = Wt.t("TUIChat.自定义");
            break;
          case TYPES2.MSG_FACE:
            _quoteContentText = Wt.t("TUIChat.表情");
            break;
          case TYPES2.MSG_MERGER:
            _quoteContentText = Wt.t("TUIChat.聊天记录");
            break;
          default:
            _quoteContentText = Wt.t("TUIChat.消息");
            break;
        }
        return _quoteContentText;
      });
      function cancelQuote() {
        Jt.update(o$2.CHAT, "quoteMessage", {
          message: void 0,
          type: "quote"
        });
      }
      function onQuoteMessageUpdated(options) {
        if ((options == null ? void 0 : options.message) && (options == null ? void 0 : options.type) === "quote") {
          quoteMessage.value = options.message;
        } else {
          quoteMessage.value = void 0;
        }
      }
      const __returned__ = { ref: ref2, computed: computed2, onMounted: onMounted2, onUnmounted: onUnmounted2, props, TYPES: TYPES2, quoteMessage, quoteContentText, cancelQuote, onQuoteMessageUpdated, Icon: Icon$1, get closeIcon() {
        return closeIcon;
      }, get isH5() {
        return isH5;
      }, get isUniFrameWork() {
        return isUniFrameWork;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$c(_ctx, _cache, $props, $setup, $data, $options) {
    return Boolean($setup.quoteMessage) && $setup.props.displayType !== "audio" ? (vue$1.openBlock(), vue$1.createElementBlock(
      "div",
      {
        key: 0,
        class: vue$1.normalizeClass({
          "input-quote-container": true,
          "input-quote-container-h5": $setup.isH5 || $setup.isUniFrameWork
        })
      },
      [
        vue$1.createElementVNode("div", { class: "input-quote-content-h5" }, [
          vue$1.createElementVNode("div", null, [
            vue$1.createElementVNode(
              "div",
              { class: "input-quote-sender-h5" },
              vue$1.toDisplayString($setup.quoteMessage.nick || $setup.quoteMessage.from),
              1
              /* TEXT */
            ),
            vue$1.createElementVNode(
              "div",
              { class: "max-one-line" },
              vue$1.toDisplayString($setup.quoteContentText),
              1
              /* TEXT */
            )
          ]),
          vue$1.createVNode($setup["Icon"], {
            class: "input-quote-close-icon",
            file: $setup.closeIcon,
            width: "11px",
            height: "11px",
            onOnClick: $setup.cancelQuote
          }, null, 8, ["file"])
        ])
      ],
      2
      /* CLASS */
    )) : vue$1.createCommentVNode("v-if", true);
  }
  const MessageQuote = /* @__PURE__ */ _export_sfc(_sfc_main$d, [["render", _sfc_render$c], ["__scopeId", "data-v-051ab80a"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-input/message-input-quote/index.vue"]]);
  const faceIcon$1 = "/assets/emoji.40a1c90c.png";
  const moreIcon = "/assets/more_tools.cb5342a1.png";
  const sendButtonIcon = "/assets/send-button.a3bf19cb.svg";
  const _sfc_main$c = /* @__PURE__ */ vue$1.defineComponent({
    __name: "index-uniapp",
    props: {
      placeholder: { type: String, required: true, default: "" },
      isMuted: { type: Boolean, required: false, default: true },
      muteText: { type: String, required: false, default: "" },
      enableInput: { type: Boolean, required: false, default: true },
      enableTyping: { type: Boolean, required: false, default: true },
      canSendAudio: { type: Boolean, required: false, default: false },
      replyOrReference: { type: Object, required: false, default: () => ({}) },
      inputToolbarDisplayType: { type: String, required: true, default: "none" }
    },
    emits: ["changeToolbarDisplayType", "sendMessage"],
    setup(__props, { expose: __expose, emit: __emit }) {
      const { ref: ref2, watch, onMounted: onMounted2, onUnmounted: onUnmounted2 } = vue;
      const emits = __emit;
      const props = __props;
      const editor = ref2();
      const currentConversation = ref2();
      const displayType = ref2("editor");
      const showSendButton = ref2(false);
      onMounted2(() => {
        Jt.watch(o$2.CONV, {
          currentConversation: onCurrentConversationUpdated
        });
        Jt.watch(o$2.CHAT, {
          quoteMessage: onQuoteMessageUpdated
        });
      });
      onUnmounted2(() => {
        Jt.unwatch(o$2.CONV, {
          currentConversation: onCurrentConversationUpdated
        });
        Jt.unwatch(o$2.CHAT, {
          quoteMessage: onQuoteMessageUpdated
        });
      });
      watch(
        () => props.inputToolbarDisplayType,
        (newVal) => {
          if (newVal !== "none") {
            changeDisplayType("editor");
          }
        }
      );
      function changeDisplayType(display) {
        displayType.value = display;
        if (display === "audio") {
          emits("changeToolbarDisplayType", "none");
        }
      }
      function changeToolbarDisplayType(displayType2) {
        emits("changeToolbarDisplayType", displayType2);
      }
      const onTyping = (inputContentEmpty, inputBlur) => {
        sendTyping(inputContentEmpty, inputBlur);
      };
      const onFocus = () => {
        if (isH5) {
          emits("changeToolbarDisplayType", "none");
        }
      };
      const insertEmoji = (emoji) => {
        var _a2, _b2;
        ((_a2 = editor == null ? void 0 : editor.value) == null ? void 0 : _a2.addEmoji) && ((_b2 = editor == null ? void 0 : editor.value) == null ? void 0 : _b2.addEmoji(emoji));
        showSendButton.value = true;
      };
      const reEdit = (content) => {
        var _a2, _b2;
        (_a2 = editor == null ? void 0 : editor.value) == null ? void 0 : _a2.resetEditor();
        showSendButton.value = false;
        (_b2 = editor == null ? void 0 : editor.value) == null ? void 0 : _b2.setEditorContent(content);
      };
      function onCurrentConversationUpdated(conversation) {
        currentConversation.value = conversation;
      }
      function onQuoteMessageUpdated(options) {
        if ((options == null ? void 0 : options.message) && (options == null ? void 0 : options.type) === "quote") {
          changeDisplayType("editor");
        }
      }
      const sendMessage = async () => {
        var _a2, _b2;
        const _editorContentList = (_a2 = editor.value) == null ? void 0 : _a2.getEditorContent();
        if (!_editorContentList || !currentConversation.value)
          return;
        const editorContentList = _editorContentList.map((editor2) => {
          if (editor2.type === "text") {
            editor2.payload.text = transformTextWithEmojiNamesToKeys(
              editor2.payload.text
            );
          }
          return editor2;
        });
        await sendMessages(editorContentList, currentConversation.value);
        (_b2 = editor.value) == null ? void 0 : _b2.resetEditor();
        showSendButton.value = false;
      };
      const isInputNotEmpty = (show) => {
        showSendButton.value = show;
      };
      __expose({
        insertEmoji,
        reEdit
      });
      const __returned__ = { ref: ref2, watch, onMounted: onMounted2, onUnmounted: onUnmounted2, emits, props, editor, currentConversation, displayType, showSendButton, changeDisplayType, changeToolbarDisplayType, onTyping, onFocus, insertEmoji, reEdit, onCurrentConversationUpdated, onQuoteMessageUpdated, sendMessage, isInputNotEmpty, MessageInputEditor, MessageInputAudio, MessageQuote, Icon: Icon$1, get faceIcon() {
        return faceIcon$1;
      }, get moreIcon() {
        return moreIcon;
      }, get isWeChat() {
        return isWeChat;
      }, get sendButtonIcon() {
        return sendButtonIcon;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$b(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("div", null, [
      vue$1.createElementVNode("div", { class: "message-quote-uni-container" }, [
        vue$1.createVNode($setup["MessageQuote"], {
          style: { minWidth: 0 },
          displayType: $setup.displayType
        }, null, 8, ["displayType"])
      ]),
      vue$1.createElementVNode("div", {
        class: vue$1.normalizeClass(["message-input", "message-input-h5"])
      }, [
        vue$1.createElementVNode("div", { class: "audio-main-content-line" }, [
          $setup.isWeChat && $setup.props.canSendAudio ? (vue$1.openBlock(), vue$1.createBlock($setup["MessageInputAudio"], {
            key: 0,
            class: vue$1.normalizeClass({
              "message-input-wx-audio-open": $setup.displayType === "audio"
            }),
            isEnableAudio: $setup.displayType === "audio",
            onChangeDisplayType: $setup.changeDisplayType
          }, null, 8, ["class", "isEnableAudio"])) : vue$1.createCommentVNode("v-if", true),
          vue$1.withDirectives(vue$1.createVNode($setup["MessageInputEditor"], {
            ref: "editor",
            class: "message-input-editor",
            placeholder: $setup.props.placeholder,
            isMuted: $setup.props.isMuted,
            muteText: $setup.props.muteText,
            enableInput: $setup.props.enableInput,
            enableTyping: $setup.props.enableTyping,
            onOnTyping: $setup.onTyping,
            onOnFocus: $setup.onFocus,
            onIsInputNotEmpty: $setup.isInputNotEmpty
          }, null, 8, ["placeholder", "isMuted", "muteText", "enableInput", "enableTyping"]), [
            [vue$1.vShow, $setup.displayType === "editor"]
          ]),
          vue$1.createElementVNode("div", { class: "icon-face-uniapp" }, [
            vue$1.createVNode($setup["Icon"], {
              class: "icon icon-face",
              file: $setup.faceIcon,
              size: "23px",
              hotAreaSize: "3px",
              onOnClick: _cache[0] || (_cache[0] = ($event) => $setup.changeToolbarDisplayType("emojiPicker"))
            }, null, 8, ["file"])
          ]),
          !$setup.showSendButton ? (vue$1.openBlock(), vue$1.createElementBlock("div", {
            key: 1,
            class: "icon-tool-uniapp"
          }, [
            vue$1.createVNode($setup["Icon"], {
              class: "icon icon-more",
              file: $setup.moreIcon,
              size: "23px",
              hotAreaSize: "3px",
              onOnClick: _cache[1] || (_cache[1] = ($event) => $setup.changeToolbarDisplayType("tools"))
            }, null, 8, ["file"])
          ])) : vue$1.createCommentVNode("v-if", true),
          $setup.showSendButton ? (vue$1.openBlock(), vue$1.createElementBlock("div", {
            key: 2,
            class: "send-button",
            onClick: $setup.sendMessage
          }, [
            vue$1.createVNode($setup["Icon"], {
              file: $setup.sendButtonIcon,
              width: "35px",
              height: "35px"
            }, null, 8, ["file"])
          ])) : vue$1.createCommentVNode("v-if", true)
        ])
      ])
    ]);
  }
  const MessageInput = /* @__PURE__ */ _export_sfc(_sfc_main$c, [["render", _sfc_render$b], ["__scopeId", "data-v-9c4d57d9"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-input/index-uniapp.vue"]]);
  const _sfc_main$b = /* @__PURE__ */ vue$1.defineComponent({
    __name: "index",
    props: {
      iconFile: {
        type: String,
        required: true
      },
      title: {
        type: String,
        default: ""
      },
      needDialog: {
        type: Boolean,
        default: true
      },
      iconWidth: {
        type: String,
        default: "20px"
      },
      iconHeight: {
        type: String,
        default: "20px"
      },
      // Whether to display the bottom popup dialog on mobile devices
      // Invalid on PC
      needBottomPopup: {
        type: Boolean,
        default: false
      },
      isH5EmojiShow: {
        type: Boolean,
        default: false
      },
      isH5Emoji: {
        type: Boolean,
        default: false
      },
      isH5ToolShow: {
        type: Boolean,
        default: false
      }
    },
    emits: ["onIconClick", "onDialogClose", "onDialogShow"],
    setup(__props, { expose: __expose, emit: __emit }) {
      const { ref: ref2 } = vue;
      const props = __props;
      const emits = __emit;
      const showDialog = ref2(false);
      const toolbarItemRef = ref2();
      const dialogRef = ref2();
      const toggleToolbarItem = () => {
        emits("onIconClick", dialogRef);
        if (!props.needDialog) {
          return;
        }
        toggleDialogDisplay(!showDialog.value);
      };
      const closeToolbarItem = () => {
        showDialog.value = false;
        emits("onDialogClose", dialogRef);
      };
      const toggleDialogDisplay = (showStatus) => {
        if (showDialog.value === showStatus) {
          return;
        }
        showDialog.value = showStatus;
        switch (showStatus) {
          case true:
            emits("onDialogShow", dialogRef);
            break;
          case false:
            emits("onDialogClose", dialogRef);
        }
      };
      const onPopupClose = () => {
        showDialog.value = false;
      };
      __expose({
        toggleDialogDisplay
      });
      const __returned__ = { ref: ref2, props, emits, showDialog, toolbarItemRef, dialogRef, toggleToolbarItem, closeToolbarItem, toggleDialogDisplay, onPopupClose, Icon: Icon$1, BottomPopup, get isUniFrameWork() {
        return isUniFrameWork;
      }, get isH5() {
        return isH5;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$a(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock(
      "div",
      {
        ref: "toolbarItemRef",
        class: vue$1.normalizeClass([
          "toolbar-item-container",
          "toolbar-item-container-h5",
          "toolbar-item-container-uni"
        ])
      },
      [
        $setup.isH5 && !$props.isH5Emoji && $props.isH5ToolShow || $setup.isUniFrameWork ? (vue$1.openBlock(), vue$1.createElementBlock(
          "div",
          {
            key: 0,
            class: vue$1.normalizeClass([
              "toolbar-item-container-icon",
              "toolbar-item-container-uni-icon",
              $setup.isH5 && "toolbar-item-container-h5-icon"
            ]),
            onClick: $setup.toggleToolbarItem
          },
          [
            vue$1.createVNode($setup["Icon"], {
              file: $setup.props.iconFile,
              class: "icon",
              width: $setup.props.iconWidth,
              height: $setup.props.iconHeight
            }, null, 8, ["file", "width", "height"])
          ],
          2
          /* CLASS */
        )) : vue$1.createCommentVNode("v-if", true),
        $setup.isUniFrameWork || $setup.isH5 && !$props.isH5Emoji && $props.isH5ToolShow ? (vue$1.openBlock(), vue$1.createElementBlock(
          "div",
          {
            key: 1,
            class: vue$1.normalizeClass(["toolbar-item-container-uni-title"])
          },
          vue$1.toDisplayString($setup.props.title),
          1
          /* TEXT */
        )) : vue$1.createCommentVNode("v-if", true),
        vue$1.withDirectives(vue$1.createElementVNode(
          "div",
          {
            ref: "dialogRef",
            class: vue$1.normalizeClass([
              "toolbar-item-container-dialog",
              "toolbar-item-container-h5-dialog",
              "toolbar-item-container-uni-dialog"
            ])
          },
          [
            $setup.props.needBottomPopup ? (vue$1.openBlock(), vue$1.createBlock($setup["BottomPopup"], {
              key: 0,
              class: "toolbar-bottom-popup",
              show: $setup.showDialog || $props.isH5EmojiShow,
              onTouchmove: _cache[0] || (_cache[0] = vue$1.withModifiers(() => {
              }, ["stop", "prevent"])),
              onOnClose: $setup.onPopupClose
            }, {
              default: vue$1.withCtx(() => [
                vue$1.renderSlot(_ctx.$slots, "default", {}, void 0, true)
              ]),
              _: 3
              /* FORWARDED */
            }, 8, ["show"])) : vue$1.renderSlot(_ctx.$slots, "default", { key: 1 }, void 0, true)
          ],
          512
          /* NEED_PATCH */
        ), [
          [vue$1.vShow, $setup.showDialog || $props.isH5EmojiShow]
        ])
      ],
      512
      /* NEED_PATCH */
    );
  }
  const ToolbarItemContainer = /* @__PURE__ */ _export_sfc(_sfc_main$b, [["render", _sfc_render$a], ["__scopeId", "data-v-3b20ee14"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-input-toolbar/toolbar-item-container/index.vue"]]);
  const imageUniIcon = "/assets/image-uni.3e951cbb.png";
  const cameraUniIcon = "/assets/camera-uni.e7fd6e1a.png";
  const _sfc_main$a = /* @__PURE__ */ vue$1.defineComponent({
    __name: "index",
    props: {
      // Image source: only valid for uni-app version, web version only supports selecting images from the album.
      // album: Select from album
      // camera: Take a photo using the camera
      imageSourceType: {
        type: String,
        default: "album"
      },
      isH5ToolShow: {
        type: Boolean,
        default: false
      }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const { ref: ref2, computed: computed2 } = vue;
      const props = __props;
      const inputRef = ref2();
      const currentConversation = ref2();
      const IMAGE_TOOLBAR_SHOW_MAP = {
        uni_album: {
          icon: imageUniIcon,
          title: Wt.t("图片")
        },
        uni_camera: {
          icon: cameraUniIcon,
          title: Wt.t("拍照")
        }
      };
      Jt.watch(o$2.CONV, {
        currentConversation: (conversation) => {
          currentConversation.value = conversation;
        }
      });
      const imageToolbarForShow = computed2(() => {
        return props.imageSourceType === "camera" ? IMAGE_TOOLBAR_SHOW_MAP["uni_camera"] : IMAGE_TOOLBAR_SHOW_MAP["uni_album"];
      });
      const onIconClick = () => {
        if (isWeChat && (i == null ? void 0 : i.chooseMedia)) {
          i == null ? void 0 : i.chooseMedia({
            count: 1,
            mediaType: ["image", "video"],
            sizeType: ["original", "compressed"],
            sourceType: [props.imageSourceType],
            // Use camera or select from album.
            success: function(res) {
              if (res.tempFiles[0].fileType == "image") {
                sendImageMessage(res);
              } else if (res.tempFiles[0].fileType == "video") {
                sendVideoMessage(res);
              }
            }
          });
        } else {
          i == null ? void 0 : i.chooseImage({
            count: 1,
            sourceType: [props.imageSourceType],
            // Use camera or select from album.
            success: function(res) {
              sendImageMessage(res);
            }
          });
        }
      };
      const sendImageMessage = (files2) => {
        var _a2, _b2, _c2, _d, _e2;
        if (!files2) {
          return;
        }
        const options = {
          to: ((_b2 = (_a2 = currentConversation == null ? void 0 : currentConversation.value) == null ? void 0 : _a2.groupProfile) == null ? void 0 : _b2.groupID) || ((_d = (_c2 = currentConversation == null ? void 0 : currentConversation.value) == null ? void 0 : _c2.userProfile) == null ? void 0 : _d.userID),
          conversationType: (_e2 = currentConversation == null ? void 0 : currentConversation.value) == null ? void 0 : _e2.type,
          payload: {
            file: files2
          },
          needReadReceipt: isEnabledMessageReadReceiptGlobal()
        };
        const sendMessageOptions = {};
        Qt.sendImageMessage(options, sendMessageOptions);
      };
      const sendVideoMessage = (file) => {
        var _a2, _b2, _c2, _d, _e2;
        if (!file) {
          return;
        }
        const options = {
          to: ((_b2 = (_a2 = currentConversation == null ? void 0 : currentConversation.value) == null ? void 0 : _a2.groupProfile) == null ? void 0 : _b2.groupID) || ((_d = (_c2 = currentConversation == null ? void 0 : currentConversation.value) == null ? void 0 : _c2.userProfile) == null ? void 0 : _d.userID),
          conversationType: (_e2 = currentConversation == null ? void 0 : currentConversation.value) == null ? void 0 : _e2.type,
          payload: {
            file
          },
          needReadReceipt: isEnabledMessageReadReceiptGlobal()
        };
        const sendMessageOptions = {};
        Qt.sendVideoMessage(options, sendMessageOptions);
      };
      const __returned__ = { ref: ref2, computed: computed2, props, inputRef, currentConversation, IMAGE_TOOLBAR_SHOW_MAP, imageToolbarForShow, onIconClick, sendImageMessage, sendVideoMessage, get isUniFrameWork() {
        return isUniFrameWork;
      }, ToolbarItemContainer };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$9(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createBlock($setup["ToolbarItemContainer"], {
      iconFile: $setup.imageToolbarForShow.icon,
      title: $setup.imageToolbarForShow.title,
      iconWidth: $setup.isUniFrameWork ? "32px" : "21px",
      iconHeight: $setup.isUniFrameWork ? "25px" : "18px",
      needDialog: false,
      onOnIconClick: $setup.onIconClick,
      isH5ToolShow: $props.isH5ToolShow
    }, null, 8, ["iconFile", "title", "iconWidth", "iconHeight", "isH5ToolShow"]);
  }
  const ImageUpload = /* @__PURE__ */ _export_sfc(_sfc_main$a, [["render", _sfc_render$9], ["__scopeId", "data-v-1218f204"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-input-toolbar/image-upload/index.vue"]]);
  const videoUniIcon = "/assets/video-uni.0b4d3e53.png";
  const _sfc_main$9 = /* @__PURE__ */ vue$1.defineComponent({
    __name: "index",
    props: {
      // Video source, only valid for uni-app version, web version only supports selecting videos from files
      // album: Select from files
      // camera: Take a video using the camera
      videoSourceType: {
        type: String,
        default: "album"
      }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const { ref: ref2 } = vue;
      const props = __props;
      const inputRef = ref2();
      const currentConversation = ref2();
      Jt.watch(o$2.CONV, {
        currentConversation: (conversation) => {
          currentConversation.value = conversation;
        }
      });
      const handleIcon = () => {
        switch (props.videoSourceType) {
          case "album":
            return videoUniIcon;
          case "camera":
            return cameraUniIcon;
          default:
            return videoUniIcon;
        }
      };
      const handleTitle = () => {
        if (props.videoSourceType === "camera") {
          return Wt.t("录制");
        } else {
          return Wt.t("视频");
        }
      };
      const onIconClick = () => {
        if (isWeChat && (i == null ? void 0 : i.chooseMedia)) {
          i == null ? void 0 : i.chooseMedia({
            mediaType: ["video"],
            count: 1,
            sourceType: [props.videoSourceType],
            maxDuration: 60,
            success: function(res) {
              sendVideoMessage(res);
            }
          });
        } else {
          i == null ? void 0 : i.chooseVideo({
            count: 1,
            sourceType: [props.videoSourceType],
            compressed: false,
            success: function(res) {
              sendVideoMessage(res);
            }
          });
        }
      };
      const sendVideoInWeb = (e2) => {
        var _a2, _b2;
        if (((_b2 = (_a2 = e2 == null ? void 0 : e2.target) == null ? void 0 : _a2.files) == null ? void 0 : _b2.length) <= 0) {
          return;
        }
        sendVideoMessage(e2 == null ? void 0 : e2.target);
        e2.target.value = "";
      };
      const sendVideoMessage = (file) => {
        var _a2, _b2, _c2, _d, _e2;
        if (!file) {
          return;
        }
        const options = {
          to: ((_b2 = (_a2 = currentConversation == null ? void 0 : currentConversation.value) == null ? void 0 : _a2.groupProfile) == null ? void 0 : _b2.groupID) || ((_d = (_c2 = currentConversation == null ? void 0 : currentConversation.value) == null ? void 0 : _c2.userProfile) == null ? void 0 : _d.userID),
          conversationType: (_e2 = currentConversation == null ? void 0 : currentConversation.value) == null ? void 0 : _e2.type,
          payload: {
            file
          },
          needReadReceipt: isEnabledMessageReadReceiptGlobal()
        };
        const sendMessageOptions = {};
        Qt.sendVideoMessage(options, sendMessageOptions);
      };
      const __returned__ = { ref: ref2, props, inputRef, currentConversation, handleIcon, handleTitle, onIconClick, sendVideoInWeb, sendVideoMessage, get TUITranslateService() {
        return Wt;
      }, get isUniFrameWork() {
        return isUniFrameWork;
      }, ToolbarItemContainer };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$8(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createBlock($setup["ToolbarItemContainer"], {
      iconFile: $setup.handleIcon(),
      title: $setup.handleTitle(),
      needDialog: false,
      iconWidth: $setup.isUniFrameWork ? "32px" : "21px",
      iconHeight: $setup.isUniFrameWork ? $setup.props.videoSourceType === "album" ? "20px" : "25px" : "18px",
      onOnIconClick: $setup.onIconClick
    }, {
      default: vue$1.withCtx(() => [
        vue$1.createElementVNode("div", {
          class: vue$1.normalizeClass(["video-upload", "video-upload-h5"])
        }, [
          vue$1.createElementVNode("input", {
            ref: "inputRef",
            title: $setup.TUITranslateService.t("视频"),
            type: "file",
            "data-type": "video",
            accept: "video/*",
            onChange: $setup.sendVideoInWeb
          }, null, 40, ["title"])
        ])
      ]),
      _: 1
      /* STABLE */
    }, 8, ["iconFile", "title", "iconWidth", "iconHeight"]);
  }
  const VideoUpload = /* @__PURE__ */ _export_sfc(_sfc_main$9, [["render", _sfc_render$8], ["__scopeId", "data-v-0f813683"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-input-toolbar/video-upload/index.vue"]]);
  const faceIcon = "/assets/face.78c88f77.png";
  const _sfc_main$8 = /* @__PURE__ */ vue$1.defineComponent({
    __name: "emoji-picker-dialog",
    emits: ["insertEmoji", "onClose", "sendMessage"],
    setup(__props, { expose: __expose, emit: __emit }) {
      var _a2;
      __expose();
      const { ref: ref2, onMounted: onMounted2, onUnmounted: onUnmounted2 } = vue;
      const emits = __emit;
      const currentTabIndex = ref2(0);
      const currentConversation = ref2();
      const emojiPickerDialog = ref2();
      const emojiPickerListRef = ref2();
      const list = ref2(initEmojiList());
      const currentTabItem = ref2(list == null ? void 0 : list.value[0]);
      const currentEmojiList = ref2((_a2 = list == null ? void 0 : list.value[0]) == null ? void 0 : _a2.list);
      onMounted2(() => {
        Jt.watch(o$2.CONV, {
          currentConversation: onCurrentConversationUpdate
        });
      });
      onUnmounted2(() => {
        Jt.unwatch(o$2.CONV, {
          currentConversation: onCurrentConversationUpdate
        });
      });
      const toggleEmojiTab = (index) => {
        var _a3;
        currentTabIndex.value = index;
        currentTabItem.value = list == null ? void 0 : list.value[index];
        currentEmojiList.value = (_a3 = list == null ? void 0 : list.value[index]) == null ? void 0 : _a3.list;
      };
      const select = (item, index) => {
        var _a3, _b2, _c2;
        const options = {
          emoji: { key: item, name: convertKeyToEmojiName(item) },
          type: (_a3 = currentTabItem == null ? void 0 : currentTabItem.value) == null ? void 0 : _a3.type
        };
        switch ((_b2 = currentTabItem == null ? void 0 : currentTabItem.value) == null ? void 0 : _b2.type) {
          case EMOJI_TYPE.BASIC:
            options.url = ((_c2 = currentTabItem == null ? void 0 : currentTabItem.value) == null ? void 0 : _c2.url) + BASIC_EMOJI_URL_MAPPING[item];
            uni.$emit("insert-emoji", options);
            break;
          case EMOJI_TYPE.BIG:
            sendFaceMessage(index, currentTabItem.value);
            break;
          case EMOJI_TYPE.CUSTOM:
            sendFaceMessage(index, currentTabItem.value);
            break;
        }
      };
      const sendFaceMessage = (index, listItem) => {
        var _a3, _b2, _c2, _d, _e2;
        const options = {
          to: ((_b2 = (_a3 = currentConversation == null ? void 0 : currentConversation.value) == null ? void 0 : _a3.groupProfile) == null ? void 0 : _b2.groupID) || ((_d = (_c2 = currentConversation == null ? void 0 : currentConversation.value) == null ? void 0 : _c2.userProfile) == null ? void 0 : _d.userID),
          conversationType: (_e2 = currentConversation == null ? void 0 : currentConversation.value) == null ? void 0 : _e2.type,
          payload: {
            index: listItem.emojiGroupID,
            data: listItem.list[index]
          },
          needReadReceipt: isEnabledMessageReadReceiptGlobal()
        };
        Qt.sendFaceMessage(options);
      };
      function sendMessage() {
        uni.$emit("send-message-in-emoji-picker");
      }
      function onCurrentConversationUpdate(conversation) {
        currentConversation.value = conversation;
      }
      function initEmojiList() {
        return EMOJI_GROUP_LIST;
      }
      const __returned__ = { ref: ref2, onMounted: onMounted2, onUnmounted: onUnmounted2, emits, currentTabIndex, currentConversation, emojiPickerDialog, emojiPickerListRef, list, currentTabItem, currentEmojiList, toggleEmojiTab, select, sendFaceMessage, sendMessage, onCurrentConversationUpdate, initEmojiList, get TUITranslateService() {
        return Wt;
      }, Icon: Icon$1, get faceIcon() {
        return faceIcon;
      }, get EMOJI_TYPE() {
        return EMOJI_TYPE;
      }, get isUniFrameWork() {
        return isUniFrameWork;
      }, get isH5() {
        return isH5;
      }, get BASIC_EMOJI_URL_MAPPING() {
        return BASIC_EMOJI_URL_MAPPING;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$7(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock(
      "div",
      {
        ref: "emojiPickerDialog",
        class: vue$1.normalizeClass({
          "emoji-picker": true,
          "emoji-picker-h5": true
        })
      },
      [
        vue$1.createElementVNode(
          "ul",
          {
            ref: "emojiPickerListRef",
            class: vue$1.normalizeClass(["emoji-picker-list", "emoji-picker-h5-list"])
          },
          [
            (vue$1.openBlock(true), vue$1.createElementBlock(
              vue$1.Fragment,
              null,
              vue$1.renderList($setup.currentEmojiList, (childrenItem, childrenIndex) => {
                return vue$1.openBlock(), vue$1.createElementBlock("li", {
                  key: childrenIndex,
                  class: "emoji-picker-list-item",
                  onClick: ($event) => $setup.select(childrenItem, childrenIndex)
                }, [
                  $setup.currentTabItem.type === $setup.EMOJI_TYPE.BASIC ? (vue$1.openBlock(), vue$1.createElementBlock("img", {
                    key: 0,
                    class: "emoji",
                    src: $setup.currentTabItem.url + $setup.BASIC_EMOJI_URL_MAPPING[childrenItem]
                  }, null, 8, ["src"])) : $setup.currentTabItem.type === $setup.EMOJI_TYPE.BIG ? (vue$1.openBlock(), vue$1.createElementBlock("img", {
                    key: 1,
                    class: "emoji-big",
                    src: $setup.currentTabItem.url + childrenItem + "@2x.png"
                  }, null, 8, ["src"])) : (vue$1.openBlock(), vue$1.createElementBlock("img", {
                    key: 2,
                    class: "emoji-custom emoji-big",
                    src: $setup.currentTabItem.url + childrenItem
                  }, null, 8, ["src"]))
                ], 8, ["onClick"]);
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ],
          512
          /* NEED_PATCH */
        ),
        vue$1.createElementVNode("ul", { class: "emoji-picker-tab" }, [
          (vue$1.openBlock(true), vue$1.createElementBlock(
            vue$1.Fragment,
            null,
            vue$1.renderList($setup.list, (item, index) => {
              return vue$1.openBlock(), vue$1.createElementBlock("li", {
                key: index,
                class: "emoji-picker-tab-item",
                onClick: ($event) => $setup.toggleEmojiTab(index)
              }, [
                item.type === $setup.EMOJI_TYPE.BASIC ? (vue$1.openBlock(), vue$1.createBlock($setup["Icon"], {
                  key: 0,
                  class: "icon",
                  file: $setup.faceIcon
                }, null, 8, ["file"])) : item.type === $setup.EMOJI_TYPE.BIG ? (vue$1.openBlock(), vue$1.createElementBlock("img", {
                  key: 1,
                  class: "icon-big",
                  src: item.url + item.list[0] + "@2x.png"
                }, null, 8, ["src"])) : (vue$1.openBlock(), vue$1.createElementBlock("img", {
                  key: 2,
                  class: "icon-custom icon-big",
                  src: item.url + item.list[0]
                }, null, 8, ["src"]))
              ], 8, ["onClick"]);
            }),
            128
            /* KEYED_FRAGMENT */
          )),
          $setup.isUniFrameWork || $setup.isH5 ? (vue$1.openBlock(), vue$1.createElementBlock(
            "li",
            {
              key: 0,
              class: "send-btn",
              onClick: $setup.sendMessage
            },
            vue$1.toDisplayString($setup.TUITranslateService.t("发送")),
            1
            /* TEXT */
          )) : vue$1.createCommentVNode("v-if", true)
        ])
      ],
      512
      /* NEED_PATCH */
    );
  }
  const EmojiPickerDialog = /* @__PURE__ */ _export_sfc(_sfc_main$8, [["render", _sfc_render$7], ["__scopeId", "data-v-28fc796a"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-input-toolbar/emoji-picker/emoji-picker-dialog.vue"]]);
  const __default__ = {
    options: {
      styleIsolation: "shared"
    }
  };
  const _sfc_main$7 = /* @__PURE__ */ vue$1.defineComponent({
    ...__default__,
    __name: "index-uniapp",
    props: {
      displayType: { type: String, required: true },
      isH5EmojiShow: { type: Boolean, required: false },
      isH5ToolShow: { type: Boolean, required: false }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const { ref: ref2, onUnmounted: onUnmounted2, onMounted: onMounted2 } = vue;
      const props = __props;
      const currentConversation = ref2();
      const isGroup = ref2(false);
      const isSwiperIndicatorDotsEnable = ref2(false);
      const onCurrentConversationUpdate = (conversation) => {
        var _a2;
        currentConversation.value = conversation;
        isGroup.value = ((_a2 = currentConversation == null ? void 0 : currentConversation.value) == null ? void 0 : _a2.type) === qt.TYPES.CONV_GROUP;
      };
      onMounted2(() => {
        Jt.watch(o$2.CONV, {
          currentConversation: onCurrentConversationUpdate
        });
      });
      onUnmounted2(() => {
        Jt.unwatch(o$2.CONV, {
          currentConversation: onCurrentConversationUpdate
        });
      });
      const __returned__ = { ref: ref2, onUnmounted: onUnmounted2, onMounted: onMounted2, props, currentConversation, isGroup, isSwiperIndicatorDotsEnable, onCurrentConversationUpdate, get TUIGlobal() {
        return i;
      }, get isWeChat() {
        return isWeChat;
      }, ImageUpload, VideoUpload, EmojiPickerDialog };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$6(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("div", {
      class: vue$1.normalizeClass([
        "message-input-toolbar",
        "message-input-toolbar-h5",
        "message-input-toolbar-uni"
      ])
    }, [
      $setup.props.displayType === "emojiPicker" ? (vue$1.openBlock(), vue$1.createElementBlock("div", { key: 0 }, [
        vue$1.createVNode($setup["EmojiPickerDialog"])
      ])) : (vue$1.openBlock(), vue$1.createElementBlock("div", { key: 1 }, [
        vue$1.createElementVNode("swiper", {
          class: vue$1.normalizeClass(["message-input-toolbar-swiper"]),
          "indicator-dots": $setup.isSwiperIndicatorDotsEnable,
          autoplay: false,
          circular: false
        }, [
          vue$1.createElementVNode("swiper-item", {
            class: vue$1.normalizeClass([
              "message-input-toolbar-list",
              "message-input-toolbar-h5-list",
              "message-input-toolbar-uni-list"
            ])
          }, [
            vue$1.createVNode($setup["ImageUpload"], { imageSourceType: "camera" }),
            vue$1.createVNode($setup["ImageUpload"], { imageSourceType: "album" }),
            $setup.isWeChat && $setup.TUIGlobal.chooseMedia !== void 0 ? (vue$1.openBlock(), vue$1.createBlock($setup["VideoUpload"], {
              key: 0,
              videoSourceType: "album"
            })) : vue$1.createCommentVNode("v-if", true),
            $setup.isWeChat && $setup.TUIGlobal.chooseMedia !== void 0 ? (vue$1.openBlock(), vue$1.createBlock($setup["VideoUpload"], {
              key: 1,
              videoSourceType: "camera"
            })) : vue$1.createCommentVNode("v-if", true)
          ])
        ], 8, ["indicator-dots"])
      ]))
    ]);
  }
  const MessageInputToolbar = /* @__PURE__ */ _export_sfc(_sfc_main$7, [["render", _sfc_render$6], ["__scopeId", "data-v-2645d0ff"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-input-toolbar/index-uniapp.vue"]]);
  const _sfc_main$6 = /* @__PURE__ */ vue$1.defineComponent({
    __name: "toolbar-button-human-service",
    props: {
      title: { type: String, required: false, default: "" },
      icon: { type: null, required: false, default: "" }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const { ref: ref2, onMounted: onMounted2, onUnmounted: onUnmounted2 } = vue;
      const currentConversation = ref2();
      const props = __props;
      onMounted2(() => {
        Jt.watch(o$2.CONV, {
          currentConversation: onCurrentConversationUpdate
        });
      });
      onUnmounted2(() => {
        Jt.unwatch(o$2.CONV, {
          currentConversation: onCurrentConversationUpdate
        });
      });
      const onCurrentConversationUpdate = (conversation) => {
        currentConversation.value = conversation;
      };
      const onClick = () => {
        var _a2;
        Qt.sendTextMessage({
          to: getTo(currentConversation == null ? void 0 : currentConversation.value),
          conversationType: (_a2 = currentConversation == null ? void 0 : currentConversation.value) == null ? void 0 : _a2.type,
          payload: {
            text: Wt.t("AIDesk.转人工服务")
          },
          needReadReceipt: isEnabledMessageReadReceiptGlobal()
        });
      };
      const __returned__ = { ref: ref2, onMounted: onMounted2, onUnmounted: onUnmounted2, currentConversation, props, onCurrentConversationUpdate, onClick, get isH5() {
        return isH5;
      }, Icon: Icon$1, get TUITranslateService() {
        return Wt;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$5(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock(
      "div",
      {
        class: vue$1.normalizeClass(["toolbar-button", $setup.isH5 ? "toolbar-button-h5" : ""]),
        onClick: $setup.onClick
      },
      [
        $setup.props.icon ? (vue$1.openBlock(), vue$1.createBlock($setup["Icon"], {
          key: 0,
          class: "toolbar-button-icon",
          file: $setup.props.icon,
          width: "14px",
          height: "14px"
        }, null, 8, ["file"])) : vue$1.createCommentVNode("v-if", true),
        vue$1.createElementVNode(
          "div",
          { class: "toolbar-button-text" },
          vue$1.toDisplayString($setup.props.title || $setup.TUITranslateService.t("AIDesk.转人工服务")),
          1
          /* TEXT */
        )
      ],
      2
      /* CLASS */
    );
  }
  const ToolbarButtonHumanService = /* @__PURE__ */ _export_sfc(_sfc_main$6, [["render", _sfc_render$5], ["__scopeId", "data-v-3cc928e6"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-toolbar-button/toolbar-button-human-service.vue"]]);
  const _sfc_main$5 = /* @__PURE__ */ vue$1.defineComponent({
    __name: "toolbar-button-service-rating",
    props: {
      title: { type: String, required: false, default: "" },
      icon: { type: null, required: false, default: "" }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const { ref: ref2, onMounted: onMounted2, onUnmounted: onUnmounted2 } = vue;
      const currentConversation = ref2();
      const props = __props;
      onMounted2(() => {
        Jt.watch(o$2.CONV, {
          currentConversation: onCurrentConversationUpdate
        });
      });
      onUnmounted2(() => {
        Jt.unwatch(o$2.CONV, {
          currentConversation: onCurrentConversationUpdate
        });
      });
      const onCurrentConversationUpdate = (conversation) => {
        currentConversation.value = conversation;
      };
      const onClick = () => {
        var _a2;
        Qt.sendCustomMessage({
          to: getTo(currentConversation == null ? void 0 : currentConversation.value),
          conversationType: (_a2 = currentConversation == null ? void 0 : currentConversation.value) == null ? void 0 : _a2.type,
          payload: {
            data: JSON.stringify({
              src: CUSTOM_MESSAGE_SRC.USER_SATISFACTION,
              customerServicePlugin: 0
            })
          },
          needReadReceipt: isEnabledMessageReadReceiptGlobal()
        }, { onlineUserOnly: true });
      };
      const __returned__ = { ref: ref2, onMounted: onMounted2, onUnmounted: onUnmounted2, currentConversation, props, onCurrentConversationUpdate, onClick, get isH5() {
        return isH5;
      }, Icon: Icon$1, get TUITranslateService() {
        return Wt;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$4(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock(
      "div",
      {
        class: vue$1.normalizeClass(["toolbar-button", $setup.isH5 ? "toolbar-button-h5" : ""]),
        onClick: $setup.onClick
      },
      [
        $setup.props.icon ? (vue$1.openBlock(), vue$1.createBlock($setup["Icon"], {
          key: 0,
          class: "toolbar-button-icon",
          file: $setup.props.icon,
          width: "14px",
          height: "14px"
        }, null, 8, ["file"])) : vue$1.createCommentVNode("v-if", true),
        vue$1.createElementVNode(
          "div",
          { class: "toolbar-button-text" },
          vue$1.toDisplayString($setup.props.title || $setup.TUITranslateService.t("AIDesk.服务评价")),
          1
          /* TEXT */
        )
      ],
      2
      /* CLASS */
    );
  }
  const ToolbarButtonServiceRating = /* @__PURE__ */ _export_sfc(_sfc_main$5, [["render", _sfc_render$4], ["__scopeId", "data-v-e586cf4f"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-toolbar-button/toolbar-button-service-rating.vue"]]);
  const _sfc_main$4 = /* @__PURE__ */ vue$1.defineComponent({
    __name: "toolbar-button-end-human-service",
    props: {
      title: { type: String, required: false, default: "" },
      icon: { type: null, required: false, default: "" }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const { ref: ref2, onMounted: onMounted2, onUnmounted: onUnmounted2 } = vue;
      const currentConversation = ref2();
      const props = __props;
      onMounted2(() => {
        Jt.watch(o$2.CONV, {
          currentConversation: onCurrentConversationUpdate
        });
      });
      onUnmounted2(() => {
        Jt.unwatch(o$2.CONV, {
          currentConversation: onCurrentConversationUpdate
        });
      });
      const onCurrentConversationUpdate = (conversation) => {
        currentConversation.value = conversation;
      };
      const onClick = () => {
        var _a2;
        Qt.sendCustomMessage({
          to: getTo(currentConversation == null ? void 0 : currentConversation.value),
          conversationType: (_a2 = currentConversation == null ? void 0 : currentConversation.value) == null ? void 0 : _a2.type,
          payload: {
            data: JSON.stringify({
              customerServicePlugin: 0,
              src: CUSTOM_MESSAGE_SRC.USER_END_SESSION
            })
          },
          needReadReceipt: isEnabledMessageReadReceiptGlobal()
        }, { onlineUserOnly: true });
      };
      const __returned__ = { ref: ref2, onMounted: onMounted2, onUnmounted: onUnmounted2, currentConversation, props, onCurrentConversationUpdate, onClick, get isH5() {
        return isH5;
      }, Icon: Icon$1, get TUITranslateService() {
        return Wt;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock(
      "div",
      {
        class: vue$1.normalizeClass(["toolbar-button", $setup.isH5 ? "toolbar-button-h5" : ""]),
        onClick: $setup.onClick
      },
      [
        $setup.props.icon ? (vue$1.openBlock(), vue$1.createBlock($setup["Icon"], {
          key: 0,
          class: "toolbar-button-icon",
          file: $setup.props.icon,
          width: "14px",
          height: "14px"
        }, null, 8, ["file"])) : vue$1.createCommentVNode("v-if", true),
        vue$1.createElementVNode(
          "div",
          { class: "toolbar-button-text" },
          vue$1.toDisplayString($setup.props.title || $setup.TUITranslateService.t("AIDesk.结束人工会话")),
          1
          /* TEXT */
        )
      ],
      2
      /* CLASS */
    );
  }
  const ToolbarButtonEndHumanService = /* @__PURE__ */ _export_sfc(_sfc_main$4, [["render", _sfc_render$3], ["__scopeId", "data-v-9e69c7bb"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-toolbar-button/toolbar-button-end-human-service.vue"]]);
  const _sfc_main$3 = /* @__PURE__ */ vue$1.defineComponent({
    __name: "index",
    props: {
      toolbarButtonList: { type: Array, required: false, default: () => [] }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const { ref: ref2, onMounted: onMounted2, onUnmounted: onUnmounted2 } = vue;
      const props = __props;
      const isInHumanService = ref2(false);
      const currentConversation = ref2();
      onMounted2(() => {
        Jt.watch(o$2.CONV, {
          currentConversation: onCurrentConversationUpdate
        });
        Jt.watch(o$2.CUSTOM, {
          isInHumanService: onInHumanServiceUpdate
        });
      });
      onUnmounted2(() => {
        Jt.unwatch(o$2.CONV, {
          currentConversation: onCurrentConversationUpdate
        });
        Jt.unwatch(o$2.CUSTOM, {
          isInHumanService: onInHumanServiceUpdate
        });
      });
      const onCurrentConversationUpdate = (conversation) => {
        currentConversation.value = conversation;
      };
      const onInHumanServiceUpdate = (value) => {
        isInHumanService.value = value;
      };
      function onClick(item, index) {
        var _a2;
        if (item.type === 1 && item.content) {
          Qt.sendTextMessage({
            to: getTo(currentConversation == null ? void 0 : currentConversation.value),
            conversationType: (_a2 = currentConversation == null ? void 0 : currentConversation.value) == null ? void 0 : _a2.type,
            payload: {
              text: item.content
            },
            needReadReceipt: isEnabledMessageReadReceiptGlobal()
          });
        } else if (item.type === 2 && item.content) {
          openSafeUrl(item.content);
        } else if (props.toolbarButtonList !== void 0 && typeof props.toolbarButtonList[index].clickEvent === "function") {
          props.toolbarButtonList[index].clickEvent();
        }
      }
      function shouldRender(item) {
        if (item.isEnabled === 1) {
          return true;
        } else if (item.isEnabled === 0) {
          return false;
        } else if (item.renderCondition) {
          return typeof item.renderCondition === "function" ? item.renderCondition() : false;
        }
        return false;
      }
      const __returned__ = { ref: ref2, onMounted: onMounted2, onUnmounted: onUnmounted2, props, isInHumanService, currentConversation, onCurrentConversationUpdate, onInHumanServiceUpdate, onClick, shouldRender, get isH5() {
        return isH5;
      }, Icon: Icon$1, get TOOLBAR_BUTTON_TYPE() {
        return TOOLBAR_BUTTON_TYPE;
      }, ToolbarButtonHumanService, ToolbarButtonServiceRating, ToolbarButtonEndHumanService };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("div", { class: "toolbar-button-container" }, [
      (vue$1.openBlock(true), vue$1.createElementBlock(
        vue$1.Fragment,
        null,
        vue$1.renderList($setup.props.toolbarButtonList, (item, index) => {
          return vue$1.openBlock(), vue$1.createElementBlock(
            vue$1.Fragment,
            null,
            [
              item.presetId === $setup.TOOLBAR_BUTTON_TYPE.HUMAN_SERVICE && $setup.shouldRender(item) && !$setup.isInHumanService ? (vue$1.openBlock(), vue$1.createBlock($setup["ToolbarButtonHumanService"], {
                key: 0,
                title: item.title,
                icon: item.icon
              }, null, 8, ["title", "icon"])) : item.presetId === $setup.TOOLBAR_BUTTON_TYPE.SERVICE_RATING && $setup.shouldRender(item) && $setup.isInHumanService ? (vue$1.openBlock(), vue$1.createBlock($setup["ToolbarButtonServiceRating"], {
                key: 1,
                title: item.title,
                icon: item.icon
              }, null, 8, ["title", "icon"])) : item.presetId === $setup.TOOLBAR_BUTTON_TYPE.END_HUMAN_SERVICE && $setup.shouldRender(item) && $setup.isInHumanService ? (vue$1.openBlock(), vue$1.createBlock($setup["ToolbarButtonEndHumanService"], {
                key: 2,
                title: item.title,
                icon: item.icon
              }, null, 8, ["title", "icon"])) : $setup.shouldRender(item) && !item.presetId ? (vue$1.openBlock(), vue$1.createElementBlock("div", {
                key: index,
                class: vue$1.normalizeClass(["toolbar-button", $setup.isH5 ? "toolbar-button-h5" : ""]),
                onClick: ($event) => $setup.onClick(item, index)
              }, [
                item.icon ? (vue$1.openBlock(), vue$1.createBlock($setup["Icon"], {
                  key: 0,
                  class: "toolbar-button-icon",
                  file: item.icon,
                  width: "18px",
                  height: "18px"
                }, null, 8, ["file"])) : vue$1.createCommentVNode("v-if", true),
                vue$1.createElementVNode(
                  "div",
                  { class: "toolbar-button-text" },
                  vue$1.toDisplayString(item.title),
                  1
                  /* TEXT */
                )
              ], 10, ["onClick"])) : vue$1.createCommentVNode("v-if", true)
            ],
            64
            /* STABLE_FRAGMENT */
          );
        }),
        256
        /* UNKEYED_FRAGMENT */
      ))
    ]);
  }
  const MessageToolbarButton = /* @__PURE__ */ _export_sfc(_sfc_main$3, [["render", _sfc_render$2], ["__scopeId", "data-v-8169ee77"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-toolbar-button/index.vue"]]);
  const TUIChat$9 = {
    "按Enter发送，Ctrl+Enter换行": "Press Enter to send a message and Ctrl+Enter to start a new line",
    "表情": "[Face]",
    "查看更多": "View more",
    "撤回": "Recall",
    "撤回了一条消息": " recalled a message",
    "打开": "Open",
    "单击下载": "Click download",
    "下载": "Download",
    "点此投诉": "Complain",
    "点击处理": "Click action",
    "对方正在输入": "Typing...",
    "发起群视频": "Make group video call",
    "发起群语音": "Make group voice call",
    "发起通话": "Start Call",
    "发送失败": "send failed",
    "复制": "Copy",
    "复制成功": "Copied to clipboard",
    "该消息不存在": "The message does not exist",
    "关闭阅读状态": "Read status closed",
    "管理员开启全员禁言": "The admin enables Mute All",
    "欢迎使用TUICallKit": "Welcome to TUICallKit",
    "回到最新位置": "Back to the latest location",
    "回复": "Reply",
    "回复详情": "Replies",
    "集成TUICallKit": " Integrate TUICallKit ",
    "检测到您暂未集成TUICallKit，无法体验音视频通话功能": "It is detected that you have not integrated TUI CallKit yet, so you cannot experience the audio and video call. ",
    "结束群聊": "Edit Group Call",
    "进行体验": "to experience.",
    "经度": "Longitude",
    "拒绝": "Reject",
    "拒绝通话": "Decline Call",
    "开通腾讯实时音视频服务": "Integration Tencent Real-Time Communication",
    "聊天记录": "[Chat history]",
    "描述": "Description",
    "内容包含敏感词汇": "Content contains sensitive words",
    "您": "You",
    "您当前购买使用的套餐包暂未开通此功能": "The package you purchased does not support this ability.",
    "您当前购买使用的套餐包暂未开通群消息已读回执功能": "The package you purchased does not support the read receipt of group messages.",
    "您当前购买使用的套餐包暂未开通在线用户列表功能": "The package you purchased does not support the online user list.",
    "您已被管理员禁言": "You have been muted by the admin",
    "您有": "You have",
    "请点击": "Please click",
    "请输入消息": "Enter a message",
    "取消": "Cancel",
    "取消通话": "Cancel Call",
    "全部已读": "All read",
    "确定": "Submit",
    "确认重发该消息？": "Confirm to resend the message?",
    "人关闭阅读状态": " read status closed",
    "人未读": " unread",
    "人已读": " read",
    "删除": "Delete",
    "涉及敏感内容": "Sensitive content",
    "申请加入": "Application for join in",
    "视频": "[video]",
    "视频通话": "Video Call",
    "条回复": "replies",
    "条入群申请": "Item group application",
    "条新消息": " new messages",
    "通话时长": "Duration",
    "同意": "Agree",
    "图片": "[Image]",
    "图片消息失败,无效的图片格式": "Image message failed, invalid image format.",
    "纬度": "Latitude",
    "未读": "Unread",
    "位置": "[Location]",
    "文件": "[File]",
    "文件不存在,请检查文件路径是否正确": "The file does not exist, please check if the file path is correct.",
    "文件大小超出了限制,如果上传文件,最大限制是100MB": "The file size exceeds the limit; if uploading a file, the maximum limit is 100MB.",
    "文件消息失败,禁止发送违规封禁的文件": "File message failed, sending prohibited and banned files is not allowed.",
    "我": "I",
    "无法查看": "unable to view",
    "无法定位到原消息": "Unable to navigate to the original message",
    "无法收听": "unable to listen",
    "正在加载": "Loading...",
    "加载结束": "Load end",
    "无应答": "No Answer",
    "系统消息": "System message",
    "消息": "[message]",
    "消息或者资料中文本存在敏感内容,发送失败": "Sensitive content found in the message or information text, sending failed.",
    "消息详情": "Message Detail",
    "消息长度超出限制,消息长度不要超过12K": "Message length exceeds the limit; please keep the message length under 12K.",
    "消息中图片存在敏感内容,发送失败": " Sensitive content is found in the picture in the message, sending failed.",
    "选择提醒的人": "Select Contact",
    "已读": "Read",
    "已过撤回时限": "Withdrawal deadline has passed",
    "已接听": "Answered",
    "已拒绝": "Rejected",
    "已同意": "Approved",
    "引用": "Reference",
    "引用失败": "quote failed",
    "语音": "[Voice]",
    "语音通话": "Voice Call",
    "重新编辑": "Re-edit",
    "重新发送": "Resend",
    "转发": "Forward",
    "翻译": "Translate",
    "转文字": "Convert",
    "隐藏": "Hidden",
    "转发给": "Forward to",
    "自定义": "[custom message]",
    "自定义消息": "Custom message",
    "腾讯云 IM": "Tencent Cloud Chat",
    "空": "Empty",
    "文本包含本地审核拦截词": "Text contains local moderation blocking words",
    "按住说话": "Hold to speak",
    "抬起发送": "Release to send",
    "抬起取消": "Release to cancel",
    "正在录音": "Recording",
    "继续上滑可取消": "Continue to swipe to cancel",
    "松开手指 取消发送": "Release to cancel",
    "此机型暂不支持复制功能": "This model does not support the copy",
    "请开通翻译功能": "Please open the translation feature",
    "请开通语音转文字功能": "Please open the convert feature",
    "翻译中": "Translating",
    "转换中": "Converting",
    "由IM提供翻译支持": "support by IM",
    "所有人": "All",
    "已达到表情回应上限数量": "You have reached the max reaction limit",
    "等": "and others",
    "人": "users",
    "返回": "Back",
    "关闭": "Close",
    "多选": "Select",
    "合并转发": "Combine Forward",
    "逐条转发": "One-By-One Forward",
    "未选择消息": "No message selected",
    "[草稿]": "[Drafts]",
    "[消息]": "[Message]",
    "[文本]": "[Text]",
    "[自定义消息]": "[Custom Message]",
    "[图片]": "[Image]",
    "[音频]": "[Voice]",
    "[语音]": "[Voice]",
    "[视频]": "[Video]",
    "[文件]": "[File]",
    "[位置]": "[Location]",
    "[地理位置]": "[Location]",
    "[动画表情]": "[Animated Sticker]",
    "[群提示]": "[Group Tip]",
    "[群提示消息]": "[Group Notification]",
    "[聊天记录]": "[Chat History]",
    "[机器人自定义消息]": "[Robot Custom Message]",
    "引用内容已撤回": "The quoted message has been withdrawn",
    "群聊的聊天记录": "Chat history for Group Chat",
    "和": "and",
    "的聊天记录": "chat history",
    "请升级IMSDK到v2.10.1或更高版本查看此消息": "Please upgrade IMSDK to v2.10.1 or higher to view this message",
    "该群聊已被解散": "The group has been dismissed",
    "您已被管理员移出群聊": "You have been removed from the group by the admin.",
    "您已退出该群聊": "You have left the group.",
    "您已被禁止聊天": "you have been forbidden to speak",
    "账号被强制下线": "Account forcibly logged out",
    "登录失败": "Login failed"
  };
  const Component$9 = {
    "图片 url 不存在": "Image url does not exist",
    "暂不支持下载此类型图片": "Downloading this type of image is not currently supported",
    "大图提取中": "Processing large image",
    "已保存至相册": "Saved to album",
    "图片下载失败": "Image download failed"
  };
  const Time$9 = {
    "周": "week(s) ",
    "天": "day(s)",
    "小时": "hour(s) ",
    "分钟": "minute(s)",
    "刚刚": "Just now",
    "前": " ago",
    "昨天": "Yesterday",
    "星期一": "Monday",
    "星期二": "Tuesday",
    "星期三": "Wednesday",
    "星期四": "Thursday",
    "星期五": "Friday",
    "星期六": "Saturday",
    "星期日": "Sunday",
    "一月": "January",
    "二月": "February",
    "三月": "March",
    "四月": "April",
    "五月": "May",
    "六月": "June",
    "七月": "July",
    "八月": "August",
    "九月": "September",
    "十月": "October",
    "十一月": "November",
    "十二月": "December",
    "一": "Mon",
    "二": "Tues",
    "三": "Wed",
    "四": "Thur",
    "五": "Fri",
    "六": "Sat",
    "日": "Sun"
  };
  const AIDesk$9 = {
    "结束人工会话": "End human service",
    "转人工服务": "Human service",
    "跳转": "Goto",
    "立即填写": "Fill now",
    "已提交": "Submitted",
    "提交": "Submit",
    "查看内容": "View content",
    "请填写必填项": "Please fill in the required fields",
    "Hi，我是": "Hi, I'm ",
    "请输入内容": "Please enter the content",
    "如果满意请给好评哦～": "If you're satisfied, please give a good review~",
    "请对本次服务进行评价": "Please rate this service",
    "提交评价": "Feedback",
    "服务评价": "Feedback",
    "并发限制": "There are currently too many users accessing the service. Please try again later",
    "分支选项异常": "Content is abnormal, please check the task flow configuration"
  };
  const messages$a = {
    en: {
      "取消": "Cancel",
      "确定": "Confirm",
      "发送": "Send",
      "系统通知": "System notification",
      "关闭": "Close",
      "图片": "Image",
      "文件": "File",
      "表情": "Emoji",
      "视频": "Video",
      "录制": "Record",
      "拍照": "Take a photo",
      AIDesk: AIDesk$9,
      TUIChat: TUIChat$9,
      Component: Component$9,
      Time: Time$9,
      Emoji: Emoji$1
    }
  };
  const TUIChat$8 = {
    "按Enter发送，Ctrl+Enter换行": "按Enter发送，Ctrl+Enter换行",
    "表情": "[表情]",
    "查看更多": "查看更多",
    "撤回": "撤回",
    "撤回了一条消息": "撤回了一条消息",
    "打开": "打开",
    "单击下载": "单击下载",
    "下载": "下载",
    "点此投诉": "点此投诉",
    "点击处理": "点击处理",
    "对方正在输入": "对方正在输入...",
    "发起群视频": "发起群视频",
    "发起群语音": "发起群语音",
    "发起通话": "发起通话",
    "发送失败": "发送失败",
    "复制": "复制",
    "复制成功": "文本复制成功",
    "该消息不存在": "该消息不存在",
    "关闭阅读状态": "关闭",
    "管理员开启全员禁言": "管理员开启全员禁言",
    "欢迎使用TUICallKit": "欢迎使用腾讯云音视频通话组件TUICallKit ",
    "回到最新位置": "回到最新位置",
    "回复": "回复",
    "回复详情": "回复详情",
    "集成TUICallKit": "集成 TUICallKit ",
    "检测到您暂未集成TUICallKit，无法体验音视频通话功能": "检测到您暂未集成TUICallKit，无法体验音视频通话功能。",
    "结束群聊": "结束群聊",
    "进行体验": "进行体验。",
    "经度": "经度",
    "拒绝": "拒绝",
    "拒绝通话": "拒绝通话",
    "开通腾讯实时音视频服务": "开通腾讯实时音视频服务",
    "聊天记录": "[聊天记录]",
    "描述": "描述",
    "内容包含敏感词汇": "内容包含敏感词汇",
    "您": "您",
    "您当前购买使用的套餐包暂未开通此功能": "您当前购买使用的套餐包暂未开通此功能。",
    "您当前购买使用的套餐包暂未开通群消息已读回执功能": "您当前购买使用的套餐包暂未开通【群消息已读回执】功能，请升级至旗舰版进行体验",
    "您当前购买使用的套餐包暂未开通在线用户列表功能": "您当前购买使用的套餐包暂未开通【在线用户列表】功能，请升级至旗舰版进行体验",
    "您已被管理员禁言": "您已被管理员禁言",
    "您有": "您有",
    "请点击": "请点击",
    "请输入消息": "请输入消息",
    "取消": "取消",
    "取消通话": "取消通话",
    "全部已读": "全部已读",
    "确定": "确定",
    "确认重发该消息？": "确认重发该消息？",
    "人关闭阅读状态": "人关闭阅读状态",
    "人未读": "人未读",
    "人已读": "人已读",
    "删除": "删除",
    "涉及敏感内容": "涉及敏感内容",
    "申请加入": "申请加入",
    "视频": "[视频]",
    "视频通话": "视频通话",
    "条回复": "条回复",
    "条入群申请": "条入群申请",
    "条新消息": "条新消息",
    "通话时长": "通话时长",
    "同意": "同意",
    "图片": "[图片]",
    "图片消息失败,无效的图片格式": "图片消息失败,无效的图片格式",
    "纬度": "纬度",
    "未读": "未读",
    "位置": "[位置]",
    "文件": "[文件]",
    "文件不存在,请检查文件路径是否正确": "文件不存在,请检查文件路径是否正确",
    "文件大小超出了限制,如果上传文件,最大限制是100MB": "文件大小超出了限制,如果上传文件,最大限制是100MB",
    "文件消息失败,禁止发送违规封禁的文件": "文件消息失败,禁止发送违规封禁的文件",
    "我": "我",
    "无法查看": "无法查看",
    "无法定位到原消息": "无法定位到原消息",
    "无法收听": "无法收听",
    "正在加载": "正在加载...",
    "加载结束": "加载结束",
    "无应答": "无应答",
    "系统消息": "系统消息",
    "消息": "message",
    "消息或者资料中文本存在敏感内容,发送失败": "消息或者资料中文本存在敏感内容,发送失败",
    "消息详情": "消息详情",
    "消息长度超出限制,消息长度不要超过12K": "消息长度超出限制,消息长度不要超过12K",
    "消息中图片存在敏感内容,发送失败": "消息中图片存在敏感内容,发送失败",
    "选择提醒的人": "选择提醒的人",
    "已读": "已读",
    "已过撤回时限": "已过撤回时限",
    "已接听": "已接听",
    "已拒绝": "已拒绝",
    "已同意": "已同意",
    "引用": "引用",
    "引用失败": "引用失败",
    "语音": "[语音]",
    "语音通话": "语音通话",
    "重新编辑": "重新编辑",
    "重新发送": "重新发送",
    "转发": "转发",
    "翻译": "翻译",
    "转文字": "转文字",
    "隐藏": "隐藏",
    "转发给": "转发给",
    "自定义": "[自定义消息]",
    "自定义消息": "自定义消息",
    "腾讯云 IM": "腾讯云 IM",
    "空": "空",
    "文本包含本地审核拦截词": "文本包含本地审核拦截词",
    "按住说话": "按住说话",
    "抬起发送": "抬起发送",
    "抬起取消": "抬起取消",
    "正在录音": "正在录音",
    "继续上滑可取消": "继续上滑可取消",
    "松开手指 取消发送": "松开手指 取消发送",
    "此机型暂不支持复制功能": "此机型暂不支持复制功能",
    "请开通翻译功能": "请开通翻译功能",
    "请开通语音转文字功能": "请开通语音转文字功能",
    "翻译中": "翻译中",
    "转换中": "转换中",
    "由IM提供翻译支持": "由IM提供翻译支持",
    "所有人": "所有人",
    "已达到表情回应上限数量": "已达到表情回应上限数量",
    "等": "等",
    "人": "人",
    "返回": "返回",
    "关闭": "关闭",
    "多选": "多选",
    "合并转发": "合并转发",
    "逐条转发": "逐条转发",
    "未选择消息": "未选择消息",
    "引用内容已撤回": "引用内容已撤回",
    "[草稿]": "[草稿]",
    "[消息]": "[消息]",
    "[文本]": "[文本]",
    "[自定义消息]": "[自定义消息]",
    "[图片]": "[图片]",
    "[音频]": "[音频]",
    "[语音]": "[语音]",
    "[视频]": "[视频]",
    "[文件]": "[文件]",
    "[位置]": "[地理位置]",
    "[地理位置]": "[地理位置]",
    "[动画表情]": "[动画表情]",
    "[群提示]": "[群提示]",
    "[群提示消息]": "[群提示消息]",
    "[聊天记录]": "[聊天记录]",
    "[机器人自定义消息]": "[机器人自定义消息]",
    "群聊的聊天记录": "群聊的聊天记录",
    "和": "和",
    "的聊天记录": "的聊天记录",
    "请升级IMSDK到v2.10.1或更高版本查看此消息": "请升级IMSDK到v2.10.1或更高版本查看此消息",
    "您已被管理员移出群聊": "您已被管理员移出群聊",
    "该群聊已被解散": "该群聊已被解散",
    "您已退出该群聊": "您已退出该群聊",
    "您已被禁止聊天": "您已被禁止聊天",
    "账号被强制下线": "账号被强制下线",
    "登录失败": "登录失败"
  };
  const Component$8 = {
    "图片 url 不存在": "图片 url 不存在",
    "暂不支持下载此类型图片": "暂不支持下载此类型图片",
    "大图提取中": "大图提取中",
    "已保存至相册": "已保存至相册",
    "图片下载失败": "图片下载失败"
  };
  const Time$8 = {
    "周": "周",
    "天": "天",
    "小时": "小时",
    "分钟": "分钟",
    "刚刚": "刚刚",
    "前": "前",
    "昨天": "昨天",
    "星期一": "星期一",
    "星期二": "星期二",
    "星期三": "星期三",
    "星期四": "星期四",
    "星期五": "星期五",
    "星期六": "星期六",
    "星期日": "星期日",
    "一月": "一月",
    "二月": "二月",
    "三月": "三月",
    "四月": "四月",
    "五月": "五月",
    "六月": "六月",
    "七月": "七月",
    "八月": "八月",
    "九月": "九月",
    "十月": "十月",
    "十一月": "十一月",
    "十二月": "十二月",
    "一": "一",
    "二": "二",
    "三": "三",
    "四": "四",
    "五": "五",
    "六": "六",
    "日": "日"
  };
  const AIDesk$8 = {
    "结束人工会话": "结束会话",
    "转人工服务": "转人工服务",
    "跳转": "跳转",
    "立即填写": "立即填写",
    "已提交": "已提交",
    "提交": "提交",
    "查看内容": "查看内容",
    "请填写必填项": "请填写必填项",
    "Hi，我是": "Hi，我是",
    "请输入内容": "请输入内容",
    "如果满意请给好评哦～": "如果满意请给好评哦～",
    "请对本次服务进行评价": "请对本次服务进行评价",
    "提交评价": "提交评价",
    "服务评价": "服务评价",
    "并发限制": "当前咨询人数较多，请稍后再试",
    "分支选项异常": "内容异常，请检查任务流配置"
  };
  const messages$9 = {
    zh: {
      "取消": "取消",
      "确定": "确定",
      "发送": "发送",
      "系统通知": "系统通知",
      "关闭": "关闭",
      "图片": "图片",
      "文件": "文件",
      "表情": "表情",
      "视频": "视频",
      "录制": "录制",
      "拍照": "拍照",
      TUIChat: TUIChat$8,
      Component: Component$8,
      Time: Time$8,
      AIDesk: AIDesk$8,
      Emoji: Emoji$2
    }
  };
  const TUIChat$7 = {
    "按Enter发送，Ctrl+Enter换行": "按Enter發送，Ctrl+Enter換行",
    "表情": "[表情]",
    "查看更多": "查看更多",
    "撤回": "撤回",
    "撤回了一条消息": "撤回了一條消息",
    "打开": "打開",
    "单击下载": "單擊下載",
    "下载": "下載",
    "点此投诉": "點此投訴",
    "点击处理": "點擊處理",
    "对方正在输入": "對方正在輸入...",
    "发起群视频": "發起群視頻",
    "发起群语音": "發起群語音",
    "发起通话": "發起通話",
    "发送失败": "發送失敗",
    "复制": "複製",
    "复制成功": "文本複製成功",
    "该消息不存在": "該消息不存在",
    "关闭阅读状态": "關閉",
    "管理员开启全员禁言": "管理員開啟全員禁言",
    "欢迎使用TUICallKit": "歡迎使用騰訊雲音視頻通話組件TUICallKit",
    "回到最新位置": "回到最新位置",
    "回复": "回覆",
    "回复详情": "回覆詳情",
    "集成TUICallKit": "集成 TUICallKit",
    "检测到您暂未集成TUICallKit，无法体验音视频通话功能": "檢測到您暫未集成TUICallKit，無法體驗音視頻通話功能。",
    "结束群聊": "結束群聊",
    "进行体验": "進行體驗。",
    "经度": "經度",
    "拒绝": "拒絕",
    "拒绝通话": "拒絕通話",
    "开通腾讯实时音视频服务": "開通騰訊實時音視頻服務",
    "聊天记录": "[聊天記錄]",
    "描述": "描述",
    "内容包含敏感词汇": "內容包含敏感詞彙",
    "您": "您",
    "您当前购买使用的套餐包暂未开通此功能": "您當前購買使用的套餐包暫未開通此功能。",
    "您当前购买使用的套餐包暂未开通群消息已读回执功能": "您當前購買使用的套餐包暫未開通【群消息已讀回執】功能，請升級至旗艦版進行體驗",
    "您当前购买使用的套餐包暂未开通在线用户列表功能": "您當前購買使用的套餐包暫未開通【在線用戶列表】功能，請升級至旗艦版進行體驗",
    "您已被管理员禁言": "您已被管理員禁言",
    "您有": "您有",
    "请点击": "請點擊",
    "请输入消息": "請輸入消息",
    "取消": "取消",
    "取消通话": "取消通話",
    "全部已读": "全部已讀",
    "确定": "確定",
    "确认重发该消息？": "確認重發該消息？",
    "人关闭阅读状态": "人關閉閱讀狀態",
    "人未读": "人未讀",
    "人已读": "人已讀",
    "删除": "刪除",
    "涉及敏感内容": "涉及敏感內容",
    "申请加入": "申請加入",
    "视频": "[視頻]",
    "视频通话": "視頻通話",
    "条回复": "條回覆",
    "条入群申请": "條入群申請",
    "条新消息": "條新消息",
    "通话时长": "通話時長",
    "同意": "同意",
    "图片": "[圖片]",
    "图片消息失败,无效的图片格式": "圖片消息失敗,無效的圖片格式",
    "纬度": "緯度",
    "未读": "未讀",
    "位置": "[位置]",
    "文件": "[文件]",
    "文件不存在,请检查文件路径是否正确": "文件不存在,請檢查文件路徑是否正確",
    "文件大小超出了限制,如果上传文件,最大限制是100MB": "文件大小超出了限制,如果上傳文件,最大限制是100MB",
    "文件消息失败,禁止发送违规封禁的文件": "文件消息失敗,禁止發送違規封禁的文件",
    "我": "我",
    "无法查看": "無法查看",
    "无法定位到原消息": "無法定位到原消息",
    "无法收听": "無法收聽",
    "正在加载": "正在加載...",
    "加载结束": "加載結束",
    "无应答": "無應答",
    "系统消息": "系統消息",
    "消息": "message",
    "消息或者资料中文本存在敏感内容,发送失败": "消息或者資料中文本存在敏感內容,發送失敗",
    "消息详情": "消息詳情",
    "消息长度超出限制,消息长度不要超过12K": "消息長度超出限制,消息長度不要超過12K",
    "消息中图片存在敏感内容,发送失败": "消息中圖片存在敏感內容,發送失敗",
    "选择提醒的人": "選擇提醒的人",
    "已读": "已讀",
    "已过撤回时限": "已過撤回時限",
    "已接听": "已接聽",
    "已拒绝": "已拒絕",
    "已同意": "已同意",
    "引用": "引用",
    "引用失败": "引用失敗",
    "语音": "[語音]",
    "语音通话": "語音通話",
    "重新编辑": "重新編輯",
    "重新发送": "重新發送",
    "转发": "轉發",
    "翻译": "翻譯",
    "转文字": "轉文字",
    "隐藏": "隱藏",
    "转发给": "轉發給",
    "自定义": "[自定義消息]",
    "自定义消息": "自定義消息",
    "腾讯云 IM": "騰訊雲 IM",
    "空": "空",
    "文本包含本地审核拦截词": "文本包含本地審核攔截詞",
    "按住说话": "按住說話",
    "抬起发送": "抬起發送",
    "抬起取消": "抬起取消",
    "正在录音": "正在錄音",
    "继续上滑可取消": "繼續上滑可取消",
    "松开手指 取消发送": "松開手指 取消發送",
    "此机型暂不支持复制功能": "此機型暫不支持複製功能",
    "请开通翻译功能": "請開通翻譯功能",
    "请开通语音转文字功能": "請開通語音轉文字功能",
    "翻译中": "翻譯中",
    "转换中": "轉換中",
    "由IM提供翻译支持": "由IM提供翻譯支持",
    "所有人": "所有人",
    "已达到表情回应上限数量": "已達到表情回應上限數量",
    "等": "等",
    "人": "人",
    "返回": "返回",
    "关闭": "關閉",
    "多选": "多選",
    "合并转发": "合併轉發",
    "逐条转发": "逐條轉發",
    "未选择消息": "未選擇消息",
    "引用内容已撤回": "引用內容已撤回",
    "[草稿]": "[草稿]",
    "[消息]": "[消息]",
    "[文本]": "[文本]",
    "[自定义消息]": "[自定義消息]",
    "[图片]": "[圖片]",
    "[音频]": "[音頻]",
    "[语音]": "[語音]",
    "[视频]": "[視頻]",
    "[文件]": "[文件]",
    "[位置]": "[地理位置]",
    "[地理位置]": "[地理位置]",
    "[动画表情]": "[動畫表情]",
    "[群提示]": "[群提示]",
    "[群提示消息]": "[群提示消息]",
    "[聊天记录]": "[聊天記錄]",
    "[机器人自定义消息]": "[機器人自訂訊息]",
    "群聊的聊天记录": "群聊的聊天記錄",
    "和": "和",
    "的聊天记录": "的聊天記錄",
    "请升级IMSDK到v2.10.1或更高版本查看此消息": "請升級IMSDK到v2.10.1或更高版本查看此消息",
    "您已被管理员移出群聊": "您已被管理員移出群聊",
    "该群聊已被解散": "該群聊已被解散",
    "您已退出该群聊": "您已退出該群聊",
    "您已被禁止聊天": "您已被禁止聊天",
    "账号被强制下线": "帳號被強制下線",
    "登录失败": "登入失敗"
  };
  const Component$7 = {
    "图片 url 不存在": "圖片 url 不存在",
    "暂不支持下载此类型图片": "暫不支持下載此類型圖片",
    "大图提取中": "大圖提取中",
    "已保存至相册": "已儲存至相簿",
    "图片下载失败": "圖片下載失敗"
  };
  const Time$7 = {
    "周": "週",
    "天": "天",
    "小时": "小時",
    "分钟": "分鐘",
    "刚刚": "剛剛",
    "前": "前",
    "昨天": "昨天",
    "星期一": "星期一",
    "星期二": "星期二",
    "星期三": "星期三",
    "星期四": "星期四",
    "星期五": "星期五",
    "星期六": "星期六",
    "星期日": "星期日",
    "一月": "一月",
    "二月": "二月",
    "三月": "三月",
    "四月": "四月",
    "五月": "五月",
    "六月": "六月",
    "七月": "七月",
    "八月": "八月",
    "九月": "九月",
    "十月": "十月",
    "十一月": "十一月",
    "十二月": "十二月",
    "一": "一",
    "二": "二",
    "三": "三",
    "四": "四",
    "五": "五",
    "六": "六",
    "日": "日"
  };
  const AIDesk$7 = {
    "结束人工会话": "結束會話",
    "转人工服务": "轉人工服務",
    "跳转": "跳轉",
    "立即填写": "立即填寫",
    "已提交": "已提交",
    "提交": "提交",
    "查看内容": "查看內容",
    "请填写必填项": "請填寫必填項",
    "Hi，我是": "Hi，我是",
    "请输入内容": "請輸入內容",
    "如果满意请给好评哦～": "如果滿意請給好評哦～",
    "请对本次服务进行评价": "請對本次服務進行評價",
    "提交评价": "提交評價",
    "服务评价": "服務評價",
    "并发限制": "目前諮詢人數較多，請稍後再試",
    "分支选项异常": "內容異常，請檢查任務流配置"
  };
  const Emoji = {
    "[TUIEmoji_Smile]": "[微笑]",
    "[TUIEmoji_Expect]": "[期待]",
    "[TUIEmoji_Blink]": "[眨眼]",
    "[TUIEmoji_Guffaw]": "[大笑]",
    "[TUIEmoji_KindSmile]": "[姨母笑]",
    "[TUIEmoji_Haha]": "[哈哈哈]",
    "[TUIEmoji_Cheerful]": "[愉快]",
    "[TUIEmoji_Speechless]": "[無語]",
    "[TUIEmoji_Amazed]": "[驚訝]",
    "[TUIEmoji_Sorrow]": "[悲傷]",
    "[TUIEmoji_Complacent]": "[得意]",
    "[TUIEmoji_Silly]": "[傻了]",
    "[TUIEmoji_Lustful]": "[色]",
    "[TUIEmoji_Giggle]": "[憨笑]",
    "[TUIEmoji_Kiss]": "[親親]",
    "[TUIEmoji_Wail]": "[大哭]",
    "[TUIEmoji_TearsLaugh]": "[哭笑]",
    "[TUIEmoji_Trapped]": "[困]",
    "[TUIEmoji_Mask]": "[口罩]",
    "[TUIEmoji_Fear]": "[恐懼]",
    "[TUIEmoji_BareTeeth]": "[齜牙]",
    "[TUIEmoji_FlareUp]": "[發怒]",
    "[TUIEmoji_Yawn]": "[打哈欠]",
    "[TUIEmoji_Tact]": "[機智]",
    "[TUIEmoji_Stareyes]": "[星星眼]",
    "[TUIEmoji_ShutUp]": "[閉嘴]",
    "[TUIEmoji_Sigh]": "[嘆氣]",
    "[TUIEmoji_Hehe]": "[呵呵]",
    "[TUIEmoji_Silent]": "[收聲]",
    "[TUIEmoji_Surprised]": "[驚喜]",
    "[TUIEmoji_Askance]": "[白眼]",
    "[TUIEmoji_Ok]": "[OK]",
    "[TUIEmoji_Shit]": "[便便]",
    "[TUIEmoji_Monster]": "[怪獸]",
    "[TUIEmoji_Daemon]": "[惡魔]",
    "[TUIEmoji_Rage]": "[惡魔怒]",
    "[TUIEmoji_Fool]": "[衰]",
    "[TUIEmoji_Pig]": "[豬]",
    "[TUIEmoji_Cow]": "[牛]",
    "[TUIEmoji_Ai]": "[AI]",
    "[TUIEmoji_Skull]": "[骷髏]",
    "[TUIEmoji_Bombs]": "[炸彈]",
    "[TUIEmoji_Coffee]": "[咖啡]",
    "[TUIEmoji_Cake]": "[蛋糕]",
    "[TUIEmoji_Beer]": "[啤酒]",
    "[TUIEmoji_Flower]": "[花]",
    "[TUIEmoji_Watermelon]": "[瓜]",
    "[TUIEmoji_Rich]": "[壕]",
    "[TUIEmoji_Heart]": "[愛心]",
    "[TUIEmoji_Moon]": "[月亮]",
    "[TUIEmoji_Sun]": "[太陽]",
    "[TUIEmoji_Star]": "[星星]",
    "[TUIEmoji_RedPacket]": "[紅包]",
    "[TUIEmoji_Celebrate]": "[慶祝]",
    "[TUIEmoji_Bless]": "[福]",
    "[TUIEmoji_Fortune]": "[發]",
    "[TUIEmoji_Convinced]": "[服]",
    "[TUIEmoji_Prohibit]": "[禁]",
    "[TUIEmoji_666]": "[666]",
    "[TUIEmoji_857]": "[857]",
    "[TUIEmoji_Knife]": "[刀]",
    "[TUIEmoji_Like]": "[讚]"
  };
  const messages$8 = {
    zh_tw: {
      "取消": "取消",
      "确定": "確定",
      "发送": "發送",
      "系统通知": "系統通知",
      "关闭": "關閉",
      "图片": "圖片",
      "文件": "文件",
      "表情": "表情",
      "视频": "視頻",
      "录制": "錄製",
      "拍照": "拍照",
      AIDesk: AIDesk$7,
      TUIChat: TUIChat$7,
      Component: Component$7,
      Time: Time$7,
      Emoji
    }
  };
  const AIDesk$6 = {
    "结束人工会话": "Tapusin ang Usapan",
    "转人工服务": "Ilipat sa Serbisyo ng Tao",
    "跳转": "Tumalon",
    "立即填写": "Punan Agad",
    "已提交": "Naisumite Na",
    "提交": "Isumite",
    "查看内容": "Tingnan ang Nilalaman",
    "请填写必填项": "Mangyaring punan ang mga kinakailangang field",
    "Hi，我是": "Hi, ako ",
    "请输入内容": "Pakilagay ang nilalaman",
    "如果满意请给好评哦～": "Kung nasiyahan ka, mangyaring magbigay ng magandang pagsusuri~",
    "请对本次服务进行评价": "Mangyaring suriin ang serbisyong ito",
    "提交评价": "Ipasa ang pagsusuri",
    "服务评价": "Pagsusuri ng Serbisyo",
    "并发限制": "Maraming tao ang naghahanap ng tulong ngayon, subukan muli mamaya.",
    "分支选项异常": "Ang nilalaman ay abnormal, pakisuri ang configuration ng task flow"
  };
  const TUIChat$6 = {
    "撤回": "Bawiin",
    "删除": "Tanggalin",
    "复制": "Kopyahin",
    "重新发送": "Ipadala Muli",
    "转发": "I-forward",
    "引用": "I-quote",
    "打开": "Buksan",
    "已读": "Nabasa Na",
    "未读": "Hindi Pa Nabasa",
    "人已读": "tao ang nakabasa",
    "人未读": "tao ang hindi pa nakabasa",
    "人关闭阅读状态": "tao ang nagsara ng estado ng pagbabasa",
    "全部已读": "Lahat ay Nabasa Na",
    "消息详情": "Detalye ng Mensahe",
    "关闭阅读状态": "Isara ang Estado ng Pagbabasa",
    "您": "Ikaw",
    "撤回了一条消息": "binawi ang isang mensahe",
    "重新编辑": "I-edit Muli",
    "我": "Ako",
    "自定义消息": "Pasadyang Mensahe",
    "查看更多": "Tingnan ang Higit Pa",
    "确认重发该消息？": "Kumpirmahin ang muling pagpapadala ng mensaheng ito?",
    "取消": "Kanselahin",
    "确定": "Kumpirmahin",
    "转发给": "I-forward sa",
    "请输入消息": "Pakilagay ang mensahe",
    "描述": "Paglalarawan",
    "经度": "Longhitud",
    "纬度": "Latitud",
    "图片": "[Larawan]",
    "语音": "[Boses]",
    "视频": "[Bidyo]",
    "表情": "[Emoji]",
    "文件": "[File]",
    "自定义": "[Pasadyang Mensahe]",
    "管理员开启全员禁言": "In-activate ng Administrator ang Pagkatahimik ng Lahat",
    "您已被管理员禁言": "Ikaw ay pinatahimik ng Administrator",
    "按Enter发送": "Pindutin ang Enter para Ipadala",
    "单击下载": "I-click para I-download",
    "下载": "download",
    "该消息不存在": "Ang mensaheng ito ay hindi umiiral",
    "无法定位到原消息": "Hindi mahanap ang orihinal na mensahe",
    "对方正在输入": "Ang kabilang panig ay nagta-type...",
    "回到最新位置": "Bumalik sa Pinakabagong Posisyon",
    "条新消息": "bagong mensahe",
    "点此投诉": "I-click dito para magreklamo",
    "语音通话": "Voice Call",
    "视频通话": "Video Call",
    "发起群语音": "Simulan ang Group Voice Call",
    "发起群视频": "Simulan ang Group Video Call",
    "已接听": "Nasagot Na",
    "拒绝通话": "Tinanggihan ang Tawag",
    "无应答": "Walang Sagot",
    "取消通话": "Kanselahin ang Tawag",
    "发起通话": "Simulan ang Tawag",
    "结束群聊": "Tapusin ang Group Chat",
    "通话时长": "Tagal ng Tawag",
    "欢迎使用TUICallKit": "Maligayang Pagdating sa Paggamit ng TUICallKit",
    "检测到您暂未集成TUICallKit，无法体验音视频通话功能": "Nadiskubre na hindi mo pa na-integrate ang TUICallKit, hindi mo magagamit ang mga tampok ng audio at video call.",
    "请点击": "Paki-click",
    "集成TUICallKit": "Integrate ang TUICallKit",
    "开通腾讯实时音视频服务": "I-activate ang Tencent Real-time Audio at Video Service",
    "进行体验": "para sa karanasan.",
    "您当前购买使用的套餐包暂未开通此功能": "Ang kasalukuyang package na binili mo ay hindi pa na-activate ang tampok na ito.",
    "系统消息": "Mensahe ng Sistema",
    "转人工服务": "Ilipat sa Serbisyo ng Tao",
    "点击处理": "Mag-click ng aksyon",
    "发送失败": "Nabigo ang pagpapadala",
    "复制成功": "Nakopya sa clipboard",
    "回复": "Tumugon",
    "回复详情": "Mga Tugon",
    "拒绝": "Tanggihan",
    "聊天记录": "[Kasaysayan ng Chat]",
    "内容包含敏感词汇": "May sensitibong mga salita ang nilalaman",
    "您当前购买使用的套餐包暂未开通群消息已读回执功能": "Ang package na binili mo ay hindi pa nagbubukas ng pagbabasa ng resibo ng mga mensahe sa grupo.",
    "您当前购买使用的套餐包暂未开通在线用户列表功能": "Ang package na binili mo ay hindi pa nagbubukas ng listahan ng mga online na gumagamit.",
    "您有": "Mayroon kang",
    "涉及敏感内容": "May kaugnayan sa sensitibong nilalaman",
    "申请加入": "Mag-apply para sumali",
    "条回复": "mga tugon",
    "条入群申请": "Mga aplikasyon para sumali sa grupo",
    "同意": "Sumasang-ayon",
    "图片消息失败,无效的图片格式": "Nabigo ang mensahe ng larawan, hindi wastong format ng larawan.",
    "位置": "[Lokasyon]",
    "文件不存在,请检查文件路径是否正确": "Hindi umiiral ang file, mangyaring suriin kung tama ang landas ng file.",
    "文件大小超出了限制,如果上传文件,最大限制是100MB": "Lumampas sa limitasyon ang laki ng file, kung nag-upload ng file, ang maximum limitasyon ay 100MB.",
    "文件消息失败,禁止发送违规封禁的文件": "Nabigo ang mensahe ng file, ipinagbabawal ang pagpapadala ng mga ipinagbabawal na file.",
    "无法查看": "Hindi maaring tingnan",
    "无法收听": "Hindi maaring pakinggan",
    "正在加载": "Naglo-load...",
    "加载结束": "Pag-load natapos",
    "消息": "[mensahe]",
    "消息或者资料中文本存在敏感内容,发送失败": "May sensitibong nilalaman sa teksto ng mensahe o impormasyon, nabigo ang pagpapadala.",
    "消息长度超出限制,消息长度不要超过12K": "Lumampas sa limitasyon ang haba ng mensahe, huwag lampasang 12K.",
    "消息中图片存在敏感内容,发送失败": "May sensitibong nilalaman sa larawan sa mensahe, nabigo ang pagpapadala.",
    "选择提醒的人": "Pumili ng mga taong paalalahanan",
    "已过撤回时限": "Lumampas na sa takdang oras ng pag-withdraw",
    "已拒绝": "Tinanggihan na",
    "已同意": "Pinayagan na",
    "引用失败": "Nabigo ang pag-quote",
    "翻译": "Isalin",
    "转文字": "I-convert sa teksto",
    "隐藏": "Itago",
    "腾讯云 IM": "Tencent Cloud Chat",
    "空": "Walang laman",
    "文本包含本地审核拦截词": "May mga salitang sinusuri sa lokal na pagbabawal sa teksto",
    "按住说话": "Pindutin at magsalita",
    "抬起发送": "Ibaba at ipadala",
    "抬起取消": "Ibaba at kanselahin",
    "正在录音": "Nagre-record",
    "继续上滑可取消": "Magpatuloy sa pag-swipe pataas para kanselahin",
    "松开手指 取消发送": "Bitawan ang daliri para kanselahin",
    "此机型暂不支持复制功能": "Hindi suportado ng kasalukuyang modelo ang pagkopya",
    "请开通翻译功能": "Mangyaring buksan ang tampok na pagsasalin",
    "请开通语音转文字功能": "Mangyaring buksan ang tampok na pag-convert ng boses sa teksto",
    "翻译中": "Nagpapalit ng wika",
    "转换中": "Nagco-convert",
    "由IM提供翻译支持": "Suportado ng IM ang pagsasalin",
    "所有人": "Lahat",
    "已达到表情回应上限数量": "Nakamit mo na ang maximum na limitasyon ng mga reaksyon",
    "等": "at iba pa",
    "人": "mga gumagamit",
    "返回": "Bumalik",
    "关闭": "Isara",
    "多选": "Pumili",
    "合并转发": "Pagsamahin ang Pagpapadala",
    "逐条转发": "Isang-isa Pagpapadala",
    "未选择消息": "Walang napiling mensahe",
    "[草稿]": "[Drafts]",
    "[消息]": "[Mensahe]",
    "[文本]": "[Teksto]",
    "[自定义消息]": "[Pasadyang Mensahe]",
    "[图片]": "[Larawan]",
    "[音频]": "[Boses]",
    "[语音]": "[Boses]",
    "[视频]": "[Bideo]",
    "[文件]": "[File]",
    "[位置]": "[Lokasyon]",
    "[地理位置]": "[Lokasyon]",
    "[动画表情]": "[Animated Sticker]",
    "[群提示]": "[Group Tip]",
    "[群提示消息]": "[Group Notification]",
    "[聊天记录]": "[Kasaysayan ng Chat]",
    "[机器人自定义消息]": "[Pasadyang Mensahe ng Robot]",
    "引用内容已撤回": "Ang na-quote na nilalaman ay na-withdraw",
    "群聊的聊天记录": "Kasaysayan ng Chat para sa Group Chat",
    "和": "at",
    "的聊天记录": "kasaysayan ng chat",
    "请升级IMSDK到v2.10.1或更高版本查看此消息": "Mangyaring i-upgrade ang IMSDK sa v2.10.1 o mas mataas na bersyon upang tingnan ang mensaheng ito",
    "该群聊已被解散": "Ang grupo ay na-disband na",
    "您已被管理员移出群聊": "Kayo ay tinanggal na ng admin sa grupo",
    "您已退出该群聊": "Kayo ay umalis na sa grupo",
    "您已被禁止聊天": "Kayo ay ipinagbawal na makipag-chat",
    "按Enter发送，Ctrl+Enter换行": "Pindutin ang Enter upang ipadala, Ctrl+Enter upang pumunta ng bara",
    "账号被强制下线": "Ang account ay pina-force log out",
    "登录失败": "Hindi makapag-login"
  };
  const Component$6 = {
    "图片 url 不存在": "Ang URL ng larawan ay hindi umiiral",
    "暂不支持下载此类型图片": "Hindi pa suportado ang pag-download ng uri ng larawang ito",
    "大图提取中": "Prosesyo ng malaking imahe",
    "已保存至相册": "Naka-save na sa album",
    "图片下载失败": "Hindi na-download ang larawan"
  };
  const Time$6 = {
    "周": "linggo/linggo ",
    "天": "araw",
    "小时": "oras/oras ",
    "分钟": "minuto/minuto",
    "刚刚": "Kamakailan lang",
    "前": " nakaraan",
    "昨天": "Kahapon",
    "星期一": "Lunes",
    "星期二": "Martes",
    "星期三": "Miyerkules",
    "星期四": "Huwebes",
    "星期五": "Biyernes",
    "星期六": "Sabado",
    "星期日": "Linggo"
  };
  const messages$7 = {
    fil: {
      "取消": "Kanselahin",
      "确定": "Kumpirmahin",
      "发送": "Ipadala",
      "系统通知": "Abiso ng Sistema",
      "关闭": "Isara",
      "图片": "Larawan",
      "文件": "dokumento",
      "表情": "Emoji",
      "视频": "Bidyo",
      "录制": "Magkuha ng audio",
      "拍照": "Magkuha ng larawan",
      AIDesk: AIDesk$6,
      TUIChat: TUIChat$6,
      Component: Component$6,
      Time: Time$6,
      Emoji: Emoji$1
    }
  };
  const TUIChat$5 = {
    "查看内容": "Lihat konten",
    "立即填写": "Isi sekarang",
    "已提交": "Terkirim",
    "不能为空": "Tidak boleh kosong",
    "提交": "Kirim",
    "撤回": "Tarik kembali",
    "删除": "Hapus",
    "复制": "Salin",
    "重新发送": "Kirim ulang",
    "转发": "Teruskan",
    "引用": "Kutip",
    "打开": "Buka",
    "已读": "Dibaca",
    "全部已读": "Semua dibaca",
    "人已读": " dibaca",
    "人未读": " belum dibaca",
    "人关闭阅读状态": " status baca ditutup",
    "消息详情": "Detail Pesan",
    "关闭阅读状态": "Status baca ditutup",
    "该消息不存在": "Pesan tidak ada",
    "无法定位到原消息": "Tidak dapat menavigasi ke pesan asli",
    "未读": "Belum dibaca",
    "您": "Anda",
    "撤回了一条消息": "menarik kembali pesan",
    "重新编辑": "Edit ulang",
    "我": "Saya",
    "查看更多": "Lihat lebih banyak",
    "转发给": "Teruskan ke",
    "请输入消息": "Masukkan pesan",
    "描述": "Deskripsi",
    "经度": "Garis bujur",
    "纬度": "Garis lintang",
    "自定义消息": "Pesan kustom",
    "图片": "[foto]",
    "语音": "[suara]",
    "视频": "[rekaman video]",
    "表情": "[wajah]",
    "文件": "[dokumen]",
    "自定义": "[pesan kustom]",
    "管理员开启全员禁言": "Admin mengaktifkan Bisukan Semua",
    "您已被管理员禁言": "Anda telah dibisukan oleh admin",
    "按Enter发送": "Tekan Enter untuk mengirim pesan",
    "单击下载": "Klik untuk mengunduh",
    "下载": "Unduh",
    "确认重发该消息？": "Konfirmasi untuk mengirim ulang pesan?",
    "取消": "Batal",
    "确定": "Kirim",
    "对方正在输入": "Sedang mengetik...",
    "回到最新位置": "Kembali ke lokasi terbaru",
    "条新消息": " pesan baru",
    "点此投诉": "Keluhan",
    "语音通话": "Panggilan Suara",
    "视频通话": "Panggilan Video",
    "发起群语音": "Mulai panggilan suara grup",
    "发起群视频": "Mulai panggilan video grup",
    "已接听": "Dijawab",
    "拒绝通话": "Tolak Panggilan",
    "无应答": "Tidak Ada Jawaban",
    "取消通话": "Batalkan Panggilan",
    "发起通话": "Mulai Panggilan",
    "结束群聊": "Akhiri Panggilan Grup",
    "通话时长": "Durasi",
    "欢迎使用TUICallKit": "Selamat datang di TUICallKit",
    "检测到您暂未集成TUICallKit，无法体验音视频通话功能": "Terdeteksi bahwa Anda belum mengintegrasikan TUI CallKit, sehingga Anda tidak dapat merasakan panggilan audio dan video.",
    "请点击": "Silakan klik",
    "集成TUICallKit": " Integrasikan TUICallKit ",
    "开通腾讯实时音视频服务": "Integrasi Komunikasi Real-Time Tencent",
    "进行体验": "untuk merasakan.",
    "您当前购买使用的套餐包暂未开通此功能": "Paket yang Anda beli tidak mendukung kemampuan ini.",
    "系统消息": "Bot",
    "转人工服务": "layanan manusia",
    "点击处理": "Klik Proses",
    "发送失败": "Gagal mengirim",
    "复制成功": "Berhasil disalin ke clipboard",
    "回复": "Balas",
    "回复详情": "Detail Balasan",
    "拒绝": "Tolak",
    "聊天记录": "Riwayat Obrolan",
    "内容包含敏感词汇": "Konten mengandung kata-kata sensitif",
    "您当前购买使用的套餐包暂未开通群消息已读回执功能": "Paket yang Anda beli saat ini belum mengaktifkan fungsi resi baca pesan grup",
    "您当前购买使用的套餐包暂未开通在线用户列表功能": "Paket yang Anda beli saat ini belum mengaktifkan fungsi daftar pengguna online",
    "您有": "Anda memiliki",
    "涉及敏感内容": "Melibatkan konten sensitif",
    "申请加入": "Ajukan untuk bergabung",
    "条回复": "balasan",
    "条入群申请": "permintaan untuk bergabung dengan grup",
    "同意": "Setuju",
    "图片消息失败,无效的图片格式": "Gagal mengirim pesan gambar, format gambar tidak valid",
    "位置": "Lokasi",
    "文件不存在,请检查文件路径是否正确": "File tidak ada, silakan periksa apakah jalur file benar",
    "文件大小超出了限制,如果上传文件,最大限制是100MB": "Ukuran file melebihi batas, jika mengunggah file, batas maksimum adalah 100MB",
    "文件消息失败,禁止发送违规封禁的文件": "Gagal mengirim pesan file, dilarang mengirim file yang dilarang",
    "无法查看": "Tidak dapat dilihat",
    "无法收听": "Tidak dapat didengar",
    "正在加载": "Sedang memuat...",
    "加载结束": "Pemuatan selesai",
    "消息": "Pesan",
    "消息或者资料中文本存在敏感内容,发送失败": "Ada konten sensitif dalam teks pesan atau informasi, gagal mengirim",
    "消息长度超出限制,消息长度不要超过12K": "Panjang pesan melebihi batas, panjang pesan tidak boleh lebih dari 12K",
    "消息中图片存在敏感内容,发送失败": "Ada konten sensitif dalam gambar pesan, gagal mengirim",
    "选择提醒的人": "Pilih orang yang akan diingatkan",
    "已过撤回时限": "Batas waktu penarikan telah berlalu",
    "已拒绝": "Sudah ditolak",
    "已同意": "Sudah disetujui",
    "引用失败": "Gagal mengutip",
    "翻译": "menerjemahkan",
    "隐藏": "bersembunyi",
    "腾讯云 IM": "Tencent Cloud Chat",
    "空": "Kosong",
    "文本包含本地审核拦截词": "Teks mengandung kata-kata yang dicegah oleh peninjauan lokal",
    "按住说话": "Tahan dan bicara",
    "抬起发送": "Lepaskan untuk mengirim",
    "抬起取消": "Lepaskan untuk membatalkan",
    "正在录音": "Sedang merekam",
    "继续上滑可取消": "Lanjutkan menggeser ke atas untuk membatalkan",
    "松开手指 取消发送": "Lepaskan jari untuk membatalkan",
    "此机型暂不支持复制功能": "Fungsi menyalin tidak didukung oleh model ini",
    "请开通翻译功能": "Harap aktifkan fitur terjemahan",
    "请开通语音转文字功能": "Harap aktifkan fitur konversi suara ke teks",
    "翻译中": "Menerjemahkan",
    "转换中": "Mengonversi",
    "由IM提供翻译支持": "Didukung oleh IM untuk terjemahan",
    "所有人": "Semua orang",
    "已达到表情回应上限数量": "Telah mencapai batas maksimum respons emoji",
    "等": "dll",
    "人": "orang",
    "返回": "Kembali",
    "关闭": "Tutup",
    "多选": "Pilih banyak",
    "合并转发": "Gabungkan dan teruskan",
    "逐条转发": "Teruskan satu per satu",
    "未选择消息": "Tidak ada pesan yang dipilih",
    "[草稿]": "[Draf]",
    "[消息]": "[Pesan]",
    "[文本]": "[Teks]",
    "[自定义消息]": "[Pesan Kustom]",
    "[图片]": "[foto]",
    "[音频]": "[Suara]",
    "[语音]": "[Suara]",
    "[视频]": "[Video]",
    "[文件]": "[File]",
    "[位置]": "[Lokasi]",
    "[地理位置]": "[Lokasi]",
    "[动画表情]": "[Stiker Animasi]",
    "[群提示]": "[Petunjuk Grup]",
    "[群提示消息]": "[Pesan Petunjuk Grup]",
    "[聊天记录]": "[Riwayat Chat]",
    "[机器人自定义消息]": "[Pesan Kustom Robot]",
    "引用内容已撤回": "Konten kutipan telah ditarik kembali",
    "群聊的聊天记录": "Riwayat Chat Grup",
    "和": "dan",
    "的聊天记录": "riwayat chat",
    "请升级IMSDK到v2.10.1或更高版本查看此消息": "Harap tingkatkan IMSDK ke versi 2.10.1 atau yang lebih tinggi untuk melihat pesan ini",
    "该群聊已被解散": "Grup ini telah dibubarkan",
    "您已被管理员移出群聊": "Anda telah dikeluarkan dari grup oleh administrator",
    "您已退出该群聊": "Anda telah keluar dari grup ini",
    "您已被禁止聊天": "Anda telah dilarang untuk mengobrol",
    "按Enter发送，Ctrl+Enter换行": "Tekan Enter untuk mengirim, Ctrl+Enter untuk ganti baris",
    "账号被强制下线": "Akun dipaksa keluar",
    "登录失败": "Gagal masuk"
  };
  const Component$5 = {
    "图片 url 不存在": "URL gambar tidak ada",
    "暂不支持下载此类型图片": "Pengunduhan jenis gambar ini saat ini tidak didukung",
    "大图提取中": "Memproses gambar besar",
    "已保存至相册": "Tersimpan di album",
    "图片下载失败": "Gagal mengunduh gambar"
  };
  const Time$5 = {
    "周": "minggu",
    "天": "hari",
    "小时": "jam",
    "分钟": "menit",
    "刚刚": "Baru saja",
    "前": " yang lalu",
    "昨天": "Kemarin",
    "星期一": "Senin",
    "星期二": "Selasa",
    "星期三": "Rabu",
    "星期四": "Kamis",
    "星期五": "Jumat",
    "星期六": "Sabtu",
    "星期日": "Minggu"
  };
  const AIDesk$5 = {
    "结束人工会话": "Selesai",
    "转人工服务": "Layanan manusia",
    "跳转": "Goto",
    "立即填写": "Isi sekarang",
    "已提交": "Terkirim",
    "提交": "Kirim",
    "查看内容": "Lihat konten",
    "请填写必填项": "Harap isi bidang yang wajib diisi",
    "Hi，我是": "Hai, saya adalah ",
    "请输入内容": "Silakan masukkan konten",
    "如果满意请给好评哦～": "Jika Anda puas, silakan berikan ulasan yang bagus~",
    "请对本次服务进行评价": "Silakan beri penilaian untuk layanan ini",
    "提交评价": "Kirim Ulasan",
    "服务评价": "Ulasan Layanan",
    "并发限制": "Saat ini banyak pengguna yang mengakses. Mohon coba lagi nanti",
    "分支选项异常": "Konten tidak normal, silakan periksa konfigurasi alur tugas"
  };
  const messages$6 = {
    id: {
      "取消": "Batal",
      "确定": "Sahkan",
      "发送": "Kirim",
      "系统通知": "Pemberitahuan Sistem",
      "关闭": "Tutup",
      "图片": "Gambar",
      "文件": "Berkas",
      "表情": "wajah",
      "视频": "rekaman video",
      "录制": "Merekam",
      "拍照": "Memotret",
      AIDesk: AIDesk$5,
      TUIChat: TUIChat$5,
      Component: Component$5,
      Time: Time$5,
      Emoji: Emoji$1
    }
  };
  const TUIChat$4 = {
    "查看内容": "内容を查看する",
    "立即填写": "すぐに填写する",
    "已提交": "既に提交されました",
    "不能为空": "空にできません",
    "提交": "提交する",
    "撤回": "撤回する",
    "删除": "削除する",
    "复制": "コピーする",
    "重新发送": "再送信する",
    "转发": "転送する",
    "引用": "引用する",
    "打开": "開く",
    "已读": "既読",
    "未读": "未読",
    "人已读": "人が既読",
    "人未读": "人が未読",
    "人关闭阅读状态": "人が阅读状态を关闭する",
    "全部已读": "全部既読",
    "消息详情": "消息の詳細",
    "关闭阅读状态": "阅读状态を关闭する",
    "您": "あなた",
    "撤回了一条消息": "一条の消息を撤回しました",
    "重新编辑": "再編集する",
    "我": "私",
    "自定义消息": "カスタムメッセージ",
    "查看更多": "もっと見る",
    "确认重发该消息？": "この消息を再送信しますか？",
    "取消": "キャンセル",
    "确定": "確定",
    "转发给": "～に転送する",
    "请输入消息": "メッセージを入力してください",
    "描述": "説明",
    "经度": "経度",
    "纬度": "緯度",
    "图片": "[画像]",
    "语音": "[音声]",
    "视频": "[動画]",
    "表情": "[表情]",
    "文件": "[ファイル]",
    "自定义": "[カスタムメッセージ]",
    "管理员开启全员禁言": "管理者が全员禁言を开启する",
    "您已被管理员禁言": "あなたは管理者によって禁言されました",
    "按Enter发送": "Enterを押して送信する",
    "单击下载": "クリックしてダウンロード",
    "下载": "ダウンロード",
    "该消息不存在": "その消息は存在しません",
    "无法定位到原消息": "元の消息を特定できません",
    "对方正在输入": "相手が入力中...",
    "回到最新位置": "最新位置に戻る",
    "条新消息": "件の新しい消息",
    "点此投诉": "ここをクリックして投诉する",
    "语音通话": "音声通話",
    "视频通话": "ビデオ通話",
    "发起群语音": "群音声を发起する",
    "发起群视频": "群ビデオを发起する",
    "已接听": "応答済み",
    "拒绝通话": "通話を拒否する",
    "无应答": "応答なし",
    "取消通话": "通話をキャンセルする",
    "发起通话": "通話を发起する",
    "结束群聊": "群聊を終了する",
    "通话时长": "通話時間",
    "欢迎使用TUICallKit": "騰訊雲音视频通話コンポーネントTUICallKitのご使用を歓迎します",
    "检测到您暂未集成TUICallKit，无法体验音视频通话功能": "TUICallKitをまだ統合していないため、音视频通話機能を体験できません",
    "请点击": "クリックしてください",
    "集成TUICallKit": "TUICallKitを統合する",
    "开通腾讯实时音视频服务": "騰訊のリアルタイム音视频サービスを開通する",
    "进行体验": "体験を行う",
    "您当前购买使用的套餐包暂未开通此功能": "現在購入使用している套餐包ではこの機能は開通していません",
    "系统消息": "システムメッセージ",
    "转人工服务": "人工サービスに転送する",
    "点击处理": "クリックして処理",
    "发送失败": "送信に失敗しました",
    "复制成功": "コピーに成功しました",
    "回复": "返信",
    "回复详情": "返信の詳細",
    "拒绝": "拒否",
    "聊天记录": "[チャット履歴]",
    "内容包含敏感词汇": "コンテンツには機密語句が含まれています",
    "您当前购买使用的套餐包暂未开通群消息已读回执功能": "現在ご利用のパッケージには、グループメッセージの既読通知機能がまだ開通されていません",
    "您当前购买使用的套餐包暂未开通在线用户列表功能": "現在ご利用のパッケージには、オンラインユーザーリスト機能がまだ開通されていません",
    "您有": "あなたは",
    "涉及敏感内容": "機密内容に関連しています",
    "申请加入": "参加申請",
    "条回复": "件の返信",
    "条入群申请": "件のグループ参加申請",
    "同意": "同意",
    "图片消息失败,无效的图片格式": "画像メッセージが失敗しました、無効な画像形式です",
    "位置": "[位置]",
    "文件不存在,请检查文件路径是否正确": "ファイルが存在しません、ファイルパスが正しいか確認してください",
    "文件大小超出了限制,如果上传文件,最大限制是100MB": "ファイルサイズが制限を超えています、ファイルの最大制限は100MBです",
    "文件消息失败,禁止发送违规封禁的文件": "ファイルメッセージが失敗しました、違反ファイルの送信は禁止されています",
    "无法查看": "表示できません",
    "无法收听": "聞くことができません",
    "正在加载": "読み込み中",
    "加载结束": "読み込み完了",
    "消息": "[メッセージ]",
    "消息或者资料中文本存在敏感内容,发送失败": "メッセージまたはデータに機密内容が含まれているため、送信に失敗しました",
    "消息长度超出限制,消息长度不要超过12K": "メッセージの長さが制限を超えています、メッセージの長さは12Kを超えないでください",
    "消息中图片存在敏感内容,发送失败": "メッセージに機密内容のある画像が含まれているため、送信に失敗しました",
    "选择提醒的人": "通知する人を選択",
    "已过撤回时限": "撤回期限が過ぎました",
    "已拒绝": "拒否済み",
    "已同意": "同意済み",
    "引用失败": "引用に失敗しました",
    "翻译": "翻訳",
    "转文字": "テキストに変換",
    "隐藏": "非表示",
    "腾讯云 IM": "Tencent Cloud Chat",
    "空": "空です",
    "文本包含本地审核拦截词": "テキストにはローカルの検閲ワードが含まれています",
    "按住说话": "押し続けて話す",
    "抬起发送": "上げて送信",
    "抬起取消": "上げてキャンセル",
    "正在录音": "録音中",
    "继续上滑可取消": "上にスワイプし続けるとキャンセルできます",
    "松开手指 取消发送": "指を離して送信をキャンセル",
    "此机型暂不支持复制功能": "この機種ではコピー機能はサポートされていません",
    "请开通翻译功能": "翻訳機能を有効にしてください",
    "请开通语音转文字功能": "音声をテキストに変換する機能を有効にしてください",
    "翻译中": "翻訳中",
    "转换中": "変換中",
    "由IM提供翻译支持": "IMが翻訳サポートを提供",
    "所有人": "全て",
    "已达到表情回应上限数量": "表情の反応の上限数に達しました",
    "等": "など",
    "人": "人",
    "返回": "戻る",
    "关闭": "閉じる",
    "多选": "複数選択",
    "合并转发": "転送を結合",
    "逐条转发": "一つずつ転送",
    "未选择消息": "メッセージが選択されていません",
    "[草稿]": "[下書き]",
    "[消息]": "[メッセージ]",
    "[文本]": "[テキスト]",
    "[自定义消息]": "[カスタムメッセージ]",
    "[图片]": "[画像]",
    "[音频]": "[音声]",
    "[语音]": "[音声]",
    "[视频]": "[ビデオ]",
    "[文件]": "[ファイル]",
    "[位置]": "[位置]",
    "[地理位置]": "[位置]",
    "[动画表情]": "[アニメステッカー]",
    "[群提示]": "[グループヒント]",
    "[群提示消息]": "[グループ通知]",
    "[聊天记录]": "[チャット履歴]",
    "[机器人自定义消息]": "[カスタムロボットメッセージ]",
    "引用内容已撤回": "引用された内容は取り消されました",
    "群聊的聊天记录": "グループチャットのチャット履歴",
    "和": "と",
    "的聊天记录": "のチャット履歴",
    "请升级IMSDK到v2.10.1或更高版本查看此消息": "このメッセージを表示するには、IMSDKをv2.10.1またはそれ以上のバージョンにアップグレードしてください",
    "该群聊已被解散": "このグループチャットは解散されました",
    "您已被管理员移出群聊": "管理者によってグループチャットから削除されました",
    "您已退出该群聊": "このグループチャットから退出しました",
    "您已被禁止聊天": "チャットが禁止されています",
    "按Enter发送，Ctrl+Enter换行": "Enterキーで送信、Ctrl+Enterキーで改行",
    "账号被强制下线": "アカウントが強制的にログアウト",
    "登录失败": "ログインに失敗しました"
  };
  const Component$4 = {
    "图片 url 不存在": "画像のURLが存在しません",
    "暂不支持下载此类型图片": "このタイプの画像のダウンロードは現在サポートされていません",
    "大图提取中": "大きな画像を処理中です",
    "已保存至相册": "アルバムに保存されました",
    "图片下载失败": "画像のダウンロードに失敗しました"
  };
  const Time$4 = {
    "周": "週",
    "天": "日",
    "小时": "時間",
    "分钟": "分",
    "刚刚": "たった今",
    "前": "前",
    "昨天": "昨日",
    "星期一": "月曜日",
    "星期二": "火曜日",
    "星期三": "水曜日",
    "星期四": "木曜日",
    "星期五": "金曜日",
    "星期六": "土曜日",
    "星期日": "日曜日"
  };
  const AIDesk$4 = {
    "结束人工会话": "終了",
    "转人工服务": "人工サービスに転送する",
    "跳转": "リンク",
    "立即填写": "今すぐ記入",
    "已提交": "提出済み",
    "提交": "提出する",
    "查看内容": "内容を表示",
    "请填写必填项": "必須項目を入力してください",
    "Hi，我是": "こんにちは、私は",
    "请输入内容": "内容を入力してください",
    "如果满意请给好评哦～": "ご満足いただけましたら、ぜひ良いレビューをお願いします〜",
    "请对本次服务进行评价": "このサービスについて評価をお願いします",
    "提交评价": "評価を提出する",
    "服务评价": "サービス評価",
    "并发限制": "現在アクセスが集中しております。しばらくしてから再度お試しください",
    "分支选项异常": "コンテンツに異常があります。タスクフローの設定を確認してください"
  };
  const messages$5 = {
    ja: {
      "取消": "キャンセル",
      "确定": "確認",
      "发送": "送信",
      "系统通知": "システム通知",
      "关闭": "閉じる",
      "图片": "画像",
      "文件": "ファイル",
      "表情": "表情",
      "视频": "動画",
      "录制": "録画する",
      "拍照": "写真を撮る",
      AIDesk: AIDesk$4,
      TUIChat: TUIChat$4,
      Component: Component$4,
      Time: Time$4,
      Emoji: Emoji$1
    }
  };
  const TUIChat$3 = {
    "查看内容": "Xem nội dung",
    "立即填写": "Điền ngay",
    "已提交": "Đã gửi",
    "不能为空": "Không được để trống",
    "提交": "Gửi",
    "撤回": "Thu hồi",
    "删除": "Xóa",
    "复制": "Sao chép",
    "重新发送": "Gửi lại",
    "转发": "Chuyển tiếp",
    "引用": "Trích dẫn",
    "打开": "Mở",
    "已读": "Đã đọc",
    "全部已读": "Đã đọc hết",
    "人已读": " đã đọc",
    "人未读": " chưa đọc",
    "人关闭阅读状态": " đóng trạng thái đọc",
    "消息详情": "Thông tin tin nhắn",
    "关闭阅读状态": "Đóng trạng thái đọc",
    "该消息不存在": "Tin nhắn không tồn tại",
    "无法定位到原消息": "Không thể xác định được tin nhắn gốc",
    "未读": "Chưa đọc",
    "您": "Bạn",
    "撤回了一条消息": "Đã thu hồi một tin nhắn",
    "重新编辑": "Chỉnh sửa lại",
    "我": "Tôi",
    "查看更多": "Xem thêm",
    "转发给": "Chuyển tiếp đến",
    "请输入消息": "Nhập tin nhắn",
    "描述": "Mô tả",
    "经度": "Kinh độ",
    "纬度": "Vĩ độ",
    "自定义消息": "Tin nhắn tùy chỉnh",
    "图片": "[hình ảnh]",
    "语音": "[âm thanh]",
    "视频": "[video]",
    "表情": "[biểu tượng cảm xúc]",
    "文件": "[tệp tin]",
    "自定义": "[tin nhắn tùy chỉnh]",
    "管理员开启全员禁言": "Quản trị viên mở chế độ im lặng cho tất cả mọi người",
    "您已被管理员禁言": "Bạn đã bị quản trị viên im lặng",
    "按Enter发送": "Nhấn Enter để gửi tin nhắn",
    "单击下载": "Nhấp để tải xuống",
    "下载": "tải về",
    "确认重发该消息？": "Xác nhận gửi lại tin nhắn này?",
    "取消": "Hủy",
    "确定": "Xác nhận",
    "对方正在输入": "Đang nhập tin...",
    "回到最新位置": "Quay lại vị trí mới nhất",
    "条新消息": " tin nhắn mới",
    "点此投诉": "Khiếu nại",
    "语音通话": "Cuộc gọi thoại",
    "视频通话": "Cuộc gọi video",
    "发起群语音": "Bắt đầu cuộc gọi thoại nhóm",
    "发起群视频": "Bắt đầu cuộc gọi video nhóm",
    "已接听": "Đã trả lời",
    "拒绝通话": "Từ chối cuộc gọi",
    "无应答": "Không trả lời",
    "取消通话": "Hủy cuộc gọi",
    "发起通话": "Bắt đầu cuộc gọi",
    "结束群聊": "Chỉnh sửa cuộc gọi nhóm",
    "通话时长": "Thời gian gọi",
    "欢迎使用TUICallKit": "Chào mừng đến với TUICallKit",
    "检测到您暂未集成TUICallKit，无法体验音视频通话功能": "Phát hiện rằng bạn chưa tích hợp TUI CallKit, vì vậy bạn không thể trải nghiệm chức năng cuộc gọi âm thanh và video.",
    "请点击": "Vui lòng nhấp chuột",
    "集成TUICallKit": " Tích hợp TUICallKit ",
    "开通腾讯实时音视频服务": "Tích hợp Tencent Real-Time Communication",
    "进行体验": "để trải nghiệm.",
    "您当前购买使用的套餐包暂未开通此功能": "Gói dịch vụ mà bạn đang sử dụng không hỗ trợ tính năng này.",
    "系统消息": "Bot",
    "转人工服务": "Chuyển sang dịch vụ nhân tạo",
    "点击处理": "Nhấp để xử lý",
    "发送失败": "Gửi thất bại",
    "复制成功": "Sao chép thành công",
    "回复": "Trả lời",
    "回复详情": "Chi tiết trả lời",
    "拒绝": "Từ chối",
    "聊天记录": "Lịch sử trò chuyện",
    "内容包含敏感词汇": "Nội dung chứa từ ngữ nhạy cảm",
    "您当前购买使用的套餐包暂未开通群消息已读回执功能": "Gói dịch vụ bạn đang sử dụng hiện chưa mở chức năng xác nhận đã đọc tin nhắn nhóm",
    "您当前购买使用的套餐包暂未开通在线用户列表功能": "Gói dịch vụ bạn đang sử dụng hiện chưa mở chức năng danh sách người dùng trực tuyến",
    "您有": "Bạn có",
    "涉及敏感内容": "Liên quan đến nội dung nhạy cảm",
    "申请加入": "Đăng ký tham gia",
    "条回复": "phản hồi",
    "条入群申请": "đơn xin tham gia nhóm",
    "同意": "Đồng ý",
    "图片消息失败,无效的图片格式": "Gửi tin nhắn hình ảnh thất bại, định dạng hình ảnh không hợp lệ",
    "位置": "Vị trí",
    "文件不存在,请检查文件路径是否正确": "Tệp không tồn tại, vui lòng kiểm tra đường dẫn tệp có đúng không",
    "文件大小超出了限制,如果上传文件,最大限制是100MB": "Kích thước tệp vượt quá giới hạn, nếu tải lên tệp, giới hạn tối đa là 100MB",
    "文件消息失败,禁止发送违规封禁的文件": "Gửi tin nhắn tệp thất bại, không được phép gửi tệp vi phạm",
    "无法查看": "Không thể xem",
    "无法收听": "Không thể nghe",
    "正在加载": "Đang tải",
    "加载结束": "Tải xong",
    "消息": "Tin nhắn",
    "消息或者资料中文本存在敏感内容,发送失败": "Tin nhắn hoặc nội dung văn bản chứa nội dung nhạy cảm, gửi thất bại",
    "消息长度超出限制,消息长度不要超过12K": "Độ dài tin nhắn vượt quá giới hạn, độ dài tin nhắn không vượt quá 12K",
    "消息中图片存在敏感内容,发送失败": "Tin nhắn chứa hình ảnh có nội dung nhạy cảm, gửi thất bại",
    "选择提醒的人": "Chọn người để thông báo",
    "已过撤回时限": "Quá thời hạn rút lại",
    "已拒绝": "Đã từ chối",
    "已同意": "Đã đồng ý",
    "引用失败": "Trích dẫn thất bại",
    "翻译": "Dịch",
    "转文字": "Chuyển thành văn bản",
    "隐藏": "Ẩn",
    "空": "Trống",
    "文本包含本地审核拦截词": "Văn bản chứa từ cấm kiểm duyệt địa phương",
    "按住说话": "Nhấn và nói",
    "抬起发送": "Nhấc lên để gửi",
    "抬起取消": "Nhấc lên để hủy",
    "正在录音": "Đang ghi âm",
    "继续上滑可取消": "Tiếp tục vuốt lên để hủy",
    "松开手指 取消发送": "Nhả tay để hủy gửi",
    "此机型暂不支持复制功能": "Máy này tạm thời không hỗ trợ chức năng sao chép",
    "请开通翻译功能": "Vui lòng bật chức năng dịch",
    "请开通语音转文字功能": "Vui lòng bật chức năng chuyển đổi giọng nói thành văn bản",
    "翻译中": "Đang dịch",
    "转换中": "Đang chuyển đổi",
    "由IM提供翻译支持": "Được hỗ trợ dịch bởi IM",
    "所有人": "Tất cả mọi người",
    "已达到表情回应上限数量": "Đã đạt đến số lượng giới hạn phản hồi biểu cảm",
    "等": "và nhiều hơn nữa",
    "人": "người",
    "返回": "Quay lại",
    "关闭": "Đóng",
    "多选": "Chọn nhiều",
    "合并转发": "Chuyển tiếp kết hợp",
    "逐条转发": "Chuyển tiếp từng mục",
    "未选择消息": "Chưa chọn tin nhắn",
    "草稿": "Bản nháp",
    "文本": "Văn bản",
    "音频": "Âm thanh",
    "地理位置": "Vị trí địa lý",
    "动画表情": "Biểu cảm động",
    "群提示": "Nhắc nhở nhóm",
    "群提示消息": "Tin nhắn nhắc nhở nhóm",
    "机器人自定义消息": "Tin nhắn tùy chỉnh của robot",
    "引用内容已撤回": "Nội dung trích dẫn đã bị thu hồi",
    "群聊的聊天记录": "Lịch sử trò chuyện nhóm",
    "和": "và",
    "的聊天记录": "của lịch sử trò chuyện",
    "请升级IMSDK到v2.10.1或更高版本查看此消息": "Vui lòng nâng cấp IMSDK lên phiên bản v2.10.1 hoặc cao hơn để xem tin nhắn này",
    "该群聊已被解散": "Nhóm trò chuyện đã bị giải tán",
    "您已被管理员移出群聊": "Bạn đã bị loại khỏi nhóm bởi quản trị viên",
    "您已退出该群聊": "Bạn đã rời khỏi nhóm",
    "您已被禁止聊天": "Bạn đã bị cấm trò chuyện",
    "按Enter发送，Ctrl+Enter换行": "Nhấn Enter để gửi, Ctrl+Enter để xuống dòng",
    "账号被强制下线": "Tài khoản bị buộc đăng xuất",
    "登录失败": "Đăng nhập thất bại"
  };
  const Component$3 = {
    "图片 url 不存在": "Url hình ảnh không tồn tại",
    "暂不支持下载此类型图片": "Hiện tại không hỗ trợ tải xuống loại hình ảnh này",
    "大图提取中": "Đang xử lý hình ảnh lớn",
    "已保存至相册": "Đã lưu vào album",
    "图片下载失败": "Tải hình ảnh thất bại"
  };
  const Time$3 = {
    "周": "tuần",
    "天": "ngày",
    "小时": "giờ",
    "分钟": "phút",
    "刚刚": "vừa mới",
    "前": "trước",
    "昨天": "hôm qua",
    "星期一": "thứ hai",
    "星期二": "thứ ba",
    "星期三": "thứ tư",
    "星期四": "thứ năm",
    "星期五": "thứ sáu",
    "星期六": "thứ bảy",
    "星期日": "chủ nhật"
  };
  const AIDesk$3 = {
    "结束人工会话": "Kết thúc cuộc trò chuyện với người",
    "转人工服务": "Chuyển sang dịch vụ của người",
    "跳转": "Chuyển hướng",
    "立即填写": "Điền ngay",
    "已提交": "Đã gửi",
    "提交": "Gửi",
    "查看内容": "Xem nội dung",
    "请填写必填项": "Vui lòng điền vào các mục bắt buộc",
    "Hi，我是": "Xin chào, tôi là ",
    "请输入内容": "Vui lòng nhập nội dung",
    "如果满意请给好评哦～": "Nếu bạn hài lòng, hãy cho chúng tôi một đánh giá tốt nhé~",
    "请对本次服务进行评价": "Vui lòng đánh giá dịch vụ này",
    "提交评价": "Gửi đánh giá",
    "服务评价": " Đánh giá dịch vụ",
    "并发限制": "Hiện có quá nhiều người đang truy cập. Vui lòng thử lại sau",
    "分支选项异常": "Nội dung bất thường, vui lòng kiểm tra cấu hình luồng tác vụ"
  };
  const messages$4 = {
    vi: {
      "取消": "Hủy bỏ",
      "确定": "Lưu lại",
      "发送": "Gửi",
      "系统通知": "Thông báo hệ thống",
      "关闭": "Đóng",
      "图片": "Hình ảnh",
      "文件": "Tệp",
      "表情": "biểu tượng cảm xúc",
      "视频": "video",
      "录制": "Ghi hình",
      "拍照": "Chụp ảnh",
      AIDesk: AIDesk$3,
      TUIChat: TUIChat$3,
      Component: Component$3,
      Time: Time$3,
      Emoji: Emoji$1
    }
  };
  const TUIChat$2 = {
    "查看内容": "Lihat kandungan",
    "立即填写": "Isi segera",
    "已提交": "Telah dihantar",
    "不能为空": "Tidak boleh kosong",
    "提交": "Hantar",
    "撤回": "Tarik Balik",
    "删除": "Padam",
    "复制": "Salin",
    "重新发送": "Hantar Semula",
    "转发": "Teruskan",
    "引用": "Petik",
    "打开": "Buka",
    "已读": "Telah Dibaca",
    "未读": "Belum Dibaca",
    "人已读": "Orang Telah Membaca",
    "人未读": "Orang Belum Membaca",
    "人关闭阅读状态": "Orang Menutup Status Bacaan",
    "全部已读": "Semua Telah Dibaca",
    "消息详情": "Butiran Mesej",
    "关闭阅读状态": "Tutup",
    "您": "Anda",
    "撤回了一条消息": "Telah Menarik Balik Satu Mesej",
    "重新编辑": "Edit Semula",
    "我": "Saya",
    "自定义消息": "Mesej Tersuai",
    "查看更多": "Lihat Lebih Banyak",
    "确认重发该消息？": "Sahkan Untuk Hantar Semula Mesej Ini?",
    "取消": "Batal",
    "确定": "Sahkan",
    "转发给": "Teruskan Kepada",
    "请输入消息": "Sila Masukkan Mesej",
    "描述": "Deskripsi",
    "经度": "Longitud",
    "纬度": "Latitud",
    "图片": "[Gambar]",
    "语音": "[Suara]",
    "视频": "[Video]",
    "表情": "[Emotikon]",
    "文件": "[Fail]",
    "自定义": "[Mesej Tersuai]",
    "管理员开启全员禁言": "Pentadbir Mengaktifkan Senyap Semua",
    "您已被管理员禁言": "Anda Telah Disenyapkan Oleh Pentadbir",
    "按Enter发送": "Tekan Enter Untuk Hantar",
    "单击下载": "Klik Untuk Muat Turun",
    "下载": "Muat turun",
    "该消息不存在": "Mesej Ini Tidak Wujud",
    "无法定位到原消息": "Tidak Dapat Menemukan Mesej Asal",
    "对方正在输入": "Pihak Lain Sedang Menulis...",
    "回到最新位置": "Kembali Ke Lokasi Terkini",
    "条新消息": "Mesej Baru",
    "点此投诉": "Klik Sini Untuk Aduan",
    "语音通话": "Panggilan Suara",
    "视频通话": "Panggilan Video",
    "发起群语音": "Mulakan Panggilan Suara Kumpulan",
    "发起群视频": "Mulakan Panggilan Video Kumpulan",
    "已接听": "Telah Dijawab",
    "拒绝通话": "Tolak Panggilan",
    "无应答": "Tiada Jawapan",
    "取消通话": "Batal Panggilan",
    "发起通话": "Mulakan Panggilan",
    "结束群聊": "Tamatkan Sembang Kumpulan",
    "通话时长": "Tempoh Panggilan",
    "欢迎使用TUICallKit": "Selamat Datang Menggunakan Komponen Panggilan Audio dan Video Tencent Cloud TUICallKit",
    "检测到您暂未集成TUICallKit，无法体验音视频通话功能": "Dikesan Anda Belum Mengintegrasikan TUICallKit, Tidak Dapat Mengalami Fungsi Panggilan Audio dan Video.",
    "请点击": "Sila Klik",
    "集成TUICallKit": "Integrasi TUICallKit",
    "开通腾讯实时音视频服务": "Aktifkan Perkhidmatan Audio dan Video Masa Nyata Tencent",
    "进行体验": "Untuk Mengalami.",
    "您当前购买使用的套餐包暂未开通此功能": "Pakej yang Anda Beli Sekarang Tidak Mengaktifkan Fungsi Ini.",
    "系统消息": "Mesej Sistem",
    "转人工服务": "Alihkan Ke Perkhidmatan Manusia",
    "点击处理": "Klik untuk proses",
    "发送失败": "Gagal menghantar",
    "复制成功": "Berjaya disalin",
    "回复": "Balas",
    "回复详情": "Butiran Balasan",
    "拒绝": "Menolak",
    "聊天记录": "Rekod Perbualan",
    "内容包含敏感词汇": "Kandungan mengandungi perkataan sensitif",
    "您当前购买使用的套餐包暂未开通群消息已读回执功能": "Pakej yang anda beli dan gunakan belum membuka fungsi tanda terima bacaan mesej kumpulan",
    "您当前购买使用的套餐包暂未开通在线用户列表功能": "Pakej yang anda beli dan gunakan belum membuka fungsi senarai pengguna dalam talian",
    "您有": "Anda mempunyai",
    "涉及敏感内容": "Melibatkan kandungan sensitif",
    "申请加入": "Permohonan Sertai",
    "条回复": "balasan",
    "条入群申请": "permohonan sertai kumpulan",
    "同意": "Setuju",
    "图片消息失败,无效的图片格式": "Gagal menghantar mesej gambar, format gambar tidak sah",
    "位置": "Lokasi",
    "文件不存在,请检查文件路径是否正确": "Fail tidak wujud, sila periksa laluan fail sama ada betul",
    "文件大小超出了限制,如果上传文件,最大限制是100MB": "Saiz fail melebihi had, jika memuat naik fail, had maksimum adalah 100MB",
    "文件消息失败,禁止发送违规封禁的文件": "Gagal menghantar mesej fail, larangan menghantar fail yang melanggar peraturan",
    "无法查看": "Tidak dapat dilihat",
    "无法收听": "Tidak dapat didengar",
    "正在加载": "Sedang dimuatkan",
    "加载结束": "Pemuatan selesai",
    "消息": "Mesej",
    "消息或者资料中文本存在敏感内容,发送失败": "Gagal menghantar mesej atau maklumat, terdapat kandungan sensitif dalam teks",
    "消息长度超出限制,消息长度不要超过12K": "Panjang mesej melebihi had, panjang mesej tidak boleh melebihi 12K",
    "消息中图片存在敏感内容,发送失败": "Gagal menghantar mesej, terdapat kandungan sensitif dalam gambar",
    "选择提醒的人": "Pilih orang yang ingin diingatkan",
    "已过撤回时限": "Had masa untuk menarik balik telah berlalu",
    "已拒绝": "Ditolak",
    "已同意": "Disetujui",
    "引用失败": "Gagal mengutip",
    "翻译": "Terjemahan",
    "转文字": "Teks ke Audio",
    "隐藏": "Sembunyi",
    "腾讯云 IM": "Tencent Cloud Chat",
    "空": "Kosong",
    "文本包含本地审核拦截词": "Teks mengandungi perkataan penyaringan tempatan",
    "按住说话": "Tekan dan bercakap",
    "抬起发送": "Angkat untuk menghantar",
    "抬起取消": "Angkat untuk membatalkan",
    "正在录音": "Sedang merekod",
    "继续上滑可取消": "Terus geser ke atas untuk membatalkan",
    "松开手指 取消发送": "Lepaskan jari untuk membatalkan penghantaran",
    "此机型暂不支持复制功能": "Model ini tidak menyokong fungsi salin sementara",
    "请开通翻译功能": "Sila aktifkan fungsi terjemahan",
    "请开通语音转文字功能": "Sila aktifkan fungsi penukaran suara ke teks",
    "翻译中": "Sedang diterjemahkan",
    "转换中": "Sedang menukar",
    "由IM提供翻译支持": "Disokong oleh IM untuk terjemahan",
    "所有人": "Semua orang",
    "已达到表情回应上限数量": "Jumlah had tindak balas emosi telah dicapai",
    "等": "dan lain-lain",
    "人": "orang",
    "返回": "Kembali",
    "关闭": "Tutup",
    "多选": "Pilihan pelbagai",
    "合并转发": "Gabungkan dan hantar",
    "逐条转发": "Hantar satu persatu",
    "未选择消息": "Tiada mesej dipilih",
    "[草稿]": "[Draf]",
    "[消息]": "[Mesej]",
    "[文本]": "[Teks]",
    "[自定义消息]": "[Mesej Tersuai]",
    "[图片]": "[Gambar]",
    "[音频]": "[Audio]",
    "[语音]": "[Suara]",
    "[视频]": "[Video]",
    "[文件]": "[Fail]",
    "[位置]": "[Lokasi]",
    "[地理位置]": "[Lokasi]",
    "[动画表情]": "[Emoji Animasi]",
    "[群提示]": "[Petunjuk Kumpulan]",
    "[群提示消息]": "[Mesej Petunjuk Kumpulan]",
    "[聊天记录]": "[Rekod Perbualan]",
    "[机器人自定义消息]": "[Mesej Tersuai Robot]",
    "引用内容已撤回": "Kandungan rujukan telah ditarik balik",
    "群聊的聊天记录": "Rekod perbualan dalam kumpulan",
    "和": "dan",
    "的聊天记录": "rekod perbualan",
    "请升级IMSDK到v2.10.1或更高版本查看此消息": "Sila naik tarafkan IMSDK ke v2.10.1 atau versi yang lebih tinggi untuk melihat mesej ini",
    "该群聊已被解散": "Perbualan kumpulan ini telah dibubarkan",
    "您已被管理员移出群聊": "Anda telah dikeluarkan daripada perbualan kumpulan oleh pentadbir",
    "您已退出该群聊": "Anda telah keluar daripada perbualan kumpulan ini",
    "您已被禁止聊天": "Anda telah dilarang berbual",
    "按Enter发送，Ctrl+Enter换行": "Tekan Enter untuk menghantar, Ctrl+Enter untuk baris baru",
    "账号被强制下线": "Akaun dipaksa keluar",
    "登录失败": "Gagal log masuk"
  };
  const Component$2 = {
    "图片 url 不存在": "Url imej tidak wujud",
    "暂不支持下载此类型图片": "Memuat turun imej jenis ini tidak disokong pada masa ini",
    "大图提取中": "Memproses imej besar",
    "已保存至相册": "Disimpan dalam album",
    "图片下载失败": "Gagal memuat turun gambar"
  };
  const Time$2 = {
    "周": "Minggu",
    "天": "Hari",
    "小时": "Jam",
    "分钟": "Minit",
    "刚刚": "Baru sahaja",
    "前": "Lalu",
    "昨天": "Semalam",
    "星期一": "Isnin",
    "星期二": "Selasa",
    "星期三": "Rabu",
    "星期四": "Khamis",
    "星期五": "Jumaat",
    "星期六": "Sabtu",
    "星期日": "Ahad"
  };
  const AIDesk$2 = {
    "结束人工会话": "Tamatkan Sesi",
    "转人工服务": "Alihkan ke Perkhidmatan Manusia",
    "跳转": "Pergi ke",
    "立即填写": "Isi Sekarang",
    "已提交": "Telah Dihantar",
    "提交": "Hantar",
    "查看内容": "Lihat Kandungan",
    "请填写必填项": "Sila isi ruangan yang wajib",
    "Hi，我是": "Hai, saya ",
    "请输入内容": "Sila masukkan kandungan",
    "如果满意请给好评哦～": "Jika anda berpuas hati, sila berikan ulasan yang baik~",
    "请对本次服务进行评价": "Sila beri penilaian untuk perkhidmatan ini",
    "提交评价": "Hantar Penilaian",
    "服务评价": "Penilaian Perkhidmatan",
    "并发限制": "Terdapat terlalu ramai pengguna pada masa ini. Sila cuba lagi nanti",
    "分支选项异常": "Kandungan tidak normal, sila semak konfigurasi aliran tugas"
  };
  const messages$3 = {
    ms: {
      "取消": "Batal",
      "确定": "Sahkan",
      "发送": "Hantar",
      "系统通知": "Pemberitahuan Sistem",
      "关闭": "Tutup",
      "图片": "Imej",
      "文件": "Fail",
      "表情": "Emotikon",
      "视频": "Video",
      "录制": "Merekam",
      "拍照": "Memotret",
      AIDesk: AIDesk$2,
      TUIChat: TUIChat$2,
      Component: Component$2,
      Time: Time$2,
      Emoji: Emoji$1
    }
  };
  const TUIChat$1 = {
    "查看内容": "ดูเนื้อหา",
    "立即填写": "กรอกทันที",
    "已提交": "ส่งแล้ว",
    "不能为空": "ต้องไม่ว่างเปล่า",
    "提交": "ส่ง",
    "撤回": "ถอนกลับ",
    "删除": "ลบ",
    "复制": "คัดลอก",
    "重新发送": "ส่งใหม่",
    "转发": "ส่งต่อ",
    "引用": "อ้างอิง",
    "打开": "เปิด",
    "已读": "อ่านแล้ว",
    "未读": "ยังไม่ได้อ่าน",
    "人已读": "คนอ่านแล้ว",
    "人未读": "คนยังไม่ได้อ่าน",
    "人关闭阅读状态": "คนปิดสถานะการอ่าน",
    "全部已读": "อ่านทั้งหมดแล้ว",
    "消息详情": "รายละเอียดข้อความ",
    "关闭阅读状态": "ปิดสถานะการอ่าน",
    "您": "คุณ",
    "撤回了一条消息": "ถอนกลับข้อความหนึ่ง",
    "重新编辑": "แก้ไขใหม่",
    "我": "ฉัน",
    "自定义消息": "ข้อความที่กำหนดเอง",
    "查看更多": "ดูเพิ่มเติม",
    "确认重发该消息？": "ยืนยันการส่งข้อความนี้อีกครั้ง?",
    "取消": "ยกเลิก",
    "确定": "ยืนยัน",
    "转发给": "ส่งต่อให้",
    "请输入消息": "กรุณาใส่ข้อความ",
    "描述": "คำอธิบาย",
    "经度": "ลองจิจูด",
    "纬度": "ละติจูด",
    "图片": "[รูปภาพ]",
    "语音": "[เสียง]",
    "视频": "[วิดีโอ]",
    "表情": "[อีโมจิ]",
    "文件": "[ไฟล์]",
    "自定义": "[ข้อความที่กำหนดเอง]",
    "管理员开启全员禁言": "ผู้ดูแลระบบเปิดการปิดเสียงทั้งหมด",
    "您已被管理员禁言": "คุณถูกผู้ดูแลระบบปิดเสียง",
    "按Enter发送": "กด Enter เพื่อส่ง",
    "单击下载": "คลิกเพื่อดาวน์โหลด",
    "下载": "ดาวน์โหลด",
    "该消息不存在": "ข้อความนี้ไม่มีอยู่",
    "无法定位到原消息": "ไม่สามารถระบุตำแหน่งข้อความต้นฉบับได้",
    "对方正在输入": "อีกฝ่ายกำลังพิมพ์...",
    "回到最新位置": "กลับไปยังตำแหน่งล่าสุด",
    "条新消息": "ข้อความใหม่",
    "点此投诉": "คลิกที่นี่เพื่อร้องเรียน",
    "语音通话": "การโทรด้วยเสียง",
    "视频通话": "การโทรด้วยวิดีโอ",
    "发起群语音": "เริ่มการโทรด้วยเสียงกลุ่ม",
    "发起群视频": "เริ่มการโทรด้วยวิดีโอกลุ่ม",
    "已接听": "รับสายแล้ว",
    "拒绝通话": "ปฏิเสธการโทร",
    "无应答": "ไม่มีการตอบรับ",
    "取消通话": "ยกเลิกการโทร",
    "发起通话": "เริ่มการโทร",
    "结束群聊": "สิ้นสุดการแชทกลุ่ม",
    "通话时长": "ระยะเวลาการโทร",
    "欢迎使用TUICallKit": "ยินดีต้อนรับสู่การใช้ TUICallKit ของ Tencent Cloud",
    "检测到您暂未集成TUICallKit，无法体验音视频通话功能": "ตรวจพบว่าคุณยังไม่ได้รวม TUICallKit ไม่สามารถใช้ฟังก์ชันการโทรด้วยเสียงและวิดีโอได้",
    "请点击": "กรุณาคลิก",
    "集成TUICallKit": "รวม TUICallKit",
    "开通腾讯实时音视频服务": "เปิดบริการเสียงและวิดีโอเรียลไทม์ของ Tencent",
    "进行体验": "เพื่อทดลองใช้",
    "您当前购买使用的套餐包暂未开通此功能": "แพ็คเกจที่คุณซื้อในปัจจุบันยังไม่ได้เปิดใช้งานฟังก์ชันนี้",
    "系统消息": "ข้อความระบบ",
    "转人工服务": "เปลี่ยนเป็นบริการมนุษย์",
    "点击处理": "คลิกเพื่อดำเนินการ",
    "发送失败": "ส่งไม่สำเร็จ",
    "复制成功": "คัดลอกสำเร็จ",
    "回复": "ตอบกลับ",
    "回复详情": "รายละเอียดการตอบกลับ",
    "拒绝": "ปฏิเสธ",
    "聊天记录": "บันทึกการสนทนา",
    "内容包含敏感词汇": "เนื้อหามีคำที่ละเมิด",
    "您当前购买使用的套餐包暂未开通群消息已读回执功能": "แพ็กเกจที่คุณซื้อและใช้ยังไม่เปิดใช้งานฟังก์ชันการแจ้งเตือนอ่านข้อความในกลุ่ม",
    "您当前购买使用的套餐包暂未开通在线用户列表功能": "แพ็กเกจที่คุณซื้อและใช้ยังไม่เปิดใช้งานฟังก์ชันรายชื่อผู้ใช้ออนไลน์",
    "您有": "คุณมี",
    "涉及敏感内容": "เกี่ยวข้องกับเนื้อหาที่ละเมิด",
    "申请加入": "สมัครเข้าร่วม",
    "条回复": "ข้อความตอบกลับ",
    "条入群申请": "คำขอเข้าร่วมกลุ่ม",
    "同意": "ยอมรับ",
    "图片消息失败,无效的图片格式": "ส่งข้อความรูปภาพล้มเหลว รูปแบบรูปภาพไม่ถูกต้อง",
    "位置": "ตำแหน่ง",
    "文件不存在,请检查文件路径是否正确": "ไม่พบไฟล์ โปรดตรวจสอบที่อยู่ไฟล์ว่าถูกต้องหรือไม่",
    "文件大小超出了限制,如果上传文件,最大限制是100MB": "ขนาดไฟล์เกินขีดจำกัด หากอัปโหลดไฟล์ ขีดจำกัดสูงสุดคือ 100MB",
    "文件消息失败,禁止发送违规封禁的文件": "ส่งข้อความไฟล์ล้มเหลว ไม่อนุญาตให้ส่งไฟล์ที่ถูกห้าม",
    "无法查看": "ไม่สามารถดูได้",
    "无法收听": "ไม่สามารถฟังได้",
    "正在加载": "กำลังโหลด",
    "加载结束": "โหลดเสร็จสิ้น",
    "消息": "ข้อความ",
    "消息或者资料中文本存在敏感内容,发送失败": "ข้อความหรือข้อมูลมีเนื้อหาที่ละเมิด ส่งไม่สำเร็จ",
    "消息长度超出限制,消息长度不要超过12K": "ข้อความยาวเกินขีดจำกัด ความยาวข้อความไม่ควรเกิน 12K",
    "消息中图片存在敏感内容,发送失败": "รูปภาพในข้อความมีเนื้อหาที่ละเมิด ส่งไม่สำเร็จ",
    "选择提醒的人": "เลือกบุคคลที่ต้องการแจ้งเตือน",
    "已过撤回时限": "เกินเวลาการถอนคำสั่ง",
    "已拒绝": "ปฏิเสธแล้ว",
    "已同意": "ยอมรับแล้ว",
    "引用失败": "การอ้างอิงล้มเหลว",
    "翻译": "แปล",
    "转文字": "แปลเป็นข้อความ",
    "隐藏": "ซ่อน",
    "腾讯云 IM": "Tencent Cloud Chat",
    "空": "ว่างเปล่า",
    "文本包含本地审核拦截词": "ข้อความมีคำที่ถูกตรวจสอบและบล็อกในท้องถิ่น",
    "按住说话": "กดค้างเพื่อพูด",
    "抬起发送": "ยกขึ้นเพื่อส่ง",
    "抬起取消": "ยกขึ้นเพื่อยกเลิก",
    "正在录音": "กำลังบันทึกเสียง",
    "继续上滑可取消": "เลื่อนขึ้นต่อเพื่อยกเลิก",
    "松开手指 取消发送": "ปล่อยนิ้วเพื่อยกเลิกการส่ง",
    "此机型暂不支持复制功能": "รุ่นเครื่องนี้ยังไม่รองรับฟังก์ชันคัดลอก",
    "请开通翻译功能": "โปรดเปิดใช้งานฟังก์ชันแปล",
    "请开通语音转文字功能": "โปรดเปิดใช้งานฟังก์ชันแปลงเสียงเป็นข้อความ",
    "翻译中": "กำลังแปล",
    "转换中": "กำลังแปลง",
    "由IM提供翻译支持": "รองรับการแปลโดย IM",
    "所有人": "ทุกคน",
    "已达到表情回应上限数量": "เต็มจำนวนสูงสุดของการตอบสนองด้วยอารมณ์แล้ว",
    "等": "และอื่นๆ",
    "人": "คน",
    "返回": "ย้อนกลับ",
    "关闭": "ปิด",
    "多选": "เลือกหลายรายการ",
    "合并转发": "รวมการส่งต่อ",
    "逐条转发": "ส่งต่อทีละรายการ",
    "未选择消息": "ไม่ได้เลือกข้อความ",
    "[草稿]": "[ร่าง]",
    "[消息]": "[ข้อความ]",
    "[文本]": "[ข้อความ]",
    "[自定义消息]": "[ข้อความที่กำหนดเอง]",
    "[图片]": "[รูปภาพ]",
    "[音频]": "[เสียง]",
    "[语音]": "[เสียง]",
    "[视频]": "[วิดีโอ]",
    "[文件]": "[ไฟล์]",
    "[位置]": "[ตำแหน่ง]",
    "[地理位置]": "[ตำแหน่งทางภูมิศาสตร์]",
    "[动画表情]": "[สติกเกอร์แบบเคลื่อนไหว]",
    "[群提示]": "[เคล็ดลับกลุ่ม]",
    "[群提示消息]": "[ข้อความเคล็ดลับกลุ่ม]",
    "[聊天记录]": "[บันทึกการสนทนา]",
    "[机器人自定义消息]": "[ข้อความที่กำหนดเองของหุ่นยนต์]",
    "引用内容已撤回": "เนื้อหาที่อ้างถึงถูกเพิกถอนแล้ว",
    "群聊的聊天记录": "บันทึกการสนทน",
    "和": "และ",
    "的聊天记录": "บันทึกการสนทนาของ",
    "请升级IMSDK到v2.10.1或更高版本查看此消息": "โปรดอัปเกรด IMSDK เป็นเวอร์ชัน 2.10.1 หรือสูงกว่าเพื่อดูข้อความนี้",
    "该群聊已被解散": "การสนทนากลุ่มนี้ได้ถูกยุบเลิกแล้ว",
    "您已被管理员移出群聊": "คุณถูกผู้ดูแลระบบเอาออกจากการสนทนากลุ่มแล้ว",
    "您已退出该群聊": "คุณได้ออกจากการสนทนากลุ่มนี้แล้ว",
    "您已被禁止聊天": "คุณถูกห้ามสนทนา",
    "按Enter发送，Ctrl+Enter换行": "กด Enter เพื่อส่ง กด Ctrl+Enter เพื่อขึ้นบรรทัดใหม่",
    "账号被强制下线": "บัญชีถูกบังคับให้ออกจากระบบ",
    "登录失败": "เข้าสู่ระบบไม่สำเร็จ"
  };
  const Component$1 = {
    "图片 url 不存在": "URL ของรูปภาพไม่มีอยู่",
    "暂不支持下载此类型图片": "การดาวน์โหลดภาพประเภทนี้ยังไม่ได้รับการสนับสนุนในขณะนี้",
    "大图提取中": "กำลังประมวลผลภาพขนาดใหญ่",
    "已保存至相册": "บันทึกลงในอัลบั้มแล้ว",
    "图片下载失败": "ดาวน์โหลดรูปภาพไม่สำเร็จ"
  };
  const Time$1 = {
    "周": "สัปดาห์",
    "天": "วัน",
    "小时": "ชั่วโมง",
    "分钟": "นาที",
    "刚刚": "เมื่อกี้",
    "前": "ก่อน",
    "昨天": "เมื่อวาน",
    "星期一": "วันจันทร์",
    "星期二": "วันอังคาร",
    "星期三": "วันพุธ",
    "星期四": "วันพฤหัสบดี",
    "星期五": "วันศุกร์",
    "星期六": "วันเสาร์",
    "星期日": "วันอาทิตย์"
  };
  const AIDesk$1 = {
    "结束人工会话": "สิ้นสุดการสนทนากับพนักงาน",
    "转人工服务": "เปลี่ยนไปยังบริการพนักงาน",
    "跳转": "ไปยัง",
    "立即填写": "กรอกทันที",
    "已提交": "เสนอแล้ว",
    "提交": "เสนอ",
    "查看内容": "ดูเนื้อหา",
    "请填写必填项": "โปรดกรอกข้อมูลที่จำเป็น",
    "Hi，我是": "สวัสดี ฉันเป็น ",
    "请输入内容": "กรุณากรอกเนื้อหา",
    "如果满意请给好评哦～": "หากพอใจแล้วก็อย่าลืมรีวิวให้ด้วยนะ~",
    "请对本次服务进行评价": "กรุณาประเมินบริการครั้งนี้",
    "提交评价": "ส่งการประเมิน",
    "服务评价": "การประเมินบริการ",
    "并发限制": "ปัจจุบันมีผู้ใช้งานจำนวนมาก กรุณาลองใหม่ในภายหลัง",
    "分支选项异常": "เนื้อหาผิดปกติ กรุณาตรวจสอบการตั้งค่ากระบวนการงาน"
  };
  const messages$2 = {
    th: {
      "取消": "ยกเลิก",
      "确定": "ยืนยัน",
      "发送": "ส่ง",
      "系统通知": "การแจ้งเตือนของระบบ",
      "关闭": "ปิด",
      "图片": "รูปภาพ",
      "文件": "ไฟล์",
      "表情": "อีโมจิ",
      "视频": "วิดีโอ",
      "录制": "บันทึกวิดีโอ",
      "拍照": "ถ่ายรูป",
      AIDesk: AIDesk$1,
      TUIChat: TUIChat$1,
      Component: Component$1,
      Time: Time$1,
      Emoji: Emoji$1
    }
  };
  const TUIChat = {
    "按Enter发送，Ctrl+Enter换行": "Enter - отправить, Ctrl+Enter - новая строка",
    "表情": "[Эмоция]",
    "查看更多": "Показать ещё",
    "撤回": "Отозвать",
    "撤回了一条消息": " отозвал(а) сообщение",
    "打开": "Открыть",
    "单击下载": "Нажмите для скачивания",
    "下载": "Скачать",
    "点此投诉": "Пожаловаться",
    "点击处理": "Обработать",
    "对方正在输入": "Печатает...",
    "发起群视频": "Начать групповой видеозвонок",
    "发起群语音": "Начать групповой аудиозвонок",
    "发起通话": "Начать звонок",
    "发送失败": "Ошибка отправки",
    "复制": "Копировать",
    "复制成功": "Скопировано",
    "该消息不存在": "Сообщение не существует",
    "关闭阅读状态": "Отключить статус прочтения",
    "管理员开启全员禁言": 'Админ включил режим "Только чтение"',
    "欢迎使用TUICallKit": "Добро пожаловать в TUICallKit",
    "回到最新位置": "Вернуться к новым сообщениям",
    "回复": "Ответить",
    "回复详情": "Детали ответа",
    "集成TUICallKit": "Интеграция TUICallKit",
    "检测到您暂未集成TUICallKit，无法体验音视频通话功能": "Обнаружено, что TUICallKit не интегрирован - аудио/видеозвонки недоступны",
    "结束群聊": "Завершить групповой звонок",
    "进行体验": "для тестирования",
    "经度": "Долгота",
    "拒绝": "Отклонить",
    "拒绝通话": "Отклонить звонок",
    "开通腾讯实时音视频服务": "Активировать Tencent RTC",
    "聊天记录": "[История чата]",
    "描述": "Описание",
    "内容包含敏感词汇": "Обнаружены запрещённые слова",
    "您": "Вы",
    "您当前购买使用的套餐包暂未开通此功能": "Ваш текущий тарифный план не поддерживает эту функцию",
    "您当前购买使用的套餐包暂未开通群消息已读回执功能": "Ваш тариф не включает подтверждение прочтения групповых сообщений",
    "您当前购买使用的套餐包暂未开通在线用户列表功能": "Ваш тариф не поддерживает список онлайн-пользователей",
    "您已被管理员禁言": "Администратор отключил вам возможность писать",
    "您有": "У вас есть",
    "请点击": "Нажмите",
    "请输入消息": "Введите сообщение",
    "取消": "Отмена",
    "取消通话": "Отменить звонок",
    "全部已读": "Все прочитано",
    "确定": "Подтвердить",
    "确认重发该消息？": "Подтвердить повторную отправку?",
    "人关闭阅读状态": " чел. отключили статус прочтения",
    "人未读": " не прочитали",
    "人已读": " прочитали",
    "删除": "Удалить",
    "涉及敏感内容": "Обнаружен чувствительный контент",
    "申请加入": "Запрос на вступление",
    "视频": "[Видео]",
    "视频通话": "Видеозвонок",
    "条回复": " ответов",
    "条入群申请": " заявок в группу",
    "条新消息": " новых сообщений",
    "通话时长": "Длительность звонка",
    "同意": "Согласиться",
    "图片": "[Изображение]",
    "图片消息失败,无效的图片格式": "Ошибка: неверный формат изображения",
    "纬度": "Широта",
    "未读": "Не прочитано",
    "位置": "[Местоположение]",
    "文件": "[Файл]",
    "文件不存在,请检查文件路径是否正确": "Файл не найден, проверьте путь",
    "文件大小超出了限制,如果上传文件,最大限制是100MB": "Превышен лимит (макс. 100MB)",
    "文件消息失败,禁止发送违规封禁的文件": "Ошибка: запрещённый файл",
    "我": "Я",
    "无法查看": "Невозможно просмотреть",
    "无法定位到原消息": "Не удалось найти исходное сообщение",
    "无法收听": "Невозможно прослушать",
    "正在加载": "Загрузка...",
    "加载结束": "Завершено",
    "无应答": "Нет ответа",
    "系统消息": "Системное сообщение",
    "消息": "[Сообщение]",
    "消息或者资料中文本存在敏感内容,发送失败": "Обнаружен запрещённый контент в сообщении - отправка отклонена",
    "消息详情": "Детали сообщения",
    "消息长度超出限制,消息长度不要超过12K": "Превышен лимит длины (макс. 12K)",
    "消息中图片存在敏感内容,发送失败": "Обнаружена запрещённая картинка - отправка отклонена",
    "选择提醒的人": "Выбрать контакт",
    "已读": "Прочитано",
    "已过撤回时限": "Срок отзыва истёк",
    "已接听": "Принят",
    "已拒绝": "Отклонён",
    "已同意": "Одобрено",
    "引用": "Цитата",
    "引用失败": "Ошибка цитирования",
    "语音": "[Голосовое]",
    "语音通话": "Аудиозвонок",
    "重新编辑": "Редактировать",
    "重新发送": "Отправить повторно",
    "转发": "Переслать",
    "翻译": "Перевести",
    "转文字": "В текст",
    "隐藏": "Скрыть",
    "转发给": "Переслать в",
    "自定义": "[Своё сообщение]",
    "自定义消息": "Своё сообщение",
    "腾讯云 IM": "Tencent Cloud IM",
    "空": "Пусто",
    "文本包含本地审核拦截词": "Текст содержит запрещённые слова",
    "按住说话": "Удерживайте для записи",
    "抬起发送": "Отпустите для отправки",
    "抬起取消": "Отпустите для отмены",
    "正在录音": "Идёт запись",
    "继续上滑可取消": "Потяните вверх для отмены",
    "松开手指 取消发送": "Отпустите для отмены",
    "此机型暂不支持复制功能": "Эта модель не поддерживает копирование",
    "请开通翻译功能": "Включите перевод",
    "请开通语音转文字功能": "Включите преобразование голоса",
    "翻译中": "Перевод...",
    "转换中": "Конвертация...",
    "由IM提供翻译支持": "Перевод через IM",
    "所有人": "Все",
    "已达到表情回应上限数量": "Достигнут лимит реакций",
    "等": "и др.",
    "人": "чел.",
    "返回": "Назад",
    "关闭": "Закрыть",
    "多选": "Выбрать",
    "合并转发": "Объединённая пересылка",
    "逐条转发": "Поочерёдная пересылка",
    "未选择消息": "Сообщения не выбраны",
    "[草稿]": "[Черновик]",
    "[消息]": "[Сообщение]",
    "[文本]": "[Текст]",
    "[自定义消息]": "[Своё сообщение]",
    "[图片]": "[Изображение]",
    "[音频]": "[Аудио]",
    "[语音]": "[Голосовое]",
    "[视频]": "[Видео]",
    "[文件]": "[Файл]",
    "[位置]": "[Местоположение]",
    "[地理位置]": "[Геопозиция]",
    "[动画表情]": "[Анимированный стикер]",
    "[群提示]": "[Групповое уведомление]",
    "[群提示消息]": "[Групповое оповещение]",
    "[聊天记录]": "[История чата]",
    "[机器人自定义消息]": "[Кастомное сообщение бота]",
    "引用内容已撤回": "Цитируемое сообщение отозвано",
    "群聊的聊天记录": "История группового чата",
    "和": "и",
    "的聊天记录": "история переписки",
    "请升级IMSDK到v2.10.1或更高版本查看此消息": "Обновите IMSDK до v2.10.1+ для просмотра",
    "该群聊已被解散": "Группа удалена",
    "您已被管理员移出群聊": "Администратор исключил вас из группы",
    "您已退出该群聊": "Вы вышли из группы",
    "您已被禁止聊天": "Вам запрещено писать",
    "账号被强制下线": "Аккаунт был принудительно выведен",
    "登录失败": "Вход в систему не удалось"
  };
  const Component = {
    "图片 url 不存在": "URL изображения не существует",
    "暂不支持下载此类型图片": "Этот тип изображения пока не поддерживается для загрузки",
    "大图提取中": "Извлекается большое изображение",
    "已保存至相册": "Сохранено в альбоме",
    "图片下载失败": "Ошибка загрузки изображения"
  };
  const Time = {
    "周": "неделя",
    "天": "день",
    "小时": "час",
    "分钟": "минута",
    "刚刚": "только что",
    "前": "назад",
    "昨天": "вчера",
    "星期一": "понедельник",
    "星期二": "вторник",
    "星期三": "среда",
    "星期四": "четверг",
    "星期五": "пятница",
    "星期六": "суббота",
    "星期日": "воскресенье",
    "一月": "январь",
    "二月": "февраль",
    "三月": "март",
    "四月": "апрель",
    "五月": "май",
    "六月": "июнь",
    "七月": "июль",
    "八月": "август",
    "九月": "сентябрь",
    "十月": "октябрь",
    "十一月": "ноябрь",
    "十二月": "декабрь"
  };
  const AIDesk = {
    "结束人工会话": "Завершить сеанс ручного управления",
    "转人工服务": "Перевод на ручное обслуживание",
    "跳转": "Прыжок",
    "立即填写": "Заполнить сейчас",
    "已提交": "Отправлено",
    "提交": "Отправить",
    "查看内容": "Просмотреть содержимое",
    "请填写必填项": "Пожалуйста, заполните обязательные поля",
    "Hi，我是": "Привет, я ",
    "请输入内容": "Пожалуйста, введите содержание",
    "如果满意请给好评哦～": "Если вы удовлетворены, пожалуйста, оставьте хороший отзыв~",
    "请对本次服务进行评价": "Оцените обслуживание",
    "提交评价": "Отправить оценку",
    "服务评价": "Оценка услуги",
    "并发限制": "В данный момент слишком много пользователей. Попробуйте позже",
    "分支选项异常": "Содержимое аномально, пожалуйста, проверьте конфигурацию потока задач"
  };
  const messages$1 = {
    ru: {
      "取消": "Отмена",
      "确定": "Подтвердить",
      "发送": "Отправить",
      "系统通知": "Системное уведомление",
      "关闭": "Закрыть",
      "图片": "Изображение",
      "文件": "Файл",
      "表情": "Эмоция",
      "视频": "Видео",
      "录制": "Записать",
      "拍照": "Сделать фото",
      TUIChat,
      Component,
      Time,
      AIDesk,
      Emoji: Emoji$1
    }
  };
  const messages = {
    ...messages$a,
    ...messages$9,
    ...messages$8,
    ...messages$7,
    ...messages$6,
    ...messages$5,
    ...messages$4,
    ...messages$3,
    ...messages$2,
    ...messages$1
  };
  const _sfc_main$2 = /* @__PURE__ */ vue$1.defineComponent({
    __name: "index-uniapp",
    props: {
      robotLang: { type: String, required: false, default: "" },
      userLang: { type: String, required: false, default: "" },
      canSendAudio: { type: Boolean, required: false, default: false },
      toolbarButtonList: { type: Array, required: false, default: () => [] },
      showAvatar: { type: Number, required: false, default: 1 },
      robotAvatar: { type: String, required: false, default: "" },
      staffAvatar: { type: String, required: false, default: "" },
      userAvatar: { type: String, required: false, default: "" },
      showNickName: { type: Number, required: false, default: 0 },
      robotNickName: { type: String, required: false, default: "" },
      staffNickName: { type: String, required: false, default: "" },
      userNickName: { type: String, required: false, default: "" },
      inputToolbarList: { type: Array, required: false, default: () => [] },
      showReadStatus: { type: Number, required: false, default: 1 },
      showTyping: { type: Number, required: false, default: 0 }
    },
    emits: ["closeChat"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const { ref: ref2, onMounted: onMounted2, onUnmounted: onUnmounted2, computed: computed2 } = vue;
      const emits = __emit;
      const currentConversationID = ref2();
      const inputToolbarDisplayType = ref2("none");
      const messageInputRef = ref2();
      const messageListRef = ref2();
      const isMuted = ref2(false);
      const muteText = ref2("");
      const isUniFormShow = ref2(false);
      const languages = Object.keys(messages);
      const props = __props;
      const convertLanguageToLowercase = (language) => {
        if (!language) {
          return "zh";
        }
        let lowercase = language.toLowerCase();
        if (lowercase === "zh-cn" || lowercase === "zh_cn") {
          lowercase = "zh";
        } else if (lowercase === "zh-tw" || lowercase === "zh-hk") {
          lowercase = "zh_tw";
        }
        return lowercase;
      };
      const initLanguage = () => {
        Log.i(`initLanguage ${props.userLang}`);
        Wt.provideLanguages({ ...messages });
        Wt.useI18n();
        let language;
        if (props.userLang !== "") {
          language = convertLanguageToLowercase(props.userLang);
          if (!languages.includes(language)) {
            Log.w(`userLang:${props.userLang} is not supported`);
            language = "en";
          }
        } else {
          if (isApp) {
            const { osLanguage } = uni.getDeviceInfo();
            Log.i(`initLanguage osLanguage:${osLanguage}`);
            language = convertLanguageToLowercase(osLanguage);
          } else if (isWeChat) {
            language = "zh";
          } else if (navigator) {
            language = convertLanguageToLowercase(navigator.language);
          }
          if (!languages.includes(language)) {
            language = "en";
          }
        }
        Wt.changeLanguage(language);
      };
      const setAvatarNickName = () => {
        state.set("avatarNickName", {
          showAvatar: props.showAvatar,
          showNickName: props.showNickName,
          userAvatar: props.userAvatar,
          staffAvatar: props.staffAvatar,
          robotAvatar: props.robotAvatar,
          userNickName: props.userNickName,
          staffNickName: props.staffNickName,
          robotNickName: props.robotNickName
        });
      };
      const setShowReadStatus = () => {
        state.set("showReadStatus", props.showReadStatus);
      };
      const setShowTyping = () => {
        state.set("showTyping", props.showTyping);
      };
      if (!isWeChat) {
        initLanguage();
      }
      setAvatarNickName();
      setShowReadStatus();
      setShowTyping();
      onMounted2(() => {
        const logPrefix = "CustomerServiceChat onMounted.";
        Log.l(`${logPrefix} engineReady:${qt.isReady()}`);
        if (props.robotLang && !isSupportedLang(props.robotLang)) {
          Log.w(`${logPrefix} robotLang:${props.robotLang} is not supported`);
        }
        Jt.watch(o$2.CONV, {
          currentConversationID: onCurrentConversationIDUpdate
        });
        Jt.watch(o$2.USER, {
          kickedOut: onKickedOut
        });
      });
      onUnmounted2(() => {
        Jt.unwatch(o$2.CONV, {
          currentConversationID: onCurrentConversationIDUpdate
        });
        Jt.unwatch(o$2.USER, {
          kickedOut: onKickedOut
        });
      });
      const isInputToolbarShow = computed2(() => {
        return isUniFrameWork ? inputToolbarDisplayType.value !== "none" : true;
      });
      const insertEmoji = (emojiObj) => {
        var _a2;
        (_a2 = messageInputRef.value) == null ? void 0 : _a2.insertEmoji(emojiObj);
      };
      const handleEditor = (message, type) => {
        var _a2, _b2, _c2;
        if (!message || !type)
          return;
        switch (type) {
          case "reference":
            break;
          case "reply":
            break;
          case "reedit":
            if ((_a2 = message == null ? void 0 : message.payload) == null ? void 0 : _a2.text) {
              (_c2 = messageInputRef == null ? void 0 : messageInputRef.value) == null ? void 0 : _c2.reEdit((_b2 = message == null ? void 0 : message.payload) == null ? void 0 : _b2.text);
            }
            break;
        }
      };
      function changeToolbarDisplayType(type) {
        inputToolbarDisplayType.value = inputToolbarDisplayType.value === type ? "none" : type;
        if (inputToolbarDisplayType.value !== "none" && isUniFrameWork) {
          uni.$emit("scroll-to-bottom");
        }
      }
      function scrollToLatestMessage() {
        var _a2;
        (_a2 = messageListRef.value) == null ? void 0 : _a2.scrollToLatestMessage();
      }
      function onKickedOut(type) {
        if (type) {
          isMuted.value = true;
          Toast({
            message: Wt.t("TUIChat.账号被强制下线"),
            type: TOAST_TYPE.ERROR,
            duration: 3e4
          });
        }
      }
      function onCurrentConversationIDUpdate(conversationID) {
        if (!conversationID) {
          return;
        }
        if (currentConversationID.value === conversationID) {
          return;
        }
        currentConversationID.value = conversationID;
        R.callService({
          serviceName: E$1.TUICustomerServicePlugin.SERVICE.NAME,
          method: E$1.TUICustomerServicePlugin.SERVICE.METHOD.ACTIVE_CONVERSATION,
          params: {
            conversationID,
            robotLang: props.robotLang && isSupportedLang(props.robotLang) ? props.robotLang : void 0
          }
        });
      }
      function handleShowFormPopup(data) {
        isUniFormShow.value = data;
      }
      const __returned__ = { ref: ref2, onMounted: onMounted2, onUnmounted: onUnmounted2, computed: computed2, emits, currentConversationID, inputToolbarDisplayType, messageInputRef, messageListRef, isMuted, muteText, isUniFormShow, languages, props, convertLanguageToLowercase, initLanguage, setAvatarNickName, setShowReadStatus, setShowTyping, isInputToolbarShow, insertEmoji, handleEditor, changeToolbarDisplayType, scrollToLatestMessage, onKickedOut, onCurrentConversationIDUpdate, handleShowFormPopup, MessageList, MessageInput, MessageInputToolbar, get isWeChat() {
        return isWeChat;
      }, get isUniFrameWork() {
        return isUniFrameWork;
      }, get isH5() {
        return isH5;
      }, MessageToolbarButton };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
    return vue$1.openBlock(), vue$1.createElementBlock("div", {
      class: vue$1.normalizeClass(["tui-chat", "tui-chat-h5"])
    }, [
      $setup.currentConversationID ? (vue$1.openBlock(), vue$1.createElementBlock("div", {
        key: 0,
        class: vue$1.normalizeClass(["tui-chat", "tui-chat-h5"])
      }, [
        vue$1.createVNode(
          $setup["MessageList"],
          {
            ref: "messageListRef",
            class: vue$1.normalizeClass(["tui-chat-message-list", "tui-chat-h5-message-list"]),
            onHandleEditor: $setup.handleEditor,
            onCloseInputToolBar: _cache[0] || (_cache[0] = () => $setup.changeToolbarDisplayType("none")),
            onShowFormPopup: $setup.handleShowFormPopup
          },
          null,
          512
          /* NEED_PATCH */
        ),
        vue$1.createVNode($setup["MessageToolbarButton"], {
          toolbarButtonList: $setup.props.toolbarButtonList
        }, null, 8, ["toolbarButtonList"]),
        $setup.isInputToolbarShow ? (vue$1.openBlock(), vue$1.createBlock($setup["MessageInputToolbar"], {
          key: 0,
          class: vue$1.normalizeClass([
            "tui-chat-message-input-toolbar",
            "tui-chat-h5-message-input-toolbar",
            $setup.isUniFrameWork && "tui-chat-uni-message-input-toolbar"
          ]),
          displayType: $setup.inputToolbarDisplayType,
          onInsertEmoji: $setup.insertEmoji,
          onChangeToolbarDisplayType: $setup.changeToolbarDisplayType,
          onScrollToLatestMessage: $setup.scrollToLatestMessage
        }, null, 8, ["class", "displayType"])) : vue$1.createCommentVNode("v-if", true),
        vue$1.createVNode($setup["MessageInput"], {
          ref: "messageInputRef",
          class: vue$1.normalizeClass([
            "tui-chat-message-input",
            "tui-chat-h5-message-input",
            $setup.isUniFrameWork && !$setup.isH5 && "tui-chat-uni-message-input",
            $setup.isWeChat && "tui-chat-wx-message-input",
            $setup.isUniFormShow && "tui-chat-uni-message-input-hide"
          ]),
          isMuted: $setup.isMuted,
          muteText: $setup.muteText,
          canSendAudio: $setup.props.canSendAudio,
          placeholder: "",
          inputToolbarDisplayType: $setup.inputToolbarDisplayType,
          onChangeToolbarDisplayType: $setup.changeToolbarDisplayType
        }, null, 8, ["class", "isMuted", "muteText", "canSendAudio", "inputToolbarDisplayType"])
      ])) : vue$1.createCommentVNode("v-if", true)
    ]);
  }
  const TUIKit = /* @__PURE__ */ _export_sfc(_sfc_main$2, [["render", _sfc_render$1], ["__scopeId", "data-v-8c512b75"], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/index-uniapp.vue"]]);
  const _sfc_main$1 = {
    components: {
      TUIKit
    },
    data() {
      return {
        isLogin: false,
        userID: "",
        userSig: "",
        simpleConfig: {
          sdkAppID: 0,
          // 将从后端获取
          groupID: "61625"
          // 添加客服群组ID
        }
      };
    },
    methods: {
      // 收到新消息时的回调
      onMessageReceived(message) {
        formatAppLog("log", "at pages-ai-desk/index/index.vue:39", "收到新消息:", message);
        uni.vibrateShort();
        const innerAudioContext = uni.createInnerAudioContext();
        innerAudioContext.src = "/static/notification.mp3";
        innerAudioContext.play();
      },
      // 会话列表更新时的回调
      onConversationListUpdated(conversationList) {
        formatAppLog("log", "at pages-ai-desk/index/index.vue:51", "会话列表更新:", conversationList);
      },
      // 错误处理
      onError(error) {
        formatAppLog("error", "at pages-ai-desk/index/index.vue:56", "TUIKit错误:", error);
        uni.showToast({
          title: "连接异常，请稍后重试",
          icon: "none",
          duration: 2e3
        });
      },
      // 登录到TUICallKit获取userSig
      async loginToTUICallKit() {
        const token = uni.getStorageSync("token");
        if (!token) {
          uni.showToast({ title: "请先登录", icon: "none" });
          return;
        }
        try {
          const res = await uni.request({
            url: `${config$3.baseUrl}/user/userSig`,
            method: "GET",
            header: { "Authorization": `Bearer ${token}` },
            data: { userID: "" }
          });
          if (res[1] && res[1].statusCode === 200 && res[1].data.code === 200 || res.statusCode === 200 && res.data.code === 200) {
            const data = res[1] ? res[1].data.data : res.data.data;
            const userSig = data.userSig;
            const userID = data.userId;
            if (!userSig || !userID) {
              throw new Error("UserSig或userID为空");
            }
            this.userSig = userSig;
            this.userID = userID;
            this.simpleConfig.sdkAppID = data.sdkAppID || 1600094381;
            TUICustomerServer.initWithProfile({
              SDKAppID: this.simpleConfig.sdkAppID,
              userID: this.userID,
              userSig: this.userSig
            });
            this.isLogin = true;
            formatAppLog("log", "at pages-ai-desk/index/index.vue:103", "[AI-Desk] 登录成功，用户ID:", this.userID);
          } else {
            this.isLogin = false;
            const errorMsg = res[1] ? res[1].data.message : res.data.message;
            formatAppLog("error", "at pages-ai-desk/index/index.vue:108", "[AI-Desk] 获取UserSig失败:", errorMsg);
            uni.showToast({ title: "获取UserSig失败: " + errorMsg, icon: "none" });
          }
        } catch (err) {
          this.isLogin = false;
          formatAppLog("error", "at pages-ai-desk/index/index.vue:113", "[AI-Desk] 获取UserSig异常:", err);
          uni.showToast({ title: "获取UserSig失败", icon: "none" });
        }
      }
    },
    onLoad() {
      const userInfo = uni.getStorageSync("userInfo");
      if (!userInfo || !userInfo.id) {
        uni.showToast({
          title: "请先登录",
          icon: "none"
        });
        setTimeout(() => {
          uni.navigateBack();
        }, 1500);
        return;
      }
      this.loginToTUICallKit();
      uni.getNetworkType({
        success: (res) => {
          if (res.networkType === "none") {
            uni.showToast({
              title: "网络连接已断开",
              icon: "none",
              duration: 2e3
            });
          }
        }
      });
    },
    onUnload() {
      formatAppLog("log", "at pages-ai-desk/index/index.vue:150", "聊天页面已卸载");
    }
  };
  function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_TUIKit = vue$1.resolveComponent("TUIKit");
    return vue$1.openBlock(), vue$1.createElementBlock("view", { class: "chat-container" }, [
      !$data.isLogin ? (vue$1.openBlock(), vue$1.createElementBlock("text", { key: 0 }, "正在登录聊天系统...")) : vue$1.createCommentVNode("v-if", true),
      $data.isLogin ? (vue$1.openBlock(), vue$1.createBlock(_component_TUIKit, {
        key: 1,
        config: $data.simpleConfig,
        userID: $data.userID,
        userSig: $data.userSig,
        onOnMessageReceived: $options.onMessageReceived,
        onOnConversationListUpdated: $options.onConversationListUpdated,
        onOnError: $options.onError
      }, null, 8, ["config", "userID", "userSig", "onOnMessageReceived", "onOnConversationListUpdated", "onOnError"])) : vue$1.createCommentVNode("v-if", true)
    ]);
  }
  const PagesAiDeskIndexIndex = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["render", _sfc_render], ["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/index/index.vue"]]);
  __definePage("pages/index/index", PagesIndexIndex);
  __definePage("pages/common/core-functionality", PagesCommonCoreFunctionality);
  __definePage("pages/volunteer/index", PagesVolunteerIndex);
  __definePage("pages/volunteer/register", PagesVolunteerRegister);
  __definePage("pages/user/profile", PagesUserProfile);
  __definePage("pages/policy/policy", PagesPolicyPolicy);
  __definePage("pages/policy/detail", PagesPolicyDetail);
  __definePage("pages/basicInfo/basicInfo", PagesBasicInfoBasicInfo);
  __definePage("pages/video-call/caller", PagesVideoCallCaller);
  __definePage("pages/travel/travel-appointment/travel-appointment", PagesTravelTravelAppointmentTravelAppointment);
  __definePage("pages/admin/index", PagesAdminIndex);
  __definePage("pages/policy/favorites", PagesPolicyFavorites);
  __definePage("pages/common/faq", PagesCommonFaq);
  __definePage("pages/common/about", PagesCommonAbout);
  __definePage("pages/common/feedback", PagesCommonFeedback);
  __definePage("pages/debug/debug", PagesDebugDebug);
  __definePage("pages/debug/notification-test", PagesDebugNotificationTest);
  __definePage("pages/notification/center", PagesNotificationCenter);
  __definePage("pages-ai-desk/index/index", PagesAiDeskIndexIndex);
  const _sfc_main = {
    onLaunch: function() {
      formatAppLog("log", "at App.vue:5", "App Launch");
    },
    onShow: function() {
      formatAppLog("log", "at App.vue:8", "App Show");
    },
    onHide: function() {
      formatAppLog("log", "at App.vue:11", "App Hide");
    }
  };
  const App = /* @__PURE__ */ _export_sfc(_sfc_main, [["__file", "D:/JAVAEE/myflies/uniapp-app/uniapp/App.vue"]]);
  const mixin = {
    data() {
      return {};
    },
    onLoad() {
      this.$u.getRect = this.$uGetRect;
    },
    methods: {
      // 查询节点信息
      // 目前此方法在支付宝小程序中无法获取组件跟接点的尺寸，为支付宝的bug(2020-07-21)
      // 解决办法为在组件根部再套一个没有任何作用的view元素
      $uGetRect(selector, all) {
        return new Promise((resolve) => {
          uni.createSelectorQuery().in(this)[all ? "selectAll" : "select"](selector).boundingClientRect((rect) => {
            if (all && Array.isArray(rect) && rect.length) {
              resolve(rect);
            }
            if (!all && rect) {
              resolve(rect);
            }
          }).exec();
        });
      },
      getParentData(parentName = "") {
        if (!this.parent)
          this.parent = false;
        this.parent = this.$u.$parent.call(this, parentName);
        if (this.parent) {
          Object.keys(this.parentData).map((key) => {
            this.parentData[key] = this.parent[key];
          });
          this.parentData.value = this.parent.modelValue;
        }
      },
      // 阻止事件冒泡
      preventEvent(e2) {
        e2 && e2.stopPropagation && e2.stopPropagation();
      }
    },
    onReachBottom() {
      uni.$emit("uOnReachBottom");
    },
    beforeUnmount() {
      if (this.parent && uni.$u.test.array(this.parent.children)) {
        const childrenList = this.parent.children;
        childrenList.map((child, index) => {
          if (child === this) {
            childrenList.splice(index, 1);
          }
        });
      }
    }
  };
  function isArray(arr) {
    return Object.prototype.toString.call(arr) === "[object Array]";
  }
  function deepClone(obj) {
    if ([null, void 0, NaN, false].includes(obj))
      return obj;
    if (typeof obj !== "object" && typeof obj !== "function") {
      return obj;
    }
    var o2 = isArray(obj) ? [] : {};
    for (let i2 in obj) {
      if (obj.hasOwnProperty(i2)) {
        o2[i2] = typeof obj[i2] === "object" ? deepClone(obj[i2]) : obj[i2];
      }
    }
    return o2;
  }
  function deepMerge(target = {}, source = {}) {
    target = deepClone(target);
    if (typeof target !== "object" || typeof source !== "object")
      return false;
    for (var prop in source) {
      if (!source.hasOwnProperty(prop))
        continue;
      if (prop in target) {
        if (typeof target[prop] !== "object") {
          target[prop] = source[prop];
        } else {
          if (typeof source[prop] !== "object") {
            target[prop] = source[prop];
          } else {
            if (target[prop].concat && source[prop].concat) {
              target[prop] = target[prop].concat(source[prop]);
            } else {
              target[prop] = deepMerge(target[prop], source[prop]);
            }
          }
        }
      } else {
        target[prop] = source[prop];
      }
    }
    return target;
  }
  function email(value) {
    return /^\w+((-\w+)|(\.\w+))*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/.test(value);
  }
  function mobile(value) {
    return /^1[23456789]\d{9}$/.test(value);
  }
  function url(value) {
    return /http(s)?:\/\/([\w-]+\.)+[\w-]+(\/[\w-.\/?%&=]*)?/.test(value);
  }
  function date(value) {
    if (!value)
      return false;
    if (number(value))
      value = +value;
    return !/Invalid|NaN/.test(new Date(value).toString());
  }
  function dateISO(value) {
    return /^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(value);
  }
  function number(value) {
    return /^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(value);
  }
  function digits(value) {
    return /^\d+$/.test(value);
  }
  function idCard(value) {
    return /^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}([0-9]|X)$/.test(
      value
    );
  }
  function carNo(value) {
    const xreg = /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}(([0-9]{5}[DF]$)|([DF][A-HJ-NP-Z0-9][0-9]{4}$))/;
    const creg = /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}[A-HJ-NP-Z0-9]{4}[A-HJ-NP-Z0-9挂学警港澳]{1}$/;
    if (value.length === 7) {
      return creg.test(value);
    } else if (value.length === 8) {
      return xreg.test(value);
    } else {
      return false;
    }
  }
  function amount(value) {
    return /^[1-9]\d*(,\d{3})*(\.\d{1,2})?$|^0\.\d{1,2}$/.test(value);
  }
  function chinese(value) {
    let reg = /^[\u4e00-\u9fa5]+$/gi;
    return reg.test(value);
  }
  function letter(value) {
    return /^[a-zA-Z]*$/.test(value);
  }
  function enOrNum(value) {
    let reg = /^[0-9a-zA-Z]*$/g;
    return reg.test(value);
  }
  function contains(value, param) {
    return value.indexOf(param) >= 0;
  }
  function range(value, param) {
    return value >= param[0] && value <= param[1];
  }
  function rangeLength(value, param) {
    return value.length >= param[0] && value.length <= param[1];
  }
  function landline(value) {
    let reg = /^\d{3,4}-\d{7,8}(-\d{3,4})?$/;
    return reg.test(value);
  }
  function empty(value) {
    switch (typeof value) {
      case "undefined":
        return true;
      case "string":
        if (value.replace(/(^[ \t\n\r]*)|([ \t\n\r]*$)/g, "").length == 0)
          return true;
        break;
      case "boolean":
        if (!value)
          return true;
        break;
      case "number":
        if (0 === value || isNaN(value))
          return true;
        break;
      case "object":
        if (null === value || value.length === 0)
          return true;
        for (var i2 in value) {
          return false;
        }
        return true;
    }
    return false;
  }
  function jsonString(value) {
    if (typeof value == "string") {
      try {
        var obj = JSON.parse(value);
        if (typeof obj == "object" && obj) {
          return true;
        } else {
          return false;
        }
      } catch (e2) {
        return false;
      }
    }
    return false;
  }
  function array(value) {
    if (typeof Array.isArray === "function") {
      return Array.isArray(value);
    } else {
      return Object.prototype.toString.call(value) === "[object Array]";
    }
  }
  function object(value) {
    return Object.prototype.toString.call(value) === "[object Object]";
  }
  function code(value, len = 6) {
    return new RegExp(`^\\d{${len}}$`).test(value);
  }
  function func(value) {
    return typeof value === "function";
  }
  function promise(value) {
    return object(value) && func(value.then) && func(value.catch);
  }
  function image(value) {
    const newValue = value.split("?")[0];
    return new RegExp(/\.(jpeg|jpg|gif|png|svg|webp|jfif|bmp|dpg)$/).test(newValue);
  }
  function video(value) {
    const newValue = value.split("?")[0];
    return new RegExp(/\.(mp4|mpg|mpeg|dat|asf|avi|rm|rmvb|mov|wmv|flv|mkv|m3u8|3gp)$/).test(newValue);
  }
  function regExp(o2) {
    return o2 && Object.prototype.toString.call(o2) === "[object RegExp]";
  }
  function string(value) {
    return typeof value === "string";
  }
  const test = {
    email,
    mobile,
    url,
    date,
    dateISO,
    number,
    digits,
    idCard,
    carNo,
    amount,
    chinese,
    letter,
    enOrNum,
    contains,
    range,
    rangeLength,
    empty,
    isEmpty: empty,
    jsonString,
    landline,
    object,
    array,
    code,
    func,
    promise,
    video,
    image,
    regExp,
    string
  };
  class Request {
    // 设置全局默认配置
    setConfig(customConfig) {
      this.config = deepMerge(this.config, customConfig);
    }
    // 主要请求部分
    request(options = {}) {
      if (this.interceptor.request && typeof this.interceptor.request === "function") {
        let interceptorRequest = this.interceptor.request(options);
        if (interceptorRequest === false) {
          return new Promise(() => {
          });
        }
        this.options = interceptorRequest;
      }
      options.dataType = options.dataType || this.config.dataType;
      options.responseType = options.responseType || this.config.responseType;
      options.url = options.url || "";
      options.params = options.params || {};
      options.header = Object.assign({}, this.config.header, options.header);
      options.method = options.method || this.config.method;
      return new Promise((resolve, reject) => {
        options.complete = (response) => {
          uni.hideLoading();
          clearTimeout(this.config.timer);
          this.config.timer = null;
          if (this.config.originalData) {
            if (this.interceptor.response && typeof this.interceptor.response === "function") {
              let resInterceptors = this.interceptor.response(response);
              if (resInterceptors !== false) {
                resolve(resInterceptors);
              } else {
                reject(response);
              }
            } else {
              resolve(response);
            }
          } else {
            if (response.statusCode == 200) {
              if (this.interceptor.response && typeof this.interceptor.response === "function") {
                let resInterceptors = this.interceptor.response(response.data);
                if (resInterceptors !== false) {
                  resolve(resInterceptors);
                } else {
                  reject(response.data);
                }
              } else {
                resolve(response.data);
              }
            } else {
              reject(response);
            }
          }
        };
        options.url = test.url(options.url) ? options.url : this.config.baseUrl + (options.url.indexOf("/") == 0 ? options.url : "/" + options.url);
        if (this.config.showLoading && !this.config.timer) {
          this.config.timer = setTimeout(() => {
            uni.showLoading({
              title: this.config.loadingText,
              mask: this.config.loadingMask
            });
            this.config.timer = null;
          }, this.config.loadingTime);
        }
        uni.request(options);
      });
    }
    constructor() {
      this.config = {
        baseUrl: "",
        // 请求的根域名
        // 默认的请求头
        header: {},
        method: "POST",
        // 设置为json，返回后uni.request会对数据进行一次JSON.parse
        dataType: "json",
        // 此参数无需处理，因为5+和支付宝小程序不支持，默认为text即可
        responseType: "text",
        showLoading: true,
        // 是否显示请求中的loading
        loadingText: "请求中...",
        loadingTime: 800,
        // 在此时间内，请求还没回来的话，就显示加载中动画，单位ms
        timer: null,
        // 定时器
        originalData: false,
        // 是否在拦截器中返回服务端的原始数据，见文档说明
        loadingMask: true
        // 展示loading的时候，是否给一个透明的蒙层，防止触摸穿透
      };
      this.interceptor = {
        // 请求前的拦截
        request: null,
        // 请求后的拦截
        response: null
      };
      this.get = (url2, data = {}, header = {}) => {
        return this.request({
          method: "GET",
          url: url2,
          header,
          data
        });
      };
      this.post = (url2, data = {}, header = {}) => {
        return this.request({
          url: url2,
          method: "POST",
          header,
          data
        });
      };
      this.put = (url2, data = {}, header = {}) => {
        return this.request({
          url: url2,
          method: "PUT",
          header,
          data
        });
      };
      this.delete = (url2, data = {}, header = {}) => {
        return this.request({
          url: url2,
          method: "DELETE",
          header,
          data
        });
      };
    }
  }
  const http = new Request();
  function queryParams(data = {}, isPrefix = true, arrayFormat = "brackets") {
    let prefix = isPrefix ? "?" : "";
    let _result = [];
    if (["indices", "brackets", "repeat", "comma"].indexOf(arrayFormat) == -1)
      arrayFormat = "brackets";
    for (let key in data) {
      let value = data[key];
      if (["", void 0, null].indexOf(value) >= 0) {
        continue;
      }
      if (value.constructor === Array) {
        switch (arrayFormat) {
          case "indices":
            for (let i2 = 0; i2 < value.length; i2++) {
              _result.push(key + "[" + i2 + "]=" + value[i2]);
            }
            break;
          case "brackets":
            value.forEach((_value) => {
              _result.push(key + "[]=" + _value);
            });
            break;
          case "repeat":
            value.forEach((_value) => {
              _result.push(key + "=" + _value);
            });
            break;
          case "comma":
            let commaStr = "";
            value.forEach((_value) => {
              commaStr += (commaStr ? "," : "") + _value;
            });
            _result.push(key + "=" + commaStr);
            break;
          default:
            value.forEach((_value) => {
              _result.push(key + "[]=" + _value);
            });
        }
      } else {
        _result.push(key + "=" + value);
      }
    }
    return _result.length ? prefix + _result.join("&") : "";
  }
  class Router {
    constructor() {
      this.config = {
        type: "navigateTo",
        url: "",
        delta: 1,
        // navigateBack页面后退时,回退的层数
        params: {},
        // 传递的参数
        animationType: "pop-in",
        // 窗口动画,只在APP有效
        animationDuration: 300,
        // 窗口动画持续时间,单位毫秒,只在APP有效
        intercept: false
        // 是否需要拦截
      };
      this.route = this.route.bind(this);
    }
    // 判断url前面是否有"/"，如果没有则加上，否则无法跳转
    addRootPath(url2) {
      return url2[0] === "/" ? url2 : `/${url2}`;
    }
    // 整合路由参数
    mixinParam(url2, params) {
      url2 = url2 && this.addRootPath(url2);
      let query = "";
      if (/.*\/.*\?.*=.*/.test(url2)) {
        query = uni.$u.queryParams(params, false);
        return url2 += "&" + query;
      } else {
        query = uni.$u.queryParams(params);
        return url2 += query;
      }
    }
    // 对外的方法名称
    async route(options = {}, params = {}) {
      let mergeConfig = {};
      if (typeof options === "string") {
        mergeConfig.url = this.mixinParam(options, params);
        mergeConfig.type = "navigateTo";
      } else {
        mergeConfig = uni.$u.deepClone(options, this.config);
        mergeConfig.url = this.mixinParam(options.url, options.params);
      }
      if (params.intercept) {
        this.config.intercept = params.intercept;
      }
      mergeConfig.params = params;
      mergeConfig = uni.$u.deepMerge(this.config, mergeConfig);
      if (typeof uni.$u.routeIntercept === "function") {
        const isNext = await new Promise((resolve, reject) => {
          uni.$u.routeIntercept(mergeConfig, resolve);
        });
        isNext && this.openPage(mergeConfig);
      } else {
        this.openPage(mergeConfig);
      }
    }
    // 执行路由跳转
    openPage(config2) {
      const {
        url: url2,
        type,
        delta,
        animationType,
        animationDuration
      } = config2;
      if (config2.type == "navigateTo" || config2.type == "to") {
        uni.navigateTo({
          url: url2,
          animationType,
          animationDuration
        });
      }
      if (config2.type == "redirectTo" || config2.type == "redirect") {
        uni.redirectTo({
          url: url2
        });
      }
      if (config2.type == "switchTab" || config2.type == "tab") {
        uni.switchTab({
          url: url2
        });
      }
      if (config2.type == "reLaunch" || config2.type == "launch") {
        uni.reLaunch({
          url: url2
        });
      }
      if (config2.type == "navigateBack" || config2.type == "back") {
        uni.navigateBack({
          delta
        });
      }
    }
  }
  const route = new Router().route;
  if (!String.prototype.padStart) {
    String.prototype.padStart = function(maxLength, fillString = " ") {
      if (Object.prototype.toString.call(fillString) !== "[object String]")
        throw new TypeError(
          "fillString must be String"
        );
      let str = this;
      if (str.length >= maxLength)
        return String(str);
      let fillLength = maxLength - str.length, times = Math.ceil(fillLength / fillString.length);
      while (times >>= 1) {
        fillString += fillString;
        if (times === 1) {
          fillString += fillString;
        }
      }
      return fillString.slice(0, fillLength) + str;
    };
  }
  function timeFormat(dateTime = null, fmt = "yyyy-mm-dd") {
    if (!dateTime)
      dateTime = Number(/* @__PURE__ */ new Date());
    if (dateTime.toString().length == 10)
      dateTime *= 1e3;
    let date2 = new Date(dateTime);
    let ret;
    let opt = {
      "y+": date2.getFullYear().toString(),
      // 年
      "m+": (date2.getMonth() + 1).toString(),
      // 月
      "d+": date2.getDate().toString(),
      // 日
      "h+": date2.getHours().toString(),
      // 时
      "M+": date2.getMinutes().toString(),
      // 分
      "s+": date2.getSeconds().toString()
      // 秒
      // 有其他格式化字符需求可以继续添加，必须转化成字符串
    };
    for (let k2 in opt) {
      ret = new RegExp("(" + k2 + ")").exec(fmt);
      if (ret) {
        fmt = fmt.replace(ret[1], ret[1].length == 1 ? opt[k2] : opt[k2].padStart(ret[1].length, "0"));
      }
    }
    return fmt;
  }
  function timeFrom(dateTime = null, format = "yyyy-mm-dd") {
    if (!dateTime)
      dateTime = Number(/* @__PURE__ */ new Date());
    if (dateTime.toString().length == 10)
      dateTime *= 1e3;
    let timestamp = +new Date(Number(dateTime));
    let timer = (Number(/* @__PURE__ */ new Date()) - timestamp) / 1e3;
    let tips = "";
    switch (true) {
      case timer < 300:
        tips = "刚刚";
        break;
      case (timer >= 300 && timer < 3600):
        tips = parseInt(timer / 60) + "分钟前";
        break;
      case (timer >= 3600 && timer < 86400):
        tips = parseInt(timer / 3600) + "小时前";
        break;
      case (timer >= 86400 && timer < 2592e3):
        tips = parseInt(timer / 86400) + "天前";
        break;
      default:
        if (format === false) {
          if (timer >= 2592e3 && timer < 365 * 86400) {
            tips = parseInt(timer / (86400 * 30)) + "个月前";
          } else {
            tips = parseInt(timer / (86400 * 365)) + "年前";
          }
        } else {
          tips = timeFormat(timestamp, format);
        }
    }
    return tips;
  }
  function colorGradient(startColor = "rgb(0, 0, 0)", endColor = "rgb(255, 255, 255)", step = 10) {
    let startRGB = hexToRgb(startColor, false);
    let startR = startRGB[0];
    let startG = startRGB[1];
    let startB = startRGB[2];
    let endRGB = hexToRgb(endColor, false);
    let endR = endRGB[0];
    let endG = endRGB[1];
    let endB = endRGB[2];
    let sR = (endR - startR) / step;
    let sG = (endG - startG) / step;
    let sB = (endB - startB) / step;
    let colorArr = [];
    for (let i2 = 0; i2 < step; i2++) {
      let hex = rgbToHex("rgb(" + Math.round(sR * i2 + startR) + "," + Math.round(sG * i2 + startG) + "," + Math.round(sB * i2 + startB) + ")");
      colorArr.push(hex);
    }
    return colorArr;
  }
  function hexToRgb(sColor, str = true) {
    let reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;
    sColor = sColor.toLowerCase();
    if (sColor && reg.test(sColor)) {
      if (sColor.length === 4) {
        let sColorNew = "#";
        for (let i2 = 1; i2 < 4; i2 += 1) {
          sColorNew += sColor.slice(i2, i2 + 1).concat(sColor.slice(i2, i2 + 1));
        }
        sColor = sColorNew;
      }
      let sColorChange = [];
      for (let i2 = 1; i2 < 7; i2 += 2) {
        sColorChange.push(parseInt("0x" + sColor.slice(i2, i2 + 2)));
      }
      if (!str) {
        return sColorChange;
      } else {
        return `rgb(${sColorChange[0]},${sColorChange[1]},${sColorChange[2]})`;
      }
    } else if (/^(rgb|RGB)/.test(sColor)) {
      let arr = sColor.replace(/(?:\(|\)|rgb|RGB)*/g, "").split(",");
      return arr.map((val) => Number(val));
    } else {
      return sColor;
    }
  }
  function rgbToHex(rgb) {
    let _this = rgb;
    let reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;
    if (/^(rgb|RGB)/.test(_this)) {
      let aColor = _this.replace(/(?:\(|\)|rgb|RGB)*/g, "").split(",");
      let strHex = "#";
      for (let i2 = 0; i2 < aColor.length; i2++) {
        let hex = Number(aColor[i2]).toString(16);
        hex = String(hex).length == 1 ? "0" + hex : hex;
        if (hex === "0") {
          hex += hex;
        }
        strHex += hex;
      }
      if (strHex.length !== 7) {
        strHex = _this;
      }
      return strHex;
    } else if (reg.test(_this)) {
      let aNum = _this.replace(/#/, "").split("");
      if (aNum.length === 6) {
        return _this;
      } else if (aNum.length === 3) {
        let numHex = "#";
        for (let i2 = 0; i2 < aNum.length; i2 += 1) {
          numHex += aNum[i2] + aNum[i2];
        }
        return numHex;
      }
    } else {
      return _this;
    }
  }
  function colorToRgba(color2, alpha = 0.3) {
    color2 = rgbToHex(color2);
    var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;
    let sColor = color2.toLowerCase();
    if (sColor && reg.test(sColor)) {
      if (sColor.length === 4) {
        var sColorNew = "#";
        for (let i2 = 1; i2 < 4; i2 += 1) {
          sColorNew += sColor.slice(i2, i2 + 1).concat(sColor.slice(i2, i2 + 1));
        }
        sColor = sColorNew;
      }
      var sColorChange = [];
      for (let i2 = 1; i2 < 7; i2 += 2) {
        sColorChange.push(parseInt("0x" + sColor.slice(i2, i2 + 2)));
      }
      return "rgba(" + sColorChange.join(",") + "," + alpha + ")";
    } else {
      return sColor;
    }
  }
  const colorGradient$1 = {
    colorGradient,
    hexToRgb,
    rgbToHex,
    colorToRgba
  };
  function guid(len = 32, firstU = true, radix = null) {
    let chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split("");
    let uuid = [];
    radix = radix || chars.length;
    if (len) {
      for (let i2 = 0; i2 < len; i2++)
        uuid[i2] = chars[0 | Math.random() * radix];
    } else {
      let r2;
      uuid[8] = uuid[13] = uuid[18] = uuid[23] = "-";
      uuid[14] = "4";
      for (let i2 = 0; i2 < 36; i2++) {
        if (!uuid[i2]) {
          r2 = 0 | Math.random() * 16;
          uuid[i2] = chars[i2 == 19 ? r2 & 3 | 8 : r2];
        }
      }
    }
    if (firstU) {
      uuid.shift();
      return "u" + uuid.join("");
    } else {
      return uuid.join("");
    }
  }
  let color = {
    primary: "#2979ff",
    primaryDark: "#2b85e4",
    primaryDisabled: "#a0cfff",
    primaryLight: "#ecf5ff",
    bgColor: "#f3f4f6",
    info: "#909399",
    infoDark: "#82848a",
    infoDisabled: "#c8c9cc",
    infoLight: "#f4f4f5",
    warning: "#ff9900",
    warningDark: "#f29100",
    warningDisabled: "#fcbd71",
    warningLight: "#fdf6ec",
    error: "#fa3534",
    errorDark: "#dd6161",
    errorDisabled: "#fab6b6",
    errorLight: "#fef0f0",
    success: "#19be6b",
    successDark: "#18b566",
    successDisabled: "#71d5a1",
    successLight: "#dbf1e1",
    mainColor: "#303133",
    contentColor: "#606266",
    tipsColor: "#909399",
    lightColor: "#c0c4cc",
    borderColor: "#e4e7ed"
  };
  function type2icon(type = "success", fill = false) {
    if (["primary", "info", "error", "warning", "success"].indexOf(type) == -1)
      type = "success";
    let iconName = "";
    switch (type) {
      case "primary":
        iconName = "info-circle";
        break;
      case "info":
        iconName = "info-circle";
        break;
      case "error":
        iconName = "close-circle";
        break;
      case "warning":
        iconName = "error-circle";
        break;
      case "success":
        iconName = "checkmark-circle";
        break;
      default:
        iconName = "checkmark-circle";
    }
    if (fill)
      iconName += "-fill";
    return iconName;
  }
  function randomArray(array2 = []) {
    return array2.sort(() => Math.random() - 0.5);
  }
  const addUnit = function(value = "auto", unit = "rpx") {
    value = String(value);
    return test.number(value) ? `${value}${unit}` : value;
  };
  function random(min, max) {
    if (min >= 0 && max > 0 && max >= min) {
      let gab = max - min + 1;
      return Math.floor(Math.random() * gab + min);
    } else {
      return 0;
    }
  }
  function trim$1(str, pos = "both") {
    if (pos == "both") {
      return str.replace(/^\s+|\s+$/g, "");
    } else if (pos == "left") {
      return str.replace(/^\s*/, "");
    } else if (pos == "right") {
      return str.replace(/(\s*$)/g, "");
    } else if (pos == "all") {
      return str.replace(/\s+/g, "");
    } else {
      return str;
    }
  }
  function toast(title, duration = 1500) {
    uni.showToast({
      title,
      icon: "none",
      duration
    });
  }
  function getParent(name, keys) {
    let parent = this.$parent;
    while (parent) {
      if (parent.$options.name !== name) {
        parent = parent.$parent;
      } else {
        let data = {};
        if (Array.isArray(keys)) {
          keys.map((val) => {
            data[val] = parent[val] ? parent[val] : "";
          });
        } else {
          for (let i2 in keys) {
            if (Array.isArray(keys[i2])) {
              if (keys[i2].length) {
                data[i2] = keys[i2];
              } else {
                data[i2] = parent[i2];
              }
            } else if (keys[i2].constructor === Object) {
              if (Object.keys(keys[i2]).length) {
                data[i2] = keys[i2];
              } else {
                data[i2] = parent[i2];
              }
            } else {
              data[i2] = keys[i2] || keys[i2] === false ? keys[i2] : parent[i2];
            }
          }
        }
        return data;
      }
    }
    return {};
  }
  function $parent(name = void 0) {
    let parent = this.$parent;
    while (parent) {
      if (parent.$options && parent.$options.name !== name) {
        parent = parent.$parent;
      } else {
        return parent;
      }
    }
    return false;
  }
  function os() {
    return uni.getSystemInfoSync().platform;
  }
  function sys() {
    return uni.getSystemInfoSync();
  }
  let timeout = null;
  function debounce(func2, wait = 500, immediate = false) {
    if (timeout !== null)
      clearTimeout(timeout);
    if (immediate) {
      var callNow = !timeout;
      timeout = setTimeout(function() {
        timeout = null;
      }, wait);
      if (callNow)
        typeof func2 === "function" && func2();
    } else {
      timeout = setTimeout(function() {
        typeof func2 === "function" && func2();
      }, wait);
    }
  }
  let timeoutArr = [];
  let flagArr = [];
  function throttle(fn, time = 500, isImmediate = true, timeoutName = "default") {
    if (!timeoutArr[timeoutName])
      timeoutArr[timeoutName] = null;
    if (isImmediate) {
      if (!flagArr[timeoutName]) {
        flagArr[timeoutName] = true;
        if (typeof fn === "function")
          fn();
        timeoutArr[timeoutName] = setTimeout(() => {
          flagArr[timeoutName] = false;
        }, time);
      }
    } else {
      if (!flagArr[timeoutName]) {
        flagArr[timeoutName] = true;
        timeoutArr[timeoutName] = setTimeout(() => {
          flagArr[timeoutName] = false;
          if (typeof fn === "function")
            fn();
        }, time);
      }
    }
  }
  function trim(str, pos = "both") {
    str = String(str);
    if (pos == "both") {
      return str.replace(/^\s+|\s+$/g, "");
    }
    if (pos == "left") {
      return str.replace(/^\s*/, "");
    }
    if (pos == "right") {
      return str.replace(/(\s*$)/g, "");
    }
    if (pos == "all") {
      return str.replace(/\s+/g, "");
    }
    return str;
  }
  function addStyle(customStyle, target = "object") {
    if (test.empty(customStyle) || typeof customStyle === "object" && target === "object" || target === "string" && typeof customStyle === "string") {
      return customStyle;
    }
    if (target === "object") {
      customStyle = trim(customStyle);
      const styleArray = customStyle.split(";");
      const style = {};
      for (let i2 = 0; i2 < styleArray.length; i2++) {
        if (styleArray[i2]) {
          const item = styleArray[i2].split(":");
          style[trim(item[0])] = trim(item[1]);
        }
      }
      return style;
    }
    let string2 = "";
    for (const i2 in customStyle) {
      const key = i2.replace(/([A-Z])/g, "-$1").toLowerCase();
      string2 += `${key}:${customStyle[i2]};`;
    }
    return trim(string2);
  }
  let version = "1.10.1";
  const config = {
    v: version,
    version,
    // 主题名称
    type: [
      "primary",
      "success",
      "info",
      "error",
      "warning"
    ]
  };
  const zIndex = {
    toast: 10090,
    noNetwork: 10080,
    // popup包含popup，actionsheet，keyboard，picker的值
    popup: 10075,
    mask: 10070,
    navbar: 980,
    topTips: 975,
    sticky: 970,
    indexListSticky: 965
  };
  function wranning(str) {
    {
      formatAppLog("warn", "at uni_modules/vk-uview-ui/index.js:26", str);
    }
  }
  const $u = {
    queryParams,
    route,
    timeFormat,
    date: timeFormat,
    // 另名date
    timeFrom,
    colorGradient: colorGradient$1.colorGradient,
    colorToRgba: colorGradient$1.colorToRgba,
    guid,
    color,
    sys,
    os,
    type2icon,
    randomArray,
    wranning,
    get: http.get,
    post: http.post,
    put: http.put,
    "delete": http.delete,
    hexToRgb: colorGradient$1.hexToRgb,
    rgbToHex: colorGradient$1.rgbToHex,
    test,
    random,
    deepClone,
    deepMerge,
    getParent,
    $parent,
    addUnit,
    trim: trim$1,
    type: ["primary", "success", "error", "warning", "info"],
    http,
    toast,
    config,
    // uView配置信息相关，比如版本号
    zIndex,
    debounce,
    throttle,
    addStyle
  };
  uni.$u = $u;
  const install = (Vue2) => {
    Vue2.mixin(mixin);
    Vue2.config.globalProperties.$u = $u;
  };
  const uView = {
    install
  };
  function createApp() {
    const app = vue$1.createVueApp(App);
    app.use(uView);
    app.config.globalProperties.$config = config$3;
    return {
      app
    };
  }
  const { app: __app__, Vuex: __Vuex__, Pinia: __Pinia__ } = createApp();
  uni.Vuex = __Vuex__;
  uni.Pinia = __Pinia__;
  __app__.provide("__globalStyles", __uniConfig.styles);
  __app__._component.mpType = "app";
  __app__._component.render = () => {
  };
  __app__.mount("#app");
})(Vue);
