{"version":3,"file":"index.js","sources":["pages-ai-desk/ai-desk-customer-uniapp/utils/index.ts"],"sourcesContent":["import { customerServicePayloadType } from '../interface';\nimport {CUSTOM_MESSAGE_SRC, TYPES, WHITE_LIST} from '../constant';\nimport { IMessageModel } from '@tencentcloud/chat-uikit-engine';\n\n// Determine if it is a JSON string\nexport function isJSON(str: string): boolean {\n  // eslint-disable-next-line no-useless-escape\n  if (typeof str === 'string') {\n    try {\n      const data = JSON.parse(str);\n      if (data) {\n        return true;\n      }\n      return false;\n    } catch (error: any) {\n      return false;\n    }\n  }\n  return false;\n}\n\n// Determine if it is a JSON string\nexport function JSONToObject(str: string) {\n  if (!isJSON(str)) {\n    return str;\n  }\n  return JSON.parse(str);\n}\n\nexport function isCustomerServiceMessage(message: IMessageModel): boolean {\n  const customerServicePayload: customerServicePayloadType = JSONToObject(message?.payload?.data);\n  return Number(customerServicePayload?.customerServicePlugin) === 0 || Number(customerServicePayload?.chatbotPlugin) === 1;\n}\n\nexport const isMessageRating = (message: IMessageModel): boolean => {\n  const customerServicePayload: customerServicePayloadType = JSONToObject(message?.payload?.data);\n  return isCustomerServiceMessage(message) && customerServicePayload.src === CUSTOM_MESSAGE_SRC.MENU;\n};\n\nexport const isThinkingMessage = (message: IMessageModel): boolean => {\n  const isCustomMessage = message?.type === TYPES.MSG_CUSTOM;\n  const customerServicePayload: customerServicePayloadType = JSONToObject(message?.payload?.data);\n  return isCustomMessage && customerServicePayload?.src === CUSTOM_MESSAGE_SRC.THINKING && customerServicePayload?.thinkingStatus === 0;\n}\n\nexport const isThinkingMessageOverTime = (message: IMessageModel): boolean => {\n  const messageTime = message.time * 1000;\n  const minute = 60 * 1000;\n  const now = Date.now();\n  if (now - messageTime > minute) {\n    return false;\n  }\n  return true;\n}\n\nexport const isMessageInvisible = (message: IMessageModel): boolean => {\n  const customerServicePayload: customerServicePayloadType = JSONToObject(message?.payload?.data);\n  const robotCommandArray = ['feedback', 'updateBotStatus'];\n  const isCustomerMessage = message?.type === TYPES.MSG_CUSTOM;\n  const isGroupTipMessage = message?.type === TYPES.MSG_GROUP_TIP;\n  const isCustomerInvisible = customerServicePayload?.src && !WHITE_LIST.includes(customerServicePayload?.src);\n  const isMultiFormMessage:boolean =  customerServicePayload?.src !== null && customerServicePayload?.src === CUSTOM_MESSAGE_SRC.MULTI_FORM && message.flow === 'out';\n  const isRobot = customerServicePayload?.src === CUSTOM_MESSAGE_SRC.ROBOT && robotCommandArray.indexOf(customerServicePayload?.content?.command) !== -1;\n  return (isCustomerMessage && (isCustomerInvisible || isRobot || isMultiFormMessage)) || isGroupTipMessage;\n};\n\nexport const isSupportedLang = (lang: string): boolean => {\n  return [\n    'zh', // Simplified Chinese中文简体：zh\n    'zh-TW', // Traditional Chinese中文繁体：zh-TW\n    'en', // English英语：en\n    'id', // Indonesian印度尼西亚语：id\n    'vi', // Vietnamese越南语：vi\n    'ja', // Japanese日语：ja\n    'fil', // Filipino菲律宾语：fil\n    'ru', // Russian俄语：ru\n  ].indexOf(lang) !== -1;\n}\n\n// 如果用户选择 block cookies，此时访问 localStorage 浏览器会抛错\n// Uncaught SecurityError: Failed to read the 'localStorage' property from 'Window': Access is denied for this document\n// 通过 navigator.cookieEnabled 短路逻辑规避\nconst canIUseCookies = () => {\n  // When the browser is configured to block third-party cookies, and navigator.cookieEnabled is invoked inside a third-party iframe,\n  // it returns true in Safari, Edge Spartan and IE (while trying to set a cookie in such scenario would fail).\n  // It returns false in Firefox and Chromium-based browsers.\n  if (typeof window !== 'undefined') {\n    return window.navigator?.cookieEnabled && localStorage;\n\n  }\n  return false;\n}\n\nexport const clearChatStorage = (SDKAppID, userID) => {\n  if (canIUseCookies()) {\n    localStorage.removeItem(`TIM_${SDKAppID}_${userID}_conversationMap`);\n  }\n}\n"],"names":["TYPES","CUSTOM_MESSAGE_SRC","WHITE_LIST"],"mappings":";;AAKO,SAAS,OAAO,KAAsB;AAEvC,MAAA,OAAO,QAAQ,UAAU;AACvB,QAAA;AACI,YAAA,OAAO,KAAK,MAAM,GAAG;AAC3B,UAAI,MAAM;AACD,eAAA;AAAA,MACT;AACO,aAAA;AAAA,aACA,OAAY;AACZ,aAAA;AAAA,IACT;AAAA,EACF;AACO,SAAA;AACT;AAGO,SAAS,aAAa,KAAa;AACpC,MAAA,CAAC,OAAO,GAAG,GAAG;AACT,WAAA;AAAA,EACT;AACO,SAAA,KAAK,MAAM,GAAG;AACvB;AAEO,SAAS,yBAAyB,SAAiC;;AACxE,QAAM,yBAAqD,cAAa,wCAAS,YAAT,mBAAkB,IAAI;AACvF,SAAA,OAAO,iEAAwB,qBAAqB,MAAM,KAAK,OAAO,iEAAwB,aAAa,MAAM;AAC1H;AAOa,MAAA,oBAAoB,CAAC,YAAoC;;AAC9D,QAAA,mBAAkB,mCAAS,UAASA,0CAAAA,MAAM;AAChD,QAAM,yBAAqD,cAAa,wCAAS,YAAT,mBAAkB,IAAI;AAC9F,SAAO,oBAAmB,iEAAwB,SAAQC,0CAAAA,mBAAmB,aAAY,iEAAwB,oBAAmB;AACtI;AAEa,MAAA,4BAA4B,CAAC,YAAoC;AACtE,QAAA,cAAc,QAAQ,OAAO;AACnC,QAAM,SAAS,KAAK;AACd,QAAA,MAAM,KAAK;AACb,MAAA,MAAM,cAAc,QAAQ;AACvB,WAAA;AAAA,EACT;AACO,SAAA;AACT;AAEa,MAAA,qBAAqB,CAAC,YAAoC;;AACrE,QAAM,yBAAqD,cAAa,wCAAS,YAAT,mBAAkB,IAAI;AACxF,QAAA,oBAAoB,CAAC,YAAY,iBAAiB;AAClD,QAAA,qBAAoB,mCAAS,UAASD,0CAAAA,MAAM;AAC5C,QAAA,qBAAoB,mCAAS,UAASA,0CAAAA,MAAM;AAClD,QAAM,uBAAsB,iEAAwB,QAAO,CAACE,0CAAW,WAAA,SAAS,iEAAwB,GAAG;AACrG,QAAA,sBAA8B,iEAAwB,SAAQ,SAAQ,iEAAwB,SAAQD,0CAAAA,mBAAmB,cAAc,QAAQ,SAAS;AACxJ,QAAA,WAAU,iEAAwB,SAAQA,0CAAAA,mBAAmB,SAAS,kBAAkB,SAAQ,sEAAwB,YAAxB,mBAAiC,OAAO,MAAM;AAC5I,SAAA,sBAAsB,uBAAuB,WAAW,uBAAwB;AAC1F;AAEa,MAAA,kBAAkB,CAAC,SAA0B;AACjD,SAAA;AAAA,IACL;AAAA;AAAA,IACA;AAAA;AAAA,IACA;AAAA;AAAA,IACA;AAAA;AAAA,IACA;AAAA;AAAA,IACA;AAAA;AAAA,IACA;AAAA;AAAA,IACA;AAAA;AAAA,EACF,EAAE,QAAQ,IAAI,MAAM;AACtB;AAKA,MAAM,iBAAiB,MAAM;;AAIvB,MAAA,OAAO,WAAW,aAAa;AAC1B,aAAA,YAAO,cAAP,mBAAkB,kBAAiB;AAAA,EAE5C;AACO,SAAA;AACT;AAEa,MAAA,mBAAmB,CAAC,UAAU,WAAW;AACpD,MAAI,kBAAkB;AACpB,iBAAa,WAAW,OAAO,QAAQ,IAAI,MAAM,kBAAkB;AAAA,EACrE;AACF;;;;;;;;"}