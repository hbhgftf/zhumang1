{"version":3,"file":"type-writer.js","sources":["pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/message-desk/message-desk-elements/type-writer.ts"],"sourcesContent":["const chineseRegex = /[\\u4e00-\\u9fa5]/;\nconst wordAndNonWordRegex = /\\b\\w+\\b|[^\\w]+/g;\nconst isStringArray = (test: any): boolean => {\n    return Array.isArray(test) && !test.some(value => typeof value !== 'string');\n};\n\nexport class TypeWriter {\n    /**\n     * @property {array} strings strings to be typed\n     */\n    public strings: string[] = [];\n\n    /**\n     * @property {boolean} isTyping current typing status\n     */\n    public isTyping: boolean = false;\n\n    /**\n     * @property {number} typeSpeed type speed in milliseconds. If empty, using dynamic speed.\n     */\n    public typeSpeed?: number = 0;\n\n    /**\n     * @property {number} curArrayPos current typing string's position of all strings.\n     */\n    private curArrayPos: number = 0;\n\n    /**\n     * @property {number} curCharPos current typing character's position in current strings.\n     */\n    private curCharPos: number = 0;\n\n    /**\n     * @property {ReturnType<typeof setTimeout>} timer timer for type writer animation\n     */\n    private timer?: ReturnType<typeof setTimeout>;\n\n    /**\n     * On string is typing\n     * @param {string} curStr\n     * @param {number} arrayPos\n     * @param {number} characterPos\n     * @param {Typed} self\n     */\n    public onTyping?: (curStr: string, arrayPos: number, characterPos: number, self: any) => void;\n\n    /**\n     * After start\n     * @param {number} arrayPos\n     * @param {number} characterPos\n     * @param {TypeWriter} self\n     */\n    public onStart?: (arrayPos: number, characterPos: number, self: any) => void;\n\n    /**\n     * After stop\n     * @param {number} arrayPos\n     * @param {number} characterPos\n     * @param {TypeWriter} self\n     */\n    public onStop?: (arrayPos: number, characterPos: number, self: any) => void;\n\n    /**\n     * All typing is complete\n     * @param {Typed} self\n     */\n    public onComplete?: (self: any) => void;\n\n    constructor(options: {\n        defaultStrings?: string[];\n        typeSpeed?: number;\n        onTyping?: (curStr: string, arrayPos: number, characterPos: number, self: any) => void;\n        onComplete?: (self: any) => void;\n        onStart?: (arrayPos: number, characterPos: number, self: any) => void;\n        onStop?: (arrayPos: number, characterPos: number, self: any) => void;\n    }) {\n        const { defaultStrings, typeSpeed, onTyping, onComplete, onStart, onStop } = options;\n        if (defaultStrings && isStringArray(defaultStrings)) {\n            this.add(defaultStrings);\n        }\n        if (typeof typeSpeed === 'number') {\n            this.typeSpeed = typeSpeed;\n        }\n        if (typeof onTyping === 'function') {\n            this.onTyping = onTyping;\n        }\n        if (typeof onComplete === 'function') {\n            this.onComplete = onComplete;\n        }\n        if (typeof onStart === 'function') {\n            this.onStart = onStart;\n        }\n        if (typeof onStop === 'function') {\n            this.onStop = onStop;\n        }\n    }\n\n    add(addStrings: string[]) {\n        if (!addStrings || !addStrings.length) return;\n        addStrings.forEach((item: string) => {\n            if (chineseRegex.test(item)) {\n                const newValueArray = item.split('');\n                this.strings.push(...newValueArray);\n            } else {\n                const newValueArray = item.match(wordAndNonWordRegex) || item.split('');\n                this.strings.push(...newValueArray);\n            }\n        });\n    }\n\n    start() {\n        if (this.isTyping) {\n            return;\n        }\n        this.isTyping = true;\n        this.onStart && this.onStart(this.curArrayPos, this.curCharPos, this);\n        this._next();\n    }\n\n    stop() {\n        if (!this.isTyping) {\n            return;\n        }\n        this.isTyping = false;\n        clearTimeout(this.timer);\n        this.onStop && this.onStop(this.curArrayPos, this.curCharPos, this);\n    }\n\n    done() {\n        this.stop();\n        let _str = this.strings[this.curArrayPos].slice(this.curCharPos);\n        _str += this.strings.slice(this.curArrayPos + 1).join('');\n        this.curArrayPos = this.strings.length - 1;\n        this.curCharPos = this.strings[this.curArrayPos]?.length - 1;\n        this.onTyping && this.onTyping(_str, this.curArrayPos, this.curCharPos, this);\n        this.strings = [];\n    }\n\n    _consume() {\n        if (!this.strings.length) {\n            return;\n        }\n\n        if ((this.curArrayPos >= this.strings.length)) {\n            this.isTyping = false;\n            this.onComplete?.(this);\n            return;\n        }\n\n        const item = this.strings[this.curArrayPos]?.[this.curCharPos];\n        if (item) {\n            this.onTyping && this.onTyping(item, this.curArrayPos, this.curCharPos, this);\n        }\n\n        if (this.curCharPos < this.strings[this.curArrayPos]?.length - 1) {\n            this.curCharPos++;\n        } else {\n            this.curArrayPos++;\n            this.curCharPos = 0;\n        }\n    }\n\n    _next() {\n        this._consume();\n        this.timer = setTimeout(() => {\n            this._consume();\n            if (this.isTyping) {\n                this._next();\n            }\n        }, this.typeSpeed || this._dynamicSpeed());\n    }\n\n    _dynamicSpeed() {\n        let length = 0;\n        length += (this.strings[this.curArrayPos]?.length || 0) - this.curCharPos - 1;\n        for (let i = this.curArrayPos + 1; i < this.strings.length; i++) {\n            length += this.strings[i]?.length || 0;\n        }\n        if (length <= 0) {\n            length = 10;\n        }\n        const speed = 1500 / length;\n        if (speed >= 150) {\n            return 150;\n        } else {\n            return speed;\n        }\n    }\n}\n"],"names":[],"mappings":"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"}