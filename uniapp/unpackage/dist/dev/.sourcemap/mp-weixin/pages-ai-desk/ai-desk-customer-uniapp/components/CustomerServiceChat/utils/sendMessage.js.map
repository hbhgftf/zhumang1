{"version":3,"file":"sendMessage.js","sources":["pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/utils/sendMessage.ts"],"sourcesContent":["import TUIChatEngine, {\n  TUIChatService,\n  TUIStore,\n  StoreName,\n  IConversationModel,\n  SendMessageParams,\n} from '@tencentcloud/chat-uikit-engine';\nimport { isEnabledMessageReadReceiptGlobal } from '../../../utils/utils';\nimport { ITipTapEditorContent } from '../../../interface';\nimport { enableSampleTaskStatus } from '../../../utils/enableSampleTaskStatus';\n\nexport const sendMessageErrorCodeMap: Map<number, string> = new Map([\n  [3123, '文本包含本地审核拦截词'],\n  [4004, '图片消息失败,无效的图片格式'],\n  [4005, '文件消息失败,禁止发送违规封禁的文件'],\n  [7004, '文件不存在,请检查文件路径是否正确'],\n  [7005, '文件大小超出了限制,如果上传文件,最大限制是100MB'],\n  [8001, '消息长度超出限制,消息长度不要超过12K'],\n  [80001, '消息或者资料中文本存在敏感内容,发送失败'],\n  [80004, '消息中图片存在敏感内容,发送失败'],\n]);\n\nexport const createOfflinePushInfo = (conversation: IConversationModel) => {\n  const androidInfo = {\n    sound: 'private_ring.mp3',\n    XiaoMiChannelID: 'high_custom_1',\n    OPPOChannelID: 'tuikit',\n  };\n  const apnsInfo = {\n    sound: '01.caf',\n    image: 'https://web.sdk.qcloud.com/im/demo/latest/faviconnew.png',\n  };\n  const userInfo = TUIStore.getData(StoreName.USER, 'userProfile');\n  const entity = {\n    sender: conversation.type === TUIChatEngine.TYPES.CONV_GROUP ? conversation.groupProfile?.groupID : userInfo.userID,\n    nickName: userInfo.nick,\n    chatType: conversation.type === TUIChatEngine.TYPES.CONV_GROUP ? 2 : 1,\n    version: 1,\n    action: 1,\n  };\n  return {\n    extension: JSON.stringify({ entity }),\n    androidInfo,\n    apnsInfo,\n  };\n};\n\n/**\n * This function only processes five message types: Text/TextAt/Image/Video/File\n * @param messageList\n * @param currentConversation\n */\nexport const sendMessages = async (\n  messageList: ITipTapEditorContent[],\n  currentConversation: IConversationModel,\n) => {\n  // In case of messageJumping, the sent message is automatically cleared and returns to the bottom\n  if (TUIStore.getData(StoreName.CHAT, 'messageSource')) {\n    TUIStore.update(StoreName.CHAT, 'messageSource', undefined);\n  }\n  messageList?.forEach(async (content: ITipTapEditorContent) => {\n    try {\n      const options: SendMessageParams = {\n        to: currentConversation?.groupProfile?.groupID || currentConversation?.userProfile?.userID,\n        conversationType: currentConversation?.type as any,\n        payload: {},\n        needReadReceipt: isEnabledMessageReadReceiptGlobal(),\n      };\n      // handle message typing\n      let textMessageContent;\n      const sendMessageOptions = {\n        offlinePushInfo: {},\n      };\n      switch (content?.type) {\n        case 'text':\n          textMessageContent = JSON.parse(JSON.stringify(content.payload?.text));\n          // Do not send empty messages\n          if (!textMessageContent) {\n            break;\n          }\n          options.payload = {\n            text: textMessageContent,\n          };\n          if (content.payload?.atUserList) {\n            options.payload.atUserList = content.payload.atUserList;\n            await TUIChatService.sendTextAtMessage(options, sendMessageOptions);\n          } else {\n            await TUIChatService.sendTextMessage(options, sendMessageOptions);\n          }\n          break;\n        case 'image':\n          options.payload = {\n            file: content.payload?.file,\n          };\n          await TUIChatService.sendImageMessage(options, sendMessageOptions);\n          break;\n        case 'video':\n          options.payload = {\n            file: content.payload?.file,\n          };\n          await TUIChatService.sendVideoMessage(options, sendMessageOptions);\n          break;\n        case 'file':\n          options.payload = {\n            file: content.payload?.file,\n          };\n          await TUIChatService.sendFileMessage(options, sendMessageOptions);\n          break;\n        default:\n          break;\n      }\n      enableSampleTaskStatus('sendMessage');\n    } catch (error: any) {\n      console.error(error);\n      // If the message fails to be sent and the message is a reference message, clear the reference message information\n      if (TUIStore.getData(StoreName.CHAT, 'quoteMessage')) {\n        TUIStore.update(StoreName.CHAT, 'quoteMessage', {});\n      }\n    }\n  });\n};\n\nexport const handleMessageWithTyping = (cloudCustomData: any) => {\n  if (!cloudCustomData) {\n    cloudCustomData = {};\n  }\n  cloudCustomData.messageFeature = {\n    needTyping: 1,\n    version: 1,\n  };\n  return cloudCustomData;\n};\n\nexport const sendTyping = (inputContentEmpty: boolean, inputBlur: boolean) => {\n  if (!inputContentEmpty && !inputBlur) {\n    TUIChatService.enterTypingState();\n  } else {\n    TUIChatService.leaveTypingState();\n  }\n};\n"],"names":["TUIStore","StoreName","isEnabledMessageReadReceiptGlobal","TUIChatService","enableSampleTaskStatus","uni"],"mappings":";;;;AAoDa,MAAA,eAAe,OAC1B,aACA,wBACG;AAEH,MAAIA,cAAS,GAAA,QAAQC,cAAU,IAAA,MAAM,eAAe,GAAG;AACrDD,kBAAA,GAAS,OAAOC,cAAA,IAAU,MAAM,iBAAiB,MAAS;AAAA,EAC5D;AACa,6CAAA,QAAQ,OAAO,YAAkC;;AACxD,QAAA;AACF,YAAM,UAA6B;AAAA,QACjC,MAAI,gEAAqB,iBAArB,mBAAmC,cAAW,gEAAqB,gBAArB,mBAAkC;AAAA,QACpF,kBAAkB,2DAAqB;AAAA,QACvC,SAAS,CAAC;AAAA,QACV,iBAAiBC,6CAAAA,kCAAkC;AAAA,MAAA;AAGjD,UAAA;AACJ,YAAM,qBAAqB;AAAA,QACzB,iBAAiB,CAAC;AAAA,MAAA;AAEpB,cAAQ,mCAAS,MAAM;AAAA,QACrB,KAAK;AACH,+BAAqB,KAAK,MAAM,KAAK,WAAU,aAAQ,YAAR,mBAAiB,IAAI,CAAC;AAErE,cAAI,CAAC,oBAAoB;AACvB;AAAA,UACF;AACA,kBAAQ,UAAU;AAAA,YAChB,MAAM;AAAA,UAAA;AAEJ,eAAA,aAAQ,YAAR,mBAAiB,YAAY;AACvB,oBAAA,QAAQ,aAAa,QAAQ,QAAQ;AACvC,kBAAAC,iBAAe,kBAAkB,SAAS,kBAAkB;AAAA,UAAA,OAC7D;AACC,kBAAAA,iBAAe,gBAAgB,SAAS,kBAAkB;AAAA,UAClE;AACA;AAAA,QACF,KAAK;AACH,kBAAQ,UAAU;AAAA,YAChB,OAAM,aAAQ,YAAR,mBAAiB;AAAA,UAAA;AAEnB,gBAAAA,iBAAe,iBAAiB,SAAS,kBAAkB;AACjE;AAAA,QACF,KAAK;AACH,kBAAQ,UAAU;AAAA,YAChB,OAAM,aAAQ,YAAR,mBAAiB;AAAA,UAAA;AAEnB,gBAAAA,iBAAe,iBAAiB,SAAS,kBAAkB;AACjE;AAAA,QACF,KAAK;AACH,kBAAQ,UAAU;AAAA,YAChB,OAAM,aAAQ,YAAR,mBAAiB;AAAA,UAAA;AAEnB,gBAAAA,iBAAe,gBAAgB,SAAS,kBAAkB;AAChE;AAAA,QACF;AACE;AAAA,MACJ;AACAC,oEAAA,uBAAuB,aAAa;AAAA,aAC7B,OAAY;AACnBC,oBAAAA,MAAA,MAAA,SAAA,oGAAc,KAAK;AAEnB,UAAIL,cAAS,GAAA,QAAQC,cAAU,IAAA,MAAM,cAAc,GAAG;AACpDD,sBAAA,GAAS,OAAOC,cAAA,IAAU,MAAM,gBAAgB,CAAE,CAAA;AAAA,MACpD;AAAA,IACF;AAAA,EAAA;AAEJ;AAaa,MAAA,aAAa,CAAC,mBAA4B,cAAuB;AACxE,MAAA,CAAC,qBAAqB,CAAC,WAAW;AACpCE,kBAAA,GAAe,iBAAiB;AAAA,EAAA,OAC3B;AACLA,kBAAA,GAAe,iBAAiB;AAAA,EAClC;AACF;;;"}