{"version":3,"file":"index.js","sources":["pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/emoji-config/index.ts"],"sourcesContent":["import { TUITranslateService } from '@tencentcloud/chat-uikit-engine';\nimport { CUSTOM_BASIC_EMOJI_URL, CUSTOM_BIG_EMOJI_URL, CUSTOM_BASIC_EMOJI_URL_MAPPING, CUSTOM_BIG_EMOJI_GROUP_LIST } from './custom-emoji';\nimport { DEFAULT_BASIC_EMOJI_URL, BIG_EMOJI_GROUP_LIST, DEFAULT_BASIC_EMOJI_URL_MAPPING, BASIC_EMOJI_NAME_TO_KEY_MAPPING, DEFAULT_BIG_EMOJI_URL } from './default-emoji';\nimport { default as emojiCNLocales } from './locales/zh_cn';\nimport { IEmojiGroupList } from '../../../interface';\nimport { EMOJI_TYPE } from '../../../constant';\nimport { isWeChat } from '../../../utils/env';\n\nconst hasCustomBasicEmoji = CUSTOM_BASIC_EMOJI_URL && Object.keys(CUSTOM_BASIC_EMOJI_URL_MAPPING).length;\n\nconst BASIC_EMOJI_URL = hasCustomBasicEmoji ? CUSTOM_BASIC_EMOJI_URL : DEFAULT_BASIC_EMOJI_URL;\n\nconst BASIC_EMOJI_URL_MAPPING = hasCustomBasicEmoji ? CUSTOM_BASIC_EMOJI_URL_MAPPING : DEFAULT_BASIC_EMOJI_URL_MAPPING;\n\nconst EMOJI_GROUP_LIST: IEmojiGroupList = [\n  {\n    emojiGroupID: 0,\n    type: EMOJI_TYPE.BASIC,\n    url: BASIC_EMOJI_URL,\n    list: Object.keys(BASIC_EMOJI_URL_MAPPING),\n  },\n  ...BIG_EMOJI_GROUP_LIST,\n  ...CUSTOM_BIG_EMOJI_GROUP_LIST,\n];\n\n/**\n * Converts a basic emoji key into its corresponding name.\n * Example:\n * '[Smile]' => '[TUIEmoji_Smile]'\n * @param {string} key - The emoji key.\n * @return {string} The corresponding emoji name.\n */\nconst convertKeyToEmojiName = (key: string): string => {\n  // 小程序平台暂不支持切换语言\n  return isWeChat ? emojiCNLocales[key] : TUITranslateService.t(`Emoji.${key}`);\n};\n\n/**\n * Transforms a text containing emoji keys into a text with Chinese or English basic emoji names\n * Example:\n * 'hello[TUIEmoji_Smile]!' => 'hello[Smile]!''\n * @param {string} text - The text containing emoji keys.\n * @return {string} The transformed text with emoji keys replaced by emoji names.\n */\nconst transformTextWithKeysToEmojiNames = (text: string): string => {\n  if (!text) {\n    return '';\n  }\n  const reg = /(\\[.+?\\])/g;\n  let txt: string = text;\n  if (reg.test(text)) {\n    txt = text.replace(reg, match => BASIC_EMOJI_URL_MAPPING[match] ? convertKeyToEmojiName(match) : match);\n  }\n  return txt;\n};\n\n/**\n * Transforms a text containing Chinese or English basic emoji names into a text with emoji keys.\n * Example:\n * 'hello[Smile]!' => 'hello[TUIEmoji_Smile]!'\n * @param {string} text - The text containing emoji names.\n * @return {string} The transformed text with emoji names replaced by emoji keys.\n */\nconst transformTextWithEmojiNamesToKeys = (text: string) => {\n  if (!text) {\n    return '';\n  }\n  const reg = /(\\[.+?\\])/g;\n  let txt: string = text;\n  if (reg.test(text)) {\n    txt = text.replace(reg, match => BASIC_EMOJI_NAME_TO_KEY_MAPPING[match] || match);\n  }\n  return txt;\n};\n\n/**\n* The configuration aims to provide compatibility with versions prior to 2.2.0\n*/\nconst emojiConfig = {\n  emojiBaseUrl: BASIC_EMOJI_URL,\n  emojiUrlMapping: BASIC_EMOJI_URL_MAPPING,\n  emojiNameMapping: {\n    ...emojiCNLocales,\n  },\n};\n\n/**\n * Transform text message to renderable array contains image and text.\n * Example: hello[TUIEmoji_Smile], I am happy.\n * -> [{type: 'text', content: 'hello'}, {type: 'image', content: 'https://.../smile.png'}, {type: 'text', content: ', I am happy.'}]\n * @param text\n * @returns Array<{ type: 'text' | 'image'; content: string; emojiKey?: string; }>\n */\nconst parseTextToRenderArray = (text: string): Array<{ type: 'text' | 'image'; content: string; emojiKey?: string }> => {\n  const emojiRegex = /\\[([^\\]]+)\\]/g;\n  const result: any[] = [];\n\n  let match: RegExpExecArray | null;\n  let lastIndex = 0;\n\n  while ((match = emojiRegex.exec(text)) !== null) {\n    const startIndex = match.index;\n    const endIndex = emojiRegex.lastIndex;\n    const emojiKey = match[0];\n\n    if (startIndex > lastIndex) {\n      result.push({ type: 'text', content: text.substring(lastIndex, startIndex) });\n    }\n\n    const emojiUrl = BASIC_EMOJI_URL + BASIC_EMOJI_URL_MAPPING[emojiKey];\n    if (emojiUrl) {\n      result.push({ type: 'image', content: emojiUrl, emojiKey });\n    } else {\n      result.push({ type: 'text', content: emojiKey });\n    }\n\n    lastIndex = endIndex;\n    emojiRegex.lastIndex = lastIndex;\n  }\n\n  if (lastIndex < text.length) {\n    result.push({ type: 'text', content: text.substring(lastIndex) });\n  }\n\n  return result;\n};\n\nexport {\n  EMOJI_GROUP_LIST,\n  CUSTOM_BIG_EMOJI_URL,\n  DEFAULT_BIG_EMOJI_URL,\n  CUSTOM_BASIC_EMOJI_URL,\n  BASIC_EMOJI_URL_MAPPING,\n  CUSTOM_BASIC_EMOJI_URL_MAPPING,\n  convertKeyToEmojiName,\n  parseTextToRenderArray,\n  transformTextWithKeysToEmojiNames,\n  transformTextWithEmojiNamesToKeys,\n  emojiConfig,\n};\n"],"names":["DEFAULT_BASIC_EMOJI_URL","DEFAULT_BASIC_EMOJI_URL_MAPPING","EMOJI_TYPE","BIG_EMOJI_GROUP_LIST","CUSTOM_BIG_EMOJI_GROUP_LIST","isWeChat","emojiCNLocales","TUITranslateService","BASIC_EMOJI_NAME_TO_KEY_MAPPING"],"mappings":";;;;;;;AAUA,MAAM,kBAAiEA,yFAAAA;AAEjE,MAAA,0BAAiFC,yFAAA;AAEvF,MAAM,mBAAoC;AAAA,EACxC;AAAA,IACE,cAAc;AAAA,IACd,MAAMC,0CAAW,WAAA;AAAA,IACjB,KAAK;AAAA,IACL,MAAM,OAAO,KAAK,uBAAuB;AAAA,EAC3C;AAAA,EACA,GAAGC,yFAAA;AAAA,EACH,GAAGC,wFAAA;AACL;AASM,MAAA,wBAAwB,CAAC,QAAwB;AAE9C,SAAAC,2CAAA,WAAWC,gGAAe,GAAG,IAAIC,cAAAA,GAAoB,EAAE,SAAS,GAAG,EAAE;AAC9E;AASM,MAAA,oCAAoC,CAAC,SAAyB;AAClE,MAAI,CAAC,MAAM;AACF,WAAA;AAAA,EACT;AACA,QAAM,MAAM;AACZ,MAAI,MAAc;AACd,MAAA,IAAI,KAAK,IAAI,GAAG;AACZ,UAAA,KAAK,QAAQ,KAAK,CAAS,UAAA,wBAAwB,KAAK,IAAI,sBAAsB,KAAK,IAAI,KAAK;AAAA,EACxG;AACO,SAAA;AACT;AASM,MAAA,oCAAoC,CAAC,SAAiB;AAC1D,MAAI,CAAC,MAAM;AACF,WAAA;AAAA,EACT;AACA,QAAM,MAAM;AACZ,MAAI,MAAc;AACd,MAAA,IAAI,KAAK,IAAI,GAAG;AAClB,UAAM,KAAK,QAAQ,KAAK,WAASC,yHAAgC,KAAK,KAAK,KAAK;AAAA,EAClF;AACO,SAAA;AACT;AAAA,CAKoB;AAAA,EAClB,cAAc;AAAA,EACd,iBAAiB;AAAA,EACjB,kBAAkB;AAAA,IAChB,GAAGF,0FAAA;AAAA,EACL;AACF;AASM,MAAA,yBAAyB,CAAC,SAAwF;AACtH,QAAM,aAAa;AACnB,QAAM,SAAgB,CAAA;AAElB,MAAA;AACJ,MAAI,YAAY;AAEhB,UAAQ,QAAQ,WAAW,KAAK,IAAI,OAAO,MAAM;AAC/C,UAAM,aAAa,MAAM;AACzB,UAAM,WAAW,WAAW;AACtB,UAAA,WAAW,MAAM,CAAC;AAExB,QAAI,aAAa,WAAW;AACnB,aAAA,KAAK,EAAE,MAAM,QAAQ,SAAS,KAAK,UAAU,WAAW,UAAU,EAAG,CAAA;AAAA,IAC9E;AAEM,UAAA,WAAW,kBAAkB,wBAAwB,QAAQ;AACnE,QAAI,UAAU;AACZ,aAAO,KAAK,EAAE,MAAM,SAAS,SAAS,UAAU,UAAU;AAAA,IAAA,OACrD;AACL,aAAO,KAAK,EAAE,MAAM,QAAQ,SAAS,UAAU;AAAA,IACjD;AAEY,gBAAA;AACZ,eAAW,YAAY;AAAA,EACzB;AAEI,MAAA,YAAY,KAAK,QAAQ;AACpB,WAAA,KAAK,EAAE,MAAM,QAAQ,SAAS,KAAK,UAAU,SAAS,EAAA,CAAG;AAAA,EAClE;AAEO,SAAA;AACT;;;;;;;"}