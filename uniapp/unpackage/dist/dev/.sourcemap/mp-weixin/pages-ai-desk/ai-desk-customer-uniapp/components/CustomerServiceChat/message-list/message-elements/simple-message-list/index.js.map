{"version":3,"file":"index.js","sources":["pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/simple-message-list/index.vue","E:/HBuilderX/plugins/uniapp-cli-vite/uniComponent:/RDovSkFWQUVFL215ZmxpZXMvdW5pYXBwLWFwcC91bmlhcHAvcGFnZXMtYWktZGVzay9haS1kZXNrLWN1c3RvbWVyLXVuaWFwcC9jb21wb25lbnRzL0N1c3RvbWVyU2VydmljZUNoYXQvbWVzc2FnZS1saXN0L21lc3NhZ2UtZWxlbWVudHMvc2ltcGxlLW1lc3NhZ2UtbGlzdC9pbmRleC52dWU"],"sourcesContent":["<template>\n  <div\n    :class=\"{\n      'simple-message-list-container': true,\n      'simple-message-list-container-mobile': isMobile,\n    }\"\n  >\n    <div class=\"header-container\">\n      <span\n        class=\"back\"\n        @click=\"backPreviousLevel\"\n      >\n        <Icon\n          class=\"close-icon\"\n          :file=\"addIcon\"\n          :size=\"'18px'\"\n        />\n        <span v-if=\"isReturn\">{{ TUITranslateService.t(\"TUIChat.返回\") }}</span>\n        <span v-else>{{ TUITranslateService.t(\"TUIChat.关闭\") }}</span>\n      </span>\n\n      <span class=\"title\">\n        {{ currentMergeMessageInfo.title }}\n      </span>\n    </div>\n    <div v-if=\"isDownloadOccurError\">\n      Load Merge Message Error\n    </div>\n    <div\n      v-else-if=\"isMergeMessageInfoLoaded\"\n      ref=\"simpleMessageListRef\"\n      class=\"message-list\"\n    >\n      <div\n        v-for=\"item in currentMergeMessageInfo.messageList\"\n        :key=\"item.ID\"\n        :class=\"{\n          'message-item': true,\n        }\"\n      >\n        <MessageContainer\n          :sender=\"item.nick\"\n          :avatar=\"item.avatar\"\n          :type=\"item.messageBody[0].type\"\n          :time=\"item.time\"\n        >\n          <!-- text -->\n          <div\n            v-if=\"item.messageBody[0].type === TYPES.MSG_TEXT\"\n            class=\"message-text\"\n          >\n            <span\n              v-for=\"(textInfo, index) in parseTextToRenderArray(\n                item.messageBody[0].payload['text']\n              )\"\n              :key=\"index\"\n              class=\"message-text-container\"\n            >\n              <span\n                v-if=\"textInfo.type === 'text'\"\n                class=\"text\"\n              >{{\n                textInfo.content\n              }}</span>\n              <img\n                v-else\n                class=\"simple-emoji\"\n                :src=\"textInfo.content\"\n                alt=\"small-face\"\n              >\n            </span>\n          </div>\n          <!-- image -->\n          <div\n            v-else-if=\"item.messageBody[0].type === TYPES.MSG_IMAGE\"\n            class=\"message-image\"\n          >\n            <img\n              class=\"image\"\n              :src=\"item.messageBody[0].payload['imageInfoArray'][2]['url']\"\n              mode=\"widthFix\"\n              alt=\"image\"\n            >\n          </div>\n          <!-- video -->\n          <div\n            v-else-if=\"item.messageBody[0].type === TYPES.MSG_VIDEO\"\n            class=\"message-video\"\n          >\n            <div\n              @click=\"\n                previewVideoInUniapp(\n                  item.messageBody[0].payload['remoteVideoUrl']\n                )\n              \"\n            >\n              <image\n                class=\"image\"\n                :src=\"item.messageBody[0].payload['thumbUrl']\"\n                mode=\"widthFix\"\n                alt=\"image\"\n              />\n              <Icon\n                class=\"video-play-icon\"\n                :file=\"playIcon\"\n              />\n            </div>\n          </div>\n          <!-- audio -->\n          <div\n            v-else-if=\"item.messageBody[0].type === TYPES.MSG_AUDIO\"\n            class=\"message-audio\"\n          >\n            <span>{{ TUITranslateService.t(\"TUIChat.语音\") }}&nbsp;</span>\n            <span>{{ item.messageBody[0].payload.second }}s</span>\n          </div>\n          <!-- big face -->\n          <div\n            v-else-if=\"item.messageBody[0].type === TYPES.MSG_FACE\"\n            class=\"message-face\"\n          >\n            <img\n              class=\"image\"\n              :src=\"resolveBigFaceUrl(item.messageBody[0].payload.data)\"\n              alt=\"face\"\n            >\n          </div>\n          <!-- file -->\n          <div\n            v-else-if=\"item.messageBody[0].type === TYPES.MSG_FILE\"\n            class=\"message-file\"\n          >\n            {{ TUITranslateService.t(\"TUIChat.[文件]\") }}\n          </div>\n          <!-- location -->\n          <div v-else-if=\"item.messageBody[0].type === TYPES.MSG_LOCATION\">\n            {{ TUITranslateService.t(\"TUIChat.[地理位置]\") }}\n          </div>\n          <!-- merger -->\n          <div\n            v-else-if=\"item.messageBody[0].type === TYPES.MSG_MERGER\"\n            class=\"message-merger\"\n            @click.capture=\"entryNextLevel($event, item)\"\n          >\n            <MessageRecord\n              disabled\n              :renderData=\"item.messageBody[0].payload\"\n            />\n          </div>\n          <!-- custom -->\n          <div v-else-if=\"item.messageBody[0].type === TYPES.MSG_CUSTOM\">\n            {{ TUITranslateService.t(\"TUIChat.[自定义消息]\") }}\n          </div>\n        </MessageContainer>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport vue from '../../../../../adapter-vue';\nimport TUIChatEngine, {\n  TUIStore,\n  TUIChatService,\n  TUITranslateService,\n} from '@tencentcloud/chat-uikit-engine';\nimport addIcon from '../../../../../assets/back.svg';\nimport playIcon from '../../../../../assets/video-play.png';\nimport Icon from '../../../../common/Icon.vue';\nimport MessageContainer from './message-container.vue';\nimport MessageRecord from '../message-record/index.vue';\nimport {\n  parseTextToRenderArray,\n  DEFAULT_BIG_EMOJI_URL,\n  CUSTOM_BIG_EMOJI_URL,\n} from '../../../emoji-config/index';\nimport { isMobile } from '../../../../../utils/env';\nimport { IMergeMessageContent } from '../../../../../interface';\nconst { computed, ref, watch } = vue;\n\ninterface IProps {\n  /**\n   * only use messageID when first render of simple-message-list\n   * because the nested simple-message-list do not have corresponding message object\n   * need to download message from sdk by constructed message\n   * and use downloaded message object to render nested simple-message-list\n   */\n  messageID?: string;\n  isMounted?: boolean;\n}\n\ninterface IEmits {\n  (e: 'closeOverlay'): void;\n}\n\nconst emits = defineEmits<IEmits>();\nconst props = withDefaults(defineProps<IProps>(), {\n  messageID: '',\n  isMounted: false,\n});\n\nconst TYPES = TUIChatEngine.TYPES;\nconst isDownloadOccurError = ref(false);\nconst messageListStack = ref<IMergeMessageContent[]>([]);\nconst currentMergeMessageInfo = ref<Partial<IMergeMessageContent>>({\n  title: '',\n  messageList: [],\n});\nconst simpleMessageListRef = ref<HTMLElement>();\n\nwatch(\n  () => messageListStack.value.length,\n  async (newValue) => {\n    isDownloadOccurError.value = false;\n    if (newValue < 1) {\n      return;\n    }\n    const stackTopMessageInfo\n      = messageListStack.value[messageListStack.value.length - 1];\n    if (\n      stackTopMessageInfo.downloadKey\n      && stackTopMessageInfo.messageList.length === 0\n    ) {\n      try {\n        const res = await TUIChatService.downloadMergedMessages({\n          payload: stackTopMessageInfo,\n          type: TUIChatEngine.TYPES.MSG_MERGER,\n        } as any);\n        // if download complete message, cover the original message in stack top\n        messageListStack.value[messageListStack.value.length - 1] = res.payload;\n      } catch (error) {\n        isDownloadOccurError.value = true;\n      }\n    }\n    currentMergeMessageInfo.value\n      = messageListStack.value[messageListStack.value.length - 1];\n  },\n);\n\nwatch(\n  () => props.isMounted,\n  (newValue) => {\n    // For compatibility with uniapp, use watch to implement onMounted\n    if (newValue) {\n      if (!props.messageID) {\n        throw new Error(\n          'messageID is required when first render of simple-message-list.',\n        );\n      }\n      const sdkMessagePayload = TUIStore.getMessageModel(\n        props.messageID,\n      ).getMessage().payload;\n      messageListStack.value = [sdkMessagePayload];\n    } else {\n      messageListStack.value = [];\n    }\n  },\n  {\n    immediate: true,\n  },\n);\n\nconst isReturn = computed(() => {\n  return messageListStack.value.length > 1;\n});\n\nconst isMergeMessageInfoLoaded = computed(() => {\n  return currentMergeMessageInfo.value?.messageList\n    ? currentMergeMessageInfo.value.messageList.length > 0\n    : false;\n});\n\nfunction entryNextLevel(e, sdkMessage: any) {\n  messageListStack.value.push(sdkMessage.messageBody[0].payload);\n  e.stopPropagation();\n}\n\nfunction backPreviousLevel() {\n  messageListStack.value.pop();\n  if (messageListStack.value.length < 1) {\n    emits('closeOverlay');\n  }\n}\n\nfunction previewVideoInUniapp(url: string) {\n  const encodedUrl = encodeURIComponent(url);\n  uni.navigateTo({\n    url: `/TUIKit/components/TUIChat/video-play?videoUrl=${encodedUrl}`,\n  });\n}\n\nfunction resolveBigFaceUrl(bigFaceKey: string): string {\n  let url = '';\n  if (bigFaceKey.indexOf('@custom') > -1) {\n    url = CUSTOM_BIG_EMOJI_URL + bigFaceKey;\n  } else {\n    url = DEFAULT_BIG_EMOJI_URL + bigFaceKey;\n    if (url.indexOf('@2x') === -1) {\n      url += '@2x.png';\n    } else {\n      url += '.png';\n    }\n  }\n  return url;\n}\n</script>\n\n<style scoped lang=\"scss\">\n:not(not) {\n  display: flex;\n  flex-direction: column;\n  min-width: 0;\n  box-sizing: border-box;\n}\n\n.simple-message-list-container {\n  flex: 1;\n  position: relative;\n  overflow: hidden;\n  width: calc(40vw);\n  min-width: 550px;\n  height: calc(100vh - 200px);\n  background-color: #fff;\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);\n  border-radius: 8px;\n\n  &-mobile {\n    width: 100vw;\n    height: 100vh;\n    min-width: auto;\n    border-radius: 0;\n  }\n\n  .header-container {\n    width: 100%;\n    text-align: center;\n    font-weight: bold;\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: 1;\n    height: 60px;\n    justify-content: center;\n    align-items: center;\n    padding: 0 70px;\n    background-color: #fff;\n\n    .back {\n      flex-direction: row;\n      align-items: center;\n      position: absolute;\n      left: 10px;\n      cursor: pointer;\n    }\n\n    .title {\n      width: 100%;\n      display: block;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n    }\n  }\n\n  .message-list {\n    padding: 60px 20px 20px;\n    flex: 1 1 auto;\n    overflow: hidden auto;\n  }\n}\n\n.message-item {\n  flex-direction: row;\n  margin: 10px 0;\n}\n\n.message-text {\n  flex-flow: row wrap;\n  display: inline;\n\n  &-container {\n    display: inline;\n    flex: 0 0 auto;\n    flex-direction: row;\n\n    .text {\n      vertical-align: bottom;\n      display: inline;\n      word-break: break-all;\n    }\n\n    .simple-emoji {\n      display: inline-flex;\n      width: 20px;\n      height: 20px;\n    }\n  }\n}\n\n.message-image {\n  max-width: 180px;\n  border-radius: 10px;\n  overflow: hidden;\n\n  .image {\n    max-width: 180px;\n  }\n}\n\n.message-face {\n  max-width: 100px;\n\n  .image {\n    width: 80px;\n    height: 80px;\n  }\n}\n\n.message-audio {\n  flex-direction: row;\n}\n\n.message-video {\n  position: relative;\n\n  .image {\n    max-width: 180px;\n  }\n\n  .video-play-icon {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n\n  .video {\n    max-width: 150px;\n    width: inherit;\n    height: inherit;\n    border-radius: 10px;\n  }\n}\n\n.message-combine {\n  max-width: 300px;\n}\n</style>\n","import Component from 'D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/simple-message-list/index.vue'\nwx.createComponent(Component)"],"names":["vue","TUIChatEngine","TUIChatService","TUIStore","uni","CUSTOM_BIG_EMOJI_URL","DEFAULT_BIG_EMOJI_URL"],"mappings":"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"}