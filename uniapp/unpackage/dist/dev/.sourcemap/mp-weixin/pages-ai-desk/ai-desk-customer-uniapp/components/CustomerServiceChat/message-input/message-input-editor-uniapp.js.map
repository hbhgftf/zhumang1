{"version":3,"file":"message-input-editor-uniapp.js","sources":["pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-input/message-input-editor-uniapp.vue","E:/HBuilderX/plugins/uniapp-cli-vite/uniComponent:/RDovSkFWQUVFL215ZmxpZXMvdW5pYXBwLWFwcC91bmlhcHAvcGFnZXMtYWktZGVzay9haS1kZXNrLWN1c3RvbWVyLXVuaWFwcC9jb21wb25lbnRzL0N1c3RvbWVyU2VydmljZUNoYXQvbWVzc2FnZS1pbnB1dC9tZXNzYWdlLWlucHV0LWVkaXRvci11bmlhcHAudnVl"],"sourcesContent":["<template>\n  <div\n    :class=\"{\n      'message-input-container': true,\n      'message-input-container-h5': true,\n    }\"\n  >\n    <div\n      v-if=\"props.isMuted\"\n      class=\"message-input-mute\"\n    >\n      {{ props.muteText }}\n    </div>\n    <input\n      id=\"editor\"\n      ref=\"inputRef\"\n      v-model=\"inputText\"\n      :adjust-position=\"true\"\n      cursor-spacing=\"20\"\n      confirm-type=\"send\"\n      :confirm-hold=\"true\"\n      type=\"text\"\n      class=\"message-input-area\"\n      auto-blur\n      @confirm=\"handleSendMessage\"\n      @input=\"onInput\"\n      @blur=\"onBlur\"\n      @focus=\"onFocus\"\n    >\n  </div>\n</template>\n<script lang=\"ts\" setup>\nimport vue from '../../../adapter-vue';\nimport {\n  TUIStore,\n  StoreName,\n  IConversationModel,\n  IMessageModel,\n} from '@tencentcloud/chat-uikit-engine';\nimport DraftManager from '../utils/conversationDraft';\nimport { transformTextWithEmojiNamesToKeys } from '../emoji-config';\nimport { sendMessages } from '../utils/sendMessage';\nimport { ISendMessagePayload } from '../../../interface';\nconst { ref, watch, onMounted, onUnmounted } = vue;\n\nconst props = defineProps({\n  placeholder: {\n    type: String,\n    default: '',\n  },\n  replayOrReferenceMessage: {\n    type: Object,\n    default: () => ({}),\n    required: false,\n  },\n  isMuted: {\n    type: Boolean,\n    default: true,\n  },\n  muteText: {\n    type: String,\n    default: '',\n  },\n  enableInput: {\n    type: Boolean,\n    default: true,\n  },\n  enableTyping: {\n    type: Boolean,\n    default: true,\n  },\n});\n\nconst emits = defineEmits(['onTyping', 'onFocus', 'isInputNotEmpty']);\nconst inputText = ref('');\nconst inputRef = ref();\nconst inputBlur = ref(true);\nconst inputContentEmpty = ref(true);\nconst currentConversation = ref<IConversationModel>();\nconst currentConversationID = ref<string>('');\nconst currentQuoteMessage = ref<{ message: IMessageModel; type: string }>();\n\nonMounted(() => {\n  TUIStore.watch(StoreName.CONV, {\n    currentConversation: onCurrentConversationUpdated,\n  });\n\n  TUIStore.watch(StoreName.CHAT, {\n    quoteMessage: onQuoteMessageUpdated,\n  });\n\n  uni.$on('insert-emoji', (data) => {\n    inputText.value += data?.emoji?.name;\n    emits('isInputNotEmpty', true);\n  });\n\n  uni.$on('send-message-in-emoji-picker', () => {\n    handleSendMessage();\n  });\n});\n\nonUnmounted(() => {\n  if (currentConversationID.value) {\n    DraftManager.setStore(\n      currentConversationID.value,\n      inputText.value,\n      inputText.value,\n      currentQuoteMessage.value,\n    );\n  }\n\n  uni.$off('insertEmoji');\n  uni.$off('send-message-in-emoji-picker');\n\n  TUIStore.unwatch(StoreName.CONV, {\n    currentConversation: onCurrentConversationUpdated,\n  });\n\n  TUIStore.unwatch(StoreName.CHAT, {\n    quoteMessage: onQuoteMessageUpdated,\n  });\n\n  reset();\n});\n\nconst handleSendMessage = () => {\n  const messageList = getEditorContent();\n  resetEditor();\n  sendMessages(messageList as any, currentConversation.value!);\n};\n\nconst getEditorContent = () => {\n  let text = inputText.value;\n  text = transformTextWithEmojiNamesToKeys(text);\n  const payload: ISendMessagePayload = {\n    text,\n  };\n  return [\n    {\n      type: 'text',\n      payload,\n    },\n  ];\n};\n\nconst resetEditor = () => {\n  inputText.value = '';\n  inputContentEmpty.value = true;\n  emits('isInputNotEmpty', false);\n};\n\nconst setEditorContent = (content: any) => {\n  inputText.value = content;\n};\n\nconst onBlur = () => {\n  inputBlur.value = true;\n};\n\nconst onFocus = (e: any) => {\n  inputBlur.value = false;\n  emits('onFocus', e?.detail?.height);\n};\n\nconst isEditorContentEmpty = () => {\n  inputContentEmpty.value = inputText?.value?.length ? false : true;\n  emits('isInputNotEmpty', !inputContentEmpty.value);\n};\n\nconst onInput = () => {\n  // uni-app recognizes mention messages\n  isEditorContentEmpty();\n};\n\nwatch(\n  () => [inputContentEmpty.value, inputBlur.value],\n  (newVal: any, oldVal: any) => {\n    if (newVal !== oldVal) {\n      emits('onTyping', inputContentEmpty.value, inputBlur.value);\n    }\n  },\n  {\n    immediate: true,\n    deep: true,\n  },\n);\n\nfunction onCurrentConversationUpdated(conversation: IConversationModel) {\n  const prevConversationID = currentConversationID.value;\n  currentConversation.value = conversation;\n  currentConversationID.value = conversation?.conversationID;\n  if (prevConversationID !== currentConversationID.value) {\n    if (prevConversationID) {\n      DraftManager.setStore(\n        prevConversationID,\n        inputText.value,\n        inputText.value,\n        currentQuoteMessage.value,\n      );\n    }\n    resetEditor();\n    if (currentConversationID.value) {\n      DraftManager.getStore(currentConversationID.value, setEditorContent);\n    }\n  }\n}\n\nfunction onQuoteMessageUpdated(options?: {\n  message: IMessageModel;\n  type: string;\n}) {\n  currentQuoteMessage.value = options;\n}\n\nfunction reset() {\n  inputBlur.value = true;\n  currentConversation.value = null;\n  currentConversationID.value = '';\n  currentQuoteMessage.value = null;\n  resetEditor();\n}\n\ndefineExpose({\n  resetEditor,\n  setEditorContent,\n  getEditorContent,\n});\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../style/common\";\n\n.message-input-container {\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  padding: 3px 10px 10px;\n  overflow: hidden;\n\n  &-h5 {\n    flex: 1;\n    height: auto;\n    background: #fff;\n    border-radius: 10px 0 0 10px;\n    padding: 7px 0 7px 10px;\n    font-size: 16px !important;\n    max-height: 86px;\n  }\n\n  .message-input-area {\n    flex: 1;\n    overflow-y: hidden;\n    min-height: 25px;\n  }\n\n  .message-input-mute {\n    color: #721c24;\n    background-color: #f8d7da;\n    border-color: #f5c6cb;\n    text-align: center;\n  }\n}\n</style>\n","import Component from 'D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-input/message-input-editor-uniapp.vue'\nwx.createComponent(Component)"],"names":["vue","TUIStore","StoreName","uni","DraftManager","sendMessages","transformTextWithEmojiNamesToKeys"],"mappings":"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"}