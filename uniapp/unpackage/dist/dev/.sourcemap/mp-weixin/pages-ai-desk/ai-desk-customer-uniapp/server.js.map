{"version":3,"file":"server.js","sources":["pages-ai-desk/ai-desk-customer-uniapp/server.ts"],"sourcesContent":["import TUICore, { TUIConstants } from '@tencentcloud/tui-core';\nimport {\n  isCustomerServiceMessage,\n  isThinkingMessage,\n  isMessageInvisible,\n  clearChatStorage,\n} from './utils/index';\nimport TUIChatEngine, {\n  TUIChatService,\n  TUIConversationService,\n  IMessageModel,\n  TUITranslateService,\n  SendMessageParams,\n  SendMessageOptions,\n  TUIUserService,\n} from '@tencentcloud/chat-uikit-engine';\nimport Log from './utils/logger';\nimport { version } from './package.json'\nimport { Toast, TOAST_TYPE } from \"./components/common/Toast/index-uniapp\";\nimport { vueVersion } from \"./adapter-vue-uniapp\";\nimport { switchReadStatus } from \"./utils/utils\";\nimport state from \"./utils/state\";\n\ninterface IInitWithProfile {\n  SDKAppID: number,\n  userID: string,\n  userSig: string,\n  nickName?: string,\n  avatar?: string,\n}\n\ninterface IProfile {\n  nick?: string,\n  avatar?: string,\n}\n\nexport default class TUICustomerServer {\n  private isLoggedIn: boolean;\n  static instance: TUICustomerServer;\n  private customerServiceAccounts: any[];\n  private loggedInUserID: string;\n  private myProfile: IProfile;\n  constructor() {\n    TUICore.registerService(TUIConstants.TUICustomerServicePlugin.SERVICE.NAME, this);\n    TUICore.registerExtension(TUIConstants.TUIContact.EXTENSION.CONTACT_LIST.EXT_ID, this);\n    this.customerServiceAccounts = ['@customer_service_account'];\n    this.isLoggedIn = false;\n    this.loggedInUserID = '';\n    this.myProfile = {};\n  }\n\n  static getInstance(): TUICustomerServer {\n    if (!TUICustomerServer.instance) {\n      TUICustomerServer.instance = new TUICustomerServer();\n    }\n    return TUICustomerServer.instance;\n  }\n\n  private loginCustomerUIKit(SDKAppID:number, userID:string, userSig:string) {\n    clearChatStorage(SDKAppID, userID);\n    TUIChatEngine.login({\n      SDKAppID,\n      userID,\n      userSig,\n      useUploadPlugin: true,\n    }).then(() => {\n      Log.i(`login success. userID:${userID}`);\n      this.isLoggedIn = true;\n      this.loggedInUserID = userID;\n      TUIConversationService.switchConversation('C2C@customer_service_account');\n      switchReadStatus(state.get('showReadStatus'));\n      TUIChatEngine.chat.callExperimentalAPI('isFeatureEnabledForStat', Math.pow(2, 42));\n    })\n    .catch((error) => {\n      Toast({\n        message: TUITranslateService.t('TUIChat.登录失败'),\n        type: TOAST_TYPE.ERROR,\n        duration: 30000,\n      });\n      Log.l(error);\n    })\n  }\n\n  public init(SDKAppID:number, userID:string, userSig:string) {\n    Log.l(`TUICustomerServer.init vue:${vueVersion} version:${version} SDKAppID:${SDKAppID} userID:${userID} isLoggedIn:${this.isLoggedIn} loggedInUserID:${this.loggedInUserID}`);\n    if (this.isLoggedIn) {\n      if (this.loggedInUserID === userID) {\n        return;\n      }\n      this.unInit().finally(() => {\n        this.isLoggedIn = false;\n        this.loginCustomerUIKit(SDKAppID, userID, userSig);\n      });\n    } else {\n      this.loginCustomerUIKit(SDKAppID, userID, userSig);\n    }\n  }\n\n  public initWithProfile(options: IInitWithProfile) {\n    const { SDKAppID, userID, userSig, nickName, avatar } = options;\n    Log.l(`TUICustomerServer.initWithProfile version:${version}`);\n    if (nickName) {\n      // chat 个人资料的昵称是 nick\n      this.myProfile.nick = nickName;\n    }\n    if (avatar) {\n      this.myProfile.avatar = avatar;\n    }\n    this.init(SDKAppID, userID, userSig);\n  }\n\n  public unInit() {\n    return TUIChatEngine.logout();\n  }\n\n  public sendTextMessage(options: SendMessageParams, sendMessageOptions?: SendMessageOptions) {\n    return TUIChatService.sendTextMessage(options, sendMessageOptions);\n  }\n\n  public sendCustomMessage(options: SendMessageParams, sendMessageOptions?: SendMessageOptions) {\n    return TUIChatService.sendCustomMessage(options, sendMessageOptions);\n  };\n\n  public changeLanguage(language: string) {\n    return TUITranslateService.changeLanguage(language).then(() => {\n      Log.i(`language changed to ${language}`);\n    });\n  }\n\n  public getLoggedInUserID() {\n    return this.loggedInUserID;\n  }\n\n  // Determine if the current session is a customer service session\n  public isCustomerConversation(conversationID: string) {\n    const userID = (conversationID && conversationID.slice(3)) || '';\n    return this.customerServiceAccounts.indexOf(userID) > -1;\n  }\n\n  // Determine if the current message is a customer service message\n  public isCustomerServicePluginMessage(message: IMessageModel) {\n    if (!message || !this.isCustomerConversation(message.conversationID)) {\n      return false;\n    }\n    if (isThinkingMessage(message)) {\n      return false;\n    }\n    return isCustomerServiceMessage(message) || isMessageInvisible(message);\n  }\n\n  public onGetExtension(extensionID: string) {\n    if (extensionID === TUIConstants.TUIContact.EXTENSION.CONTACT_LIST.EXT_ID) {\n      return [\n        {\n          weight: 0,\n          icon: '',\n          text: '智能客服',\n          data: {\n            name: 'customer',\n            accountList: this.customerServiceAccounts,\n          },\n        },\n      ];\n    }\n  }\n\n  public onCall(method: string, params: any) {\n    Log.l(`TUICustomerServer.onCall method:${method} params:`, params);\n    if (method === TUIConstants.TUICustomerServicePlugin.SERVICE.METHOD.ACTIVE_CONVERSATION) {\n      if (this.isCustomerConversation(params.conversationID)) {\n        // 如果有资料，确保资料更新完成（或失败）后再激活会话服务流\n        if (Object.keys(this.myProfile).length > 0) {\n          Log.l(`TUICustomerServer.onCall updateMyProfile:${JSON.stringify(this.myProfile)}`);\n          TUIUserService.updateMyProfile({...this.myProfile}).finally(() => {\n            this.activeServiceFlow(params);\n          });\n        } else {\n          this.activeServiceFlow(params);\n        }\n      }\n    }\n  }\n\n  // 激活会话服务流\n  private activeServiceFlow(params: any) {\n    TUIChatService.sendCustomMessage({\n      to: params.conversationID.slice(3),\n      conversationType: TUIChatEngine.TYPES.CONV_C2C,\n      payload: {\n        data: JSON.stringify({\n          src: '7',\n          customerServicePlugin: 0,\n          triggeredContent: typeof params.robotLang === 'undefined' ? undefined : { language: params.robotLang }\n        }),\n      },\n    }, { onlineUserOnly: true });\n  }\n}\n"],"names":["TUICore","TUIConstants","clearChatStorage","TUIChatEngine","Log","TUIConversationService","switchReadStatus","state","Toast","TUITranslateService","TOAST_TYPE","vueVersion","TUIChatService","isThinkingMessage","isCustomerServiceMessage","isMessageInvisible","TUIUserService"],"mappings":";;;;;;;;;;;;;;;;AAoCA,MAAqB,qBAArB,MAAqB,mBAAkB;AAAA,EAMrC,cAAc;AALN;AAEA;AACA;AACA;AAENA,kBAAA,EAAQ,gBAAgBC,gBAAa,yBAAyB,QAAQ,MAAM,IAAI;AAChFD,oBAAQ,kBAAkBC,cAAAA,EAAa,WAAW,UAAU,aAAa,QAAQ,IAAI;AAChF,SAAA,0BAA0B,CAAC,2BAA2B;AAC3D,SAAK,aAAa;AAClB,SAAK,iBAAiB;AACtB,SAAK,YAAY;EACnB;AAAA,EAEA,OAAO,cAAiC;AAClC,QAAA,CAAC,mBAAkB,UAAU;AACb,yBAAA,WAAW,IAAI;IACnC;AACA,WAAO,mBAAkB;AAAA,EAC3B;AAAA,EAEQ,mBAAmB,UAAiB,QAAe,SAAgB;AACzEC,kEAAiB,UAAU,MAAM;AACjCC,kBAAAA,GAAc,MAAM;AAAA,MAClB;AAAA,MACA;AAAA,MACA;AAAA,MACA,iBAAiB;AAAA,IAAA,CAClB,EAAE,KAAK,MAAM;AACRC,oDAAAA,IAAA,EAAE,yBAAyB,MAAM,EAAE;AACvC,WAAK,aAAa;AAClB,WAAK,iBAAiB;AACtBC,uBAAuB,mBAAmB,8BAA8B;AACvDC,mDAAAA,iBAAAC,6CAAA,MAAM,IAAI,gBAAgB,CAAC;AAC5CJ,uBAAc,KAAK,oBAAoB,2BAA2B,KAAK,IAAI,GAAG,EAAE,CAAC;AAAA,IAAA,CAClF,EACA,MAAM,CAAC,UAAU;AACVK,iFAAA;AAAA,QACJ,SAASC,cAAAA,GAAoB,EAAE,cAAc;AAAA,QAC7C,MAAMC,8DAAW,WAAA;AAAA,QACjB,UAAU;AAAA,MAAA,CACX;AACDN,wDAAI,EAAE,KAAK;AAAA,IAAA,CACZ;AAAA,EACH;AAAA,EAEO,KAAK,UAAiB,QAAe,SAAgB;AAC1DA,kDAAA,IAAI,EAAE,8BAA8BO,kDAAU,UAAA,YAAY,OAAO,aAAa,QAAQ,WAAW,MAAM,eAAe,KAAK,UAAU,mBAAmB,KAAK,cAAc,EAAE;AAC7K,QAAI,KAAK,YAAY;AACf,UAAA,KAAK,mBAAmB,QAAQ;AAClC;AAAA,MACF;AACK,WAAA,SAAS,QAAQ,MAAM;AAC1B,aAAK,aAAa;AACb,aAAA,mBAAmB,UAAU,QAAQ,OAAO;AAAA,MAAA,CAClD;AAAA,IAAA,OACI;AACA,WAAA,mBAAmB,UAAU,QAAQ,OAAO;AAAA,IACnD;AAAA,EACF;AAAA,EAEO,gBAAgB,SAA2B;AAChD,UAAM,EAAE,UAAU,QAAQ,SAAS,UAAU,OAAW,IAAA;AACpDP,kDAAAA,IAAA,EAAE,6CAA6C,OAAO,EAAE;AAC5D,QAAI,UAAU;AAEZ,WAAK,UAAU,OAAO;AAAA,IACxB;AACA,QAAI,QAAQ;AACV,WAAK,UAAU,SAAS;AAAA,IAC1B;AACK,SAAA,KAAK,UAAU,QAAQ,OAAO;AAAA,EACrC;AAAA,EAEO,SAAS;AACd,WAAOD,cAAAA,GAAc;EACvB;AAAA,EAEO,gBAAgB,SAA4B,oBAAyC;AACnF,WAAAS,iBAAe,gBAAgB,SAAS,kBAAkB;AAAA,EACnE;AAAA,EAEO,kBAAkB,SAA4B,oBAAyC;AACrF,WAAAA,iBAAe,kBAAkB,SAAS,kBAAkB;AAAA,EACrE;AAAA,EAEO,eAAe,UAAkB;AACtC,WAAOH,cAAoB,GAAA,eAAe,QAAQ,EAAE,KAAK,MAAM;AACzDL,oDAAAA,IAAA,EAAE,uBAAuB,QAAQ,EAAE;AAAA,IAAA,CACxC;AAAA,EACH;AAAA,EAEO,oBAAoB;AACzB,WAAO,KAAK;AAAA,EACd;AAAA;AAAA,EAGO,uBAAuB,gBAAwB;AACpD,UAAM,SAAU,kBAAkB,eAAe,MAAM,CAAC,KAAM;AAC9D,WAAO,KAAK,wBAAwB,QAAQ,MAAM,IAAI;AAAA,EACxD;AAAA;AAAA,EAGO,+BAA+B,SAAwB;AAC5D,QAAI,CAAC,WAAW,CAAC,KAAK,uBAAuB,QAAQ,cAAc,GAAG;AAC7D,aAAA;AAAA,IACT;AACI,QAAAS,6CAAAA,kBAAkB,OAAO,GAAG;AACvB,aAAA;AAAA,IACT;AACA,WAAOC,6CAAyB,yBAAA,OAAO,KAAKC,6CAAA,mBAAmB,OAAO;AAAA,EACxE;AAAA,EAEO,eAAe,aAAqB;AACzC,QAAI,gBAAgBd,cAAAA,EAAa,WAAW,UAAU,aAAa,QAAQ;AAClE,aAAA;AAAA,QACL;AAAA,UACE,QAAQ;AAAA,UACR,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,YACJ,MAAM;AAAA,YACN,aAAa,KAAK;AAAA,UACpB;AAAA,QACF;AAAA,MAAA;AAAA,IAEJ;AAAA,EACF;AAAA,EAEO,OAAO,QAAgB,QAAa;AACzCG,kDAAA,IAAI,EAAE,mCAAmC,MAAM,YAAY,MAAM;AACjE,QAAI,WAAWH,cAAAA,EAAa,yBAAyB,QAAQ,OAAO,qBAAqB;AACvF,UAAI,KAAK,uBAAuB,OAAO,cAAc,GAAG;AAEtD,YAAI,OAAO,KAAK,KAAK,SAAS,EAAE,SAAS,GAAG;AAC1CG,4DAAI,EAAE,4CAA4C,KAAK,UAAU,KAAK,SAAS,CAAC,EAAE;AACnEY,wBAAA,GAAA,gBAAgB,EAAC,GAAG,KAAK,UAAU,CAAA,EAAE,QAAQ,MAAM;AAChE,iBAAK,kBAAkB,MAAM;AAAA,UAAA,CAC9B;AAAA,QAAA,OACI;AACL,eAAK,kBAAkB,MAAM;AAAA,QAC/B;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA,EAGQ,kBAAkB,QAAa;AACrCJ,kBAAAA,GAAe,kBAAkB;AAAA,MAC/B,IAAI,OAAO,eAAe,MAAM,CAAC;AAAA,MACjC,kBAAkBT,cAAAA,GAAc,MAAM;AAAA,MACtC,SAAS;AAAA,QACP,MAAM,KAAK,UAAU;AAAA,UACnB,KAAK;AAAA,UACL,uBAAuB;AAAA,UACvB,kBAAkB,OAAO,OAAO,cAAc,cAAc,SAAY,EAAE,UAAU,OAAO,UAAU;AAAA,QAAA,CACtG;AAAA,MACH;AAAA,IAAA,GACC,EAAE,gBAAgB,KAAA,CAAM;AAAA,EAC7B;AACF;AA/JE,cAFmB,oBAEZ;AAFT,IAAqB,oBAArB;;"}