{"version":3,"file":"index.js","sources":["pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/read-status/index.vue","E:/HBuilderX/plugins/uniapp-cli-vite/uniComponent:/RDovSkFWQUVFL215ZmxpZXMvdW5pYXBwLWFwcC91bmlhcHAvcGFnZXMtYWktZGVzay9haS1kZXNrLWN1c3RvbWVyLXVuaWFwcC9jb21wb25lbnRzL0N1c3RvbWVyU2VydmljZUNoYXQvbWVzc2FnZS1saXN0L21lc3NhZ2UtZWxlbWVudHMvcmVhZC1zdGF0dXMvaW5kZXgudnVl"],"sourcesContent":["<template>\n  <div\n    v-show=\"isShowReadStatus\"\n    :class=\"{\n      'message-label': true,\n      unread: isUseUnreadStyle,\n    }\"\n  >\n    <span>{{ readStatusText }}</span>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport vue from '../../../../../adapter-vue';\nimport TUIChatEngine, {\n  TUIStore,\n  StoreName,\n  IMessageModel,\n  TUITranslateService,\n} from '@tencentcloud/chat-uikit-engine';\nconst { computed, ref, onMounted, onUnmounted } = vue;\n\ninterface IProps {\n  message: IMessageModel;\n}\n\nconst props = withDefaults(defineProps<IProps>(), {\n  message: () => ({} as IMessageModel),\n});\nconst ReadStatus = true;\n\nenum ReadState {\n  Read,\n  Unread,\n  AllRead,\n  NotShow,\n  PartiallyRead,\n}\n\nconst TYPES = TUIChatEngine.TYPES;\n// User-level read receipt toggle has the highest priority.\nconst isDisplayMessageReadReceipt = ref<boolean>(\n  // TUIStore.getData(StoreName.USER, 'displayMessageReadReceipt'),\n  true\n);\n\nonMounted(() => {\n  TUIStore.watch(StoreName.USER, {\n    displayMessageReadReceipt: onDisplayMessageReadReceiptUpdate,\n  });\n});\n\nonUnmounted(() => {\n  TUIStore.unwatch(StoreName.USER, {\n    displayMessageReadReceipt: onDisplayMessageReadReceiptUpdate,\n  });\n});\n\nconst isShowReadStatus = computed<boolean>(() => {\n  if (!ReadStatus) {\n    return false;\n  }\n  if (!isDisplayMessageReadReceipt.value) {\n    return false;\n  }\n  const {\n    ID,\n    type,\n    flow,\n    status,\n    hasRiskContent,\n    conversationID,\n    conversationType,\n    needReadReceipt = false,\n  } = props.message;\n\n  // Asynchronous message strike: Determine if there is risky content after the message has been sent\n  if (hasRiskContent) {\n    return false;\n  }\n\n  const { groupProfile } = TUIStore.getConversationModel(conversationID) || {};\n  // AVCHATROOM and COMMUNITY chats do not display read status\n  if (\n    groupProfile?.type === TYPES.GRP_AVCHATROOM\n    || groupProfile?.type === TYPES.GRP_COMMUNITY\n  ) {\n    return false;\n  }\n\n  if (type === TYPES.MSG_CUSTOM) {\n    const message = TUIStore.getMessageModel(ID);\n    // If it is a signaling message, do not display the read status\n    if (message?.getSignalingInfo() !== null) {\n      return false;\n    }\n  }\n\n  // Unsuccessful message: Received messages do not display read status\n  if (flow !== 'out' || status !== 'success') {\n    return false;\n  }\n\n  if (conversationType === 'GROUP') {\n    return needReadReceipt;\n  } else if (conversationType === 'C2C') {\n    return true;\n  }\n  return false;\n});\n\nconst readState = computed<ReadState>(() => {\n  const {\n    conversationType,\n    needReadReceipt = false,\n    isPeerRead = false,\n  } = props.message;\n  const {\n    readCount = 0,\n    unreadCount = 0,\n    isPeerRead: isReceiptPeerRead = false,\n  } = props.message.readReceiptInfo;\n  if (conversationType === 'C2C') {\n    if (needReadReceipt) {\n      return isReceiptPeerRead ? ReadState.Read : ReadState.Unread;\n    } else {\n      return isPeerRead ? ReadState.Read : ReadState.Unread;\n    }\n  } else if (conversationType === 'GROUP') {\n    if (needReadReceipt) {\n      if (readCount === 0) {\n        return ReadState.Unread;\n      } else if (unreadCount === 0) {\n        return ReadState.AllRead;\n      } else {\n        return ReadState.PartiallyRead;\n      }\n    } else {\n      return ReadState.NotShow;\n    }\n  }\n  return ReadState.Unread;\n});\n\nconst readStatusText = computed(() => {\n  const { readCount = 0 } = props.message.readReceiptInfo;\n  switch (readState.value) {\n    case ReadState.Read:\n      return TUITranslateService.t('TUIChat.已读');\n    case ReadState.Unread:\n      return TUITranslateService.t('TUIChat.未读');\n    case ReadState.AllRead:\n      return TUITranslateService.t('TUIChat.全部已读');\n    case ReadState.PartiallyRead:\n      return `${readCount}${TUITranslateService.t('TUIChat.人已读')}`;\n    default:\n      return '';\n  }\n});\n\nconst isUseUnreadStyle = computed(() => {\n  const { conversationType } = props.message;\n  if (conversationType === 'C2C') {\n    return readState.value !== ReadState.Read;\n  } else if (conversationType === 'GROUP') {\n    return readState.value !== ReadState.AllRead;\n  }\n  return false;\n});\n\nfunction onDisplayMessageReadReceiptUpdate(isDisplay: boolean) {\n  isDisplayMessageReadReceipt.value = isDisplay;\n}\n</script>\n\n<style scoped lang=\"scss\">\n.message-label {\n  align-self: flex-end;\n  font-size: 12px;\n  color: #b6b8ba;\n  word-break: keep-all;\n  flex: 0 0 auto;\n\n  &.unread {\n    color: #679ce1 !important;\n  }\n}\n\n.finger-point {\n  cursor: pointer;\n  -webkit-tap-highlight-color: transparent;\n}\n</style>\n","import Component from 'D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/message-elements/read-status/index.vue'\nwx.createComponent(Component)"],"names":["vue","TUIChatEngine","TUIStore","StoreName","TUITranslateService"],"mappings":"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"}