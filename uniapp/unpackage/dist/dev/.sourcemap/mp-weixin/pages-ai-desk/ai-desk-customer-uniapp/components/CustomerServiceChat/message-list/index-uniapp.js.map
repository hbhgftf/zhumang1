{"version":3,"file":"index-uniapp.js","sources":["pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/index-uniapp.vue","E:/HBuilderX/plugins/uniapp-cli-vite/uniComponent:/RDovSkFWQUVFL215ZmxpZXMvdW5pYXBwLWFwcC91bmlhcHAvcGFnZXMtYWktZGVzay9haS1kZXNrLWN1c3RvbWVyLXVuaWFwcC9jb21wb25lbnRzL0N1c3RvbWVyU2VydmljZUNoYXQvbWVzc2FnZS1saXN0L2luZGV4LXVuaWFwcC52dWU"],"sourcesContent":["<template>\n  <div\n    :class=\"{\n      'tui-chat': true,\n      'tui-chat-h5': isUniFrameWork,\n    }\"\n    @click=\"onMessageListBackgroundClick\"\n  >\n    <div class=\"tui-chat-main\">\n      <scroll-view\n        id=\"messageScrollList\"\n        class=\"tui-message-list\"\n        scroll-y=\"true\"\n        :scroll-top=\"scrollTop\"\n        :scroll-into-view=\"`tui-${historyFirstMessageID}`\"\n        @scroll=\"handelScrollListScroll\"\n      >\n        <p\n          v-if=\"messageList.length && !isCompleted\"\n          class=\"message-more\"\n          @click=\"getHistoryMessageList\"\n        >\n          {{ TUITranslateService.t(\"TUIChat.查看更多\") }}\n        </p>\n        <li\n          v-for=\"(item, index) in messageList\"\n          :id=\"`tui-${item.ID}`\"\n          :key=\"item.vueForRenderKey\"\n          :class=\"'message-li ' + item.flow\"\n        >\n          <MessageTimestamp\n            :currTime=\"item.time\"\n            :prevTime=\"index > 0 ? messageList[index - 1].time : 0\"\n          />\n          <div\n            class=\"message-item\"\n            @click=\"toggleID = ''\"\n          >\n            <div\n              v-if=\"!item.isRevoked && !isPluginMessage(item)\"\n              :id=\"`msg-bubble-${item.ID}`\"\n              class=\"message-bubble-container\"\n\n            >\n              <MessageBubble\n                :messageItem=\"deepCopy(item)\"\n                :content=\"item.getMessageContent()\"\n                :isAudioPlayed=\"audioPlayedMapping[item.ID]\"\n                :blinkMessageIDList=\"blinkMessageIDList\"\n                @resendMessage=\"resendMessage(item)\"\n                @blinkMessage=\"blinkMessage\"\n                @scrollTo=\"scrollTo\"\n                @handleToggleMessageItem=\"handleToggleMessageItem($event, item, index, true)\"\n                @handleTouchStart=\"handleH5LongPress($event, item, index, 'touchstart')\"\n                @handleTouchEnd=\"handleH5LongPress($event, item, index, 'touchend')\"\n              >\n                <MessageThinking v-if=\"isThinkingMessage(item)\"/>\n                <MessageText\n                  v-else-if=\"item.type === TYPES.MSG_TEXT\"\n                  :content=\"item.getMessageContent()\"\n                />\n                <ProgressMessage\n                  v-else-if=\"item.type === TYPES.MSG_IMAGE\"\n                  :content=\"item.getMessageContent()\"\n                  :messageItem=\"deepCopy(item)\"\n                >\n                  <MessageImage\n                    :content=\"item.getMessageContent()\"\n                    :messageItem=\"item\"\n                    @previewImage=\"handleImagePreview(index)\"\n                  />\n                </ProgressMessage>\n                <ProgressMessage\n                  v-else-if=\"item.type === TYPES.MSG_VIDEO\"\n                  :content=\"item.getMessageContent()\"\n                  :messageItem=\"deepCopy(item)\"\n                >\n                  <MessageVideo\n                    :content=\"item.getMessageContent()\"\n                    :messageItem=\"item\"\n                  />\n                </ProgressMessage>\n                <MessageAudio\n                  v-else-if=\"item.type === TYPES.MSG_AUDIO\"\n                  :content=\"item.getMessageContent()\"\n                  :messageItem=\"item\"\n                  :broadcastNewAudioSrc=\"broadcastNewAudioSrc\"\n                  @setAudioPlayed=\"setAudioPlayed\"\n                  @getGlobalAudioContext=\"getGlobalAudioContext\"\n                />\n                <MessageRecord\n                  v-else-if=\"item.type === TYPES.MSG_MERGER\"\n                  :renderData=\"item.payload\"\n                  :messageItem=\"item\"\n                  @assignMessageIDInUniapp=\"assignMessageIDInUniapp\"\n                />\n                <MessageFile\n                  v-else-if=\"item.type === TYPES.MSG_FILE\"\n                  :content=\"item.getMessageContent()\"\n                />\n                <MessageFace\n                  v-else-if=\"item.type === TYPES.MSG_FACE\"\n                  :content=\"item.getMessageContent()\"\n                />\n                <MessageLocation\n                  v-else-if=\"item.type === TYPES.MSG_LOCATION\"\n                  :content=\"item.getMessageContent()\"\n                />\n                <MessageCustom\n                  v-else-if=\"item.type === TYPES.MSG_CUSTOM\"\n                  :content=\"item.getMessageContent()\"\n                  :messageItem=\"item\"\n                />\n              </MessageBubble>\n            </div>\n            <MessagePlugin\n              v-else-if=\"!item.isRevoked && isPluginMessage(item)\"\n              :message=\"deepCopy(item)\"\n              @resendMessage=\"resendMessage\"\n              @handleToggleMessageItem=\"handleToggleMessageItem\"\n              @handleH5LongPress=\"handleH5LongPress\"\n              @showFormPopup=\"handleShowFormPopup\"\n              @heightChanged=\"onHeightChanged\"\n            />\n            <MessageRevoked\n              v-else\n              :isEdit=\"item.type === TYPES.MSG_TEXT\"\n              :messageItem=\"item\"\n              @messageEdit=\"handleEdit(item)\"\n            />\n            <!-- message tool -->\n            <MessageTool\n              v-if=\"item.ID === toggleID\"\n              :class=\"{\n                'message-tool': true,\n                'message-tool-out': item.flow === 'out',\n                'message-tool-in': item.flow === 'in',\n              }\"\n              :messageItem=\"item\"\n            />\n          </div>\n        </li>\n      </scroll-view>\n      <!-- scroll button -->\n      <ScrollButton\n        ref=\"scrollButtonInstanceRef\"\n        @scrollToLatestMessage=\"scrollToLatestMessage\"\n      />\n      <Dialog\n        v-if=\"reSendDialogShow\"\n        :show=\"reSendDialogShow\"\n        :isH5=\"true\"\n        :center=\"true\"\n        :isHeaderShow=\"false\"\n        @submit=\"resendMessageConfirm()\"\n        @update:show=\"(e) => (reSendDialogShow = e)\"\n      >\n        <p class=\"delDialog-title\">\n          {{ TUITranslateService.t(\"TUIChat.确认重发该消息？\") }}\n        </p>\n      </Dialog>\n      <!-- simple message list -->\n      <Drawer\n        :visible=\"isShowSimpleMessageList\"\n        :overlayColor=\"'transparent'\"\n        :popDirection=\"'right'\"\n      >\n        <SimpleMessageList\n          :style=\"{ height: '100%' }\"\n          :isMounted=\"isShowSimpleMessageList\"\n          :messageID=\"simpleMessageListRenderMessageID\"\n          @closeOverlay=\"isShowSimpleMessageList = false\"\n        />\n      </Drawer>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport vue from '../../../adapter-vue';\nimport TUIChatEngine, {\n  IMessageModel,\n  TUIStore,\n  StoreName,\n  TUITranslateService,\n  TUIChatService,\n} from '@tencentcloud/chat-uikit-engine';\nimport { throttle } from 'lodash';\nimport {\n  setInstanceMapping,\n  getBoundingClientRect,\n  getScrollInfo,\n} from '@tencentcloud/universal-api';\nimport SimpleMessageList from './message-elements/simple-message-list/index.vue';\nimport MessageText from './message-elements/message-text.vue';\nimport MessageImage from './message-elements/message-image-uniapp.vue';\nimport MessageAudio from './message-elements/message-audio-uniapp.vue';\nimport MessageRecord from './message-elements/message-record/index.vue';\nimport MessageFile from './message-elements/message-file.vue';\nimport MessageFace from './message-elements/message-face.vue';\nimport MessageCustom from './message-elements/message-custom.vue';\nimport MessageBubble from './message-elements/message-bubble-uniapp.vue';\nimport MessageLocation from './message-elements/message-location.vue';\nimport MessageTimestamp from './message-elements/message-timestamp.vue';\nimport MessageVideo from './message-elements/message-video-uniapp.vue';\nimport MessageTool from './message-tool/index-uniapp.vue';\nimport MessageRevoked from './message-tool/message-revoked.vue';\nimport MessagePlugin from './message-elements/message-desk/message-plugin-uniapp.vue';\nimport MessageThinking from './message-elements/message-thinking.vue';\nimport ScrollButton from './scroll-button/index.vue';\nimport { isPluginMessage } from './message-elements/message-desk/index';\nimport Dialog from '../../common/Dialog/index.vue';\nimport Drawer from '../../common/Drawer/index.vue';\nimport { Toast, TOAST_TYPE } from '../../common/Toast/index-uniapp';\nimport ProgressMessage from '../../common/ProgressMessage/index.vue';\nimport {\n  isEnabledMessageReadReceiptGlobal,\n  deepCopy,\n} from '../../../utils/utils';\nimport { isH5, isUniFrameWork} from '../../../utils/env';\nimport chatStorage from '../../../utils/chatStorage';\nimport { IAudioContext } from '../../../interface';\nimport {isMessageInvisible, isThinkingMessage, isThinkingMessageOverTime, JSONToObject} from '../../../utils/index';\nconst { ref, nextTick, onMounted, onUnmounted, getCurrentInstance } = vue;\nimport {isCustomerConversation} from '../../../index';\nimport {CUSTOM_MESSAGE_SRC} from \"../../../constant\";\ninterface IEmits {\n  (e: 'closeInputToolBar'): void;\n  (e: 'handleEditor', message: IMessageModel, type: string): void;\n  (e:'showFormPopup',data:boolean):void;\n}\n\nconst emits = defineEmits<IEmits>();\n\nlet selfAddValue = 0;\nlet observer: any = null;\nconst sentReceiptMessageID = new Set<string>();\nconst thisInstance = getCurrentInstance()?.proxy || getCurrentInstance();\n\nconst messageList = ref<IMessageModel[]>([]);\nconst isCompleted = ref(false);\nconst currentConversationID = ref('');\nconst toggleID = ref('');\nconst scrollTop = ref(5000); // The initial number of messages is 15, and the maximum message height is 300.\nconst TYPES = ref(TUIChatEngine.TYPES);\nconst isLoadingMessage = ref(false);\nconst isLongpressing = ref(false);\nconst blinkMessageIDList = ref<string[]>([]);\nconst messageTarget = ref<IMessageModel>();\nconst scrollButtonInstanceRef = ref<InstanceType<typeof ScrollButton>>();\nconst historyFirstMessageID = ref<string>('');\nconst isShowSimpleMessageList = ref<boolean>(false);\nconst simpleMessageListRenderMessageID = ref<string>();\nconst audioPlayedMapping = ref<Record<string, boolean>>({});\n\n// audio control\nconst broadcastNewAudioSrc = ref<string>('');\n\n// Resend Message Dialog\nconst reSendDialogShow = ref(false);\nconst resendMessageData = ref();\n\nconst scrollToBottom = () => {\n  scrollTop.value += 300;\n  // Solve the issue where swiping to the bottom for the first time after packaging Uniapp into an app has a delay,\n  // which can be set to 300 ms.\n  const timer = setTimeout(() => {\n    scrollTop.value += 1;\n    clearTimeout(timer);\n  }, 300);\n};\n\nconst onCurrentConversationIDUpdated = (conversationID: string) => {\n  currentConversationID.value = conversationID;\n\n  if (Object.keys(audioPlayedMapping.value).length > 0) {\n    // Synchronize storage about whether the audio has been played when converstaion switched\n    chatStorage.setChatStorage('audioPlayedMapping', audioPlayedMapping.value);\n  }\n};\n\nonMounted(() => {\n  // Retrieve the information about whether the audio has been played from localStorage\n  audioPlayedMapping.value\n    = chatStorage.getChatStorage('audioPlayedMapping') || {};\n\n  TUIStore.watch(StoreName.CONV, {\n    currentConversationID: onCurrentConversationIDUpdated,\n  });\n\n  TUIStore.watch(StoreName.CHAT, {\n    messageList: onMessageListUpdated,\n    messageSource: onMessageSourceUpdated,\n    isCompleted: onChatCompletedUpdated,\n    newMessageList: onNewMessageList,\n  });\n\n  setInstanceMapping('messageList', thisInstance);\n\n  uni.$on('scroll-to-bottom', scrollToLatestMessage);\n});\n\nonUnmounted(() => {\n  TUIStore.unwatch(StoreName.CHAT, {\n    messageList: onMessageListUpdated,\n    messageSource: onMessageSourceUpdated,\n    isCompleted: onChatCompletedUpdated,\n    newMessageList: onNewMessageList,\n  });\n\n  TUIStore.unwatch(StoreName.CONV, {\n    currentConversationID: onCurrentConversationIDUpdated,\n  });\n\n  observer?.disconnect();\n  observer = null;\n\n  uni.$off('scroll-to-bottom');\n\n  if (Object.keys(audioPlayedMapping.value).length > 0) {\n    // Synchronize storage about whether the audio has been played when the component is unmounted\n    chatStorage.setChatStorage('audioPlayedMapping', audioPlayedMapping.value);\n  }\n});\n\nconst handelScrollListScroll = throttle(\n  function (e: Event) {\n    scrollButtonInstanceRef.value?.judgeScrollOverOneScreen(e);\n  },\n  500,\n  { leading: true },\n);\n\nfunction getGlobalAudioContext(\n  audioMap: Map<string, IAudioContext>,\n  options?: { newAudioSrc: string },\n) {\n  if (options?.newAudioSrc) {\n    broadcastNewAudioSrc.value = options.newAudioSrc;\n  }\n}\n\nfunction onNewMessageList(list: IMessageModel[]) {\n  list.forEach((message: IMessageModel) => {\n    if (message?.type === TUIChatEngine.TYPES.MSG_CUSTOM) {\n      const data = JSONToObject(message?.payload?.data);\n      if (data?.src === CUSTOM_MESSAGE_SRC.SEAT_STATUS) {\n        if (data?.content.command === \"updateSeatStatus\") {\n          if (data.content.content === 'inSeat') {\n            TUIStore.update(StoreName.CUSTOM, \"isInHumanService\", true);\n          } else if (data.content.content === 'outSeat') {\n            TUIStore.update(StoreName.CUSTOM, \"isInHumanService\", false);\n          }\n        }\n      } else if (data?.src === CUSTOM_MESSAGE_SRC.TYPING_STATE) {\n        if (data?.typingStatus === 1) {\n          TUIStore.update(StoreName.CUSTOM, 'isTyping', true);\n        } else {\n          TUIStore.update(StoreName.CUSTOM, 'isTyping', false);\n        }\n      }\n    }\n  });\n}\n\nasync function onMessageListUpdated(list: IMessageModel[]) {\n  if(!isCustomerConversation(currentConversationID.value)){\n    return;\n  }\n  observer?.disconnect();\n\n  messageList.value = list\n    .filter((message) => {\n      if (isThinkingMessage(message)) {\n        return isThinkingMessageOverTime(message);\n      }\n      return !message.isDeleted && !isMessageInvisible(message as any);\n    })\n    .map((message) => {\n      message.vueForRenderKey = `${message.ID}`;\n      return message;\n    });\n\n  if (messageTarget.value) {\n    // scroll to target message\n    scrollAndBlinkMessage(messageTarget.value);\n  } else if (\n    !isLoadingMessage.value\n    && !(\n      scrollButtonInstanceRef.value?.isScrollButtonVisible\n      && newLastMessage?.flow === 'in'\n    )\n  ) {\n    // scroll to bottom\n    nextTick(() => {\n      scrollToBottom();\n    });\n  }\n  if (isEnabledMessageReadReceiptGlobal()) {\n    nextTick(() => bindIntersectionObserver());\n  }\n}\n\nasync function scrollToLatestMessage() {\n  try {\n    const { scrollHeight } = await getScrollInfo(\n      '#messageScrollList',\n      'messageList',\n    );\n    if (scrollHeight) {\n      scrollTop.value === scrollHeight\n        ? (scrollTop.value = scrollHeight + 1)\n        : (scrollTop.value = scrollHeight);\n    } else {\n      scrollToBottom();\n    }\n  } catch (error) {\n    scrollToBottom();\n  }\n  scrollButtonInstanceRef.value?.hideScrollButton();\n}\n\nasync function onMessageSourceUpdated(message: IMessageModel) {\n  messageTarget.value = message;\n  scrollAndBlinkMessage(messageTarget.value);\n}\n\nfunction scrollAndBlinkMessage(message: IMessageModel) {\n  if (\n    messageList.value?.some(\n      messageListItem => messageListItem?.ID === message?.ID,\n    )\n  ) {\n    nextTick(async () => {\n      await scrollToTargetMessage(message);\n      await blinkMessage(message?.ID);\n      messageTarget.value = undefined;\n    });\n  }\n}\n\nfunction onChatCompletedUpdated(flag: boolean) {\n  isCompleted.value = flag;\n}\n\nconst getHistoryMessageList = () => {\n  isLoadingMessage.value = true;\n  const currentFirstMessageID = messageList.value?.[0]?.ID || '';\n  TUIChatService.getMessageList().then(() => {\n    nextTick(() => {\n      historyFirstMessageID.value = currentFirstMessageID;\n      const timer = setTimeout(() => {\n        historyFirstMessageID.value = '';\n        isLoadingMessage.value = false;\n        clearTimeout(timer);\n      }, 500);\n    });\n  });\n};\n\n// toggle message\nconst handleToggleMessageItem = (\n  e: any,\n  message: IMessageModel,\n  index: number,\n  isLongpress = false,\n) => {\n  if (isLongpress) {\n    isLongpressing.value = true;\n  }\n  toggleID.value = message.ID;\n};\n\n// h5 long press\nlet timer: number;\nconst handleH5LongPress = (\n  e: any,\n  message: IMessageModel,\n  index: number,\n  type: string,\n) => {\n  if (!isH5) return;\n  function longPressHandler() {\n    clearTimeout(timer);\n    handleToggleMessageItem(e, message, index, true);\n  }\n  function touchStartHandler() {\n    timer = setTimeout(longPressHandler, 500);\n  }\n  function touchEndHandler() {\n    clearTimeout(timer);\n  }\n  switch (type) {\n    case 'touchstart':\n      touchStartHandler();\n      break;\n    case 'touchend':\n      touchEndHandler();\n      setTimeout(() => {\n        isLongpressing.value = false;\n      }, 200);\n      break;\n  }\n};\n\n// reedit message\nconst handleEdit = (message: IMessageModel) => {\n  emits('handleEditor', message, 'reedit');\n};\n\nconst resendMessage = (message: IMessageModel) => {\n  reSendDialogShow.value = true;\n  resendMessageData.value = message;\n};\n\nconst handleImagePreview = (index: number) => {\n  if (!messageList.value) {\n    return;\n  }\n  const imageMessageIndex: number[] = [];\n  const imageMessageList: IMessageModel[] = messageList.value.filter(\n    (item, index) => {\n      if (\n        !item.isRevoked\n        && !item.hasRiskContent\n        && item.type === TYPES.value.MSG_IMAGE\n      ) {\n        imageMessageIndex.push(index);\n        return true;\n      }\n      return false;\n    },\n  );\n  uni.previewImage({\n    current: imageMessageIndex.indexOf(index),\n    urls: imageMessageList.map(\n      message => message.payload.imageInfoArray?.[2].url,\n    ),\n\n\n\n  });\n};\n\nconst resendMessageConfirm = () => {\n  reSendDialogShow.value = !reSendDialogShow.value;\n  const messageModel = resendMessageData.value;\n  messageModel.resendMessage();\n};\n\nfunction blinkMessage(messageID: string): Promise<void> {\n  return new Promise((resolve) => {\n    const index = blinkMessageIDList.value.indexOf(messageID);\n    if (index < 0) {\n      blinkMessageIDList.value.push(messageID);\n      const timer = setTimeout(() => {\n        blinkMessageIDList.value.splice(\n          blinkMessageIDList.value.indexOf(messageID),\n          1,\n        );\n        clearTimeout(timer);\n        resolve();\n      }, 3000);\n    }\n  });\n}\n\nfunction scrollTo(scrollHeight: number) {\n  scrollTop.value = scrollHeight;\n}\n\nasync function bindIntersectionObserver() {\n  if (!messageList.value || messageList.value.length === 0) {\n    return;\n  }\n\n  observer?.disconnect();\n  observer = uni\n    .createIntersectionObserver(thisInstance, {\n      threshold: [0.7],\n      observeAll: true,\n      // In Uni-app, the `safetip` is also included, so a negative margin is needed to exclude it.\n    })\n    .relativeTo('#messageScrollList', { top: -70 });\n\n  observer?.observe('.message-li.in .message-bubble-container', (res: any) => {\n    if (sentReceiptMessageID.has(res.id)) {\n      return;\n    }\n    const matchingMessage = messageList.value.find((message: IMessageModel) => {\n      return res.id.indexOf(message.ID) > -1;\n    });\n    if (\n      matchingMessage\n      && matchingMessage.needReadReceipt\n      && matchingMessage.flow === 'in'\n      && !matchingMessage.readReceiptInfo?.isPeerRead\n    ) {\n      TUIChatService.sendMessageReadReceipt([matchingMessage]);\n      sentReceiptMessageID.add(res.id);\n    }\n  });\n}\n\nasync function scrollToTargetMessage(message: IMessageModel) {\n  const targetMessageID = message.ID;\n  const isTargetMessageInScreen\n    = messageList.value\n    && messageList.value.some(msg => msg.ID === targetMessageID);\n  if (targetMessageID && isTargetMessageInScreen) {\n    const timer = setTimeout(async () => {\n      try {\n        const scrollViewRect = await getBoundingClientRect(\n          '#messageScrollList',\n          'messageList',\n        );\n        const originalMessageRect = await getBoundingClientRect(\n          '#tui-' + targetMessageID,\n          'messageList',\n        );\n        const { scrollTop } = await getScrollInfo(\n          '#messageScrollList',\n          'messageList',\n        );\n        const finalScrollTop\n          = originalMessageRect.top\n          + scrollTop\n          - scrollViewRect.top\n          - (selfAddValue++ % 2);\n        scrollTo(finalScrollTop);\n        clearTimeout(timer);\n      } catch (error) {\n        // todo\n      }\n    }, 500);\n  } else {\n    Toast({\n      message: TUITranslateService.t('TUIChat.无法定位到原消息'),\n      type: TOAST_TYPE.WARNING,\n    });\n  }\n}\n\nfunction onMessageListBackgroundClick() {\n  emits('closeInputToolBar');\n}\n\nfunction assignMessageIDInUniapp(messageID: string) {\n  simpleMessageListRenderMessageID.value = messageID;\n  isShowSimpleMessageList.value = true;\n}\n\nfunction setAudioPlayed(messageID: string) {\n  audioPlayedMapping.value[messageID] = true;\n}\n\nfunction handleShowFormPopup(data: boolean) {\n  uni.__f__('log','at pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/index-uniapp.vue:658',\"handleshowformpopup-messagelist\", data);\n  emits('showFormPopup', data);\n}\n\nfunction onHeightChanged() {\n  scrollToBottom();\n}\n\ndefineExpose({\n  scrollToLatestMessage,\n});\n</script>\n<style lang=\"scss\" scoped src=\"./style/index.scss\"></style>\n","import Component from 'D:/JAVAEE/myflies/uniapp-app/uniapp/pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/message-list/index-uniapp.vue'\nwx.createComponent(Component)"],"names":["vue","TUIChatEngine","timer","chatStorage","TUIStore","StoreName","setInstanceMapping","uni","throttle","_a","JSONToObject","CUSTOM_MESSAGE_SRC","isCustomerConversation","isThinkingMessage","isThinkingMessageOverTime","isMessageInvisible","isEnabledMessageReadReceiptGlobal","getScrollInfo","TUIChatService","isH5","index","getBoundingClientRect","scrollTop","Toast","TUITranslateService","TOAST_TYPE"],"mappings":"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"}