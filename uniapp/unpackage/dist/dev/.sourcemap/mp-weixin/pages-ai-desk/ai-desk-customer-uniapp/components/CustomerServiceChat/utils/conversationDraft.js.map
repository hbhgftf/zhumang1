{"version":3,"file":"conversationDraft.js","sources":["pages-ai-desk/ai-desk-customer-uniapp/components/CustomerServiceChat/utils/conversationDraft.ts"],"sourcesContent":["import {\n  IMessageModel,\n  SetConversationDraftParams,\n  StoreName,\n  TUIConversationService,\n  TUIStore,\n  TUITranslateService,\n} from '@tencentcloud/chat-uikit-engine';\nimport { transformTextWithKeysToEmojiNames } from '../emoji-config';\nimport { JSONToObject } from '../../../utils/index';\n\nclass ConversationDraftManager {\n  private static instance: ConversationDraftManager | null = null;\n  private quoteMessageMap = new Map<string, IMessageModel>();\n\n  private constructor() { }\n\n  public static getInstance(): ConversationDraftManager {\n    if (!ConversationDraftManager.instance) {\n      ConversationDraftManager.instance = new ConversationDraftManager();\n    }\n    return ConversationDraftManager.instance;\n  }\n\n  public setStore(conversationID: string, draftContent: string, abstract: string, quoteMessage?: { type: 'quote' | 'reply'; message: IMessageModel }) {\n    if (conversationID && (this.isEditorNotEmpty(draftContent) || quoteMessage?.message?.ID)) {\n      let additionalDraftInfo = {};\n      if (quoteMessage?.message?.ID) {\n        this.quoteMessageMap.set(quoteMessage.message.ID, quoteMessage.message);\n        additionalDraftInfo = { messageID: quoteMessage.message.ID, type: quoteMessage.type };\n      }\n      const draftParams: SetConversationDraftParams = {\n        conversationID: conversationID,\n        draftInfo: {\n          html: draftContent,\n          abstract: abstract,\n          ...additionalDraftInfo,\n        },\n      };\n      TUIConversationService.setConversationDraft(draftParams);\n      TUIStore.update(StoreName.CHAT, 'quoteMessage', { message: undefined, type: 'quote' });\n    }\n  }\n\n  public getStore(conversationID: string, setEditorContentCallback: (...args: any[]) => void) {\n    const conversation = TUIStore.getConversationModel(conversationID);\n    if (!conversation) {\n      return;\n    }\n    if (conversation.conversationID && conversation.draftText) {\n      const draftObject = JSONToObject(conversation.draftText);\n      TUIStore.update(StoreName.CHAT, 'quoteMessage', { message: this.quoteMessageMap.get(draftObject.messageID) || undefined, type: draftObject.type });\n      setEditorContentCallback(draftObject.html);\n    }\n    TUIConversationService.setConversationDraft({ conversationID: conversation.conversationID });\n  }\n\n  public generateAbstract(editorContent: Array<{ type: string; payload: { text?: string; file?: File } }>): string {\n    let abstract = '';\n    editorContent?.forEach((item: { type: string; payload: { text?: string; file?: File } }) => {\n      switch (item.type) {\n        case 'text':\n          abstract += transformTextWithKeysToEmojiNames(item.payload.text || '');\n          break;\n        case 'image':\n          abstract += TUITranslateService.t('TUIChat.图片');\n          break;\n        case 'video':\n          abstract += TUITranslateService.t('TUIChat.视频');\n          break;\n        case 'file':\n          abstract += TUITranslateService.t('TUIChat.文件');\n          break;\n        default:\n          break;\n      }\n    });\n    return abstract;\n  }\n\n  private isEditorNotEmpty(editorHTML: string) {\n    return editorHTML && !editorHTML.includes('is-empty') && editorHTML !== '<p></p>';\n  }\n}\n\nexport default ConversationDraftManager.getInstance();\n"],"names":["TUIConversationService","TUIStore","StoreName","JSONToObject","transformTextWithKeysToEmojiNames","TUITranslateService"],"mappings":";;;;;;;;;;AAWA,MAAM,4BAAN,MAAM,0BAAyB;AAAA,EAIrB,cAAc;AAFd,+DAAsB;EAEN;AAAA,EAExB,OAAc,cAAwC;AAChD,QAAA,CAAC,0BAAyB,UAAU;AACb,gCAAA,WAAW,IAAI;IAC1C;AACA,WAAO,0BAAyB;AAAA,EAClC;AAAA,EAEO,SAAS,gBAAwB,cAAsB,UAAkB,cAAoE;;AAClJ,QAAI,mBAAmB,KAAK,iBAAiB,YAAY,OAAK,kDAAc,YAAd,mBAAuB,MAAK;AACxF,UAAI,sBAAsB,CAAA;AACtB,WAAA,kDAAc,YAAd,mBAAuB,IAAI;AAC7B,aAAK,gBAAgB,IAAI,aAAa,QAAQ,IAAI,aAAa,OAAO;AACtE,8BAAsB,EAAE,WAAW,aAAa,QAAQ,IAAI,MAAM,aAAa;MACjF;AACA,YAAM,cAA0C;AAAA,QAC9C;AAAA,QACA,WAAW;AAAA,UACT,MAAM;AAAA,UACN;AAAA,UACA,GAAG;AAAA,QACL;AAAA,MAAA;AAEFA,uBAAuB,qBAAqB,WAAW;AAC9CC,oBAAAA,GAAA,OAAOC,kBAAU,MAAM,gBAAgB,EAAE,SAAS,QAAW,MAAM,QAAS,CAAA;AAAA,IACvF;AAAA,EACF;AAAA,EAEO,SAAS,gBAAwB,0BAAoD;AACpF,UAAA,eAAeD,cAAAA,GAAS,qBAAqB,cAAc;AACjE,QAAI,CAAC,cAAc;AACjB;AAAA,IACF;AACI,QAAA,aAAa,kBAAkB,aAAa,WAAW;AACnD,YAAA,cAAcE,6CAAAA,aAAa,aAAa,SAAS;AACvDF,oBAAA,GAAS,OAAOC,kBAAU,MAAM,gBAAgB,EAAE,SAAS,KAAK,gBAAgB,IAAI,YAAY,SAAS,KAAK,QAAW,MAAM,YAAY,MAAM;AACjJ,+BAAyB,YAAY,IAAI;AAAA,IAC3C;AACAF,kBAAA,GAAuB,qBAAqB,EAAE,gBAAgB,aAAa,eAAgB,CAAA;AAAA,EAC7F;AAAA,EAEO,iBAAiB,eAAyF;AAC/G,QAAI,WAAW;AACA,mDAAA,QAAQ,CAAC,SAAoE;AAC1F,cAAQ,KAAK,MAAM;AAAA,QACjB,KAAK;AACH,sBAAYI,kFAAkC,kCAAA,KAAK,QAAQ,QAAQ,EAAE;AACrE;AAAA,QACF,KAAK;AACS,sBAAAC,cAAA,GAAoB,EAAE,YAAY;AAC9C;AAAA,QACF,KAAK;AACS,sBAAAA,cAAA,GAAoB,EAAE,YAAY;AAC9C;AAAA,QACF,KAAK;AACS,sBAAAA,cAAA,GAAoB,EAAE,YAAY;AAC9C;AAAA,MAGJ;AAAA,IAAA;AAEK,WAAA;AAAA,EACT;AAAA,EAEQ,iBAAiB,YAAoB;AAC3C,WAAO,cAAc,CAAC,WAAW,SAAS,UAAU,KAAK,eAAe;AAAA,EAC1E;AACF;AAvEE,cADI,2BACW,YAA4C;AAD7D,IAAM,2BAAN;AA0EA,MAAe,eAAA,yBAAyB,YAAY;;"}