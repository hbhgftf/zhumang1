{"version":3,"file":"index.js","sources":["uni_modules/vk-uview-ui/libs/request/index.js"],"sourcesContent":["import deepMerge from \"../function/deepMerge\";\r\nimport validate from \"../function/test\";\r\nclass Request {\r\n\t// 设置全局默认配置\r\n\tsetConfig(customConfig) {\r\n\t\t// 深度合并对象，否则会造成对象深层属性丢失\r\n\t\tthis.config = deepMerge(this.config, customConfig);\r\n\t}\r\n\r\n\t// 主要请求部分\r\n\trequest(options = {}) {\r\n\t\t// 检查请求拦截\r\n\t\tif (this.interceptor.request && typeof this.interceptor.request === 'function') {\r\n\t\t\tlet tmpConfig = {};\r\n\t\t\tlet interceptorRequest = this.interceptor.request(options);\r\n\t\t\tif (interceptorRequest === false) {\r\n\t\t\t\t// 返回一个处于pending状态中的Promise，来取消原promise，避免进入then()回调\r\n\t\t\t\treturn new Promise(()=>{});\r\n\t\t\t}\r\n\t\t\tthis.options = interceptorRequest;\r\n\t\t}\r\n\t\toptions.dataType = options.dataType || this.config.dataType;\r\n\t\toptions.responseType = options.responseType || this.config.responseType;\r\n\t\toptions.url = options.url || '';\r\n\t\toptions.params = options.params || {};\r\n\t\toptions.header = Object.assign({}, this.config.header, options.header);\r\n\t\toptions.method = options.method || this.config.method;\r\n\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\toptions.complete = (response) => {\r\n\t\t\t\t// 请求返回后，隐藏loading(如果请求返回快的话，可能会没有loading)\r\n\t\t\t\tuni.hideLoading();\r\n\t\t\t\t// 清除定时器，如果请求回来了，就无需loading\r\n\t\t\t\tclearTimeout(this.config.timer);\r\n\t\t\t\tthis.config.timer = null;\r\n\t\t\t\t// 判断用户对拦截返回数据的要求，如果originalData为true，返回所有的数据(response)到拦截器，否则只返回response.data\r\n\t\t\t\tif(this.config.originalData) {\r\n\t\t\t\t\t// 判断是否存在拦截器\r\n\t\t\t\t\tif (this.interceptor.response && typeof this.interceptor.response === 'function') {\r\n\t\t\t\t\t\tlet resInterceptors = this.interceptor.response(response);\r\n\t\t\t\t\t\t// 如果拦截器不返回false，就将拦截器返回的内容给this.$u.post的then回调\r\n\t\t\t\t\t\tif (resInterceptors !== false) {\r\n\t\t\t\t\t\t\tresolve(resInterceptors);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// 如果拦截器返回false，意味着拦截器定义者认为返回有问题，直接接入catch回调\r\n\t\t\t\t\t\t\treject(response);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// 如果要求返回原始数据，就算没有拦截器，也返回最原始的数据\r\n\t\t\t\t\t\tresolve(response);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (response.statusCode == 200) {\r\n\t\t\t\t\t\tif (this.interceptor.response && typeof this.interceptor.response === 'function') {\r\n\t\t\t\t\t\t\tlet resInterceptors = this.interceptor.response(response.data);\r\n\t\t\t\t\t\t\tif (resInterceptors !== false) {\r\n\t\t\t\t\t\t\t\tresolve(resInterceptors);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\treject(response.data);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// 如果不是返回原始数据(originalData=false)，且没有拦截器的情况下，返回纯数据给then回调\r\n\t\t\t\t\t\t\tresolve(response.data);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// 不返回原始数据的情况下，服务器状态码不为200，modal弹框提示\r\n\t\t\t\t\t\t// if(response.errMsg) {\r\n\t\t\t\t\t\t// \tuni.showModal({\r\n\t\t\t\t\t\t// \t\ttitle: response.errMsg\r\n\t\t\t\t\t\t// \t});\r\n\t\t\t\t\t\t// }\r\n\t\t\t\t\t\treject(response)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// 判断用户传递的URL是否/开头,如果不是,加上/，这里使用了uView的test.js验证库的url()方法\r\n\t\t\toptions.url = validate.url(options.url) ? options.url : (this.config.baseUrl + (options.url.indexOf('/') == 0 ?\r\n\t\t\t\toptions.url : '/' + options.url));\r\n\t\t\t\r\n\t\t\t// 是否显示loading\r\n\t\t\t// 加一个是否已有timer定时器的判断，否则有两个同时请求的时候，后者会清除前者的定时器id\r\n\t\t\t// 而没有清除前者的定时器，导致前者超时，一直显示loading\r\n\t\t\tif(this.config.showLoading && !this.config.timer) {\r\n\t\t\t\tthis.config.timer = setTimeout(() => {\r\n\t\t\t\t\tuni.showLoading({\r\n\t\t\t\t\t\ttitle: this.config.loadingText,\r\n\t\t\t\t\t\tmask: this.config.loadingMask\r\n\t\t\t\t\t})\r\n\t\t\t\t\tthis.config.timer = null;\r\n\t\t\t\t}, this.config.loadingTime);\r\n\t\t\t}\r\n\t\t\tuni.request(options);\r\n\t\t})\r\n\t\t// .catch(res => {\r\n\t\t// \t// 如果返回reject()，不让其进入this.$u.post().then().catch()后面的catct()\r\n\t\t// \t// 因为很多人都会忘了写后面的catch()，导致报错捕获不到catch\r\n\t\t// \treturn new Promise(()=>{});\r\n\t\t// })\r\n\t}\r\n\r\n\tconstructor() {\r\n\t\tthis.config = {\r\n\t\t\tbaseUrl: '', // 请求的根域名\r\n\t\t\t// 默认的请求头\r\n\t\t\theader: {},\r\n\t\t\tmethod: 'POST',\r\n\t\t\t// 设置为json，返回后uni.request会对数据进行一次JSON.parse\r\n\t\t\tdataType: 'json',\r\n\t\t\t// 此参数无需处理，因为5+和支付宝小程序不支持，默认为text即可\r\n\t\t\tresponseType: 'text',\r\n\t\t\tshowLoading: true, // 是否显示请求中的loading\r\n\t\t\tloadingText: '请求中...',\r\n\t\t\tloadingTime: 800, // 在此时间内，请求还没回来的话，就显示加载中动画，单位ms\r\n\t\t\ttimer: null, // 定时器\r\n\t\t\toriginalData: false, // 是否在拦截器中返回服务端的原始数据，见文档说明\r\n\t\t\tloadingMask: true, // 展示loading的时候，是否给一个透明的蒙层，防止触摸穿透\r\n\t\t}\r\n\t\r\n\t\t// 拦截器\r\n\t\tthis.interceptor = {\r\n\t\t\t// 请求前的拦截\r\n\t\t\trequest: null,\r\n\t\t\t// 请求后的拦截\r\n\t\t\tresponse: null\r\n\t\t}\r\n\r\n\t\t// get请求\r\n\t\tthis.get = (url, data = {}, header = {}) => {\r\n\t\t\treturn this.request({\r\n\t\t\t\tmethod: 'GET',\r\n\t\t\t\turl,\r\n\t\t\t\theader,\r\n\t\t\t\tdata\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t// post请求\r\n\t\tthis.post = (url, data = {}, header = {}) => {\r\n\t\t\treturn this.request({\r\n\t\t\t\turl,\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\theader,\r\n\t\t\t\tdata\r\n\t\t\t})\r\n\t\t}\r\n\t\t\r\n\t\t// put请求，不支持支付宝小程序(HX2.6.15)\r\n\t\tthis.put = (url, data = {}, header = {}) => {\r\n\t\t\treturn this.request({\r\n\t\t\t\turl,\r\n\t\t\t\tmethod: 'PUT',\r\n\t\t\t\theader,\r\n\t\t\t\tdata\r\n\t\t\t})\r\n\t\t}\r\n\t\t\r\n\t\t// delete请求，不支持支付宝和头条小程序(HX2.6.15)\r\n\t\tthis.delete = (url, data = {}, header = {}) => {\r\n\t\t\treturn this.request({\r\n\t\t\t\turl,\r\n\t\t\t\tmethod: 'DELETE',\r\n\t\t\t\theader,\r\n\t\t\t\tdata\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n}\r\nexport default new Request\r\n"],"names":["deepMerge","uni","validate"],"mappings":"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"}